/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *val = NULL, *type = NULL, *tb = NULL;
      PyErr_Fetch(&val, &type, &tb);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(val, type, tb);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,				    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,				    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ASYNCMODE swig_types[0]
#define SWIGTYPE_p_ATTITUDEGROUP swig_types[1]
#define SWIGTYPE_p_BINARYGROUP swig_types[2]
#define SWIGTYPE_p_COMMONGROUP swig_types[3]
#define SWIGTYPE_p_GPSGROUP swig_types[4]
#define SWIGTYPE_p_IMUGROUP swig_types[5]
#define SWIGTYPE_p_INSGROUP swig_types[6]
#define SWIGTYPE_p_SENSORERROR swig_types[7]
#define SWIGTYPE_p_TIMEGROUP swig_types[8]
#define SWIGTYPE_p_a_sizeof_uint16_t__8__unsigned_char swig_types[9]
#define SWIGTYPE_p_allocator_type swig_types[10]
#define SWIGTYPE_p_char swig_types[11]
#define SWIGTYPE_p_difference_type swig_types[12]
#define SWIGTYPE_p_double swig_types[13]
#define SWIGTYPE_p_f_p_void__void swig_types[14]
#define SWIGTYPE_p_f_p_void_p_q_const__char_size_t_size_t__void swig_types[15]
#define SWIGTYPE_p_f_p_void_r_vn__protocol__uart__Packet_size_t__void swig_types[16]
#define SWIGTYPE_p_float swig_types[17]
#define SWIGTYPE_p_int swig_types[18]
#define SWIGTYPE_p_long_long swig_types[19]
#define SWIGTYPE_p_p_PyObject swig_types[20]
#define SWIGTYPE_p_short swig_types[21]
#define SWIGTYPE_p_signed_char swig_types[22]
#define SWIGTYPE_p_size_type swig_types[23]
#define SWIGTYPE_p_std__allocatorT_unsigned_int_t swig_types[24]
#define SWIGTYPE_p_std__invalid_argument swig_types[25]
#define SWIGTYPE_p_std__ostream swig_types[26]
#define SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t swig_types[27]
#define SWIGTYPE_p_std__vectorT_vn__sensors__CompositeData_p_std__allocatorT_vn__sensors__CompositeData_p_t_t swig_types[28]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[29]
#define SWIGTYPE_p_unsigned_char swig_types[30]
#define SWIGTYPE_p_unsigned_int swig_types[31]
#define SWIGTYPE_p_unsigned_long_long swig_types[32]
#define SWIGTYPE_p_unsigned_short swig_types[33]
#define SWIGTYPE_p_value_type swig_types[34]
#define SWIGTYPE_p_vn__math__AttitudeF swig_types[35]
#define SWIGTYPE_p_vn__math__PositionD swig_types[36]
#define SWIGTYPE_p_vn__math__matT_2_2_double_t swig_types[37]
#define SWIGTYPE_p_vn__math__matT_2_2_float_t swig_types[38]
#define SWIGTYPE_p_vn__math__matT_2_2_long_double_t swig_types[39]
#define SWIGTYPE_p_vn__math__matT_3_3_double_t swig_types[40]
#define SWIGTYPE_p_vn__math__matT_3_3_float_t swig_types[41]
#define SWIGTYPE_p_vn__math__matT_3_3_long_double_t swig_types[42]
#define SWIGTYPE_p_vn__math__matT_4_3_float_t swig_types[43]
#define SWIGTYPE_p_vn__math__matT_4_4_double_t swig_types[44]
#define SWIGTYPE_p_vn__math__matT_4_4_float_t swig_types[45]
#define SWIGTYPE_p_vn__math__matT_4_4_long_double_t swig_types[46]
#define SWIGTYPE_p_vn__math__vecT_2_double_t swig_types[47]
#define SWIGTYPE_p_vn__math__vecT_2_float_t swig_types[48]
#define SWIGTYPE_p_vn__math__vecT_2_int_t swig_types[49]
#define SWIGTYPE_p_vn__math__vecT_2_long_double_t swig_types[50]
#define SWIGTYPE_p_vn__math__vecT_2_unsigned_int_t swig_types[51]
#define SWIGTYPE_p_vn__math__vecT_3_double_t swig_types[52]
#define SWIGTYPE_p_vn__math__vecT_3_float_t swig_types[53]
#define SWIGTYPE_p_vn__math__vecT_3_int_t swig_types[54]
#define SWIGTYPE_p_vn__math__vecT_3_long_double_t swig_types[55]
#define SWIGTYPE_p_vn__math__vecT_3_unsigned_int_t swig_types[56]
#define SWIGTYPE_p_vn__math__vecT_4_double_t swig_types[57]
#define SWIGTYPE_p_vn__math__vecT_4_float_t swig_types[58]
#define SWIGTYPE_p_vn__math__vecT_4_int_t swig_types[59]
#define SWIGTYPE_p_vn__math__vecT_4_long_double_t swig_types[60]
#define SWIGTYPE_p_vn__math__vecT_4_unsigned_int_t swig_types[61]
#define SWIGTYPE_p_vn__protocol__uart__AsciiAsync swig_types[62]
#define SWIGTYPE_p_vn__protocol__uart__ChecksumMode swig_types[63]
#define SWIGTYPE_p_vn__protocol__uart__CompensationMode swig_types[64]
#define SWIGTYPE_p_vn__protocol__uart__CountMode swig_types[65]
#define SWIGTYPE_p_vn__protocol__uart__ErrorMode swig_types[66]
#define SWIGTYPE_p_vn__protocol__uart__ExternalSensorMode swig_types[67]
#define SWIGTYPE_p_vn__protocol__uart__FilterMode swig_types[68]
#define SWIGTYPE_p_vn__protocol__uart__FoamInit swig_types[69]
#define SWIGTYPE_p_vn__protocol__uart__GpsFix swig_types[70]
#define SWIGTYPE_p_vn__protocol__uart__GpsMode swig_types[71]
#define SWIGTYPE_p_vn__protocol__uart__HeadingMode swig_types[72]
#define SWIGTYPE_p_vn__protocol__uart__HsiMode swig_types[73]
#define SWIGTYPE_p_vn__protocol__uart__HsiOutput swig_types[74]
#define SWIGTYPE_p_vn__protocol__uart__IntegrationFrame swig_types[75]
#define SWIGTYPE_p_vn__protocol__uart__MagneticMode swig_types[76]
#define SWIGTYPE_p_vn__protocol__uart__Packet swig_types[77]
#define SWIGTYPE_p_vn__protocol__uart__PpsSource swig_types[78]
#define SWIGTYPE_p_vn__protocol__uart__Scenario swig_types[79]
#define SWIGTYPE_p_vn__protocol__uart__StatusMode swig_types[80]
#define SWIGTYPE_p_vn__protocol__uart__SyncInEdge swig_types[81]
#define SWIGTYPE_p_vn__protocol__uart__SyncInMode swig_types[82]
#define SWIGTYPE_p_vn__protocol__uart__SyncOutMode swig_types[83]
#define SWIGTYPE_p_vn__protocol__uart__SyncOutPolarity swig_types[84]
#define SWIGTYPE_p_vn__protocol__uart__TimeUtc swig_types[85]
#define SWIGTYPE_p_vn__protocol__uart__VelocityCompensationMode swig_types[86]
#define SWIGTYPE_p_vn__protocol__uart__VpeEnable swig_types[87]
#define SWIGTYPE_p_vn__protocol__uart__VpeMode swig_types[88]
#define SWIGTYPE_p_vn__protocol__uart__VpeStatus swig_types[89]
#define SWIGTYPE_p_vn__sensors__AccelerationCompensationRegister swig_types[90]
#define SWIGTYPE_p_vn__sensors__BinaryOutputRegister swig_types[91]
#define SWIGTYPE_p_vn__sensors__CalculatedMagnetometerCalibrationRegister swig_types[92]
#define SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister swig_types[93]
#define SWIGTYPE_p_vn__sensors__CompositeData swig_types[94]
#define SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister swig_types[95]
#define SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityRegister swig_types[96]
#define SWIGTYPE_p_vn__sensors__EzAsyncData swig_types[97]
#define SWIGTYPE_p_vn__sensors__FilterActiveTuningParametersRegister swig_types[98]
#define SWIGTYPE_p_vn__sensors__FilterBasicControlRegister swig_types[99]
#define SWIGTYPE_p_vn__sensors__FilterMeasurementsVarianceParametersRegister swig_types[100]
#define SWIGTYPE_p_vn__sensors__GpsCompassBaselineRegister swig_types[101]
#define SWIGTYPE_p_vn__sensors__GpsCompassEstimatedBaselineRegister swig_types[102]
#define SWIGTYPE_p_vn__sensors__GpsConfigurationRegister swig_types[103]
#define SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister swig_types[104]
#define SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister swig_types[105]
#define SWIGTYPE_p_vn__sensors__GyroCompensationRegister swig_types[106]
#define SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister swig_types[107]
#define SWIGTYPE_p_vn__sensors__ImuMeasurementsRegister swig_types[108]
#define SWIGTYPE_p_vn__sensors__ImuRateConfigurationRegister swig_types[109]
#define SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister swig_types[110]
#define SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn200 swig_types[111]
#define SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn300 swig_types[112]
#define SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister swig_types[113]
#define SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister swig_types[114]
#define SWIGTYPE_p_vn__sensors__InsStateEcefRegister swig_types[115]
#define SWIGTYPE_p_vn__sensors__InsStateLlaRegister swig_types[116]
#define SWIGTYPE_p_vn__sensors__MagneticAccelerationAndAngularRatesRegister swig_types[117]
#define SWIGTYPE_p_vn__sensors__MagneticAndGravityReferenceVectorsRegister swig_types[118]
#define SWIGTYPE_p_vn__sensors__MagnetometerCalibrationControlRegister swig_types[119]
#define SWIGTYPE_p_vn__sensors__MagnetometerCompensationRegister swig_types[120]
#define SWIGTYPE_p_vn__sensors__QuaternionMagneticAccelerationAndAngularRatesRegister swig_types[121]
#define SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister swig_types[122]
#define SWIGTYPE_p_vn__sensors__StartupFilterBiasEstimateRegister swig_types[123]
#define SWIGTYPE_p_vn__sensors__SynchronizationControlRegister swig_types[124]
#define SWIGTYPE_p_vn__sensors__SynchronizationStatusRegister swig_types[125]
#define SWIGTYPE_p_vn__sensors__VelocityCompensationControlRegister swig_types[126]
#define SWIGTYPE_p_vn__sensors__VelocityCompensationStatusRegister swig_types[127]
#define SWIGTYPE_p_vn__sensors__VnSensor swig_types[128]
#define SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister swig_types[129]
#define SWIGTYPE_p_vn__sensors__VpeAccelerometerBasicTuningRegister swig_types[130]
#define SWIGTYPE_p_vn__sensors__VpeBasicControlRegister swig_types[131]
#define SWIGTYPE_p_vn__sensors__VpeGyroBasicTuningRegister swig_types[132]
#define SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister swig_types[133]
#define SWIGTYPE_p_vn__sensors__VpeMagnetometerBasicTuningRegister swig_types[134]
#define SWIGTYPE_p_vn__sensors__YawPitchRollMagneticAccelerationAndAngularRatesRegister swig_types[135]
#define SWIGTYPE_p_vn__sensors__YawPitchRollTrueBodyAccelerationAndAngularRatesRegister swig_types[136]
#define SWIGTYPE_p_vn__sensors__YawPitchRollTrueInertialAccelerationAndAngularRatesRegister swig_types[137]
#define SWIGTYPE_p_vn__xplat__IPort swig_types[138]
static swig_type_info *swig_types[140];
static swig_module_info swig_module = {swig_types, 139, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _libvncxx.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__libvncxx

#else
#  define SWIG_init    init_libvncxx

#endif
#define SWIG_name    "_libvncxx"

#define SWIGVERSION 0x030010 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


    #include "vn/attitude.h"
    #include "vn/compiler.h"
    #include "vn/compositedata.h"
    #include "vn/consts.h"
    #include "vn/conversions.h"
    #include "vn/criticalsection.h"
    #include "vn/error_detection.h"
    #include "vn/event.h"
    #include "vn/export.h"
    #include "vn/ezasyncdata.h"
    #include "vn/int.h"
    #include "vn/matrix.h"
    #include "vn/packet.h"
    #include "vn/packetfinder.h"
    #include "vn/port.h"
    #include "vn/position.h"
    #include "vn/registers.h"
    #include "vn/searcher.h"
    #include "vn/sensors.h"
    #include "vn/thread.h"
    #include "vn/types.h"
    #include "vn/util.h"
    #include "vn/utilities.h"
    #include "vn/vector.h"
    #include "vn/vntime.h"


#include <string>


#include <stdint.h>		// Use the C99 official header


#include <float.h>


#include <math.h>


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99, but a function in namespace std for C++11. */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined __cplusplus && __cplusplus >= 201103L
#  define SWIG_isfinite(X) (std::isfinite(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}

SWIGINTERN float vn_math_vec_Sl_3_Sc_float_Sg____getX(vn::math::vec< 3,float > *self){
		return self->x;
	}
SWIGINTERN void vn_math_vec_Sl_3_Sc_float_Sg____setX(vn::math::vec< 3,float > *self,float v){
		self->x = v;
	}
SWIGINTERN float vn_math_vec_Sl_3_Sc_float_Sg____getY(vn::math::vec< 3,float > *self){
		return self->y;
	}
SWIGINTERN void vn_math_vec_Sl_3_Sc_float_Sg____setY(vn::math::vec< 3,float > *self,float v){
		self->y = v;
	}
SWIGINTERN float vn_math_vec_Sl_3_Sc_float_Sg____getZ(vn::math::vec< 3,float > *self){
		return self->z;
	}
SWIGINTERN void vn_math_vec_Sl_3_Sc_float_Sg____setZ(vn::math::vec< 3,float > *self,float v){
		self->z = v;
	}
SWIGINTERN char *vn_math_vec_Sl_3_Sc_float_Sg____repr__(vn::math::vec< 3,float > *self){
		static char temp[256];
		sprintf(temp, "vec3f([ %g, %g, %g ])", self->x, self->y, self->z);
		return temp;
	}

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
#if PY_VERSION_HEX >= 0x03010000
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#else
      return PyUnicode_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}

SWIGINTERN char *vn_math_vec_Sl_3_Sc_float_Sg____str__(vn::math::vec< 3,float > *self){
		static char temp[256];
		sprintf(temp, "vec3f([ %g, %g, %g ])", self->x, self->y, self->z);
		return temp;
	}
SWIGINTERN float vn_math_vec_Sl_3_Sc_double_Sg____getX(vn::math::vec< 3,double > *self){
		return self->x;
	}
SWIGINTERN void vn_math_vec_Sl_3_Sc_double_Sg____setX(vn::math::vec< 3,double > *self,double v){
		self->x = v;
	}
SWIGINTERN float vn_math_vec_Sl_3_Sc_double_Sg____getY(vn::math::vec< 3,double > *self){
		return self->y;
	}
SWIGINTERN void vn_math_vec_Sl_3_Sc_double_Sg____setY(vn::math::vec< 3,double > *self,double v){
		self->y = v;
	}
SWIGINTERN float vn_math_vec_Sl_3_Sc_double_Sg____getZ(vn::math::vec< 3,double > *self){
		return self->z;
	}
SWIGINTERN void vn_math_vec_Sl_3_Sc_double_Sg____setZ(vn::math::vec< 3,double > *self,double v){
		self->z = v;
	}
SWIGINTERN char *vn_math_vec_Sl_3_Sc_double_Sg____repr__(vn::math::vec< 3,double > *self){
		static char temp[256];
		sprintf(temp, "vec3d([ %g, %g, %g ])", self->x, self->y, self->z);
		return temp;
	}
SWIGINTERN char *vn_math_vec_Sl_3_Sc_double_Sg____str__(vn::math::vec< 3,double > *self){
		static char temp[256];
		sprintf(temp, "vec3d([ %g, %g, %g ])", self->x, self->y, self->z);
		return temp;
	}
SWIGINTERN float vn_math_vec_Sl_4_Sc_float_Sg____getX(vn::math::vec< 4,float > *self){
		return self->x;
	}
SWIGINTERN void vn_math_vec_Sl_4_Sc_float_Sg____setX(vn::math::vec< 4,float > *self,float v){
		self->x = v;
	}
SWIGINTERN float vn_math_vec_Sl_4_Sc_float_Sg____getY(vn::math::vec< 4,float > *self){
		return self->y;
	}
SWIGINTERN void vn_math_vec_Sl_4_Sc_float_Sg____setY(vn::math::vec< 4,float > *self,float v){
		self->y = v;
	}
SWIGINTERN float vn_math_vec_Sl_4_Sc_float_Sg____getZ(vn::math::vec< 4,float > *self){
		return self->z;
	}
SWIGINTERN void vn_math_vec_Sl_4_Sc_float_Sg____setZ(vn::math::vec< 4,float > *self,float v){
		self->z = v;
	}
SWIGINTERN float vn_math_vec_Sl_4_Sc_float_Sg____getW(vn::math::vec< 4,float > *self){
		return self->w;
	}
SWIGINTERN void vn_math_vec_Sl_4_Sc_float_Sg____setW(vn::math::vec< 4,float > *self,float v){
		self->w = v;
	}
SWIGINTERN char *vn_math_vec_Sl_4_Sc_float_Sg____repr__(vn::math::vec< 4,float > *self){
		static char temp[256];
		sprintf(temp, "vec4f([ %g, %g, %g, %g ])", self->x, self->y, self->z, self->w);
		return temp;
	}
SWIGINTERN char *vn_math_vec_Sl_4_Sc_float_Sg____str__(vn::math::vec< 4,float > *self){
		static char temp[256];
		sprintf(temp, "vec4f([ %g, %g, %g, %g ])", self->x, self->y, self->z, self->w);
		return temp;
	}

SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}

SWIGINTERN float vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____getE00(vn::math::mat< 3,3,float > *self){ return self->e00; }
SWIGINTERN void vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____setE00(vn::math::mat< 3,3,float > *self,float v){ self->e00 = v; }
SWIGINTERN float vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____getE01(vn::math::mat< 3,3,float > *self){ return self->e01; }
SWIGINTERN void vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____setE01(vn::math::mat< 3,3,float > *self,float v){ self->e01 = v; }
SWIGINTERN float vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____getE02(vn::math::mat< 3,3,float > *self){ return self->e02; }
SWIGINTERN void vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____setE02(vn::math::mat< 3,3,float > *self,float v){ self->e02 = v; }
SWIGINTERN float vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____getE10(vn::math::mat< 3,3,float > *self){ return self->e10; }
SWIGINTERN void vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____setE10(vn::math::mat< 3,3,float > *self,float v){ self->e10 = v; }
SWIGINTERN float vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____getE11(vn::math::mat< 3,3,float > *self){ return self->e11; }
SWIGINTERN void vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____setE11(vn::math::mat< 3,3,float > *self,float v){ self->e11 = v; }
SWIGINTERN float vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____getE12(vn::math::mat< 3,3,float > *self){ return self->e12; }
SWIGINTERN void vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____setE12(vn::math::mat< 3,3,float > *self,float v){ self->e12 = v; }
SWIGINTERN float vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____getE20(vn::math::mat< 3,3,float > *self){ return self->e20; }
SWIGINTERN void vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____setE20(vn::math::mat< 3,3,float > *self,float v){ self->e20 = v; }
SWIGINTERN float vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____getE21(vn::math::mat< 3,3,float > *self){ return self->e21; }
SWIGINTERN void vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____setE21(vn::math::mat< 3,3,float > *self,float v){ self->e21 = v; }
SWIGINTERN float vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____getE22(vn::math::mat< 3,3,float > *self){ return self->e22; }
SWIGINTERN void vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____setE22(vn::math::mat< 3,3,float > *self,float v){ self->e22 = v; }

SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (PyObject * obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_signed_SS_char (PyObject * obj, signed char *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SCHAR_MIN || v > SCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< signed char >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_signed_SS_char  (signed char value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if(alloc) *alloc = SWIG_NEWOBJ;
#endif
    PyBytes_AsStringAndSize(obj, &cstr, &len);
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	{
	  *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}





SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <stddef.h>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <vector>


#include <utility>


#include <map>


#include <algorithm>


#define vn_sensors_VnSensor_baudrate_get(self_) self_->baudrate()
  

#define vn_sensors_VnSensor_port_get(self_) *new std::string(self_->port())
  

#define vn_sensors_VnSensor_send_error_detection_mode_get(self_) self_->sendErrorDetectionMode()
#define vn_sensors_VnSensor_send_error_detection_mode_set(self_, val_) self_->setSendErrorDetectionMode(val_)
  

#define vn_sensors_VnSensor_is_connected_get(self_) self_->isConnected()
  

#define vn_sensors_VnSensor_response_timeout_ms_get(self_) self_->responseTimeoutMs()
#define vn_sensors_VnSensor_response_timeout_ms_set(self_, val_) self_->setResponseTimeoutMs(val_)
  

#define vn_sensors_VnSensor_retransmit_delay_ms_get(self_) self_->retransmitDelayMs()
#define vn_sensors_VnSensor_retransmit_delay_ms_set(self_, val_) self_->setRetransmitDelayMs(val_)
  

namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type>
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if ( j < 0 ) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      if (ii > jj) {
        typename Sequence::const_reverse_iterator sb = self->rbegin();
        typename Sequence::const_reverse_iterator se = self->rbegin();
        std::advance(sb,size-ii-1);
        std::advance(se,size-jj-1);
        typename Sequence::const_reverse_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<-step && it!=se; ++c)
            it++;
        }
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj < ii)
        jj = ii;
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount; ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      if (jj > ii)
        jj = ii;
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount; ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj > ii) {
        typename Sequence::iterator sb = self->begin();
        std::advance(sb,ii);
        if (step == 1) {
          typename Sequence::iterator se = self->begin();
          std::advance(se,jj);
          self->erase(sb,se);
        } else {
          typename Sequence::iterator it = sb;
          size_t delcount = (jj - ii + step - 1) / step;
          while (delcount) {
            it = self->erase(it);
            for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
              it++;
            delcount--;
          }
        }
      }
    } else {
      if (ii > jj) {
        typename Sequence::reverse_iterator sb = self->rbegin();
        std::advance(sb,size-ii-1);
        typename Sequence::reverse_iterator it = sb;
        size_t delcount = (ii - jj - step - 1) / -step;
        while (delcount) {
          it = typename Sequence::reverse_iterator(self->erase((++it).base()));
          for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
            it++;
          delcount--;
        }
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", (int)_index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    Py_ssize_t _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  // STL container wrapper around a Python sequence
  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;
    typedef size_t size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      Py_ssize_t s = size();
      for (Py_ssize_t i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", (int)i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


namespace swig {
  template <> struct traits< unsigned int > {
    typedef value_category category;
    static const char* type_name() { return"unsigned int"; }
  };
  template <>  struct traits_asval< unsigned int > {
    typedef unsigned int value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_unsigned_SS_int (obj, val);
    }
  };
  template <>  struct traits_from< unsigned int > {
    typedef unsigned int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_unsigned_SS_int  (val);
    }
  };
}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< unsigned int, std::allocator< unsigned int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "unsigned int" "," "std::allocator< unsigned int >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_uint32_t_Sg__iterator(std::vector< uint32_t > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_uint32_t_Sg____nonzero__(std::vector< uint32_t > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_uint32_t_Sg____bool__(std::vector< uint32_t > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< unsigned int >::size_type std_vector_Sl_uint32_t_Sg____len__(std::vector< uint32_t > const *self){
      return self->size();
    }
SWIGINTERN std::vector< unsigned int,std::allocator< unsigned int > > *std_vector_Sl_uint32_t_Sg____getslice__(std::vector< uint32_t > *self,std::vector< unsigned int >::difference_type i,std::vector< unsigned int >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_uint32_t_Sg____setslice____SWIG_0(std::vector< uint32_t > *self,std::vector< unsigned int >::difference_type i,std::vector< unsigned int >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< unsigned int,std::allocator< unsigned int > >());
    }
SWIGINTERN void std_vector_Sl_uint32_t_Sg____setslice____SWIG_1(std::vector< uint32_t > *self,std::vector< unsigned int >::difference_type i,std::vector< unsigned int >::difference_type j,std::vector< unsigned int,std::allocator< unsigned int > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_uint32_t_Sg____delslice__(std::vector< uint32_t > *self,std::vector< unsigned int >::difference_type i,std::vector< unsigned int >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_uint32_t_Sg____delitem____SWIG_0(std::vector< uint32_t > *self,std::vector< unsigned int >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< unsigned int,std::allocator< unsigned int > > *std_vector_Sl_uint32_t_Sg____getitem____SWIG_0(std::vector< uint32_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< unsigned int,std::allocator< unsigned int > >::difference_type id = i;
      std::vector< unsigned int,std::allocator< unsigned int > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_uint32_t_Sg____setitem____SWIG_0(std::vector< uint32_t > *self,PySliceObject *slice,std::vector< unsigned int,std::allocator< unsigned int > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< unsigned int,std::allocator< unsigned int > >::difference_type id = i;
      std::vector< unsigned int,std::allocator< unsigned int > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_uint32_t_Sg____setitem____SWIG_1(std::vector< uint32_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< unsigned int,std::allocator< unsigned int > >::difference_type id = i;
      std::vector< unsigned int,std::allocator< unsigned int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_uint32_t_Sg____delitem____SWIG_1(std::vector< uint32_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< unsigned int,std::allocator< unsigned int > >::difference_type id = i;
      std::vector< unsigned int,std::allocator< unsigned int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< unsigned int >::value_type const &std_vector_Sl_uint32_t_Sg____getitem____SWIG_1(std::vector< uint32_t > const *self,std::vector< unsigned int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_uint32_t_Sg____setitem____SWIG_2(std::vector< uint32_t > *self,std::vector< unsigned int >::difference_type i,std::vector< unsigned int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< unsigned int >::value_type std_vector_Sl_uint32_t_Sg__pop(std::vector< uint32_t > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< unsigned int,std::allocator< unsigned int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__append(std::vector< uint32_t > *self,std::vector< unsigned int >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< unsigned int >::iterator std_vector_Sl_uint32_t_Sg__erase__SWIG_0(std::vector< uint32_t > *self,std::vector< unsigned int >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< unsigned int >::iterator std_vector_Sl_uint32_t_Sg__erase__SWIG_1(std::vector< uint32_t > *self,std::vector< unsigned int >::iterator first,std::vector< unsigned int >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< unsigned int >::iterator std_vector_Sl_uint32_t_Sg__insert__SWIG_0(std::vector< uint32_t > *self,std::vector< unsigned int >::iterator pos,std::vector< unsigned int >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__insert__SWIG_1(std::vector< uint32_t > *self,std::vector< unsigned int >::iterator pos,std::vector< unsigned int >::size_type n,std::vector< unsigned int >::value_type const &x){ self->insert(pos, n, x); }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_new_vec3f__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vec3f")) SWIG_fail;
  result = (vn::math::vec< 3,float > *)new vn::math::vec< 3,float >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vec3f__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec< 3,float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vec3f",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vec3f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = (vn::math::vec< 3,float > *)new vn::math::vec< 3,float >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vec3f__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp1 ;
  float val1 ;
  int ecode1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vn::math::vec< 3,float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_vec3f",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vec3f" "', argument " "1"" of type '" "float""'");
  } 
  temp1 = static_cast< float >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vec3f" "', argument " "2"" of type '" "float""'");
  } 
  temp2 = static_cast< float >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_vec3f" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  result = (vn::math::vec< 3,float > *)new vn::math::vec< 3,float >((float const &)*arg1,(float const &)*arg2,(float const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vec3f(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vec3f__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vec3f__SWIG_1(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_vec3f__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vec3f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::math::vec< 3,float >::vec()\n"
    "    vn::math::vec< 3,float >::vec(float)\n"
    "    vn::math::vec< 3,float >::vec(float const &,float const &,float const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vec3f_zero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)":vec3f_zero")) SWIG_fail;
  result = vn::math::vec< 3,float >::SWIGTEMPLATEDISAMBIGUATOR zero();
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,float >(static_cast< const vn::math::vec< 3,float >& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f_one(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)":vec3f_one")) SWIG_fail;
  result = vn::math::vec< 3,float >::SWIGTEMPLATEDISAMBIGUATOR one();
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,float >(static_cast< const vn::math::vec< 3,float >& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f_unitX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)":vec3f_unitX")) SWIG_fail;
  result = vn::math::vec< 3,float >::SWIGTEMPLATEDISAMBIGUATOR unitX();
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,float >(static_cast< const vn::math::vec< 3,float >& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f_unitY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)":vec3f_unitY")) SWIG_fail;
  result = vn::math::vec< 3,float >::SWIGTEMPLATEDISAMBIGUATOR unitY();
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,float >(static_cast< const vn::math::vec< 3,float >& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f_unitZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)":vec3f_unitZ")) SWIG_fail;
  result = vn::math::vec< 3,float >::SWIGTEMPLATEDISAMBIGUATOR unitZ();
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,float >(static_cast< const vn::math::vec< 3,float >& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > *arg1 = (vn::math::vec< 3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec< 3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec3f___neg__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3f___neg__" "', argument " "1"" of type '" "vn::math::vec< 3,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
  result = ((vn::math::vec< 3,float > const *)arg1)->operator -();
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,float >(static_cast< const vn::math::vec< 3,float >& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > *arg1 = (vn::math::vec< 3,float > *) 0 ;
  vn::math::vec< 3,float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 3,float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3f___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3f___iadd__" "', argument " "1"" of type '" "vn::math::vec< 3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec3f___iadd__" "', argument " "2"" of type '" "vn::math::vec< 3,float > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec3f___iadd__" "', argument " "2"" of type '" "vn::math::vec< 3,float > const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec< 3,float > * >(argp2);
  result = (vn::math::vec< 3,float > *) &(arg1)->operator +=((vn::math::vec< 3,float > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > *arg1 = (vn::math::vec< 3,float > *) 0 ;
  vn::math::vec< 3,float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 3,float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3f___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3f___isub__" "', argument " "1"" of type '" "vn::math::vec< 3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec3f___isub__" "', argument " "2"" of type '" "vn::math::vec< 3,float > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec3f___isub__" "', argument " "2"" of type '" "vn::math::vec< 3,float > const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec< 3,float > * >(argp2);
  result = (vn::math::vec< 3,float > *) &(arg1)->operator -=((vn::math::vec< 3,float > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > *arg1 = (vn::math::vec< 3,float > *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 3,float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3f___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3f___imul__" "', argument " "1"" of type '" "vn::math::vec< 3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec3f___imul__" "', argument " "2"" of type '" "float""'");
  } 
  temp2 = static_cast< float >(val2);
  arg2 = &temp2;
  result = (vn::math::vec< 3,float > *) &(arg1)->operator *=((float const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f___idiv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > *arg1 = (vn::math::vec< 3,float > *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 3,float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3f___idiv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3f___idiv__" "', argument " "1"" of type '" "vn::math::vec< 3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec3f___idiv__" "', argument " "2"" of type '" "float""'");
  } 
  temp2 = static_cast< float >(val2);
  arg2 = &temp2;
  result = (vn::math::vec< 3,float > *) &(arg1)->operator /=((float const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f_dim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > *arg1 = (vn::math::vec< 3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec3f_dim",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3f_dim" "', argument " "1"" of type '" "vn::math::vec< 3,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
  result = ((vn::math::vec< 3,float > const *)arg1)->dim();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f_neg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > *arg1 = (vn::math::vec< 3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec< 3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec3f_neg",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3f_neg" "', argument " "1"" of type '" "vn::math::vec< 3,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
  result = ((vn::math::vec< 3,float > const *)arg1)->neg();
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,float >(static_cast< const vn::math::vec< 3,float >& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f_mag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > *arg1 = (vn::math::vec< 3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec3f_mag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3f_mag" "', argument " "1"" of type '" "vn::math::vec< 3,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
  result = (float)((vn::math::vec< 3,float > const *)arg1)->mag();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > *arg1 = (vn::math::vec< 3,float > *) 0 ;
  vn::math::vec< 3,float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3f_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3f_add" "', argument " "1"" of type '" "vn::math::vec< 3,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec3f_add" "', argument " "2"" of type '" "vn::math::vec< 3,float > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec3f_add" "', argument " "2"" of type '" "vn::math::vec< 3,float > const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec< 3,float > * >(argp2);
  result = ((vn::math::vec< 3,float > const *)arg1)->add((vn::math::vec< 3,float > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,float >(static_cast< const vn::math::vec< 3,float >& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f_sub(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > *arg1 = (vn::math::vec< 3,float > *) 0 ;
  vn::math::vec< 3,float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3f_sub",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3f_sub" "', argument " "1"" of type '" "vn::math::vec< 3,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec3f_sub" "', argument " "2"" of type '" "vn::math::vec< 3,float > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec3f_sub" "', argument " "2"" of type '" "vn::math::vec< 3,float > const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec< 3,float > * >(argp2);
  result = ((vn::math::vec< 3,float > const *)arg1)->sub((vn::math::vec< 3,float > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,float >(static_cast< const vn::math::vec< 3,float >& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f_mult(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > *arg1 = (vn::math::vec< 3,float > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3f_mult",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3f_mult" "', argument " "1"" of type '" "vn::math::vec< 3,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec3f_mult" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = ((vn::math::vec< 3,float > const *)arg1)->mult((double const &)*arg2);
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,float >(static_cast< const vn::math::vec< 3,float >& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f_div(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > *arg1 = (vn::math::vec< 3,float > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3f_div",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3f_div" "', argument " "1"" of type '" "vn::math::vec< 3,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec3f_div" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = ((vn::math::vec< 3,float > const *)arg1)->div((double const &)*arg2);
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,float >(static_cast< const vn::math::vec< 3,float >& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f_norm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > *arg1 = (vn::math::vec< 3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec< 3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec3f_norm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3f_norm" "', argument " "1"" of type '" "vn::math::vec< 3,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
  result = ((vn::math::vec< 3,float > const *)arg1)->norm();
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,float >(static_cast< const vn::math::vec< 3,float >& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f_dot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > *arg1 = (vn::math::vec< 3,float > *) 0 ;
  vn::math::vec< 3,float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3f_dot",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3f_dot" "', argument " "1"" of type '" "vn::math::vec< 3,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec3f_dot" "', argument " "2"" of type '" "vn::math::vec< 3,float > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec3f_dot" "', argument " "2"" of type '" "vn::math::vec< 3,float > const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec< 3,float > * >(argp2);
  result = (float)((vn::math::vec< 3,float > const *)arg1)->dot((vn::math::vec< 3,float > const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f_cross(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > *arg1 = (vn::math::vec< 3,float > *) 0 ;
  vn::math::vec< 3,float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3f_cross",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3f_cross" "', argument " "1"" of type '" "vn::math::vec< 3,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec3f_cross" "', argument " "2"" of type '" "vn::math::vec< 3,float > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec3f_cross" "', argument " "2"" of type '" "vn::math::vec< 3,float > const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec< 3,float > * >(argp2);
  result = ((vn::math::vec< 3,float > const *)arg1)->cross((vn::math::vec< 3,float > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,float >(static_cast< const vn::math::vec< 3,float >& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f___getX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > *arg1 = (vn::math::vec< 3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec3f___getX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3f___getX" "', argument " "1"" of type '" "vn::math::vec< 3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
  result = (float)vn_math_vec_Sl_3_Sc_float_Sg____getX(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f___setX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > *arg1 = (vn::math::vec< 3,float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3f___setX",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3f___setX" "', argument " "1"" of type '" "vn::math::vec< 3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec3f___setX" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  vn_math_vec_Sl_3_Sc_float_Sg____setX(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f___getY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > *arg1 = (vn::math::vec< 3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec3f___getY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3f___getY" "', argument " "1"" of type '" "vn::math::vec< 3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
  result = (float)vn_math_vec_Sl_3_Sc_float_Sg____getY(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f___setY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > *arg1 = (vn::math::vec< 3,float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3f___setY",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3f___setY" "', argument " "1"" of type '" "vn::math::vec< 3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec3f___setY" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  vn_math_vec_Sl_3_Sc_float_Sg____setY(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f___getZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > *arg1 = (vn::math::vec< 3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec3f___getZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3f___getZ" "', argument " "1"" of type '" "vn::math::vec< 3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
  result = (float)vn_math_vec_Sl_3_Sc_float_Sg____getZ(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f___setZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > *arg1 = (vn::math::vec< 3,float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3f___setZ",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3f___setZ" "', argument " "1"" of type '" "vn::math::vec< 3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec3f___setZ" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  vn_math_vec_Sl_3_Sc_float_Sg____setZ(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > *arg1 = (vn::math::vec< 3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec3f___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3f___repr__" "', argument " "1"" of type '" "vn::math::vec< 3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
  result = (char *)vn_math_vec_Sl_3_Sc_float_Sg____repr__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3f___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > *arg1 = (vn::math::vec< 3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec3f___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3f___str__" "', argument " "1"" of type '" "vn::math::vec< 3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
  result = (char *)vn_math_vec_Sl_3_Sc_float_Sg____str__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vec3f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > *arg1 = (vn::math::vec< 3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vec3f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vec3f" "', argument " "1"" of type '" "vn::math::vec< 3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vec3f_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_vec3d__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vec3d")) SWIG_fail;
  result = (vn::math::vec< 3,double > *)new vn::math::vec< 3,double >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vec3d__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec< 3,double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vec3d",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vec3d" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (vn::math::vec< 3,double > *)new vn::math::vec< 3,double >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vec3d__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vn::math::vec< 3,double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_vec3d",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vec3d" "', argument " "1"" of type '" "double""'");
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vec3d" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_vec3d" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  result = (vn::math::vec< 3,double > *)new vn::math::vec< 3,double >((double const &)*arg1,(double const &)*arg2,(double const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vec3d(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vec3d__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vec3d__SWIG_1(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_vec3d__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vec3d'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::math::vec< 3,double >::vec()\n"
    "    vn::math::vec< 3,double >::vec(double)\n"
    "    vn::math::vec< 3,double >::vec(double const &,double const &,double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vec3d_zero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > result;
  
  if (!PyArg_ParseTuple(args,(char *)":vec3d_zero")) SWIG_fail;
  result = vn::math::vec< 3,double >::SWIGTEMPLATEDISAMBIGUATOR zero();
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,double >(static_cast< const vn::math::vec< 3,double >& >(result))), SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d_one(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > result;
  
  if (!PyArg_ParseTuple(args,(char *)":vec3d_one")) SWIG_fail;
  result = vn::math::vec< 3,double >::SWIGTEMPLATEDISAMBIGUATOR one();
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,double >(static_cast< const vn::math::vec< 3,double >& >(result))), SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d_unitX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > result;
  
  if (!PyArg_ParseTuple(args,(char *)":vec3d_unitX")) SWIG_fail;
  result = vn::math::vec< 3,double >::SWIGTEMPLATEDISAMBIGUATOR unitX();
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,double >(static_cast< const vn::math::vec< 3,double >& >(result))), SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d_unitY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > result;
  
  if (!PyArg_ParseTuple(args,(char *)":vec3d_unitY")) SWIG_fail;
  result = vn::math::vec< 3,double >::SWIGTEMPLATEDISAMBIGUATOR unitY();
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,double >(static_cast< const vn::math::vec< 3,double >& >(result))), SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d_unitZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > result;
  
  if (!PyArg_ParseTuple(args,(char *)":vec3d_unitZ")) SWIG_fail;
  result = vn::math::vec< 3,double >::SWIGTEMPLATEDISAMBIGUATOR unitZ();
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,double >(static_cast< const vn::math::vec< 3,double >& >(result))), SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > *arg1 = (vn::math::vec< 3,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec< 3,double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec3d___neg__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3d___neg__" "', argument " "1"" of type '" "vn::math::vec< 3,double > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,double > * >(argp1);
  result = ((vn::math::vec< 3,double > const *)arg1)->operator -();
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,double >(static_cast< const vn::math::vec< 3,double >& >(result))), SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > *arg1 = (vn::math::vec< 3,double > *) 0 ;
  vn::math::vec< 3,double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 3,double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3d___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3d___iadd__" "', argument " "1"" of type '" "vn::math::vec< 3,double > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec3d___iadd__" "', argument " "2"" of type '" "vn::math::vec< 3,double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec3d___iadd__" "', argument " "2"" of type '" "vn::math::vec< 3,double > const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec< 3,double > * >(argp2);
  result = (vn::math::vec< 3,double > *) &(arg1)->operator +=((vn::math::vec< 3,double > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > *arg1 = (vn::math::vec< 3,double > *) 0 ;
  vn::math::vec< 3,double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 3,double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3d___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3d___isub__" "', argument " "1"" of type '" "vn::math::vec< 3,double > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec3d___isub__" "', argument " "2"" of type '" "vn::math::vec< 3,double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec3d___isub__" "', argument " "2"" of type '" "vn::math::vec< 3,double > const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec< 3,double > * >(argp2);
  result = (vn::math::vec< 3,double > *) &(arg1)->operator -=((vn::math::vec< 3,double > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > *arg1 = (vn::math::vec< 3,double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 3,double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3d___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3d___imul__" "', argument " "1"" of type '" "vn::math::vec< 3,double > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec3d___imul__" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (vn::math::vec< 3,double > *) &(arg1)->operator *=((double const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d___idiv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > *arg1 = (vn::math::vec< 3,double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 3,double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3d___idiv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3d___idiv__" "', argument " "1"" of type '" "vn::math::vec< 3,double > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec3d___idiv__" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (vn::math::vec< 3,double > *) &(arg1)->operator /=((double const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d_dim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > *arg1 = (vn::math::vec< 3,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec3d_dim",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3d_dim" "', argument " "1"" of type '" "vn::math::vec< 3,double > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,double > * >(argp1);
  result = ((vn::math::vec< 3,double > const *)arg1)->dim();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d_neg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > *arg1 = (vn::math::vec< 3,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec< 3,double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec3d_neg",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3d_neg" "', argument " "1"" of type '" "vn::math::vec< 3,double > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,double > * >(argp1);
  result = ((vn::math::vec< 3,double > const *)arg1)->neg();
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,double >(static_cast< const vn::math::vec< 3,double >& >(result))), SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d_mag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > *arg1 = (vn::math::vec< 3,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec3d_mag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3d_mag" "', argument " "1"" of type '" "vn::math::vec< 3,double > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,double > * >(argp1);
  result = (double)((vn::math::vec< 3,double > const *)arg1)->mag();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > *arg1 = (vn::math::vec< 3,double > *) 0 ;
  vn::math::vec< 3,double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 3,double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3d_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3d_add" "', argument " "1"" of type '" "vn::math::vec< 3,double > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec3d_add" "', argument " "2"" of type '" "vn::math::vec< 3,double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec3d_add" "', argument " "2"" of type '" "vn::math::vec< 3,double > const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec< 3,double > * >(argp2);
  result = ((vn::math::vec< 3,double > const *)arg1)->add((vn::math::vec< 3,double > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,double >(static_cast< const vn::math::vec< 3,double >& >(result))), SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d_sub(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > *arg1 = (vn::math::vec< 3,double > *) 0 ;
  vn::math::vec< 3,double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 3,double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3d_sub",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3d_sub" "', argument " "1"" of type '" "vn::math::vec< 3,double > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec3d_sub" "', argument " "2"" of type '" "vn::math::vec< 3,double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec3d_sub" "', argument " "2"" of type '" "vn::math::vec< 3,double > const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec< 3,double > * >(argp2);
  result = ((vn::math::vec< 3,double > const *)arg1)->sub((vn::math::vec< 3,double > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,double >(static_cast< const vn::math::vec< 3,double >& >(result))), SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d_mult(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > *arg1 = (vn::math::vec< 3,double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 3,double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3d_mult",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3d_mult" "', argument " "1"" of type '" "vn::math::vec< 3,double > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec3d_mult" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = ((vn::math::vec< 3,double > const *)arg1)->mult((double const &)*arg2);
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,double >(static_cast< const vn::math::vec< 3,double >& >(result))), SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d_div(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > *arg1 = (vn::math::vec< 3,double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 3,double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3d_div",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3d_div" "', argument " "1"" of type '" "vn::math::vec< 3,double > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec3d_div" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = ((vn::math::vec< 3,double > const *)arg1)->div((double const &)*arg2);
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,double >(static_cast< const vn::math::vec< 3,double >& >(result))), SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d_norm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > *arg1 = (vn::math::vec< 3,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec< 3,double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec3d_norm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3d_norm" "', argument " "1"" of type '" "vn::math::vec< 3,double > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,double > * >(argp1);
  result = ((vn::math::vec< 3,double > const *)arg1)->norm();
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,double >(static_cast< const vn::math::vec< 3,double >& >(result))), SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d_dot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > *arg1 = (vn::math::vec< 3,double > *) 0 ;
  vn::math::vec< 3,double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3d_dot",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3d_dot" "', argument " "1"" of type '" "vn::math::vec< 3,double > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec3d_dot" "', argument " "2"" of type '" "vn::math::vec< 3,double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec3d_dot" "', argument " "2"" of type '" "vn::math::vec< 3,double > const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec< 3,double > * >(argp2);
  result = (double)((vn::math::vec< 3,double > const *)arg1)->dot((vn::math::vec< 3,double > const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d_cross(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > *arg1 = (vn::math::vec< 3,double > *) 0 ;
  vn::math::vec< 3,double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 3,double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3d_cross",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3d_cross" "', argument " "1"" of type '" "vn::math::vec< 3,double > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec3d_cross" "', argument " "2"" of type '" "vn::math::vec< 3,double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec3d_cross" "', argument " "2"" of type '" "vn::math::vec< 3,double > const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec< 3,double > * >(argp2);
  result = ((vn::math::vec< 3,double > const *)arg1)->cross((vn::math::vec< 3,double > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,double >(static_cast< const vn::math::vec< 3,double >& >(result))), SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d___getX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > *arg1 = (vn::math::vec< 3,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec3d___getX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3d___getX" "', argument " "1"" of type '" "vn::math::vec< 3,double > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,double > * >(argp1);
  result = (float)vn_math_vec_Sl_3_Sc_double_Sg____getX(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d___setX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > *arg1 = (vn::math::vec< 3,double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3d___setX",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3d___setX" "', argument " "1"" of type '" "vn::math::vec< 3,double > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec3d___setX" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  vn_math_vec_Sl_3_Sc_double_Sg____setX(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d___getY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > *arg1 = (vn::math::vec< 3,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec3d___getY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3d___getY" "', argument " "1"" of type '" "vn::math::vec< 3,double > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,double > * >(argp1);
  result = (float)vn_math_vec_Sl_3_Sc_double_Sg____getY(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d___setY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > *arg1 = (vn::math::vec< 3,double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3d___setY",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3d___setY" "', argument " "1"" of type '" "vn::math::vec< 3,double > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec3d___setY" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  vn_math_vec_Sl_3_Sc_double_Sg____setY(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d___getZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > *arg1 = (vn::math::vec< 3,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec3d___getZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3d___getZ" "', argument " "1"" of type '" "vn::math::vec< 3,double > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,double > * >(argp1);
  result = (float)vn_math_vec_Sl_3_Sc_double_Sg____getZ(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d___setZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > *arg1 = (vn::math::vec< 3,double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec3d___setZ",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3d___setZ" "', argument " "1"" of type '" "vn::math::vec< 3,double > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec3d___setZ" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  vn_math_vec_Sl_3_Sc_double_Sg____setZ(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > *arg1 = (vn::math::vec< 3,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec3d___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3d___repr__" "', argument " "1"" of type '" "vn::math::vec< 3,double > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,double > * >(argp1);
  result = (char *)vn_math_vec_Sl_3_Sc_double_Sg____repr__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec3d___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > *arg1 = (vn::math::vec< 3,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec3d___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec3d___str__" "', argument " "1"" of type '" "vn::math::vec< 3,double > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,double > * >(argp1);
  result = (char *)vn_math_vec_Sl_3_Sc_double_Sg____str__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vec3d(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,double > *arg1 = (vn::math::vec< 3,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vec3d",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vec3d" "', argument " "1"" of type '" "vn::math::vec< 3,double > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 3,double > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vec3d_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_vec4f__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vec4f")) SWIG_fail;
  result = (vn::math::vec< 4,float > *)new vn::math::vec< 4,float >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vec4f__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec< 4,float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vec4f",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vec4f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = (vn::math::vec< 4,float > *)new vn::math::vec< 4,float >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vec4f__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  vn::math::vec< 4,float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_vec4f",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vec4f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vec4f" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_vec4f" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_vec4f" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = (vn::math::vec< 4,float > *)new vn::math::vec< 4,float >(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vec4f(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vec4f__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vec4f__SWIG_1(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_vec4f__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vec4f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::math::vec< 4,float >::vec()\n"
    "    vn::math::vec< 4,float >::vec(float)\n"
    "    vn::math::vec< 4,float >::vec(float,float,float,float)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vec4f_zero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)":vec4f_zero")) SWIG_fail;
  result = vn::math::vec< 4,float >::SWIGTEMPLATEDISAMBIGUATOR zero();
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 4,float >(static_cast< const vn::math::vec< 4,float >& >(result))), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f_one(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)":vec4f_one")) SWIG_fail;
  result = vn::math::vec< 4,float >::SWIGTEMPLATEDISAMBIGUATOR one();
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 4,float >(static_cast< const vn::math::vec< 4,float >& >(result))), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f_unitX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)":vec4f_unitX")) SWIG_fail;
  result = vn::math::vec< 4,float >::SWIGTEMPLATEDISAMBIGUATOR unitX();
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 4,float >(static_cast< const vn::math::vec< 4,float >& >(result))), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f_unitY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)":vec4f_unitY")) SWIG_fail;
  result = vn::math::vec< 4,float >::SWIGTEMPLATEDISAMBIGUATOR unitY();
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 4,float >(static_cast< const vn::math::vec< 4,float >& >(result))), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f_unitZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)":vec4f_unitZ")) SWIG_fail;
  result = vn::math::vec< 4,float >::SWIGTEMPLATEDISAMBIGUATOR unitZ();
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 4,float >(static_cast< const vn::math::vec< 4,float >& >(result))), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f_unitW(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)":vec4f_unitW")) SWIG_fail;
  result = vn::math::vec< 4,float >::SWIGTEMPLATEDISAMBIGUATOR unitW();
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 4,float >(static_cast< const vn::math::vec< 4,float >& >(result))), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *arg1 = (vn::math::vec< 4,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec< 4,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec4f___neg__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec4f___neg__" "', argument " "1"" of type '" "vn::math::vec< 4,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 4,float > * >(argp1);
  result = ((vn::math::vec< 4,float > const *)arg1)->operator -();
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 4,float >(static_cast< const vn::math::vec< 4,float >& >(result))), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *arg1 = (vn::math::vec< 4,float > *) 0 ;
  vn::math::vec< 4,float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 4,float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec4f___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec4f___iadd__" "', argument " "1"" of type '" "vn::math::vec< 4,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 4,float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_4_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec4f___iadd__" "', argument " "2"" of type '" "vn::math::vec< 4,float > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec4f___iadd__" "', argument " "2"" of type '" "vn::math::vec< 4,float > const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec< 4,float > * >(argp2);
  result = (vn::math::vec< 4,float > *) &(arg1)->operator +=((vn::math::vec< 4,float > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *arg1 = (vn::math::vec< 4,float > *) 0 ;
  vn::math::vec< 4,float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 4,float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec4f___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec4f___isub__" "', argument " "1"" of type '" "vn::math::vec< 4,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 4,float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_4_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec4f___isub__" "', argument " "2"" of type '" "vn::math::vec< 4,float > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec4f___isub__" "', argument " "2"" of type '" "vn::math::vec< 4,float > const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec< 4,float > * >(argp2);
  result = (vn::math::vec< 4,float > *) &(arg1)->operator -=((vn::math::vec< 4,float > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *arg1 = (vn::math::vec< 4,float > *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 4,float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec4f___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec4f___imul__" "', argument " "1"" of type '" "vn::math::vec< 4,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 4,float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec4f___imul__" "', argument " "2"" of type '" "float""'");
  } 
  temp2 = static_cast< float >(val2);
  arg2 = &temp2;
  result = (vn::math::vec< 4,float > *) &(arg1)->operator *=((float const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f___idiv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *arg1 = (vn::math::vec< 4,float > *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 4,float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec4f___idiv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec4f___idiv__" "', argument " "1"" of type '" "vn::math::vec< 4,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 4,float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec4f___idiv__" "', argument " "2"" of type '" "float""'");
  } 
  temp2 = static_cast< float >(val2);
  arg2 = &temp2;
  result = (vn::math::vec< 4,float > *) &(arg1)->operator /=((float const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f_dim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *arg1 = (vn::math::vec< 4,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec4f_dim",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec4f_dim" "', argument " "1"" of type '" "vn::math::vec< 4,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 4,float > * >(argp1);
  result = ((vn::math::vec< 4,float > const *)arg1)->dim();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f_neg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *arg1 = (vn::math::vec< 4,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec< 4,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec4f_neg",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec4f_neg" "', argument " "1"" of type '" "vn::math::vec< 4,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 4,float > * >(argp1);
  result = ((vn::math::vec< 4,float > const *)arg1)->neg();
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 4,float >(static_cast< const vn::math::vec< 4,float >& >(result))), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f_mag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *arg1 = (vn::math::vec< 4,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec4f_mag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec4f_mag" "', argument " "1"" of type '" "vn::math::vec< 4,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 4,float > * >(argp1);
  result = (float)((vn::math::vec< 4,float > const *)arg1)->mag();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *arg1 = (vn::math::vec< 4,float > *) 0 ;
  vn::math::vec< 4,float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 4,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec4f_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec4f_add" "', argument " "1"" of type '" "vn::math::vec< 4,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 4,float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_4_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec4f_add" "', argument " "2"" of type '" "vn::math::vec< 4,float > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec4f_add" "', argument " "2"" of type '" "vn::math::vec< 4,float > const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec< 4,float > * >(argp2);
  result = ((vn::math::vec< 4,float > const *)arg1)->add((vn::math::vec< 4,float > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 4,float >(static_cast< const vn::math::vec< 4,float >& >(result))), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f_sub(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *arg1 = (vn::math::vec< 4,float > *) 0 ;
  vn::math::vec< 4,float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 4,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec4f_sub",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec4f_sub" "', argument " "1"" of type '" "vn::math::vec< 4,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 4,float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_4_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec4f_sub" "', argument " "2"" of type '" "vn::math::vec< 4,float > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec4f_sub" "', argument " "2"" of type '" "vn::math::vec< 4,float > const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec< 4,float > * >(argp2);
  result = ((vn::math::vec< 4,float > const *)arg1)->sub((vn::math::vec< 4,float > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 4,float >(static_cast< const vn::math::vec< 4,float >& >(result))), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f_mult(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *arg1 = (vn::math::vec< 4,float > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 4,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec4f_mult",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec4f_mult" "', argument " "1"" of type '" "vn::math::vec< 4,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 4,float > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec4f_mult" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = ((vn::math::vec< 4,float > const *)arg1)->mult((double const &)*arg2);
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 4,float >(static_cast< const vn::math::vec< 4,float >& >(result))), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f_div(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *arg1 = (vn::math::vec< 4,float > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::vec< 4,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec4f_div",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec4f_div" "', argument " "1"" of type '" "vn::math::vec< 4,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 4,float > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec4f_div" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = ((vn::math::vec< 4,float > const *)arg1)->div((double const &)*arg2);
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 4,float >(static_cast< const vn::math::vec< 4,float >& >(result))), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f_norm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *arg1 = (vn::math::vec< 4,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec< 4,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec4f_norm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec4f_norm" "', argument " "1"" of type '" "vn::math::vec< 4,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 4,float > * >(argp1);
  result = ((vn::math::vec< 4,float > const *)arg1)->norm();
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 4,float >(static_cast< const vn::math::vec< 4,float >& >(result))), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f_dot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *arg1 = (vn::math::vec< 4,float > *) 0 ;
  vn::math::vec< 4,float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec4f_dot",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec4f_dot" "', argument " "1"" of type '" "vn::math::vec< 4,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 4,float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_4_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec4f_dot" "', argument " "2"" of type '" "vn::math::vec< 4,float > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec4f_dot" "', argument " "2"" of type '" "vn::math::vec< 4,float > const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec< 4,float > * >(argp2);
  result = (float)((vn::math::vec< 4,float > const *)arg1)->dot((vn::math::vec< 4,float > const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f___getX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *arg1 = (vn::math::vec< 4,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec4f___getX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec4f___getX" "', argument " "1"" of type '" "vn::math::vec< 4,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 4,float > * >(argp1);
  result = (float)vn_math_vec_Sl_4_Sc_float_Sg____getX(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f___setX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *arg1 = (vn::math::vec< 4,float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec4f___setX",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec4f___setX" "', argument " "1"" of type '" "vn::math::vec< 4,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 4,float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec4f___setX" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  vn_math_vec_Sl_4_Sc_float_Sg____setX(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f___getY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *arg1 = (vn::math::vec< 4,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec4f___getY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec4f___getY" "', argument " "1"" of type '" "vn::math::vec< 4,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 4,float > * >(argp1);
  result = (float)vn_math_vec_Sl_4_Sc_float_Sg____getY(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f___setY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *arg1 = (vn::math::vec< 4,float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec4f___setY",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec4f___setY" "', argument " "1"" of type '" "vn::math::vec< 4,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 4,float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec4f___setY" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  vn_math_vec_Sl_4_Sc_float_Sg____setY(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f___getZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *arg1 = (vn::math::vec< 4,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec4f___getZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec4f___getZ" "', argument " "1"" of type '" "vn::math::vec< 4,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 4,float > * >(argp1);
  result = (float)vn_math_vec_Sl_4_Sc_float_Sg____getZ(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f___setZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *arg1 = (vn::math::vec< 4,float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec4f___setZ",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec4f___setZ" "', argument " "1"" of type '" "vn::math::vec< 4,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 4,float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec4f___setZ" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  vn_math_vec_Sl_4_Sc_float_Sg____setZ(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f___getW(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *arg1 = (vn::math::vec< 4,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec4f___getW",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec4f___getW" "', argument " "1"" of type '" "vn::math::vec< 4,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 4,float > * >(argp1);
  result = (float)vn_math_vec_Sl_4_Sc_float_Sg____getW(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f___setW(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *arg1 = (vn::math::vec< 4,float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec4f___setW",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec4f___setW" "', argument " "1"" of type '" "vn::math::vec< 4,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 4,float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec4f___setW" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  vn_math_vec_Sl_4_Sc_float_Sg____setW(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *arg1 = (vn::math::vec< 4,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec4f___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec4f___repr__" "', argument " "1"" of type '" "vn::math::vec< 4,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 4,float > * >(argp1);
  result = (char *)vn_math_vec_Sl_4_Sc_float_Sg____repr__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec4f___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *arg1 = (vn::math::vec< 4,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec4f___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec4f___str__" "', argument " "1"" of type '" "vn::math::vec< 4,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 4,float > * >(argp1);
  result = (char *)vn_math_vec_Sl_4_Sc_float_Sg____str__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vec4f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 4,float > *arg1 = (vn::math::vec< 4,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vec4f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vec4f" "', argument " "1"" of type '" "vn::math::vec< 4,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::vec< 4,float > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vec4f_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_mat3f__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_mat3f")) SWIG_fail;
  result = (vn::math::mat< 3,3,float > *)new vn::math::mat< 3,3,float >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__matT_3_3_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mat3f__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::mat< 3,3,float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_mat3f",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_mat3f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = (vn::math::mat< 3,3,float > *)new vn::math::mat< 3,3,float >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__matT_3_3_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mat3f__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  vn::math::mat< 3,3,float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_mat3f",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_mat3f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_mat3f" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_mat3f" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_mat3f" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_mat3f" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_mat3f" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_float(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_mat3f" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  ecode8 = SWIG_AsVal_float(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_mat3f" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = static_cast< float >(val8);
  ecode9 = SWIG_AsVal_float(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_mat3f" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = static_cast< float >(val9);
  result = (vn::math::mat< 3,3,float > *)new vn::math::mat< 3,3,float >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__matT_3_3_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mat3f__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > arg1 ;
  vn::math::vec< 3,float > arg2 ;
  vn::math::vec< 3,float > arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vn::math::mat< 3,3,float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_mat3f",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mat3f" "', argument " "1"" of type '" "vn::math::vec< 3,float >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mat3f" "', argument " "1"" of type '" "vn::math::vec< 3,float >""'");
    } else {
      vn::math::vec< 3,float > * temp = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_mat3f" "', argument " "2"" of type '" "vn::math::vec< 3,float >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mat3f" "', argument " "2"" of type '" "vn::math::vec< 3,float >""'");
    } else {
      vn::math::vec< 3,float > * temp = reinterpret_cast< vn::math::vec< 3,float > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_mat3f" "', argument " "3"" of type '" "vn::math::vec< 3,float >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mat3f" "', argument " "3"" of type '" "vn::math::vec< 3,float >""'");
    } else {
      vn::math::vec< 3,float > * temp = reinterpret_cast< vn::math::vec< 3,float > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (vn::math::mat< 3,3,float > *)new vn::math::mat< 3,3,float >(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__matT_3_3_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mat3f(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_mat3f__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_mat3f__SWIG_1(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_mat3f__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_float(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_float(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_float(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_mat3f__SWIG_2(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_mat3f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::math::mat< 3,3,float >::mat()\n"
    "    vn::math::mat< 3,3,float >::mat(float)\n"
    "    vn::math::mat< 3,3,float >::mat(float,float,float,float,float,float,float,float,float)\n"
    "    vn::math::mat< 3,3,float >::mat(vn::math::vec< 3,float >,vn::math::vec< 3,float >,vn::math::vec< 3,float >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mat3f_zero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)":mat3f_zero")) SWIG_fail;
  result = vn::math::mat< 3,3,float >::SWIGTEMPLATEDISAMBIGUATOR zero();
  resultobj = SWIG_NewPointerObj((new vn::math::mat< 3,3,float >(static_cast< const vn::math::mat< 3,3,float >& >(result))), SWIGTYPE_p_vn__math__matT_3_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f_one(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)":mat3f_one")) SWIG_fail;
  result = vn::math::mat< 3,3,float >::SWIGTEMPLATEDISAMBIGUATOR one();
  resultobj = SWIG_NewPointerObj((new vn::math::mat< 3,3,float >(static_cast< const vn::math::mat< 3,3,float >& >(result))), SWIGTYPE_p_vn__math__matT_3_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f_identity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)":mat3f_identity")) SWIG_fail;
  result = vn::math::mat< 3,3,float >::SWIGTEMPLATEDISAMBIGUATOR identity();
  resultobj = SWIG_NewPointerObj((new vn::math::mat< 3,3,float >(static_cast< const vn::math::mat< 3,3,float >& >(result))), SWIGTYPE_p_vn__math__matT_3_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f___call____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mat3f___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f___call__" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mat3f___call__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mat3f___call__" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (float *) &(arg1)->operator ()(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f___call____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mat3f___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f___call__" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mat3f___call__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mat3f___call__" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (float *) &((vn::math::mat< 3,3,float > const *)arg1)->operator ()(arg2,arg3);
  resultobj = SWIG_From_float(static_cast< float >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f___call__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__math__matT_3_3_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_mat3f___call____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__math__matT_3_3_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_mat3f___call____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'mat3f___call__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::math::mat< 3,3,float >::operator ()(size_t,size_t)\n"
    "    vn::math::mat< 3,3,float >::operator ()(size_t,size_t) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mat3f___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::mat< 3,3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mat3f___neg__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f___neg__" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  result = ((vn::math::mat< 3,3,float > const *)arg1)->operator -();
  resultobj = SWIG_NewPointerObj((new vn::math::mat< 3,3,float >(static_cast< const vn::math::mat< 3,3,float >& >(result))), SWIGTYPE_p_vn__math__matT_3_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f_dimRow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mat3f_dimRow",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f_dimRow" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  result = ((vn::math::mat< 3,3,float > const *)arg1)->dimRow();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f_dimCol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mat3f_dimCol",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f_dimCol" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  result = ((vn::math::mat< 3,3,float > const *)arg1)->dimCol();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f_dimCols(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mat3f_dimCols",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f_dimCols" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  result = ((vn::math::mat< 3,3,float > const *)arg1)->dimCols();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f_neg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::mat< 3,3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mat3f_neg",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f_neg" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  result = ((vn::math::mat< 3,3,float > const *)arg1)->neg();
  resultobj = SWIG_NewPointerObj((new vn::math::mat< 3,3,float >(static_cast< const vn::math::mat< 3,3,float >& >(result))), SWIGTYPE_p_vn__math__matT_3_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f_mult(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::mat< 3,3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mat3f_mult",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f_mult" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mat3f_mult" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = ((vn::math::mat< 3,3,float > const *)arg1)->mult((double const &)*arg2);
  resultobj = SWIG_NewPointerObj((new vn::math::mat< 3,3,float >(static_cast< const vn::math::mat< 3,3,float >& >(result))), SWIGTYPE_p_vn__math__matT_3_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f_div(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::mat< 3,3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mat3f_div",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f_div" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mat3f_div" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = ((vn::math::mat< 3,3,float > const *)arg1)->div((double const &)*arg2);
  resultobj = SWIG_NewPointerObj((new vn::math::mat< 3,3,float >(static_cast< const vn::math::mat< 3,3,float >& >(result))), SWIGTYPE_p_vn__math__matT_3_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  vn::math::mat< 3,3,float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::mat< 3,3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mat3f_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f_add" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__matT_3_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mat3f_add" "', argument " "2"" of type '" "vn::math::mat< 3,3,float > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mat3f_add" "', argument " "2"" of type '" "vn::math::mat< 3,3,float > const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp2);
  result = ((vn::math::mat< 3,3,float > const *)arg1)->add((vn::math::mat< 3,3,float > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new vn::math::mat< 3,3,float >(static_cast< const vn::math::mat< 3,3,float >& >(result))), SWIGTYPE_p_vn__math__matT_3_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f_sub(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  vn::math::mat< 3,3,float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::math::mat< 3,3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mat3f_sub",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f_sub" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__matT_3_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mat3f_sub" "', argument " "2"" of type '" "vn::math::mat< 3,3,float > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mat3f_sub" "', argument " "2"" of type '" "vn::math::mat< 3,3,float > const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp2);
  result = ((vn::math::mat< 3,3,float > const *)arg1)->sub((vn::math::mat< 3,3,float > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new vn::math::mat< 3,3,float >(static_cast< const vn::math::mat< 3,3,float >& >(result))), SWIGTYPE_p_vn__math__matT_3_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f_transpose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::mat< 3,3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mat3f_transpose",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f_transpose" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > const *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  result = ((vn::math::mat< 3,3,float > const *)arg1)->transpose();
  resultobj = SWIG_NewPointerObj((new vn::math::mat< 3,3,float >(static_cast< const vn::math::mat< 3,3,float >& >(result))), SWIGTYPE_p_vn__math__matT_3_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f___getE00(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mat3f___getE00",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f___getE00" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  result = (float)vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____getE00(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f___setE00(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mat3f___setE00",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f___setE00" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mat3f___setE00" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____setE00(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f___getE01(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mat3f___getE01",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f___getE01" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  result = (float)vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____getE01(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f___setE01(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mat3f___setE01",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f___setE01" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mat3f___setE01" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____setE01(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f___getE02(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mat3f___getE02",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f___getE02" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  result = (float)vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____getE02(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f___setE02(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mat3f___setE02",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f___setE02" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mat3f___setE02" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____setE02(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f___getE10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mat3f___getE10",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f___getE10" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  result = (float)vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____getE10(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f___setE10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mat3f___setE10",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f___setE10" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mat3f___setE10" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____setE10(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f___getE11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mat3f___getE11",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f___getE11" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  result = (float)vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____getE11(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f___setE11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mat3f___setE11",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f___setE11" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mat3f___setE11" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____setE11(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f___getE12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mat3f___getE12",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f___getE12" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  result = (float)vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____getE12(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f___setE12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mat3f___setE12",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f___setE12" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mat3f___setE12" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____setE12(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f___getE20(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mat3f___getE20",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f___getE20" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  result = (float)vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____getE20(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f___setE20(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mat3f___setE20",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f___setE20" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mat3f___setE20" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____setE20(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f___getE21(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mat3f___getE21",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f___getE21" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  result = (float)vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____getE21(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f___setE21(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mat3f___setE21",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f___setE21" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mat3f___setE21" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____setE21(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f___getE22(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mat3f___getE22",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f___getE22" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  result = (float)vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____getE22(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mat3f___setE22(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mat3f___setE22",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mat3f___setE22" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mat3f___setE22" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  vn_math_mat_Sl_3_Sc_3_Sc_float_Sg____setE22(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_mat3f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat< 3,3,float > *arg1 = (vn::math::mat< 3,3,float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_mat3f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__matT_3_3_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_mat3f" "', argument " "1"" of type '" "vn::math::mat< 3,3,float > *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::mat< 3,3,float > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *mat3f_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__math__matT_3_3_float_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Attitude_no_rotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::AttitudeF result;
  
  if (!PyArg_ParseTuple(args,(char *)":Attitude_no_rotation")) SWIG_fail;
  result = vn::math::AttitudeF::noRotation();
  resultobj = SWIG_NewPointerObj((new vn::math::AttitudeF(static_cast< const vn::math::AttitudeF& >(result))), SWIGTYPE_p_vn__math__AttitudeF, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Attitude_from_quat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec4f arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::AttitudeF result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Attitude_from_quat",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_4_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attitude_from_quat" "', argument " "1"" of type '" "vn::math::vec4f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Attitude_from_quat" "', argument " "1"" of type '" "vn::math::vec4f""'");
    } else {
      vn::math::vec4f * temp = reinterpret_cast< vn::math::vec4f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::math::AttitudeF::fromQuat(arg1);
  resultobj = SWIG_NewPointerObj((new vn::math::AttitudeF(static_cast< const vn::math::AttitudeF& >(result))), SWIGTYPE_p_vn__math__AttitudeF, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Attitude_from_ypr_degs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3f arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::AttitudeF result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Attitude_from_ypr_degs",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attitude_from_ypr_degs" "', argument " "1"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Attitude_from_ypr_degs" "', argument " "1"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::math::AttitudeF::fromYprInDegs(arg1);
  resultobj = SWIG_NewPointerObj((new vn::math::AttitudeF(static_cast< const vn::math::AttitudeF& >(result))), SWIGTYPE_p_vn__math__AttitudeF, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Attitude_from_ypr_rads(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3f arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::AttitudeF result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Attitude_from_ypr_rads",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attitude_from_ypr_rads" "', argument " "1"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Attitude_from_ypr_rads" "', argument " "1"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::math::AttitudeF::fromYprInRads(arg1);
  resultobj = SWIG_NewPointerObj((new vn::math::AttitudeF(static_cast< const vn::math::AttitudeF& >(result))), SWIGTYPE_p_vn__math__AttitudeF, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Attitude_from_dcm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat3f arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::AttitudeF result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Attitude_from_dcm",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__matT_3_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attitude_from_dcm" "', argument " "1"" of type '" "vn::math::mat3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Attitude_from_dcm" "', argument " "1"" of type '" "vn::math::mat3f""'");
    } else {
      vn::math::mat3f * temp = reinterpret_cast< vn::math::mat3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::math::AttitudeF::fromDcm(arg1);
  resultobj = SWIG_NewPointerObj((new vn::math::AttitudeF(static_cast< const vn::math::AttitudeF& >(result))), SWIGTYPE_p_vn__math__AttitudeF, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Attitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::AttitudeF *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Attitude")) SWIG_fail;
  result = (vn::math::AttitudeF *)new vn::math::AttitudeF();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__AttitudeF, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Attitude___yprInDegs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::AttitudeF *arg1 = (vn::math::AttitudeF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Attitude___yprInDegs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__AttitudeF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attitude___yprInDegs" "', argument " "1"" of type '" "vn::math::AttitudeF *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::AttitudeF * >(argp1);
  result = (arg1)->yprInDegs();
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Attitude___yprInRads(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::AttitudeF *arg1 = (vn::math::AttitudeF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Attitude___yprInRads",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__AttitudeF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attitude___yprInRads" "', argument " "1"" of type '" "vn::math::AttitudeF *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::AttitudeF * >(argp1);
  result = (arg1)->yprInRads();
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Attitude___quat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::AttitudeF *arg1 = (vn::math::AttitudeF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Attitude___quat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__AttitudeF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attitude___quat" "', argument " "1"" of type '" "vn::math::AttitudeF *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::AttitudeF * >(argp1);
  result = (arg1)->quat();
  resultobj = SWIG_NewPointerObj((new vn::math::vec4f(static_cast< const vn::math::vec4f& >(result))), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Attitude___dcm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::AttitudeF *arg1 = (vn::math::AttitudeF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::mat3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Attitude___dcm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__AttitudeF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attitude___dcm" "', argument " "1"" of type '" "vn::math::AttitudeF *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::AttitudeF * >(argp1);
  result = (arg1)->dcm();
  resultobj = SWIG_NewPointerObj((new vn::math::mat3f(static_cast< const vn::math::mat3f& >(result))), SWIGTYPE_p_vn__math__matT_3_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Attitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::AttitudeF *arg1 = (vn::math::AttitudeF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Attitude",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__AttitudeF, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Attitude" "', argument " "1"" of type '" "vn::math::AttitudeF *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::AttitudeF * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Attitude_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__math__AttitudeF, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Position(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::PositionD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Position")) SWIG_fail;
  result = (vn::math::PositionD *)new vn::math::PositionD();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__PositionD, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position_from_lla(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3d arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::PositionD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Position_from_lla",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_double_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_from_lla" "', argument " "1"" of type '" "vn::math::vec3d""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_from_lla" "', argument " "1"" of type '" "vn::math::vec3d""'");
    } else {
      vn::math::vec3d * temp = reinterpret_cast< vn::math::vec3d * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::math::PositionD::fromLla(arg1);
  resultobj = SWIG_NewPointerObj((new vn::math::PositionD(static_cast< const vn::math::PositionD& >(result))), SWIGTYPE_p_vn__math__PositionD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position_from_ecef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3d arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::PositionD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Position_from_ecef",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_double_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_from_ecef" "', argument " "1"" of type '" "vn::math::vec3d""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_from_ecef" "', argument " "1"" of type '" "vn::math::vec3d""'");
    } else {
      vn::math::vec3d * temp = reinterpret_cast< vn::math::vec3d * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::math::PositionD::fromEcef(arg1);
  resultobj = SWIG_NewPointerObj((new vn::math::PositionD(static_cast< const vn::math::PositionD& >(result))), SWIGTYPE_p_vn__math__PositionD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Position(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::PositionD *arg1 = (vn::math::PositionD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Position",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__math__PositionD, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Position" "', argument " "1"" of type '" "vn::math::PositionD *""'"); 
  }
  arg1 = reinterpret_cast< vn::math::PositionD * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Position_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__math__PositionD, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___rad2deg_f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:__rad2deg_f",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "__rad2deg_f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = (float)vn::math::rad2deg(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___rad2deg_d(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:__rad2deg_d",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "__rad2deg_d" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)vn::math::rad2deg(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___deg2rad_f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:__deg2rad_f",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "__deg2rad_f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = (float)vn::math::deg2rad(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___deg2rad_d(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:__deg2rad_d",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "__deg2rad_d" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)vn::math::deg2rad(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_celsius2fahren__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:celsius2fahren",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "celsius2fahren" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = (float)vn::math::celsius2fahren(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_celsius2fahren__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:celsius2fahren",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "celsius2fahren" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)vn::math::celsius2fahren(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_celsius2fahren(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_celsius2fahren__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_celsius2fahren__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'celsius2fahren'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::math::celsius2fahren(float)\n"
    "    vn::math::celsius2fahren(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fahren2celsius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fahren2celsius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fahren2celsius" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = (float)vn::math::fahren2celsius(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fahren2celsius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fahren2celsius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fahren2celsius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)vn::math::fahren2celsius(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fahren2celsius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_fahren2celsius__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_fahren2celsius__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fahren2celsius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::math::fahren2celsius(float)\n"
    "    vn::math::fahren2celsius(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_celsius2kelvin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:celsius2kelvin",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "celsius2kelvin" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = (float)vn::math::celsius2kelvin(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_celsius2kelvin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:celsius2kelvin",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "celsius2kelvin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)vn::math::celsius2kelvin(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_celsius2kelvin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_celsius2kelvin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_celsius2kelvin__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'celsius2kelvin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::math::celsius2kelvin(float)\n"
    "    vn::math::celsius2kelvin(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_kelvin2celsius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:kelvin2celsius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "kelvin2celsius" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = (float)vn::math::kelvin2celsius(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_kelvin2celsius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:kelvin2celsius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "kelvin2celsius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)vn::math::kelvin2celsius(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_kelvin2celsius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_kelvin2celsius__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_kelvin2celsius__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'kelvin2celsius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::math::kelvin2celsius(float)\n"
    "    vn::math::kelvin2celsius(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fahren2kelvin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fahren2kelvin",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fahren2kelvin" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = (float)vn::math::fahren2kelvin(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fahren2kelvin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fahren2kelvin",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fahren2kelvin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)vn::math::fahren2kelvin(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fahren2kelvin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_fahren2kelvin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_fahren2kelvin__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fahren2kelvin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::math::fahren2kelvin(float)\n"
    "    vn::math::fahren2kelvin(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_kelvin2fahren__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:kelvin2fahren",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "kelvin2fahren" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = (float)vn::math::kelvin2fahren(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_kelvin2fahren__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:kelvin2fahren",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "kelvin2fahren" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)vn::math::kelvin2fahren(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_kelvin2fahren(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_kelvin2fahren__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_kelvin2fahren__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'kelvin2fahren'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::math::kelvin2fahren(float)\n"
    "    vn::math::kelvin2fahren(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ypr_degs2quat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3f arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ypr_degs2quat",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ypr_degs2quat" "', argument " "1"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ypr_degs2quat" "', argument " "1"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::math::yprInDegs2Quat(arg1);
  resultobj = SWIG_NewPointerObj((new vn::math::vec4f(static_cast< const vn::math::vec4f& >(result))), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ypr_rads2quat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3f arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ypr_rads2quat",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ypr_rads2quat" "', argument " "1"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ypr_rads2quat" "', argument " "1"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::math::yprInRads2Quat(arg1);
  resultobj = SWIG_NewPointerObj((new vn::math::vec4f(static_cast< const vn::math::vec4f& >(result))), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ypr_degs2dcm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3f arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::mat3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ypr_degs2dcm",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ypr_degs2dcm" "', argument " "1"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ypr_degs2dcm" "', argument " "1"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::math::yprInDegs2Dcm(arg1);
  resultobj = SWIG_NewPointerObj((new vn::math::mat3f(static_cast< const vn::math::mat3f& >(result))), SWIGTYPE_p_vn__math__matT_3_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ypr_rads2dcm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3f arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::mat3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ypr_rads2dcm",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ypr_rads2dcm" "', argument " "1"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ypr_rads2dcm" "', argument " "1"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::math::yprInRads2Dcm(arg1);
  resultobj = SWIG_NewPointerObj((new vn::math::mat3f(static_cast< const vn::math::mat3f& >(result))), SWIGTYPE_p_vn__math__matT_3_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quat2ypr_degs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec4f arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:quat2ypr_degs",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_4_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quat2ypr_degs" "', argument " "1"" of type '" "vn::math::vec4f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "quat2ypr_degs" "', argument " "1"" of type '" "vn::math::vec4f""'");
    } else {
      vn::math::vec4f * temp = reinterpret_cast< vn::math::vec4f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::math::quat2YprInDegs(arg1);
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quat2ypr_rads(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec4f arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:quat2ypr_rads",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_4_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quat2ypr_rads" "', argument " "1"" of type '" "vn::math::vec4f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "quat2ypr_rads" "', argument " "1"" of type '" "vn::math::vec4f""'");
    } else {
      vn::math::vec4f * temp = reinterpret_cast< vn::math::vec4f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::math::quat2YprInRads(arg1);
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quat2dcm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec4f arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::mat3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:quat2dcm",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_4_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quat2dcm" "', argument " "1"" of type '" "vn::math::vec4f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "quat2dcm" "', argument " "1"" of type '" "vn::math::vec4f""'");
    } else {
      vn::math::vec4f * temp = reinterpret_cast< vn::math::vec4f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::math::quat2dcm(arg1);
  resultobj = SWIG_NewPointerObj((new vn::math::mat3f(static_cast< const vn::math::mat3f& >(result))), SWIGTYPE_p_vn__math__matT_3_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dcm2ypr_degs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat3f arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dcm2ypr_degs",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__matT_3_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dcm2ypr_degs" "', argument " "1"" of type '" "vn::math::mat3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dcm2ypr_degs" "', argument " "1"" of type '" "vn::math::mat3f""'");
    } else {
      vn::math::mat3f * temp = reinterpret_cast< vn::math::mat3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::math::dcm2YprInDegs(arg1);
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dcm2ypr_rads(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat3f arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dcm2ypr_rads",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__matT_3_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dcm2ypr_rads" "', argument " "1"" of type '" "vn::math::mat3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dcm2ypr_rads" "', argument " "1"" of type '" "vn::math::mat3f""'");
    } else {
      vn::math::mat3f * temp = reinterpret_cast< vn::math::mat3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::math::dcm2YprInRads(arg1);
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dcm2quat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat3f arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dcm2quat",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__matT_3_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dcm2quat" "', argument " "1"" of type '" "vn::math::mat3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dcm2quat" "', argument " "1"" of type '" "vn::math::mat3f""'");
    } else {
      vn::math::mat3f * temp = reinterpret_cast< vn::math::mat3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::math::dcm2quat(arg1);
  resultobj = SWIG_NewPointerObj((new vn::math::vec4f(static_cast< const vn::math::vec4f& >(result))), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_velocity_ned_xy2course_over_ground(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:velocity_ned_xy2course_over_ground",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "velocity_ned_xy2course_over_ground" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "velocity_ned_xy2course_over_ground" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (float)vn::math::course_over_ground(arg1,arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_velocity_ned2course_over_ground(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3f arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:velocity_ned2course_over_ground",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "velocity_ned2course_over_ground" "', argument " "1"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "velocity_ned2course_over_ground" "', argument " "1"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (float)vn::math::course_over_ground(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_velocity_ned_xy2speed_over_ground(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:velocity_ned_xy2speed_over_ground",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "velocity_ned_xy2speed_over_ground" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "velocity_ned_xy2speed_over_ground" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (float)vn::math::speed_over_ground(arg1,arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_velocity_ned2speed_over_ground(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3f arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:velocity_ned2speed_over_ground",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "velocity_ned2speed_over_ground" "', argument " "1"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "velocity_ned2speed_over_ground" "', argument " "1"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (float)vn::math::speed_over_ground(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quat2omega_phi_kappa_rads(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec4f arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:quat2omega_phi_kappa_rads",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_4_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quat2omega_phi_kappa_rads" "', argument " "1"" of type '" "vn::math::vec4f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "quat2omega_phi_kappa_rads" "', argument " "1"" of type '" "vn::math::vec4f""'");
    } else {
      vn::math::vec4f * temp = reinterpret_cast< vn::math::vec4f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::math::quat2omegaPhiKappaInRads(arg1);
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dcm2omega_phi_kappa_rads(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat3f arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dcm2omega_phi_kappa_rads",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__matT_3_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dcm2omega_phi_kappa_rads" "', argument " "1"" of type '" "vn::math::mat3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dcm2omega_phi_kappa_rads" "', argument " "1"" of type '" "vn::math::mat3f""'");
    } else {
      vn::math::mat3f * temp = reinterpret_cast< vn::math::mat3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::math::dcm2omegaPhiKappaInRads(arg1);
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ypr_degs2omega_phi_kappa_rads(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3f arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ypr_degs2omega_phi_kappa_rads",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ypr_degs2omega_phi_kappa_rads" "', argument " "1"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ypr_degs2omega_phi_kappa_rads" "', argument " "1"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::math::yprInDegs2omegaPhiKappaInRads(arg1);
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ypr_rads2omega_phi_kappa_rads(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3f arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ypr_rads2omega_phi_kappa_rads",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ypr_rads2omega_phi_kappa_rads" "', argument " "1"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ypr_rads2omega_phi_kappa_rads" "', argument " "1"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::math::yprInRads2omegaPhiKappaInRads(arg1);
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___rad2deg_v3f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec< 3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:__rad2deg_v3f",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__rad2deg_v3f" "', argument " "1"" of type '" "vn::math::vec< 3,float >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__rad2deg_v3f" "', argument " "1"" of type '" "vn::math::vec< 3,float >""'");
    } else {
      vn::math::vec< 3,float > * temp = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::math::SWIGTEMPLATEDISAMBIGUATOR rad2deg< 3 >(arg1);
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,float >(static_cast< const vn::math::vec< 3,float >& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___rad2deg_v3d(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec< 3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:__rad2deg_v3d",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__rad2deg_v3d" "', argument " "1"" of type '" "vn::math::vec< 3,float >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__rad2deg_v3d" "', argument " "1"" of type '" "vn::math::vec< 3,float >""'");
    } else {
      vn::math::vec< 3,float > * temp = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::math::SWIGTEMPLATEDISAMBIGUATOR rad2deg< 3 >(arg1);
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,float >(static_cast< const vn::math::vec< 3,float >& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___deg2rad_v3f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec< 3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:__deg2rad_v3f",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__deg2rad_v3f" "', argument " "1"" of type '" "vn::math::vec< 3,float >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__deg2rad_v3f" "', argument " "1"" of type '" "vn::math::vec< 3,float >""'");
    } else {
      vn::math::vec< 3,float > * temp = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::math::SWIGTEMPLATEDISAMBIGUATOR deg2rad< 3 >(arg1);
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,float >(static_cast< const vn::math::vec< 3,float >& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___deg2rad_v3d(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec< 3,float > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec< 3,float > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:__deg2rad_v3d",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__deg2rad_v3d" "', argument " "1"" of type '" "vn::math::vec< 3,float >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__deg2rad_v3d" "', argument " "1"" of type '" "vn::math::vec< 3,float >""'");
    } else {
      vn::math::vec< 3,float > * temp = reinterpret_cast< vn::math::vec< 3,float > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::math::SWIGTEMPLATEDISAMBIGUATOR deg2rad< 3 >(arg1);
  resultobj = SWIG_NewPointerObj((new vn::math::vec< 3,float >(static_cast< const vn::math::vec< 3,float >& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeStatus_attitudeQuality_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::VpeStatus *arg1 = (vn::protocol::uart::VpeStatus *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeStatus_attitudeQuality_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__VpeStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeStatus_attitudeQuality_set" "', argument " "1"" of type '" "vn::protocol::uart::VpeStatus *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::VpeStatus * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VpeStatus_attitudeQuality_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->attitudeQuality = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeStatus_attitudeQuality_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::VpeStatus *arg1 = (vn::protocol::uart::VpeStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeStatus_attitudeQuality_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__VpeStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeStatus_attitudeQuality_get" "', argument " "1"" of type '" "vn::protocol::uart::VpeStatus *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::VpeStatus * >(argp1);
  result = (uint8_t) ((arg1)->attitudeQuality);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeStatus_gyroSaturation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::VpeStatus *arg1 = (vn::protocol::uart::VpeStatus *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeStatus_gyroSaturation_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__VpeStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeStatus_gyroSaturation_set" "', argument " "1"" of type '" "vn::protocol::uart::VpeStatus *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::VpeStatus * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VpeStatus_gyroSaturation_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->gyroSaturation = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeStatus_gyroSaturation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::VpeStatus *arg1 = (vn::protocol::uart::VpeStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeStatus_gyroSaturation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__VpeStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeStatus_gyroSaturation_get" "', argument " "1"" of type '" "vn::protocol::uart::VpeStatus *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::VpeStatus * >(argp1);
  result = (bool) ((arg1)->gyroSaturation);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeStatus_gyroSaturationRecovery_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::VpeStatus *arg1 = (vn::protocol::uart::VpeStatus *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeStatus_gyroSaturationRecovery_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__VpeStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeStatus_gyroSaturationRecovery_set" "', argument " "1"" of type '" "vn::protocol::uart::VpeStatus *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::VpeStatus * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VpeStatus_gyroSaturationRecovery_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->gyroSaturationRecovery = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeStatus_gyroSaturationRecovery_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::VpeStatus *arg1 = (vn::protocol::uart::VpeStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeStatus_gyroSaturationRecovery_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__VpeStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeStatus_gyroSaturationRecovery_get" "', argument " "1"" of type '" "vn::protocol::uart::VpeStatus *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::VpeStatus * >(argp1);
  result = (bool) ((arg1)->gyroSaturationRecovery);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeStatus_magDisturbance_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::VpeStatus *arg1 = (vn::protocol::uart::VpeStatus *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeStatus_magDisturbance_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__VpeStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeStatus_magDisturbance_set" "', argument " "1"" of type '" "vn::protocol::uart::VpeStatus *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::VpeStatus * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VpeStatus_magDisturbance_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->magDisturbance = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeStatus_magDisturbance_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::VpeStatus *arg1 = (vn::protocol::uart::VpeStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeStatus_magDisturbance_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__VpeStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeStatus_magDisturbance_get" "', argument " "1"" of type '" "vn::protocol::uart::VpeStatus *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::VpeStatus * >(argp1);
  result = (uint8_t) ((arg1)->magDisturbance);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeStatus_magSaturation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::VpeStatus *arg1 = (vn::protocol::uart::VpeStatus *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeStatus_magSaturation_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__VpeStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeStatus_magSaturation_set" "', argument " "1"" of type '" "vn::protocol::uart::VpeStatus *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::VpeStatus * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VpeStatus_magSaturation_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->magSaturation = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeStatus_magSaturation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::VpeStatus *arg1 = (vn::protocol::uart::VpeStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeStatus_magSaturation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__VpeStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeStatus_magSaturation_get" "', argument " "1"" of type '" "vn::protocol::uart::VpeStatus *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::VpeStatus * >(argp1);
  result = (bool) ((arg1)->magSaturation);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeStatus_accDisturbance_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::VpeStatus *arg1 = (vn::protocol::uart::VpeStatus *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeStatus_accDisturbance_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__VpeStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeStatus_accDisturbance_set" "', argument " "1"" of type '" "vn::protocol::uart::VpeStatus *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::VpeStatus * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VpeStatus_accDisturbance_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->accDisturbance = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeStatus_accDisturbance_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::VpeStatus *arg1 = (vn::protocol::uart::VpeStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeStatus_accDisturbance_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__VpeStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeStatus_accDisturbance_get" "', argument " "1"" of type '" "vn::protocol::uart::VpeStatus *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::VpeStatus * >(argp1);
  result = (uint8_t) ((arg1)->accDisturbance);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeStatus_accSaturation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::VpeStatus *arg1 = (vn::protocol::uart::VpeStatus *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeStatus_accSaturation_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__VpeStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeStatus_accSaturation_set" "', argument " "1"" of type '" "vn::protocol::uart::VpeStatus *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::VpeStatus * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VpeStatus_accSaturation_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->accSaturation = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeStatus_accSaturation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::VpeStatus *arg1 = (vn::protocol::uart::VpeStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeStatus_accSaturation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__VpeStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeStatus_accSaturation_get" "', argument " "1"" of type '" "vn::protocol::uart::VpeStatus *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::VpeStatus * >(argp1);
  result = (bool) ((arg1)->accSaturation);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeStatus_knownMagDisturbance_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::VpeStatus *arg1 = (vn::protocol::uart::VpeStatus *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeStatus_knownMagDisturbance_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__VpeStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeStatus_knownMagDisturbance_set" "', argument " "1"" of type '" "vn::protocol::uart::VpeStatus *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::VpeStatus * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VpeStatus_knownMagDisturbance_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->knownMagDisturbance = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeStatus_knownMagDisturbance_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::VpeStatus *arg1 = (vn::protocol::uart::VpeStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeStatus_knownMagDisturbance_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__VpeStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeStatus_knownMagDisturbance_get" "', argument " "1"" of type '" "vn::protocol::uart::VpeStatus *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::VpeStatus * >(argp1);
  result = (bool) ((arg1)->knownMagDisturbance);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeStatus_knownAccelDisturbance_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::VpeStatus *arg1 = (vn::protocol::uart::VpeStatus *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeStatus_knownAccelDisturbance_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__VpeStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeStatus_knownAccelDisturbance_set" "', argument " "1"" of type '" "vn::protocol::uart::VpeStatus *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::VpeStatus * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VpeStatus_knownAccelDisturbance_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->knownAccelDisturbance = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeStatus_knownAccelDisturbance_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::VpeStatus *arg1 = (vn::protocol::uart::VpeStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeStatus_knownAccelDisturbance_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__VpeStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeStatus_knownAccelDisturbance_get" "', argument " "1"" of type '" "vn::protocol::uart::VpeStatus *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::VpeStatus * >(argp1);
  result = (bool) ((arg1)->knownAccelDisturbance);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VpeStatus__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::VpeStatus *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VpeStatus")) SWIG_fail;
  result = (vn::protocol::uart::VpeStatus *)new vn::protocol::uart::VpeStatus();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__protocol__uart__VpeStatus, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VpeStatus__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint16_t arg1 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::VpeStatus *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VpeStatus",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_short(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VpeStatus" "', argument " "1"" of type '" "uint16_t""'");
  } 
  arg1 = static_cast< uint16_t >(val1);
  result = (vn::protocol::uart::VpeStatus *)new vn::protocol::uart::VpeStatus(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__protocol__uart__VpeStatus, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VpeStatus(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VpeStatus__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_short(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VpeStatus__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VpeStatus'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::protocol::uart::VpeStatus::VpeStatus()\n"
    "    vn::protocol::uart::VpeStatus::VpeStatus(uint16_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VpeStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::VpeStatus *arg1 = (vn::protocol::uart::VpeStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VpeStatus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__VpeStatus, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VpeStatus" "', argument " "1"" of type '" "vn::protocol::uart::VpeStatus *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::VpeStatus * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VpeStatus_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__protocol__uart__VpeStatus, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_TimeUtc_year_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::TimeUtc *arg1 = (vn::protocol::uart::TimeUtc *) 0 ;
  int8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeUtc_year_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__TimeUtc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeUtc_year_set" "', argument " "1"" of type '" "vn::protocol::uart::TimeUtc *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::TimeUtc * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeUtc_year_set" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = static_cast< int8_t >(val2);
  if (arg1) (arg1)->year = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeUtc_year_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::TimeUtc *arg1 = (vn::protocol::uart::TimeUtc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeUtc_year_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__TimeUtc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeUtc_year_get" "', argument " "1"" of type '" "vn::protocol::uart::TimeUtc *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::TimeUtc * >(argp1);
  result = (int8_t) ((arg1)->year);
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeUtc_month_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::TimeUtc *arg1 = (vn::protocol::uart::TimeUtc *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeUtc_month_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__TimeUtc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeUtc_month_set" "', argument " "1"" of type '" "vn::protocol::uart::TimeUtc *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::TimeUtc * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeUtc_month_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->month = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeUtc_month_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::TimeUtc *arg1 = (vn::protocol::uart::TimeUtc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeUtc_month_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__TimeUtc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeUtc_month_get" "', argument " "1"" of type '" "vn::protocol::uart::TimeUtc *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::TimeUtc * >(argp1);
  result = (uint8_t) ((arg1)->month);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeUtc_day_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::TimeUtc *arg1 = (vn::protocol::uart::TimeUtc *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeUtc_day_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__TimeUtc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeUtc_day_set" "', argument " "1"" of type '" "vn::protocol::uart::TimeUtc *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::TimeUtc * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeUtc_day_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->day = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeUtc_day_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::TimeUtc *arg1 = (vn::protocol::uart::TimeUtc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeUtc_day_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__TimeUtc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeUtc_day_get" "', argument " "1"" of type '" "vn::protocol::uart::TimeUtc *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::TimeUtc * >(argp1);
  result = (uint8_t) ((arg1)->day);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeUtc_hour_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::TimeUtc *arg1 = (vn::protocol::uart::TimeUtc *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeUtc_hour_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__TimeUtc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeUtc_hour_set" "', argument " "1"" of type '" "vn::protocol::uart::TimeUtc *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::TimeUtc * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeUtc_hour_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->hour = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeUtc_hour_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::TimeUtc *arg1 = (vn::protocol::uart::TimeUtc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeUtc_hour_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__TimeUtc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeUtc_hour_get" "', argument " "1"" of type '" "vn::protocol::uart::TimeUtc *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::TimeUtc * >(argp1);
  result = (uint8_t) ((arg1)->hour);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeUtc_min_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::TimeUtc *arg1 = (vn::protocol::uart::TimeUtc *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeUtc_min_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__TimeUtc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeUtc_min_set" "', argument " "1"" of type '" "vn::protocol::uart::TimeUtc *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::TimeUtc * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeUtc_min_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->min = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeUtc_min_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::TimeUtc *arg1 = (vn::protocol::uart::TimeUtc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeUtc_min_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__TimeUtc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeUtc_min_get" "', argument " "1"" of type '" "vn::protocol::uart::TimeUtc *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::TimeUtc * >(argp1);
  result = (uint8_t) ((arg1)->min);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeUtc_sec_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::TimeUtc *arg1 = (vn::protocol::uart::TimeUtc *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeUtc_sec_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__TimeUtc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeUtc_sec_set" "', argument " "1"" of type '" "vn::protocol::uart::TimeUtc *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::TimeUtc * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeUtc_sec_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->sec = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeUtc_sec_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::TimeUtc *arg1 = (vn::protocol::uart::TimeUtc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeUtc_sec_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__TimeUtc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeUtc_sec_get" "', argument " "1"" of type '" "vn::protocol::uart::TimeUtc *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::TimeUtc * >(argp1);
  result = (uint8_t) ((arg1)->sec);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeUtc_ms_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::TimeUtc *arg1 = (vn::protocol::uart::TimeUtc *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeUtc_ms_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__TimeUtc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeUtc_ms_set" "', argument " "1"" of type '" "vn::protocol::uart::TimeUtc *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::TimeUtc * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeUtc_ms_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->ms = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeUtc_ms_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::TimeUtc *arg1 = (vn::protocol::uart::TimeUtc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeUtc_ms_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__TimeUtc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeUtc_ms_get" "', argument " "1"" of type '" "vn::protocol::uart::TimeUtc *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::TimeUtc * >(argp1);
  result = (uint8_t) ((arg1)->ms);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeUtc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::TimeUtc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TimeUtc")) SWIG_fail;
  result = (vn::protocol::uart::TimeUtc *)new vn::protocol::uart::TimeUtc();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__protocol__uart__TimeUtc, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TimeUtc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::TimeUtc *arg1 = (vn::protocol::uart::TimeUtc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TimeUtc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__TimeUtc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TimeUtc" "', argument " "1"" of type '" "vn::protocol::uart::TimeUtc *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::TimeUtc * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TimeUtc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__protocol__uart__TimeUtc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___or____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  COMMONGROUP arg1 ;
  COMMONGROUP arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  COMMONGROUP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__or__",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_COMMONGROUP,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__or__" "', argument " "1"" of type '" "COMMONGROUP""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__or__" "', argument " "1"" of type '" "COMMONGROUP""'");
    } else {
      COMMONGROUP * temp = reinterpret_cast< COMMONGROUP * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_COMMONGROUP,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__or__" "', argument " "2"" of type '" "COMMONGROUP""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__or__" "', argument " "2"" of type '" "COMMONGROUP""'");
    } else {
      COMMONGROUP * temp = reinterpret_cast< COMMONGROUP * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = vn::protocol::uart::operator |(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new COMMONGROUP(static_cast< const COMMONGROUP& >(result))), SWIGTYPE_p_COMMONGROUP, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___or____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TIMEGROUP arg1 ;
  TIMEGROUP arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TIMEGROUP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__or__",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_TIMEGROUP,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__or__" "', argument " "1"" of type '" "TIMEGROUP""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__or__" "', argument " "1"" of type '" "TIMEGROUP""'");
    } else {
      TIMEGROUP * temp = reinterpret_cast< TIMEGROUP * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_TIMEGROUP,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__or__" "', argument " "2"" of type '" "TIMEGROUP""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__or__" "', argument " "2"" of type '" "TIMEGROUP""'");
    } else {
      TIMEGROUP * temp = reinterpret_cast< TIMEGROUP * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = vn::protocol::uart::operator |(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new TIMEGROUP(static_cast< const TIMEGROUP& >(result))), SWIGTYPE_p_TIMEGROUP, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___or____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMUGROUP arg1 ;
  IMUGROUP arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IMUGROUP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__or__",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_IMUGROUP,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__or__" "', argument " "1"" of type '" "IMUGROUP""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__or__" "', argument " "1"" of type '" "IMUGROUP""'");
    } else {
      IMUGROUP * temp = reinterpret_cast< IMUGROUP * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IMUGROUP,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__or__" "', argument " "2"" of type '" "IMUGROUP""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__or__" "', argument " "2"" of type '" "IMUGROUP""'");
    } else {
      IMUGROUP * temp = reinterpret_cast< IMUGROUP * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = vn::protocol::uart::operator |(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new IMUGROUP(static_cast< const IMUGROUP& >(result))), SWIGTYPE_p_IMUGROUP, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___or____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GPSGROUP arg1 ;
  GPSGROUP arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GPSGROUP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__or__",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GPSGROUP,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__or__" "', argument " "1"" of type '" "GPSGROUP""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__or__" "', argument " "1"" of type '" "GPSGROUP""'");
    } else {
      GPSGROUP * temp = reinterpret_cast< GPSGROUP * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GPSGROUP,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__or__" "', argument " "2"" of type '" "GPSGROUP""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__or__" "', argument " "2"" of type '" "GPSGROUP""'");
    } else {
      GPSGROUP * temp = reinterpret_cast< GPSGROUP * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = vn::protocol::uart::operator |(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new GPSGROUP(static_cast< const GPSGROUP& >(result))), SWIGTYPE_p_GPSGROUP, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___or____SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ATTITUDEGROUP arg1 ;
  ATTITUDEGROUP arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ATTITUDEGROUP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__or__",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ATTITUDEGROUP,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__or__" "', argument " "1"" of type '" "ATTITUDEGROUP""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__or__" "', argument " "1"" of type '" "ATTITUDEGROUP""'");
    } else {
      ATTITUDEGROUP * temp = reinterpret_cast< ATTITUDEGROUP * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ATTITUDEGROUP,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__or__" "', argument " "2"" of type '" "ATTITUDEGROUP""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__or__" "', argument " "2"" of type '" "ATTITUDEGROUP""'");
    } else {
      ATTITUDEGROUP * temp = reinterpret_cast< ATTITUDEGROUP * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = vn::protocol::uart::operator |(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new ATTITUDEGROUP(static_cast< const ATTITUDEGROUP& >(result))), SWIGTYPE_p_ATTITUDEGROUP, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___or____SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INSGROUP arg1 ;
  INSGROUP arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  INSGROUP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__or__",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_INSGROUP,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__or__" "', argument " "1"" of type '" "INSGROUP""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__or__" "', argument " "1"" of type '" "INSGROUP""'");
    } else {
      INSGROUP * temp = reinterpret_cast< INSGROUP * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_INSGROUP,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__or__" "', argument " "2"" of type '" "INSGROUP""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__or__" "', argument " "2"" of type '" "INSGROUP""'");
    } else {
      INSGROUP * temp = reinterpret_cast< INSGROUP * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = vn::protocol::uart::operator |(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new INSGROUP(static_cast< const INSGROUP& >(result))), SWIGTYPE_p_INSGROUP, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___or__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_COMMONGROUP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_COMMONGROUP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___or____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_TIMEGROUP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_TIMEGROUP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___or____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_IMUGROUP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_IMUGROUP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___or____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GPSGROUP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GPSGROUP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___or____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ATTITUDEGROUP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ATTITUDEGROUP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___or____SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_INSGROUP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_INSGROUP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___or____SWIG_5(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_to_string__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ASYNCMODE arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:to_string",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ASYNCMODE,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "to_string" "', argument " "1"" of type '" "ASYNCMODE""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "to_string" "', argument " "1"" of type '" "ASYNCMODE""'");
    } else {
      ASYNCMODE * temp = reinterpret_cast< ASYNCMODE * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::protocol::uart::to_string(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  ASYNCMODE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ASYNCMODE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "ASYNCMODE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "ASYNCMODE""'");
    } else {
      ASYNCMODE * temp = reinterpret_cast< ASYNCMODE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::ostream *) &vn::protocol::uart::operator <<(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_to_string__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  COMMONGROUP arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:to_string",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_COMMONGROUP,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "to_string" "', argument " "1"" of type '" "COMMONGROUP""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "to_string" "', argument " "1"" of type '" "COMMONGROUP""'");
    } else {
      COMMONGROUP * temp = reinterpret_cast< COMMONGROUP * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::protocol::uart::to_string(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  COMMONGROUP arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_COMMONGROUP,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "COMMONGROUP""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "COMMONGROUP""'");
    } else {
      COMMONGROUP * temp = reinterpret_cast< COMMONGROUP * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::ostream *) &vn::protocol::uart::operator <<(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_to_string__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TIMEGROUP arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:to_string",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_TIMEGROUP,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "to_string" "', argument " "1"" of type '" "TIMEGROUP""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "to_string" "', argument " "1"" of type '" "TIMEGROUP""'");
    } else {
      TIMEGROUP * temp = reinterpret_cast< TIMEGROUP * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::protocol::uart::to_string(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  TIMEGROUP arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_TIMEGROUP,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "TIMEGROUP""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "TIMEGROUP""'");
    } else {
      TIMEGROUP * temp = reinterpret_cast< TIMEGROUP * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::ostream *) &vn::protocol::uart::operator <<(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_to_string__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IMUGROUP arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:to_string",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_IMUGROUP,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "to_string" "', argument " "1"" of type '" "IMUGROUP""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "to_string" "', argument " "1"" of type '" "IMUGROUP""'");
    } else {
      IMUGROUP * temp = reinterpret_cast< IMUGROUP * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::protocol::uart::to_string(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  IMUGROUP arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IMUGROUP,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "IMUGROUP""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "IMUGROUP""'");
    } else {
      IMUGROUP * temp = reinterpret_cast< IMUGROUP * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::ostream *) &vn::protocol::uart::operator <<(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_to_string__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GPSGROUP arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:to_string",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GPSGROUP,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "to_string" "', argument " "1"" of type '" "GPSGROUP""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "to_string" "', argument " "1"" of type '" "GPSGROUP""'");
    } else {
      GPSGROUP * temp = reinterpret_cast< GPSGROUP * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::protocol::uart::to_string(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  GPSGROUP arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GPSGROUP,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "GPSGROUP""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "GPSGROUP""'");
    } else {
      GPSGROUP * temp = reinterpret_cast< GPSGROUP * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::ostream *) &vn::protocol::uart::operator <<(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_to_string__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ATTITUDEGROUP arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:to_string",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ATTITUDEGROUP,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "to_string" "', argument " "1"" of type '" "ATTITUDEGROUP""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "to_string" "', argument " "1"" of type '" "ATTITUDEGROUP""'");
    } else {
      ATTITUDEGROUP * temp = reinterpret_cast< ATTITUDEGROUP * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::protocol::uart::to_string(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  ATTITUDEGROUP arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ATTITUDEGROUP,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "ATTITUDEGROUP""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "ATTITUDEGROUP""'");
    } else {
      ATTITUDEGROUP * temp = reinterpret_cast< ATTITUDEGROUP * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::ostream *) &vn::protocol::uart::operator <<(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_to_string__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INSGROUP arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:to_string",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_INSGROUP,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "to_string" "', argument " "1"" of type '" "INSGROUP""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "to_string" "', argument " "1"" of type '" "INSGROUP""'");
    } else {
      INSGROUP * temp = reinterpret_cast< INSGROUP * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = vn::protocol::uart::to_string(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_to_string(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ASYNCMODE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_to_string__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_COMMONGROUP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_to_string__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_TIMEGROUP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_to_string__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_IMUGROUP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_to_string__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GPSGROUP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_to_string__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ATTITUDEGROUP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_to_string__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_INSGROUP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_to_string__SWIG_6(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'to_string'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::protocol::uart::to_string(ASYNCMODE)\n"
    "    vn::protocol::uart::to_string(COMMONGROUP)\n"
    "    vn::protocol::uart::to_string(TIMEGROUP)\n"
    "    vn::protocol::uart::to_string(IMUGROUP)\n"
    "    vn::protocol::uart::to_string(GPSGROUP)\n"
    "    vn::protocol::uart::to_string(ATTITUDEGROUP)\n"
    "    vn::protocol::uart::to_string(INSGROUP)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  INSGROUP arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_INSGROUP,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "INSGROUP""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "INSGROUP""'");
    } else {
      INSGROUP * temp = reinterpret_cast< INSGROUP * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::ostream *) &vn::protocol::uart::operator <<(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ASYNCMODE, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_COMMONGROUP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_TIMEGROUP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_IMUGROUP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GPSGROUP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ATTITUDEGROUP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_INSGROUP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_6(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::AsciiAsync *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__AsciiAsync,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::AsciiAsync &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::AsciiAsync &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::AsciiAsync * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::AsciiAsync *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__AsciiAsync,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::AsciiAsync &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::AsciiAsync &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::AsciiAsync * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::SyncInMode *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__SyncInMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::SyncInMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::SyncInMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::SyncInMode * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::SyncInMode *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__SyncInMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::SyncInMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::SyncInMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::SyncInMode * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::SyncInEdge *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__SyncInEdge,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::SyncInEdge &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::SyncInEdge &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::SyncInEdge * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::SyncInEdge *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__SyncInEdge,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::SyncInEdge &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::SyncInEdge &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::SyncInEdge * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::SyncOutMode *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__SyncOutMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::SyncOutMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::SyncOutMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::SyncOutMode * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::SyncOutMode *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__SyncOutMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::SyncOutMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::SyncOutMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::SyncOutMode * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::SyncOutPolarity *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__SyncOutPolarity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::SyncOutPolarity &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::SyncOutPolarity &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::SyncOutPolarity * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::SyncOutPolarity *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__SyncOutPolarity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::SyncOutPolarity &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::SyncOutPolarity &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::SyncOutPolarity * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::CountMode *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__CountMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::CountMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::CountMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::CountMode * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::CountMode *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__CountMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::CountMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::CountMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::CountMode * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::StatusMode *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__StatusMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::StatusMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::StatusMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::StatusMode * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::StatusMode *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__StatusMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::StatusMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::StatusMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::StatusMode * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::ChecksumMode *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__ChecksumMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::ChecksumMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::ChecksumMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::ChecksumMode * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::ChecksumMode *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__ChecksumMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::ChecksumMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::ChecksumMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::ChecksumMode * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::ErrorMode *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__ErrorMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::ErrorMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::ErrorMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::ErrorMode * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_17(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::ErrorMode *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__ErrorMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::ErrorMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::ErrorMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::ErrorMode * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_18(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::FilterMode *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__FilterMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::FilterMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::FilterMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::FilterMode * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_19(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::FilterMode *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__FilterMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::FilterMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::FilterMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::FilterMode * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_20(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::IntegrationFrame *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__IntegrationFrame,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::IntegrationFrame &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::IntegrationFrame &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::IntegrationFrame * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_21(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::IntegrationFrame *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__IntegrationFrame,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::IntegrationFrame &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::IntegrationFrame &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::IntegrationFrame * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_22(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::CompensationMode *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__CompensationMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::CompensationMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::CompensationMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::CompensationMode * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_23(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::CompensationMode *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__CompensationMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::CompensationMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::CompensationMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::CompensationMode * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_24(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::GpsFix *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__GpsFix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::GpsFix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::GpsFix &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::GpsFix * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_25(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::GpsFix *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__GpsFix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::GpsFix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::GpsFix &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::GpsFix * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_26(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::GpsMode *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__GpsMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::GpsMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::GpsMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::GpsMode * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_27(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::GpsMode *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__GpsMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::GpsMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::GpsMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::GpsMode * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_28(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::PpsSource *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__PpsSource,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::PpsSource &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::PpsSource &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::PpsSource * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_29(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::PpsSource *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__PpsSource,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::PpsSource &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::PpsSource &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::PpsSource * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::VpeEnable *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__VpeEnable,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::VpeEnable &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::VpeEnable &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::VpeEnable * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_31(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::VpeEnable *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__VpeEnable,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::VpeEnable &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::VpeEnable &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::VpeEnable * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::HeadingMode *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__HeadingMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::HeadingMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::HeadingMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::HeadingMode * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_33(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::HeadingMode *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__HeadingMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::HeadingMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::HeadingMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::HeadingMode * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_34(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::VpeMode *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__VpeMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::VpeMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::VpeMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::VpeMode * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_35(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::VpeMode *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__VpeMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::VpeMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::VpeMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::VpeMode * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_36(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::Scenario *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__Scenario,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::Scenario &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::Scenario &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::Scenario * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_37(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::Scenario *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__Scenario,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::Scenario &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::Scenario &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::Scenario * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_38(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::HsiMode *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__HsiMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::HsiMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::HsiMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::HsiMode * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_39(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::HsiMode *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__HsiMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::HsiMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::HsiMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::HsiMode * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_40(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::HsiOutput *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__HsiOutput,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::HsiOutput &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::HsiOutput &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::HsiOutput * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_41(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::HsiOutput *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__HsiOutput,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::HsiOutput &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::HsiOutput &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::HsiOutput * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_42(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::VelocityCompensationMode *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__VelocityCompensationMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::VelocityCompensationMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::VelocityCompensationMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::VelocityCompensationMode * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_43(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::VelocityCompensationMode *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__VelocityCompensationMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::VelocityCompensationMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::VelocityCompensationMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::VelocityCompensationMode * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_44(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::MagneticMode *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__MagneticMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::MagneticMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::MagneticMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::MagneticMode * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_45(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::MagneticMode *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__MagneticMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::MagneticMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::MagneticMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::MagneticMode * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_46(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::ExternalSensorMode *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__ExternalSensorMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::ExternalSensorMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::ExternalSensorMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::ExternalSensorMode * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_47(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::ExternalSensorMode *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__ExternalSensorMode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::ExternalSensorMode &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::ExternalSensorMode &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::ExternalSensorMode * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_48(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::FoamInit *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__FoamInit,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::FoamInit &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::FoamInit &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::FoamInit * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_49(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::protocol::uart::FoamInit *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__protocol__uart__FoamInit,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::FoamInit &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::protocol::uart::FoamInit &""'"); 
  }
  arg2 = reinterpret_cast< vn::protocol::uart::FoamInit * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN int Swig_var_Packet_BinaryGroupLengths_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Packet_BinaryGroupLengths is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Packet_BinaryGroupLengths_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(vn::protocol::uart::Packet::BinaryGroupLengths), SWIGTYPE_p_a_sizeof_uint16_t__8__unsigned_char,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Packet_BinaryGroupLengths_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_Packet_BinaryGroupLengths_get();
}


SWIGINTERN PyObject *_wrap_new_Packet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Packet")) SWIG_fail;
  result = (vn::protocol::uart::Packet *)new vn::protocol::uart::Packet();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__protocol__uart__Packet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Packet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::protocol::uart::Packet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Packet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Packet" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Packet" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (vn::protocol::uart::Packet *)new vn::protocol::uart::Packet((char const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__protocol__uart__Packet, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Packet__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::Packet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Packet",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Packet" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (vn::protocol::uart::Packet *)new vn::protocol::uart::Packet(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__protocol__uart__Packet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Packet__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::Packet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Packet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__protocol__uart__Packet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Packet" "', argument " "1"" of type '" "vn::protocol::uart::Packet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Packet" "', argument " "1"" of type '" "vn::protocol::uart::Packet const &""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  result = (vn::protocol::uart::Packet *)new vn::protocol::uart::Packet((vn::protocol::uart::Packet const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__protocol__uart__Packet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Packet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Packet__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__protocol__uart__Packet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Packet__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Packet__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Packet__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Packet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::protocol::uart::Packet::Packet()\n"
    "    vn::protocol::uart::Packet::Packet(char const *,size_t)\n"
    "    vn::protocol::uart::Packet::Packet(std::string)\n"
    "    vn::protocol::uart::Packet::Packet(vn::protocol::uart::Packet const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Packet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Packet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Packet" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet___datastr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Packet___datastr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet___datastr" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  result = (arg1)->datastr();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet___type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::Packet::Type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Packet___type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet___type" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  result = (vn::protocol::uart::Packet::Type)(arg1)->type();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet___isValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Packet___isValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet___isValid" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  result = (bool)(arg1)->isValid();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet___isError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Packet___isError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet___isError" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  result = (bool)(arg1)->isError();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet___isResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Packet___isResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet___isResponse" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  result = (bool)(arg1)->isResponse();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet___isAsciiAsync(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Packet___isAsciiAsync",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet___isAsciiAsync" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  result = (bool)(arg1)->isAsciiAsync();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_determine_ascii_async_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::AsciiAsync result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Packet_determine_ascii_async_type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_determine_ascii_async_type" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  result = (vn::protocol::uart::AsciiAsync)(arg1)->determineAsciiAsyncType();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_isCompatible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  COMMONGROUP arg2 ;
  TIMEGROUP arg3 ;
  IMUGROUP arg4 ;
  GPSGROUP arg5 ;
  ATTITUDEGROUP arg6 ;
  INSGROUP arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Packet_isCompatible",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_isCompatible" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_COMMONGROUP,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_isCompatible" "', argument " "2"" of type '" "COMMONGROUP""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_isCompatible" "', argument " "2"" of type '" "COMMONGROUP""'");
    } else {
      COMMONGROUP * temp = reinterpret_cast< COMMONGROUP * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_TIMEGROUP,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_isCompatible" "', argument " "3"" of type '" "TIMEGROUP""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_isCompatible" "', argument " "3"" of type '" "TIMEGROUP""'");
    } else {
      TIMEGROUP * temp = reinterpret_cast< TIMEGROUP * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_IMUGROUP,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_isCompatible" "', argument " "4"" of type '" "IMUGROUP""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_isCompatible" "', argument " "4"" of type '" "IMUGROUP""'");
    } else {
      IMUGROUP * temp = reinterpret_cast< IMUGROUP * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_GPSGROUP,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_isCompatible" "', argument " "5"" of type '" "GPSGROUP""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_isCompatible" "', argument " "5"" of type '" "GPSGROUP""'");
    } else {
      GPSGROUP * temp = reinterpret_cast< GPSGROUP * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_ATTITUDEGROUP,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_isCompatible" "', argument " "6"" of type '" "ATTITUDEGROUP""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_isCompatible" "', argument " "6"" of type '" "ATTITUDEGROUP""'");
    } else {
      ATTITUDEGROUP * temp = reinterpret_cast< ATTITUDEGROUP * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_INSGROUP,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Packet_isCompatible" "', argument " "7"" of type '" "INSGROUP""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_isCompatible" "', argument " "7"" of type '" "INSGROUP""'");
    } else {
      INSGROUP * temp = reinterpret_cast< INSGROUP * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  result = (bool)(arg1)->isCompatible(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_computeBinaryPacketLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Packet_computeBinaryPacketLength",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_computeBinaryPacketLength" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = vn::protocol::uart::Packet::computeBinaryPacketLength((char const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_computeNumOfBytesForBinaryGroupPayload(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BINARYGROUP arg1 ;
  uint16_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Packet_computeNumOfBytesForBinaryGroupPayload",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BINARYGROUP,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_computeNumOfBytesForBinaryGroupPayload" "', argument " "1"" of type '" "BINARYGROUP""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_computeNumOfBytesForBinaryGroupPayload" "', argument " "1"" of type '" "BINARYGROUP""'");
    } else {
      BINARYGROUP * temp = reinterpret_cast< BINARYGROUP * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Packet_computeNumOfBytesForBinaryGroupPayload" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  result = vn::protocol::uart::Packet::computeNumOfBytesForBinaryGroupPayload(arg1,arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parse_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SENSORERROR result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Packet_parse_error",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parse_error" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  result = (arg1)->parseError();
  resultobj = SWIG_NewPointerObj((new SENSORERROR(static_cast< const SENSORERROR& >(result))), SWIGTYPE_p_SENSORERROR, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_groups(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Packet_groups",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_groups" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  result = (uint8_t)(arg1)->groups();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_groupField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Packet_groupField",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_groupField" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Packet_groupField" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (uint16_t)(arg1)->groupField(arg2);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_extractUint8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Packet_extractUint8",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_extractUint8" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  result = (uint8_t)(arg1)->extractUint8();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_extractInt8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Packet_extractInt8",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_extractInt8" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  result = (int8_t)(arg1)->extractInt8();
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_extractUint16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Packet_extractUint16",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_extractUint16" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  result = (uint16_t)(arg1)->extractUint16();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_extractUint32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Packet_extractUint32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_extractUint32" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  result = (uint32_t)(arg1)->extractUint32();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_extractUint64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Packet_extractUint64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_extractUint64" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  result = (uint64_t)(arg1)->extractUint64();
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_extractFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Packet_extractFloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_extractFloat" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  result = (float)(arg1)->extractFloat();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_extractVec3f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Packet_extractVec3f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_extractVec3f" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  result = (arg1)->extractVec3f();
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_extractVec3d(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Packet_extractVec3d",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_extractVec3d" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  result = (arg1)->extractVec3d();
  resultobj = SWIG_NewPointerObj((new vn::math::vec3d(static_cast< const vn::math::vec3d& >(result))), SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_extractVec4f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Packet_extractVec4f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_extractVec4f" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  result = (arg1)->extractVec4f();
  resultobj = SWIG_NewPointerObj((new vn::math::vec4f(static_cast< const vn::math::vec4f& >(result))), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_extractMat3f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::mat3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Packet_extractMat3f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_extractMat3f" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  result = (arg1)->extractMat3f();
  resultobj = SWIG_NewPointerObj((new vn::math::mat3f(static_cast< const vn::math::mat3f& >(result))), SWIGTYPE_p_vn__math__matT_3_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_finalizeCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_finalizeCommand",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_finalizeCommand" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_finalizeCommand" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_finalizeCommand" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::finalizeCommand(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadBinaryOutput1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadBinaryOutput1",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadBinaryOutput1" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadBinaryOutput1" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadBinaryOutput1" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadBinaryOutput1(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadBinaryOutput2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadBinaryOutput2",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadBinaryOutput2" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadBinaryOutput2" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadBinaryOutput2" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadBinaryOutput2(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadBinaryOutput3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadBinaryOutput3",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadBinaryOutput3" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadBinaryOutput3" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadBinaryOutput3" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadBinaryOutput3(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteBinaryOutput1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint16_t arg4 ;
  uint16_t arg5 ;
  uint16_t arg6 ;
  uint16_t arg7 ;
  uint16_t arg8 ;
  uint16_t arg9 ;
  uint16_t arg10 ;
  uint16_t arg11 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  unsigned short val6 ;
  int ecode6 = 0 ;
  unsigned short val7 ;
  int ecode7 = 0 ;
  unsigned short val8 ;
  int ecode8 = 0 ;
  unsigned short val9 ;
  int ecode9 = 0 ;
  unsigned short val10 ;
  int ecode10 = 0 ;
  unsigned short val11 ;
  int ecode11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:Packet_genWriteBinaryOutput1",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteBinaryOutput1" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteBinaryOutput1" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteBinaryOutput1" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteBinaryOutput1" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Packet_genWriteBinaryOutput1" "', argument " "5"" of type '" "uint16_t""'");
  } 
  arg5 = static_cast< uint16_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_short(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Packet_genWriteBinaryOutput1" "', argument " "6"" of type '" "uint16_t""'");
  } 
  arg6 = static_cast< uint16_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_short(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Packet_genWriteBinaryOutput1" "', argument " "7"" of type '" "uint16_t""'");
  } 
  arg7 = static_cast< uint16_t >(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_short(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Packet_genWriteBinaryOutput1" "', argument " "8"" of type '" "uint16_t""'");
  } 
  arg8 = static_cast< uint16_t >(val8);
  ecode9 = SWIG_AsVal_unsigned_SS_short(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Packet_genWriteBinaryOutput1" "', argument " "9"" of type '" "uint16_t""'");
  } 
  arg9 = static_cast< uint16_t >(val9);
  ecode10 = SWIG_AsVal_unsigned_SS_short(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "Packet_genWriteBinaryOutput1" "', argument " "10"" of type '" "uint16_t""'");
  } 
  arg10 = static_cast< uint16_t >(val10);
  ecode11 = SWIG_AsVal_unsigned_SS_short(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "Packet_genWriteBinaryOutput1" "', argument " "11"" of type '" "uint16_t""'");
  } 
  arg11 = static_cast< uint16_t >(val11);
  result = vn::protocol::uart::Packet::genWriteBinaryOutput1(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteBinaryOutput2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint16_t arg4 ;
  uint16_t arg5 ;
  uint16_t arg6 ;
  uint16_t arg7 ;
  uint16_t arg8 ;
  uint16_t arg9 ;
  uint16_t arg10 ;
  uint16_t arg11 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  unsigned short val6 ;
  int ecode6 = 0 ;
  unsigned short val7 ;
  int ecode7 = 0 ;
  unsigned short val8 ;
  int ecode8 = 0 ;
  unsigned short val9 ;
  int ecode9 = 0 ;
  unsigned short val10 ;
  int ecode10 = 0 ;
  unsigned short val11 ;
  int ecode11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:Packet_genWriteBinaryOutput2",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteBinaryOutput2" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteBinaryOutput2" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteBinaryOutput2" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteBinaryOutput2" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Packet_genWriteBinaryOutput2" "', argument " "5"" of type '" "uint16_t""'");
  } 
  arg5 = static_cast< uint16_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_short(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Packet_genWriteBinaryOutput2" "', argument " "6"" of type '" "uint16_t""'");
  } 
  arg6 = static_cast< uint16_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_short(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Packet_genWriteBinaryOutput2" "', argument " "7"" of type '" "uint16_t""'");
  } 
  arg7 = static_cast< uint16_t >(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_short(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Packet_genWriteBinaryOutput2" "', argument " "8"" of type '" "uint16_t""'");
  } 
  arg8 = static_cast< uint16_t >(val8);
  ecode9 = SWIG_AsVal_unsigned_SS_short(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Packet_genWriteBinaryOutput2" "', argument " "9"" of type '" "uint16_t""'");
  } 
  arg9 = static_cast< uint16_t >(val9);
  ecode10 = SWIG_AsVal_unsigned_SS_short(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "Packet_genWriteBinaryOutput2" "', argument " "10"" of type '" "uint16_t""'");
  } 
  arg10 = static_cast< uint16_t >(val10);
  ecode11 = SWIG_AsVal_unsigned_SS_short(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "Packet_genWriteBinaryOutput2" "', argument " "11"" of type '" "uint16_t""'");
  } 
  arg11 = static_cast< uint16_t >(val11);
  result = vn::protocol::uart::Packet::genWriteBinaryOutput2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteBinaryOutput3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint16_t arg4 ;
  uint16_t arg5 ;
  uint16_t arg6 ;
  uint16_t arg7 ;
  uint16_t arg8 ;
  uint16_t arg9 ;
  uint16_t arg10 ;
  uint16_t arg11 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  unsigned short val6 ;
  int ecode6 = 0 ;
  unsigned short val7 ;
  int ecode7 = 0 ;
  unsigned short val8 ;
  int ecode8 = 0 ;
  unsigned short val9 ;
  int ecode9 = 0 ;
  unsigned short val10 ;
  int ecode10 = 0 ;
  unsigned short val11 ;
  int ecode11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:Packet_genWriteBinaryOutput3",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteBinaryOutput3" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteBinaryOutput3" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteBinaryOutput3" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteBinaryOutput3" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Packet_genWriteBinaryOutput3" "', argument " "5"" of type '" "uint16_t""'");
  } 
  arg5 = static_cast< uint16_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_short(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Packet_genWriteBinaryOutput3" "', argument " "6"" of type '" "uint16_t""'");
  } 
  arg6 = static_cast< uint16_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_short(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Packet_genWriteBinaryOutput3" "', argument " "7"" of type '" "uint16_t""'");
  } 
  arg7 = static_cast< uint16_t >(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_short(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Packet_genWriteBinaryOutput3" "', argument " "8"" of type '" "uint16_t""'");
  } 
  arg8 = static_cast< uint16_t >(val8);
  ecode9 = SWIG_AsVal_unsigned_SS_short(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Packet_genWriteBinaryOutput3" "', argument " "9"" of type '" "uint16_t""'");
  } 
  arg9 = static_cast< uint16_t >(val9);
  ecode10 = SWIG_AsVal_unsigned_SS_short(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "Packet_genWriteBinaryOutput3" "', argument " "10"" of type '" "uint16_t""'");
  } 
  arg10 = static_cast< uint16_t >(val10);
  ecode11 = SWIG_AsVal_unsigned_SS_short(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "Packet_genWriteBinaryOutput3" "', argument " "11"" of type '" "uint16_t""'");
  } 
  arg11 = static_cast< uint16_t >(val11);
  result = vn::protocol::uart::Packet::genWriteBinaryOutput3(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteSettings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genWriteSettings",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteSettings" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteSettings" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteSettings" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genWriteSettings(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genTare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genTare",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genTare" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genTare" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genTare" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genTare(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genKnownMagneticDisturbance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_genKnownMagneticDisturbance",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genKnownMagneticDisturbance" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genKnownMagneticDisturbance" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genKnownMagneticDisturbance" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genKnownMagneticDisturbance" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = vn::protocol::uart::Packet::genKnownMagneticDisturbance(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genKnownAccelerationDisturbance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_genKnownAccelerationDisturbance",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genKnownAccelerationDisturbance" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genKnownAccelerationDisturbance" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genKnownAccelerationDisturbance" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genKnownAccelerationDisturbance" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = vn::protocol::uart::Packet::genKnownAccelerationDisturbance(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genSetGyroBias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genSetGyroBias",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genSetGyroBias" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genSetGyroBias" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genSetGyroBias" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genSetGyroBias(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genRestoreFactorySettings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genRestoreFactorySettings",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genRestoreFactorySettings" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genRestoreFactorySettings" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genRestoreFactorySettings" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genRestoreFactorySettings(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReset",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReset" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReset" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReset" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReset(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadSerialBaudRate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint8_t arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_genReadSerialBaudRate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadSerialBaudRate" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadSerialBaudRate" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadSerialBaudRate" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genReadSerialBaudRate" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = static_cast< uint8_t >(val4);
  result = vn::protocol::uart::Packet::genReadSerialBaudRate(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteSerialBaudRate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint32_t arg4 ;
  uint8_t arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Packet_genWriteSerialBaudRate",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteSerialBaudRate" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteSerialBaudRate" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteSerialBaudRate" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteSerialBaudRate" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Packet_genWriteSerialBaudRate" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  result = vn::protocol::uart::Packet::genWriteSerialBaudRate(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadAsyncDataOutputType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint8_t arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_genReadAsyncDataOutputType",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadAsyncDataOutputType" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadAsyncDataOutputType" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadAsyncDataOutputType" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genReadAsyncDataOutputType" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = static_cast< uint8_t >(val4);
  result = vn::protocol::uart::Packet::genReadAsyncDataOutputType(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteAsyncDataOutputType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint32_t arg4 ;
  uint8_t arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Packet_genWriteAsyncDataOutputType",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteAsyncDataOutputType" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteAsyncDataOutputType" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteAsyncDataOutputType" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteAsyncDataOutputType" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Packet_genWriteAsyncDataOutputType" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  result = vn::protocol::uart::Packet::genWriteAsyncDataOutputType(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadAsyncDataOutputFrequency__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint8_t arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_genReadAsyncDataOutputFrequency",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadAsyncDataOutputFrequency" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadAsyncDataOutputFrequency" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadAsyncDataOutputFrequency" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genReadAsyncDataOutputFrequency" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = static_cast< uint8_t >(val4);
  result = vn::protocol::uart::Packet::genReadAsyncDataOutputFrequency(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteAsyncDataOutputFrequency__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint32_t arg4 ;
  uint8_t arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Packet_genWriteAsyncDataOutputFrequency",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteAsyncDataOutputFrequency" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteAsyncDataOutputFrequency" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteAsyncDataOutputFrequency" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteAsyncDataOutputFrequency" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Packet_genWriteAsyncDataOutputFrequency" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  result = vn::protocol::uart::Packet::genWriteAsyncDataOutputFrequency(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadUserTag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadUserTag",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadUserTag" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadUserTag" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadUserTag" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadUserTag(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteUserTag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  std::string arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_genWriteUserTag",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteUserTag" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteUserTag" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteUserTag" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Packet_genWriteUserTag" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = vn::protocol::uart::Packet::genWriteUserTag(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadModelNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadModelNumber",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadModelNumber" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadModelNumber" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadModelNumber" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadModelNumber(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadHardwareRevision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadHardwareRevision",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadHardwareRevision" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadHardwareRevision" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadHardwareRevision" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadHardwareRevision(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadSerialNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadSerialNumber",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadSerialNumber" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadSerialNumber" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadSerialNumber" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadSerialNumber(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadFirmwareVersion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadFirmwareVersion",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadFirmwareVersion" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadFirmwareVersion" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadFirmwareVersion" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadFirmwareVersion(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadSerialBaudRate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadSerialBaudRate",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadSerialBaudRate" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadSerialBaudRate" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadSerialBaudRate" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadSerialBaudRate(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadSerialBaudRate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Packet_genReadSerialBaudRate__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Packet_genReadSerialBaudRate__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Packet_genReadSerialBaudRate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::protocol::uart::Packet::genReadSerialBaudRate(vn::protocol::uart::ErrorDetectionMode,char *,size_t,uint8_t)\n"
    "    vn::protocol::uart::Packet::genReadSerialBaudRate(vn::protocol::uart::ErrorDetectionMode,char *,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteSerialBaudRate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint32_t arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_genWriteSerialBaudRate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteSerialBaudRate" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteSerialBaudRate" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteSerialBaudRate" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteSerialBaudRate" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  result = vn::protocol::uart::Packet::genWriteSerialBaudRate(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteSerialBaudRate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Packet_genWriteSerialBaudRate__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Packet_genWriteSerialBaudRate__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Packet_genWriteSerialBaudRate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::protocol::uart::Packet::genWriteSerialBaudRate(vn::protocol::uart::ErrorDetectionMode,char *,size_t,uint32_t,uint8_t)\n"
    "    vn::protocol::uart::Packet::genWriteSerialBaudRate(vn::protocol::uart::ErrorDetectionMode,char *,size_t,uint32_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Packet_genReadAsyncDataOutputType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadAsyncDataOutputType",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadAsyncDataOutputType" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadAsyncDataOutputType" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadAsyncDataOutputType" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadAsyncDataOutputType(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadAsyncDataOutputType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Packet_genReadAsyncDataOutputType__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Packet_genReadAsyncDataOutputType__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Packet_genReadAsyncDataOutputType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::protocol::uart::Packet::genReadAsyncDataOutputType(vn::protocol::uart::ErrorDetectionMode,char *,size_t,uint8_t)\n"
    "    vn::protocol::uart::Packet::genReadAsyncDataOutputType(vn::protocol::uart::ErrorDetectionMode,char *,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteAsyncDataOutputType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint32_t arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_genWriteAsyncDataOutputType",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteAsyncDataOutputType" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteAsyncDataOutputType" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteAsyncDataOutputType" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteAsyncDataOutputType" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  result = vn::protocol::uart::Packet::genWriteAsyncDataOutputType(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteAsyncDataOutputType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Packet_genWriteAsyncDataOutputType__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Packet_genWriteAsyncDataOutputType__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Packet_genWriteAsyncDataOutputType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::protocol::uart::Packet::genWriteAsyncDataOutputType(vn::protocol::uart::ErrorDetectionMode,char *,size_t,uint32_t,uint8_t)\n"
    "    vn::protocol::uart::Packet::genWriteAsyncDataOutputType(vn::protocol::uart::ErrorDetectionMode,char *,size_t,uint32_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Packet_genReadAsyncDataOutputFrequency__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadAsyncDataOutputFrequency",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadAsyncDataOutputFrequency" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadAsyncDataOutputFrequency" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadAsyncDataOutputFrequency" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadAsyncDataOutputFrequency(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadAsyncDataOutputFrequency(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Packet_genReadAsyncDataOutputFrequency__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Packet_genReadAsyncDataOutputFrequency__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Packet_genReadAsyncDataOutputFrequency'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::protocol::uart::Packet::genReadAsyncDataOutputFrequency(vn::protocol::uart::ErrorDetectionMode,char *,size_t,uint8_t)\n"
    "    vn::protocol::uart::Packet::genReadAsyncDataOutputFrequency(vn::protocol::uart::ErrorDetectionMode,char *,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteAsyncDataOutputFrequency__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint32_t arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_genWriteAsyncDataOutputFrequency",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteAsyncDataOutputFrequency" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteAsyncDataOutputFrequency" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteAsyncDataOutputFrequency" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteAsyncDataOutputFrequency" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  result = vn::protocol::uart::Packet::genWriteAsyncDataOutputFrequency(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteAsyncDataOutputFrequency(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Packet_genWriteAsyncDataOutputFrequency__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Packet_genWriteAsyncDataOutputFrequency__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Packet_genWriteAsyncDataOutputFrequency'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::protocol::uart::Packet::genWriteAsyncDataOutputFrequency(vn::protocol::uart::ErrorDetectionMode,char *,size_t,uint32_t,uint8_t)\n"
    "    vn::protocol::uart::Packet::genWriteAsyncDataOutputFrequency(vn::protocol::uart::ErrorDetectionMode,char *,size_t,uint32_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Packet_genReadYawPitchRoll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadYawPitchRoll",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadYawPitchRoll" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadYawPitchRoll" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadYawPitchRoll" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadYawPitchRoll(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadAttitudeQuaternion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadAttitudeQuaternion",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadAttitudeQuaternion" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadAttitudeQuaternion" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadAttitudeQuaternion" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadAttitudeQuaternion(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadQuaternionMagneticAccelerationAndAngularRates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadQuaternionMagneticAccelerationAndAngularRates",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadQuaternionMagneticAccelerationAndAngularRates" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadQuaternionMagneticAccelerationAndAngularRates" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadQuaternionMagneticAccelerationAndAngularRates" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadQuaternionMagneticAccelerationAndAngularRates(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadMagneticMeasurements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadMagneticMeasurements",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadMagneticMeasurements" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadMagneticMeasurements" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadMagneticMeasurements" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadMagneticMeasurements(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadAccelerationMeasurements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadAccelerationMeasurements",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadAccelerationMeasurements" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadAccelerationMeasurements" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadAccelerationMeasurements" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadAccelerationMeasurements(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadAngularRateMeasurements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadAngularRateMeasurements",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadAngularRateMeasurements" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadAngularRateMeasurements" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadAngularRateMeasurements" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadAngularRateMeasurements(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadMagneticAccelerationAndAngularRates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadMagneticAccelerationAndAngularRates",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadMagneticAccelerationAndAngularRates" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadMagneticAccelerationAndAngularRates" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadMagneticAccelerationAndAngularRates" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadMagneticAccelerationAndAngularRates(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadMagneticAndGravityReferenceVectors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadMagneticAndGravityReferenceVectors",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadMagneticAndGravityReferenceVectors" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadMagneticAndGravityReferenceVectors" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadMagneticAndGravityReferenceVectors" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadMagneticAndGravityReferenceVectors(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteMagneticAndGravityReferenceVectors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  vn::math::vec3f arg4 ;
  vn::math::vec3f arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Packet_genWriteMagneticAndGravityReferenceVectors",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteMagneticAndGravityReferenceVectors" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteMagneticAndGravityReferenceVectors" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteMagneticAndGravityReferenceVectors" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_genWriteMagneticAndGravityReferenceVectors" "', argument " "4"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteMagneticAndGravityReferenceVectors" "', argument " "4"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_genWriteMagneticAndGravityReferenceVectors" "', argument " "5"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteMagneticAndGravityReferenceVectors" "', argument " "5"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = vn::protocol::uart::Packet::genWriteMagneticAndGravityReferenceVectors(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadFilterMeasurementsVarianceParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadFilterMeasurementsVarianceParameters",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadFilterMeasurementsVarianceParameters" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadFilterMeasurementsVarianceParameters" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadFilterMeasurementsVarianceParameters" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadFilterMeasurementsVarianceParameters(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteFilterMeasurementsVarianceParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  float arg4 ;
  vn::math::vec3f arg5 ;
  vn::math::vec3f arg6 ;
  vn::math::vec3f arg7 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Packet_genWriteFilterMeasurementsVarianceParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteFilterMeasurementsVarianceParameters" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteFilterMeasurementsVarianceParameters" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteFilterMeasurementsVarianceParameters" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteFilterMeasurementsVarianceParameters" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_genWriteFilterMeasurementsVarianceParameters" "', argument " "5"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteFilterMeasurementsVarianceParameters" "', argument " "5"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_genWriteFilterMeasurementsVarianceParameters" "', argument " "6"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteFilterMeasurementsVarianceParameters" "', argument " "6"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Packet_genWriteFilterMeasurementsVarianceParameters" "', argument " "7"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteFilterMeasurementsVarianceParameters" "', argument " "7"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  result = vn::protocol::uart::Packet::genWriteFilterMeasurementsVarianceParameters(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadMagnetometerCompensation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadMagnetometerCompensation",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadMagnetometerCompensation" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadMagnetometerCompensation" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadMagnetometerCompensation" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadMagnetometerCompensation(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteMagnetometerCompensation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  vn::math::mat3f arg4 ;
  vn::math::vec3f arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Packet_genWriteMagnetometerCompensation",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteMagnetometerCompensation" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteMagnetometerCompensation" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteMagnetometerCompensation" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__matT_3_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_genWriteMagnetometerCompensation" "', argument " "4"" of type '" "vn::math::mat3f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteMagnetometerCompensation" "', argument " "4"" of type '" "vn::math::mat3f""'");
    } else {
      vn::math::mat3f * temp = reinterpret_cast< vn::math::mat3f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_genWriteMagnetometerCompensation" "', argument " "5"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteMagnetometerCompensation" "', argument " "5"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = vn::protocol::uart::Packet::genWriteMagnetometerCompensation(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadFilterActiveTuningParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadFilterActiveTuningParameters",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadFilterActiveTuningParameters" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadFilterActiveTuningParameters" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadFilterActiveTuningParameters" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadFilterActiveTuningParameters(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteFilterActiveTuningParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Packet_genWriteFilterActiveTuningParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteFilterActiveTuningParameters" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteFilterActiveTuningParameters" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteFilterActiveTuningParameters" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteFilterActiveTuningParameters" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Packet_genWriteFilterActiveTuningParameters" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Packet_genWriteFilterActiveTuningParameters" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_float(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Packet_genWriteFilterActiveTuningParameters" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  result = vn::protocol::uart::Packet::genWriteFilterActiveTuningParameters(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadAccelerationCompensation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadAccelerationCompensation",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadAccelerationCompensation" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadAccelerationCompensation" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadAccelerationCompensation" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadAccelerationCompensation(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteAccelerationCompensation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  vn::math::mat3f arg4 ;
  vn::math::vec3f arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Packet_genWriteAccelerationCompensation",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteAccelerationCompensation" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteAccelerationCompensation" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteAccelerationCompensation" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__matT_3_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_genWriteAccelerationCompensation" "', argument " "4"" of type '" "vn::math::mat3f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteAccelerationCompensation" "', argument " "4"" of type '" "vn::math::mat3f""'");
    } else {
      vn::math::mat3f * temp = reinterpret_cast< vn::math::mat3f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_genWriteAccelerationCompensation" "', argument " "5"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteAccelerationCompensation" "', argument " "5"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = vn::protocol::uart::Packet::genWriteAccelerationCompensation(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadReferenceFrameRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadReferenceFrameRotation",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadReferenceFrameRotation" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadReferenceFrameRotation" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadReferenceFrameRotation" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadReferenceFrameRotation(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteReferenceFrameRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  vn::math::mat3f arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_genWriteReferenceFrameRotation",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteReferenceFrameRotation" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteReferenceFrameRotation" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteReferenceFrameRotation" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__matT_3_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_genWriteReferenceFrameRotation" "', argument " "4"" of type '" "vn::math::mat3f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteReferenceFrameRotation" "', argument " "4"" of type '" "vn::math::mat3f""'");
    } else {
      vn::math::mat3f * temp = reinterpret_cast< vn::math::mat3f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = vn::protocol::uart::Packet::genWriteReferenceFrameRotation(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadYawPitchRollMagneticAccelerationAndAngularRates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadYawPitchRollMagneticAccelerationAndAngularRates",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadYawPitchRollMagneticAccelerationAndAngularRates" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadYawPitchRollMagneticAccelerationAndAngularRates" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadYawPitchRollMagneticAccelerationAndAngularRates" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadYawPitchRollMagneticAccelerationAndAngularRates(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadCommunicationProtocolControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadCommunicationProtocolControl",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadCommunicationProtocolControl" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadCommunicationProtocolControl" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadCommunicationProtocolControl" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadCommunicationProtocolControl(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteCommunicationProtocolControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  uint8_t arg6 ;
  uint8_t arg7 ;
  uint8_t arg8 ;
  uint8_t arg9 ;
  uint8_t arg10 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  unsigned char val7 ;
  int ecode7 = 0 ;
  unsigned char val8 ;
  int ecode8 = 0 ;
  unsigned char val9 ;
  int ecode9 = 0 ;
  unsigned char val10 ;
  int ecode10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:Packet_genWriteCommunicationProtocolControl",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteCommunicationProtocolControl" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteCommunicationProtocolControl" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteCommunicationProtocolControl" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteCommunicationProtocolControl" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = static_cast< uint8_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Packet_genWriteCommunicationProtocolControl" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Packet_genWriteCommunicationProtocolControl" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Packet_genWriteCommunicationProtocolControl" "', argument " "7"" of type '" "uint8_t""'");
  } 
  arg7 = static_cast< uint8_t >(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_char(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Packet_genWriteCommunicationProtocolControl" "', argument " "8"" of type '" "uint8_t""'");
  } 
  arg8 = static_cast< uint8_t >(val8);
  ecode9 = SWIG_AsVal_unsigned_SS_char(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Packet_genWriteCommunicationProtocolControl" "', argument " "9"" of type '" "uint8_t""'");
  } 
  arg9 = static_cast< uint8_t >(val9);
  ecode10 = SWIG_AsVal_unsigned_SS_char(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "Packet_genWriteCommunicationProtocolControl" "', argument " "10"" of type '" "uint8_t""'");
  } 
  arg10 = static_cast< uint8_t >(val10);
  result = vn::protocol::uart::Packet::genWriteCommunicationProtocolControl(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadSynchronizationControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadSynchronizationControl",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadSynchronizationControl" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadSynchronizationControl" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadSynchronizationControl" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadSynchronizationControl(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteSynchronizationControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  uint16_t arg6 ;
  uint8_t arg7 ;
  uint8_t arg8 ;
  uint16_t arg9 ;
  uint32_t arg10 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned short val6 ;
  int ecode6 = 0 ;
  unsigned char val7 ;
  int ecode7 = 0 ;
  unsigned char val8 ;
  int ecode8 = 0 ;
  unsigned short val9 ;
  int ecode9 = 0 ;
  unsigned int val10 ;
  int ecode10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:Packet_genWriteSynchronizationControl",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteSynchronizationControl" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteSynchronizationControl" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteSynchronizationControl" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteSynchronizationControl" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = static_cast< uint8_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Packet_genWriteSynchronizationControl" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_short(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Packet_genWriteSynchronizationControl" "', argument " "6"" of type '" "uint16_t""'");
  } 
  arg6 = static_cast< uint16_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Packet_genWriteSynchronizationControl" "', argument " "7"" of type '" "uint8_t""'");
  } 
  arg7 = static_cast< uint8_t >(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_char(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Packet_genWriteSynchronizationControl" "', argument " "8"" of type '" "uint8_t""'");
  } 
  arg8 = static_cast< uint8_t >(val8);
  ecode9 = SWIG_AsVal_unsigned_SS_short(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Packet_genWriteSynchronizationControl" "', argument " "9"" of type '" "uint16_t""'");
  } 
  arg9 = static_cast< uint16_t >(val9);
  ecode10 = SWIG_AsVal_unsigned_SS_int(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "Packet_genWriteSynchronizationControl" "', argument " "10"" of type '" "uint32_t""'");
  } 
  arg10 = static_cast< uint32_t >(val10);
  result = vn::protocol::uart::Packet::genWriteSynchronizationControl(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadSynchronizationStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadSynchronizationStatus",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadSynchronizationStatus" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadSynchronizationStatus" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadSynchronizationStatus" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadSynchronizationStatus(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteSynchronizationStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint32_t arg4 ;
  uint32_t arg5 ;
  uint32_t arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Packet_genWriteSynchronizationStatus",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteSynchronizationStatus" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteSynchronizationStatus" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteSynchronizationStatus" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteSynchronizationStatus" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Packet_genWriteSynchronizationStatus" "', argument " "5"" of type '" "uint32_t""'");
  } 
  arg5 = static_cast< uint32_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Packet_genWriteSynchronizationStatus" "', argument " "6"" of type '" "uint32_t""'");
  } 
  arg6 = static_cast< uint32_t >(val6);
  result = vn::protocol::uart::Packet::genWriteSynchronizationStatus(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadFilterBasicControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadFilterBasicControl",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadFilterBasicControl" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadFilterBasicControl" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadFilterBasicControl" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadFilterBasicControl(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteFilterBasicControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  uint8_t arg6 ;
  uint8_t arg7 ;
  vn::math::vec3f arg8 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  unsigned char val7 ;
  int ecode7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Packet_genWriteFilterBasicControl",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteFilterBasicControl" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteFilterBasicControl" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteFilterBasicControl" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteFilterBasicControl" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = static_cast< uint8_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Packet_genWriteFilterBasicControl" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Packet_genWriteFilterBasicControl" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Packet_genWriteFilterBasicControl" "', argument " "7"" of type '" "uint8_t""'");
  } 
  arg7 = static_cast< uint8_t >(val7);
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Packet_genWriteFilterBasicControl" "', argument " "8"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteFilterBasicControl" "', argument " "8"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  result = vn::protocol::uart::Packet::genWriteFilterBasicControl(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadVpeBasicControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadVpeBasicControl",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadVpeBasicControl" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadVpeBasicControl" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadVpeBasicControl" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadVpeBasicControl(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteVpeBasicControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  uint8_t arg6 ;
  uint8_t arg7 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  unsigned char val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Packet_genWriteVpeBasicControl",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteVpeBasicControl" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteVpeBasicControl" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteVpeBasicControl" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteVpeBasicControl" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = static_cast< uint8_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Packet_genWriteVpeBasicControl" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Packet_genWriteVpeBasicControl" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Packet_genWriteVpeBasicControl" "', argument " "7"" of type '" "uint8_t""'");
  } 
  arg7 = static_cast< uint8_t >(val7);
  result = vn::protocol::uart::Packet::genWriteVpeBasicControl(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadVpeMagnetometerBasicTuning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadVpeMagnetometerBasicTuning",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadVpeMagnetometerBasicTuning" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadVpeMagnetometerBasicTuning" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadVpeMagnetometerBasicTuning" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadVpeMagnetometerBasicTuning(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteVpeMagnetometerBasicTuning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  vn::math::vec3f arg4 ;
  vn::math::vec3f arg5 ;
  vn::math::vec3f arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Packet_genWriteVpeMagnetometerBasicTuning",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteVpeMagnetometerBasicTuning" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteVpeMagnetometerBasicTuning" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteVpeMagnetometerBasicTuning" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_genWriteVpeMagnetometerBasicTuning" "', argument " "4"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteVpeMagnetometerBasicTuning" "', argument " "4"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_genWriteVpeMagnetometerBasicTuning" "', argument " "5"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteVpeMagnetometerBasicTuning" "', argument " "5"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_genWriteVpeMagnetometerBasicTuning" "', argument " "6"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteVpeMagnetometerBasicTuning" "', argument " "6"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  result = vn::protocol::uart::Packet::genWriteVpeMagnetometerBasicTuning(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadVpeMagnetometerAdvancedTuning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadVpeMagnetometerAdvancedTuning",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadVpeMagnetometerAdvancedTuning" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadVpeMagnetometerAdvancedTuning" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadVpeMagnetometerAdvancedTuning" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadVpeMagnetometerAdvancedTuning(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteVpeMagnetometerAdvancedTuning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  vn::math::vec3f arg4 ;
  vn::math::vec3f arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Packet_genWriteVpeMagnetometerAdvancedTuning",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteVpeMagnetometerAdvancedTuning" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteVpeMagnetometerAdvancedTuning" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteVpeMagnetometerAdvancedTuning" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_genWriteVpeMagnetometerAdvancedTuning" "', argument " "4"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteVpeMagnetometerAdvancedTuning" "', argument " "4"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_genWriteVpeMagnetometerAdvancedTuning" "', argument " "5"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteVpeMagnetometerAdvancedTuning" "', argument " "5"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Packet_genWriteVpeMagnetometerAdvancedTuning" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_float(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Packet_genWriteVpeMagnetometerAdvancedTuning" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  ecode8 = SWIG_AsVal_float(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Packet_genWriteVpeMagnetometerAdvancedTuning" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = static_cast< float >(val8);
  result = vn::protocol::uart::Packet::genWriteVpeMagnetometerAdvancedTuning(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadVpeAccelerometerBasicTuning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadVpeAccelerometerBasicTuning",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadVpeAccelerometerBasicTuning" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadVpeAccelerometerBasicTuning" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadVpeAccelerometerBasicTuning" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadVpeAccelerometerBasicTuning(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteVpeAccelerometerBasicTuning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  vn::math::vec3f arg4 ;
  vn::math::vec3f arg5 ;
  vn::math::vec3f arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Packet_genWriteVpeAccelerometerBasicTuning",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteVpeAccelerometerBasicTuning" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteVpeAccelerometerBasicTuning" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteVpeAccelerometerBasicTuning" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_genWriteVpeAccelerometerBasicTuning" "', argument " "4"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteVpeAccelerometerBasicTuning" "', argument " "4"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_genWriteVpeAccelerometerBasicTuning" "', argument " "5"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteVpeAccelerometerBasicTuning" "', argument " "5"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_genWriteVpeAccelerometerBasicTuning" "', argument " "6"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteVpeAccelerometerBasicTuning" "', argument " "6"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  result = vn::protocol::uart::Packet::genWriteVpeAccelerometerBasicTuning(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadVpeAccelerometerAdvancedTuning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadVpeAccelerometerAdvancedTuning",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadVpeAccelerometerAdvancedTuning" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadVpeAccelerometerAdvancedTuning" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadVpeAccelerometerAdvancedTuning" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadVpeAccelerometerAdvancedTuning(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteVpeAccelerometerAdvancedTuning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  vn::math::vec3f arg4 ;
  vn::math::vec3f arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Packet_genWriteVpeAccelerometerAdvancedTuning",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteVpeAccelerometerAdvancedTuning" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteVpeAccelerometerAdvancedTuning" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteVpeAccelerometerAdvancedTuning" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_genWriteVpeAccelerometerAdvancedTuning" "', argument " "4"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteVpeAccelerometerAdvancedTuning" "', argument " "4"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_genWriteVpeAccelerometerAdvancedTuning" "', argument " "5"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteVpeAccelerometerAdvancedTuning" "', argument " "5"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Packet_genWriteVpeAccelerometerAdvancedTuning" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_float(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Packet_genWriteVpeAccelerometerAdvancedTuning" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  ecode8 = SWIG_AsVal_float(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Packet_genWriteVpeAccelerometerAdvancedTuning" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = static_cast< float >(val8);
  result = vn::protocol::uart::Packet::genWriteVpeAccelerometerAdvancedTuning(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadVpeGyroBasicTuning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadVpeGyroBasicTuning",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadVpeGyroBasicTuning" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadVpeGyroBasicTuning" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadVpeGyroBasicTuning" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadVpeGyroBasicTuning(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteVpeGyroBasicTuning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  vn::math::vec3f arg4 ;
  vn::math::vec3f arg5 ;
  vn::math::vec3f arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Packet_genWriteVpeGyroBasicTuning",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteVpeGyroBasicTuning" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteVpeGyroBasicTuning" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteVpeGyroBasicTuning" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_genWriteVpeGyroBasicTuning" "', argument " "4"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteVpeGyroBasicTuning" "', argument " "4"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_genWriteVpeGyroBasicTuning" "', argument " "5"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteVpeGyroBasicTuning" "', argument " "5"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_genWriteVpeGyroBasicTuning" "', argument " "6"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteVpeGyroBasicTuning" "', argument " "6"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  result = vn::protocol::uart::Packet::genWriteVpeGyroBasicTuning(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadFilterStartupGyroBias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadFilterStartupGyroBias",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadFilterStartupGyroBias" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadFilterStartupGyroBias" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadFilterStartupGyroBias" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadFilterStartupGyroBias(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteFilterStartupGyroBias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  vn::math::vec3f arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_genWriteFilterStartupGyroBias",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteFilterStartupGyroBias" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteFilterStartupGyroBias" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteFilterStartupGyroBias" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_genWriteFilterStartupGyroBias" "', argument " "4"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteFilterStartupGyroBias" "', argument " "4"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = vn::protocol::uart::Packet::genWriteFilterStartupGyroBias(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadMagnetometerCalibrationControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadMagnetometerCalibrationControl",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadMagnetometerCalibrationControl" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadMagnetometerCalibrationControl" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadMagnetometerCalibrationControl" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadMagnetometerCalibrationControl(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteMagnetometerCalibrationControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  uint8_t arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Packet_genWriteMagnetometerCalibrationControl",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteMagnetometerCalibrationControl" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteMagnetometerCalibrationControl" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteMagnetometerCalibrationControl" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteMagnetometerCalibrationControl" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = static_cast< uint8_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Packet_genWriteMagnetometerCalibrationControl" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Packet_genWriteMagnetometerCalibrationControl" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  result = vn::protocol::uart::Packet::genWriteMagnetometerCalibrationControl(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadCalculatedMagnetometerCalibration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadCalculatedMagnetometerCalibration",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadCalculatedMagnetometerCalibration" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadCalculatedMagnetometerCalibration" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadCalculatedMagnetometerCalibration" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadCalculatedMagnetometerCalibration(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadIndoorHeadingModeControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadIndoorHeadingModeControl",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadIndoorHeadingModeControl" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadIndoorHeadingModeControl" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadIndoorHeadingModeControl" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadIndoorHeadingModeControl(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteIndoorHeadingModeControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  float arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_genWriteIndoorHeadingModeControl",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteIndoorHeadingModeControl" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteIndoorHeadingModeControl" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteIndoorHeadingModeControl" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteIndoorHeadingModeControl" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = vn::protocol::uart::Packet::genWriteIndoorHeadingModeControl(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadVelocityCompensationMeasurement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadVelocityCompensationMeasurement",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadVelocityCompensationMeasurement" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadVelocityCompensationMeasurement" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadVelocityCompensationMeasurement" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadVelocityCompensationMeasurement(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteVelocityCompensationMeasurement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  vn::math::vec3f arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_genWriteVelocityCompensationMeasurement",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteVelocityCompensationMeasurement" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteVelocityCompensationMeasurement" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteVelocityCompensationMeasurement" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_genWriteVelocityCompensationMeasurement" "', argument " "4"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteVelocityCompensationMeasurement" "', argument " "4"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = vn::protocol::uart::Packet::genWriteVelocityCompensationMeasurement(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadVelocityCompensationControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadVelocityCompensationControl",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadVelocityCompensationControl" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadVelocityCompensationControl" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadVelocityCompensationControl" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadVelocityCompensationControl(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteVelocityCompensationControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint8_t arg4 ;
  float arg5 ;
  float arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Packet_genWriteVelocityCompensationControl",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteVelocityCompensationControl" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteVelocityCompensationControl" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteVelocityCompensationControl" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteVelocityCompensationControl" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = static_cast< uint8_t >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Packet_genWriteVelocityCompensationControl" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Packet_genWriteVelocityCompensationControl" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  result = vn::protocol::uart::Packet::genWriteVelocityCompensationControl(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadVelocityCompensationStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadVelocityCompensationStatus",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadVelocityCompensationStatus" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadVelocityCompensationStatus" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadVelocityCompensationStatus" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadVelocityCompensationStatus(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadImuMeasurements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadImuMeasurements",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadImuMeasurements" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadImuMeasurements" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadImuMeasurements" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadImuMeasurements(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadGpsConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadGpsConfiguration",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadGpsConfiguration" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadGpsConfiguration" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadGpsConfiguration" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadGpsConfiguration(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteGpsConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Packet_genWriteGpsConfiguration",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteGpsConfiguration" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteGpsConfiguration" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteGpsConfiguration" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteGpsConfiguration" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = static_cast< uint8_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Packet_genWriteGpsConfiguration" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  result = vn::protocol::uart::Packet::genWriteGpsConfiguration(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadGpsAntennaOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadGpsAntennaOffset",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadGpsAntennaOffset" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadGpsAntennaOffset" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadGpsAntennaOffset" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadGpsAntennaOffset(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteGpsAntennaOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  vn::math::vec3f arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_genWriteGpsAntennaOffset",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteGpsAntennaOffset" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteGpsAntennaOffset" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteGpsAntennaOffset" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_genWriteGpsAntennaOffset" "', argument " "4"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteGpsAntennaOffset" "', argument " "4"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = vn::protocol::uart::Packet::genWriteGpsAntennaOffset(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadGpsSolutionLla(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadGpsSolutionLla",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadGpsSolutionLla" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadGpsSolutionLla" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadGpsSolutionLla" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadGpsSolutionLla(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadGpsSolutionEcef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadGpsSolutionEcef",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadGpsSolutionEcef" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadGpsSolutionEcef" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadGpsSolutionEcef" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadGpsSolutionEcef(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadInsSolutionLla(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadInsSolutionLla",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadInsSolutionLla" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadInsSolutionLla" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadInsSolutionLla" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadInsSolutionLla(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadInsSolutionEcef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadInsSolutionEcef",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadInsSolutionEcef" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadInsSolutionEcef" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadInsSolutionEcef" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadInsSolutionEcef(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadInsBasicConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadInsBasicConfiguration",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadInsBasicConfiguration" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadInsBasicConfiguration" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadInsBasicConfiguration" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadInsBasicConfiguration(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteInsBasicConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  uint8_t arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Packet_genWriteInsBasicConfiguration",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteInsBasicConfiguration" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteInsBasicConfiguration" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteInsBasicConfiguration" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteInsBasicConfiguration" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = static_cast< uint8_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Packet_genWriteInsBasicConfiguration" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Packet_genWriteInsBasicConfiguration" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  result = vn::protocol::uart::Packet::genWriteInsBasicConfiguration(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadInsAdvancedConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadInsAdvancedConfiguration",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadInsAdvancedConfiguration" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadInsAdvancedConfiguration" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadInsAdvancedConfiguration" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadInsAdvancedConfiguration(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteInsAdvancedConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  uint8_t arg6 ;
  uint8_t arg7 ;
  uint8_t arg8 ;
  uint8_t arg9 ;
  uint8_t arg10 ;
  uint8_t arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  float arg17 ;
  float arg18 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  unsigned char val7 ;
  int ecode7 = 0 ;
  unsigned char val8 ;
  int ecode8 = 0 ;
  unsigned char val9 ;
  int ecode9 = 0 ;
  unsigned char val10 ;
  int ecode10 = 0 ;
  unsigned char val11 ;
  int ecode11 = 0 ;
  float val12 ;
  int ecode12 = 0 ;
  float val13 ;
  int ecode13 = 0 ;
  float val14 ;
  int ecode14 = 0 ;
  float val15 ;
  int ecode15 = 0 ;
  float val16 ;
  int ecode16 = 0 ;
  float val17 ;
  int ecode17 = 0 ;
  float val18 ;
  int ecode18 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  PyObject * obj14 = 0 ;
  PyObject * obj15 = 0 ;
  PyObject * obj16 = 0 ;
  PyObject * obj17 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOOOO:Packet_genWriteInsAdvancedConfiguration",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15,&obj16,&obj17)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteInsAdvancedConfiguration" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteInsAdvancedConfiguration" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteInsAdvancedConfiguration" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteInsAdvancedConfiguration" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = static_cast< uint8_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Packet_genWriteInsAdvancedConfiguration" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Packet_genWriteInsAdvancedConfiguration" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Packet_genWriteInsAdvancedConfiguration" "', argument " "7"" of type '" "uint8_t""'");
  } 
  arg7 = static_cast< uint8_t >(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_char(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Packet_genWriteInsAdvancedConfiguration" "', argument " "8"" of type '" "uint8_t""'");
  } 
  arg8 = static_cast< uint8_t >(val8);
  ecode9 = SWIG_AsVal_unsigned_SS_char(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Packet_genWriteInsAdvancedConfiguration" "', argument " "9"" of type '" "uint8_t""'");
  } 
  arg9 = static_cast< uint8_t >(val9);
  ecode10 = SWIG_AsVal_unsigned_SS_char(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "Packet_genWriteInsAdvancedConfiguration" "', argument " "10"" of type '" "uint8_t""'");
  } 
  arg10 = static_cast< uint8_t >(val10);
  ecode11 = SWIG_AsVal_unsigned_SS_char(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "Packet_genWriteInsAdvancedConfiguration" "', argument " "11"" of type '" "uint8_t""'");
  } 
  arg11 = static_cast< uint8_t >(val11);
  ecode12 = SWIG_AsVal_float(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "Packet_genWriteInsAdvancedConfiguration" "', argument " "12"" of type '" "float""'");
  } 
  arg12 = static_cast< float >(val12);
  ecode13 = SWIG_AsVal_float(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "Packet_genWriteInsAdvancedConfiguration" "', argument " "13"" of type '" "float""'");
  } 
  arg13 = static_cast< float >(val13);
  ecode14 = SWIG_AsVal_float(obj13, &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "Packet_genWriteInsAdvancedConfiguration" "', argument " "14"" of type '" "float""'");
  } 
  arg14 = static_cast< float >(val14);
  ecode15 = SWIG_AsVal_float(obj14, &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "Packet_genWriteInsAdvancedConfiguration" "', argument " "15"" of type '" "float""'");
  } 
  arg15 = static_cast< float >(val15);
  ecode16 = SWIG_AsVal_float(obj15, &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "Packet_genWriteInsAdvancedConfiguration" "', argument " "16"" of type '" "float""'");
  } 
  arg16 = static_cast< float >(val16);
  ecode17 = SWIG_AsVal_float(obj16, &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "Packet_genWriteInsAdvancedConfiguration" "', argument " "17"" of type '" "float""'");
  } 
  arg17 = static_cast< float >(val17);
  ecode18 = SWIG_AsVal_float(obj17, &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "Packet_genWriteInsAdvancedConfiguration" "', argument " "18"" of type '" "float""'");
  } 
  arg18 = static_cast< float >(val18);
  result = vn::protocol::uart::Packet::genWriteInsAdvancedConfiguration(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadInsStateLla(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadInsStateLla",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadInsStateLla" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadInsStateLla" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadInsStateLla" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadInsStateLla(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadInsStateEcef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadInsStateEcef",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadInsStateEcef" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadInsStateEcef" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadInsStateEcef" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadInsStateEcef(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadStartupFilterBiasEstimate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadStartupFilterBiasEstimate",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadStartupFilterBiasEstimate" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadStartupFilterBiasEstimate" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadStartupFilterBiasEstimate" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadStartupFilterBiasEstimate(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteStartupFilterBiasEstimate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  vn::math::vec3f arg4 ;
  vn::math::vec3f arg5 ;
  float arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Packet_genWriteStartupFilterBiasEstimate",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteStartupFilterBiasEstimate" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteStartupFilterBiasEstimate" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteStartupFilterBiasEstimate" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_genWriteStartupFilterBiasEstimate" "', argument " "4"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteStartupFilterBiasEstimate" "', argument " "4"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_genWriteStartupFilterBiasEstimate" "', argument " "5"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteStartupFilterBiasEstimate" "', argument " "5"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Packet_genWriteStartupFilterBiasEstimate" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  result = vn::protocol::uart::Packet::genWriteStartupFilterBiasEstimate(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadDeltaThetaAndDeltaVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadDeltaThetaAndDeltaVelocity",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadDeltaThetaAndDeltaVelocity" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadDeltaThetaAndDeltaVelocity" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadDeltaThetaAndDeltaVelocity" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadDeltaThetaAndDeltaVelocity(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadDeltaThetaAndDeltaVelocityConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadDeltaThetaAndDeltaVelocityConfiguration",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadDeltaThetaAndDeltaVelocityConfiguration" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadDeltaThetaAndDeltaVelocityConfiguration" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadDeltaThetaAndDeltaVelocityConfiguration" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadDeltaThetaAndDeltaVelocityConfiguration(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteDeltaThetaAndDeltaVelocityConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  uint8_t arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Packet_genWriteDeltaThetaAndDeltaVelocityConfiguration",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteDeltaThetaAndDeltaVelocityConfiguration" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteDeltaThetaAndDeltaVelocityConfiguration" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteDeltaThetaAndDeltaVelocityConfiguration" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteDeltaThetaAndDeltaVelocityConfiguration" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = static_cast< uint8_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Packet_genWriteDeltaThetaAndDeltaVelocityConfiguration" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Packet_genWriteDeltaThetaAndDeltaVelocityConfiguration" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  result = vn::protocol::uart::Packet::genWriteDeltaThetaAndDeltaVelocityConfiguration(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadReferenceVectorConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadReferenceVectorConfiguration",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadReferenceVectorConfiguration" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadReferenceVectorConfiguration" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadReferenceVectorConfiguration" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadReferenceVectorConfiguration(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteReferenceVectorConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  uint32_t arg6 ;
  float arg7 ;
  vn::math::vec3d arg8 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Packet_genWriteReferenceVectorConfiguration",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteReferenceVectorConfiguration" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteReferenceVectorConfiguration" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteReferenceVectorConfiguration" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteReferenceVectorConfiguration" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = static_cast< uint8_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Packet_genWriteReferenceVectorConfiguration" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Packet_genWriteReferenceVectorConfiguration" "', argument " "6"" of type '" "uint32_t""'");
  } 
  arg6 = static_cast< uint32_t >(val6);
  ecode7 = SWIG_AsVal_float(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Packet_genWriteReferenceVectorConfiguration" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_vn__math__vecT_3_double_t,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Packet_genWriteReferenceVectorConfiguration" "', argument " "8"" of type '" "vn::math::vec3d""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteReferenceVectorConfiguration" "', argument " "8"" of type '" "vn::math::vec3d""'");
    } else {
      vn::math::vec3d * temp = reinterpret_cast< vn::math::vec3d * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  result = vn::protocol::uart::Packet::genWriteReferenceVectorConfiguration(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadGyroCompensation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadGyroCompensation",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadGyroCompensation" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadGyroCompensation" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadGyroCompensation" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadGyroCompensation(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteGyroCompensation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  vn::math::mat3f arg4 ;
  vn::math::vec3f arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Packet_genWriteGyroCompensation",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteGyroCompensation" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteGyroCompensation" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteGyroCompensation" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__matT_3_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_genWriteGyroCompensation" "', argument " "4"" of type '" "vn::math::mat3f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteGyroCompensation" "', argument " "4"" of type '" "vn::math::mat3f""'");
    } else {
      vn::math::mat3f * temp = reinterpret_cast< vn::math::mat3f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_genWriteGyroCompensation" "', argument " "5"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteGyroCompensation" "', argument " "5"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = vn::protocol::uart::Packet::genWriteGyroCompensation(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadImuFilteringConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadImuFilteringConfiguration",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadImuFilteringConfiguration" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadImuFilteringConfiguration" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadImuFilteringConfiguration" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadImuFilteringConfiguration(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteImuFilteringConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint16_t arg4 ;
  uint16_t arg5 ;
  uint16_t arg6 ;
  uint16_t arg7 ;
  uint16_t arg8 ;
  uint8_t arg9 ;
  uint8_t arg10 ;
  uint8_t arg11 ;
  uint8_t arg12 ;
  uint8_t arg13 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  unsigned short val6 ;
  int ecode6 = 0 ;
  unsigned short val7 ;
  int ecode7 = 0 ;
  unsigned short val8 ;
  int ecode8 = 0 ;
  unsigned char val9 ;
  int ecode9 = 0 ;
  unsigned char val10 ;
  int ecode10 = 0 ;
  unsigned char val11 ;
  int ecode11 = 0 ;
  unsigned char val12 ;
  int ecode12 = 0 ;
  unsigned char val13 ;
  int ecode13 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOO:Packet_genWriteImuFilteringConfiguration",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteImuFilteringConfiguration" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteImuFilteringConfiguration" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteImuFilteringConfiguration" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteImuFilteringConfiguration" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Packet_genWriteImuFilteringConfiguration" "', argument " "5"" of type '" "uint16_t""'");
  } 
  arg5 = static_cast< uint16_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_short(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Packet_genWriteImuFilteringConfiguration" "', argument " "6"" of type '" "uint16_t""'");
  } 
  arg6 = static_cast< uint16_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_short(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Packet_genWriteImuFilteringConfiguration" "', argument " "7"" of type '" "uint16_t""'");
  } 
  arg7 = static_cast< uint16_t >(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_short(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Packet_genWriteImuFilteringConfiguration" "', argument " "8"" of type '" "uint16_t""'");
  } 
  arg8 = static_cast< uint16_t >(val8);
  ecode9 = SWIG_AsVal_unsigned_SS_char(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Packet_genWriteImuFilteringConfiguration" "', argument " "9"" of type '" "uint8_t""'");
  } 
  arg9 = static_cast< uint8_t >(val9);
  ecode10 = SWIG_AsVal_unsigned_SS_char(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "Packet_genWriteImuFilteringConfiguration" "', argument " "10"" of type '" "uint8_t""'");
  } 
  arg10 = static_cast< uint8_t >(val10);
  ecode11 = SWIG_AsVal_unsigned_SS_char(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "Packet_genWriteImuFilteringConfiguration" "', argument " "11"" of type '" "uint8_t""'");
  } 
  arg11 = static_cast< uint8_t >(val11);
  ecode12 = SWIG_AsVal_unsigned_SS_char(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "Packet_genWriteImuFilteringConfiguration" "', argument " "12"" of type '" "uint8_t""'");
  } 
  arg12 = static_cast< uint8_t >(val12);
  ecode13 = SWIG_AsVal_unsigned_SS_char(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "Packet_genWriteImuFilteringConfiguration" "', argument " "13"" of type '" "uint8_t""'");
  } 
  arg13 = static_cast< uint8_t >(val13);
  result = vn::protocol::uart::Packet::genWriteImuFilteringConfiguration(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadGpsCompassBaseline(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadGpsCompassBaseline",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadGpsCompassBaseline" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadGpsCompassBaseline" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadGpsCompassBaseline" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadGpsCompassBaseline(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteGpsCompassBaseline(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  vn::math::vec3f arg4 ;
  vn::math::vec3f arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Packet_genWriteGpsCompassBaseline",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteGpsCompassBaseline" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteGpsCompassBaseline" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteGpsCompassBaseline" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_genWriteGpsCompassBaseline" "', argument " "4"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteGpsCompassBaseline" "', argument " "4"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_genWriteGpsCompassBaseline" "', argument " "5"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Packet_genWriteGpsCompassBaseline" "', argument " "5"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = vn::protocol::uart::Packet::genWriteGpsCompassBaseline(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadGpsCompassEstimatedBaseline(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadGpsCompassEstimatedBaseline",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadGpsCompassEstimatedBaseline" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadGpsCompassEstimatedBaseline" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadGpsCompassEstimatedBaseline" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadGpsCompassEstimatedBaseline(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadImuRateConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadImuRateConfiguration",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadImuRateConfiguration" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadImuRateConfiguration" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadImuRateConfiguration" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadImuRateConfiguration(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genWriteImuRateConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint16_t arg4 ;
  uint16_t arg5 ;
  float arg6 ;
  float arg7 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Packet_genWriteImuRateConfiguration",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genWriteImuRateConfiguration" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genWriteImuRateConfiguration" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genWriteImuRateConfiguration" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Packet_genWriteImuRateConfiguration" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Packet_genWriteImuRateConfiguration" "', argument " "5"" of type '" "uint16_t""'");
  } 
  arg5 = static_cast< uint16_t >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Packet_genWriteImuRateConfiguration" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_float(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Packet_genWriteImuRateConfiguration" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  result = vn::protocol::uart::Packet::genWriteImuRateConfiguration(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadYawPitchRollTrueBodyAccelerationAndAngularRates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadYawPitchRollTrueBodyAccelerationAndAngularRates",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadYawPitchRollTrueBodyAccelerationAndAngularRates" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadYawPitchRollTrueBodyAccelerationAndAngularRates" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadYawPitchRollTrueBodyAccelerationAndAngularRates" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadYawPitchRollTrueBodyAccelerationAndAngularRates(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_genReadYawPitchRollTrueInertialAccelerationAndAngularRates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::ErrorDetectionMode arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_genReadYawPitchRollTrueInertialAccelerationAndAngularRates",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Packet_genReadYawPitchRollTrueInertialAccelerationAndAngularRates" "', argument " "1"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_genReadYawPitchRollTrueInertialAccelerationAndAngularRates" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Packet_genReadYawPitchRollTrueInertialAccelerationAndAngularRates" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = vn::protocol::uart::Packet::genReadYawPitchRollTrueInertialAccelerationAndAngularRates(arg1,arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVNYPR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Packet_parseVNYPR",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVNYPR" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVNYPR" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  (arg1)->parseVNYPR(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVNQTN(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec4f *arg2 = (vn::math::vec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Packet_parseVNQTN",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVNQTN" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVNQTN" "', argument " "2"" of type '" "vn::math::vec4f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec4f * >(argp2);
  (arg1)->parseVNQTN(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVNQMR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec4f *arg2 = (vn::math::vec4f *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg4 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg5 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Packet_parseVNQMR",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVNQMR" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVNQMR" "', argument " "2"" of type '" "vn::math::vec4f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec4f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseVNQMR" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseVNQMR" "', argument " "4"" of type '" "vn::math::vec3f *""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseVNQMR" "', argument " "5"" of type '" "vn::math::vec3f *""'"); 
  }
  arg5 = reinterpret_cast< vn::math::vec3f * >(argp5);
  (arg1)->parseVNQMR(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVNMAG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Packet_parseVNMAG",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVNMAG" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVNMAG" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  (arg1)->parseVNMAG(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVNACC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Packet_parseVNACC",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVNACC" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVNACC" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  (arg1)->parseVNACC(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVNGYR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Packet_parseVNGYR",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVNGYR" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVNGYR" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  (arg1)->parseVNGYR(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVNMAR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg4 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_parseVNMAR",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVNMAR" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVNMAR" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseVNMAR" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseVNMAR" "', argument " "4"" of type '" "vn::math::vec3f *""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  (arg1)->parseVNMAR(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVNYMR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg4 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg5 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Packet_parseVNYMR",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVNYMR" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVNYMR" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseVNYMR" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseVNYMR" "', argument " "4"" of type '" "vn::math::vec3f *""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseVNYMR" "', argument " "5"" of type '" "vn::math::vec3f *""'"); 
  }
  arg5 = reinterpret_cast< vn::math::vec3f * >(argp5);
  (arg1)->parseVNYMR(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVNYBA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg4 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_parseVNYBA",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVNYBA" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVNYBA" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseVNYBA" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseVNYBA" "', argument " "4"" of type '" "vn::math::vec3f *""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  (arg1)->parseVNYBA(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVNYIA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg4 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_parseVNYIA",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVNYIA" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVNYIA" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseVNYIA" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseVNYIA" "', argument " "4"" of type '" "vn::math::vec3f *""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  (arg1)->parseVNYIA(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVNIMU(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg4 = (vn::math::vec3f *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Packet_parseVNIMU",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVNIMU" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVNIMU" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseVNIMU" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseVNIMU" "', argument " "4"" of type '" "vn::math::vec3f *""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseVNIMU" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_parseVNIMU" "', argument " "6"" of type '" "float *""'"); 
  }
  arg6 = reinterpret_cast< float * >(argp6);
  (arg1)->parseVNIMU(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVNGPS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  double *arg2 = (double *) 0 ;
  uint16_t *arg3 = (uint16_t *) 0 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  vn::math::vec3d *arg6 = (vn::math::vec3d *) 0 ;
  vn::math::vec3f *arg7 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg8 = (vn::math::vec3f *) 0 ;
  float *arg9 = (float *) 0 ;
  float *arg10 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:Packet_parseVNGPS",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVNGPS" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVNGPS" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseVNGPS" "', argument " "3"" of type '" "uint16_t *""'"); 
  }
  arg3 = reinterpret_cast< uint16_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseVNGPS" "', argument " "4"" of type '" "uint8_t *""'"); 
  }
  arg4 = reinterpret_cast< uint8_t * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseVNGPS" "', argument " "5"" of type '" "uint8_t *""'"); 
  }
  arg5 = reinterpret_cast< uint8_t * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_parseVNGPS" "', argument " "6"" of type '" "vn::math::vec3d *""'"); 
  }
  arg6 = reinterpret_cast< vn::math::vec3d * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Packet_parseVNGPS" "', argument " "7"" of type '" "vn::math::vec3f *""'"); 
  }
  arg7 = reinterpret_cast< vn::math::vec3f * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Packet_parseVNGPS" "', argument " "8"" of type '" "vn::math::vec3f *""'"); 
  }
  arg8 = reinterpret_cast< vn::math::vec3f * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Packet_parseVNGPS" "', argument " "9"" of type '" "float *""'"); 
  }
  arg9 = reinterpret_cast< float * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Packet_parseVNGPS" "', argument " "10"" of type '" "float *""'"); 
  }
  arg10 = reinterpret_cast< float * >(argp10);
  (arg1)->parseVNGPS(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVNINS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  double *arg2 = (double *) 0 ;
  uint16_t *arg3 = (uint16_t *) 0 ;
  uint16_t *arg4 = (uint16_t *) 0 ;
  vn::math::vec3f *arg5 = (vn::math::vec3f *) 0 ;
  vn::math::vec3d *arg6 = (vn::math::vec3d *) 0 ;
  vn::math::vec3f *arg7 = (vn::math::vec3f *) 0 ;
  float *arg8 = (float *) 0 ;
  float *arg9 = (float *) 0 ;
  float *arg10 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:Packet_parseVNINS",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVNINS" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVNINS" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseVNINS" "', argument " "3"" of type '" "uint16_t *""'"); 
  }
  arg3 = reinterpret_cast< uint16_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseVNINS" "', argument " "4"" of type '" "uint16_t *""'"); 
  }
  arg4 = reinterpret_cast< uint16_t * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseVNINS" "', argument " "5"" of type '" "vn::math::vec3f *""'"); 
  }
  arg5 = reinterpret_cast< vn::math::vec3f * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_parseVNINS" "', argument " "6"" of type '" "vn::math::vec3d *""'"); 
  }
  arg6 = reinterpret_cast< vn::math::vec3d * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Packet_parseVNINS" "', argument " "7"" of type '" "vn::math::vec3f *""'"); 
  }
  arg7 = reinterpret_cast< vn::math::vec3f * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Packet_parseVNINS" "', argument " "8"" of type '" "float *""'"); 
  }
  arg8 = reinterpret_cast< float * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Packet_parseVNINS" "', argument " "9"" of type '" "float *""'"); 
  }
  arg9 = reinterpret_cast< float * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Packet_parseVNINS" "', argument " "10"" of type '" "float *""'"); 
  }
  arg10 = reinterpret_cast< float * >(argp10);
  (arg1)->parseVNINS(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVNINE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  double *arg2 = (double *) 0 ;
  uint16_t *arg3 = (uint16_t *) 0 ;
  uint16_t *arg4 = (uint16_t *) 0 ;
  vn::math::vec3f *arg5 = (vn::math::vec3f *) 0 ;
  vn::math::vec3d *arg6 = (vn::math::vec3d *) 0 ;
  vn::math::vec3f *arg7 = (vn::math::vec3f *) 0 ;
  float *arg8 = (float *) 0 ;
  float *arg9 = (float *) 0 ;
  float *arg10 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:Packet_parseVNINE",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVNINE" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVNINE" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseVNINE" "', argument " "3"" of type '" "uint16_t *""'"); 
  }
  arg3 = reinterpret_cast< uint16_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseVNINE" "', argument " "4"" of type '" "uint16_t *""'"); 
  }
  arg4 = reinterpret_cast< uint16_t * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseVNINE" "', argument " "5"" of type '" "vn::math::vec3f *""'"); 
  }
  arg5 = reinterpret_cast< vn::math::vec3f * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_parseVNINE" "', argument " "6"" of type '" "vn::math::vec3d *""'"); 
  }
  arg6 = reinterpret_cast< vn::math::vec3d * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Packet_parseVNINE" "', argument " "7"" of type '" "vn::math::vec3f *""'"); 
  }
  arg7 = reinterpret_cast< vn::math::vec3f * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Packet_parseVNINE" "', argument " "8"" of type '" "float *""'"); 
  }
  arg8 = reinterpret_cast< float * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Packet_parseVNINE" "', argument " "9"" of type '" "float *""'"); 
  }
  arg9 = reinterpret_cast< float * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Packet_parseVNINE" "', argument " "10"" of type '" "float *""'"); 
  }
  arg10 = reinterpret_cast< float * >(argp10);
  (arg1)->parseVNINE(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVNISL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  vn::math::vec3d *arg3 = (vn::math::vec3d *) 0 ;
  vn::math::vec3f *arg4 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg5 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg6 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Packet_parseVNISL",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVNISL" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVNISL" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseVNISL" "', argument " "3"" of type '" "vn::math::vec3d *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3d * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseVNISL" "', argument " "4"" of type '" "vn::math::vec3f *""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseVNISL" "', argument " "5"" of type '" "vn::math::vec3f *""'"); 
  }
  arg5 = reinterpret_cast< vn::math::vec3f * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_parseVNISL" "', argument " "6"" of type '" "vn::math::vec3f *""'"); 
  }
  arg6 = reinterpret_cast< vn::math::vec3f * >(argp6);
  (arg1)->parseVNISL(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVNISE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  vn::math::vec3d *arg3 = (vn::math::vec3d *) 0 ;
  vn::math::vec3f *arg4 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg5 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg6 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Packet_parseVNISE",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVNISE" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVNISE" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseVNISE" "', argument " "3"" of type '" "vn::math::vec3d *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3d * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseVNISE" "', argument " "4"" of type '" "vn::math::vec3f *""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseVNISE" "', argument " "5"" of type '" "vn::math::vec3f *""'"); 
  }
  arg5 = reinterpret_cast< vn::math::vec3f * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_parseVNISE" "', argument " "6"" of type '" "vn::math::vec3f *""'"); 
  }
  arg6 = reinterpret_cast< vn::math::vec3f * >(argp6);
  (arg1)->parseVNISE(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVNGPE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  double *arg2 = (double *) 0 ;
  uint16_t *arg3 = (uint16_t *) 0 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  vn::math::vec3d *arg6 = (vn::math::vec3d *) 0 ;
  vn::math::vec3f *arg7 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg8 = (vn::math::vec3f *) 0 ;
  float *arg9 = (float *) 0 ;
  float *arg10 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:Packet_parseVNGPE",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVNGPE" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVNGPE" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseVNGPE" "', argument " "3"" of type '" "uint16_t *""'"); 
  }
  arg3 = reinterpret_cast< uint16_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseVNGPE" "', argument " "4"" of type '" "uint8_t *""'"); 
  }
  arg4 = reinterpret_cast< uint8_t * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseVNGPE" "', argument " "5"" of type '" "uint8_t *""'"); 
  }
  arg5 = reinterpret_cast< uint8_t * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_parseVNGPE" "', argument " "6"" of type '" "vn::math::vec3d *""'"); 
  }
  arg6 = reinterpret_cast< vn::math::vec3d * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Packet_parseVNGPE" "', argument " "7"" of type '" "vn::math::vec3f *""'"); 
  }
  arg7 = reinterpret_cast< vn::math::vec3f * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Packet_parseVNGPE" "', argument " "8"" of type '" "vn::math::vec3f *""'"); 
  }
  arg8 = reinterpret_cast< vn::math::vec3f * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Packet_parseVNGPE" "', argument " "9"" of type '" "float *""'"); 
  }
  arg9 = reinterpret_cast< float * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Packet_parseVNGPE" "', argument " "10"" of type '" "float *""'"); 
  }
  arg10 = reinterpret_cast< float * >(argp10);
  (arg1)->parseVNGPE(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVNDTV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  float *arg2 = (float *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg4 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_parseVNDTV",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVNDTV" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVNDTV" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseVNDTV" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseVNDTV" "', argument " "4"" of type '" "vn::math::vec3f *""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  (arg1)->parseVNDTV(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseBinaryOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  uint16_t *arg2 = (uint16_t *) 0 ;
  uint16_t *arg3 = (uint16_t *) 0 ;
  uint16_t *arg4 = (uint16_t *) 0 ;
  uint16_t *arg5 = (uint16_t *) 0 ;
  uint16_t *arg6 = (uint16_t *) 0 ;
  uint16_t *arg7 = (uint16_t *) 0 ;
  uint16_t *arg8 = (uint16_t *) 0 ;
  uint16_t *arg9 = (uint16_t *) 0 ;
  uint16_t *arg10 = (uint16_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:Packet_parseBinaryOutput",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseBinaryOutput" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseBinaryOutput" "', argument " "2"" of type '" "uint16_t *""'"); 
  }
  arg2 = reinterpret_cast< uint16_t * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseBinaryOutput" "', argument " "3"" of type '" "uint16_t *""'"); 
  }
  arg3 = reinterpret_cast< uint16_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseBinaryOutput" "', argument " "4"" of type '" "uint16_t *""'"); 
  }
  arg4 = reinterpret_cast< uint16_t * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseBinaryOutput" "', argument " "5"" of type '" "uint16_t *""'"); 
  }
  arg5 = reinterpret_cast< uint16_t * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_parseBinaryOutput" "', argument " "6"" of type '" "uint16_t *""'"); 
  }
  arg6 = reinterpret_cast< uint16_t * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Packet_parseBinaryOutput" "', argument " "7"" of type '" "uint16_t *""'"); 
  }
  arg7 = reinterpret_cast< uint16_t * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Packet_parseBinaryOutput" "', argument " "8"" of type '" "uint16_t *""'"); 
  }
  arg8 = reinterpret_cast< uint16_t * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Packet_parseBinaryOutput" "', argument " "9"" of type '" "uint16_t *""'"); 
  }
  arg9 = reinterpret_cast< uint16_t * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Packet_parseBinaryOutput" "', argument " "10"" of type '" "uint16_t *""'"); 
  }
  arg10 = reinterpret_cast< uint16_t * >(argp10);
  (arg1)->parseBinaryOutput(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseUserTag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Packet_parseUserTag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseUserTag" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseUserTag" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->parseUserTag(arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseModelNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Packet_parseModelNumber",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseModelNumber" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseModelNumber" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->parseModelNumber(arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseHardwareRevision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Packet_parseHardwareRevision",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseHardwareRevision" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseHardwareRevision" "', argument " "2"" of type '" "uint32_t *""'"); 
  }
  arg2 = reinterpret_cast< uint32_t * >(argp2);
  (arg1)->parseHardwareRevision(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseSerialNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Packet_parseSerialNumber",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseSerialNumber" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseSerialNumber" "', argument " "2"" of type '" "uint32_t *""'"); 
  }
  arg2 = reinterpret_cast< uint32_t * >(argp2);
  (arg1)->parseSerialNumber(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseFirmwareVersion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Packet_parseFirmwareVersion",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseFirmwareVersion" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseFirmwareVersion" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->parseFirmwareVersion(arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseSerialBaudRate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Packet_parseSerialBaudRate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseSerialBaudRate" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseSerialBaudRate" "', argument " "2"" of type '" "uint32_t *""'"); 
  }
  arg2 = reinterpret_cast< uint32_t * >(argp2);
  (arg1)->parseSerialBaudRate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseAsyncDataOutputType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Packet_parseAsyncDataOutputType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseAsyncDataOutputType" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseAsyncDataOutputType" "', argument " "2"" of type '" "uint32_t *""'"); 
  }
  arg2 = reinterpret_cast< uint32_t * >(argp2);
  (arg1)->parseAsyncDataOutputType(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseAsyncDataOutputFrequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Packet_parseAsyncDataOutputFrequency",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseAsyncDataOutputFrequency" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseAsyncDataOutputFrequency" "', argument " "2"" of type '" "uint32_t *""'"); 
  }
  arg2 = reinterpret_cast< uint32_t * >(argp2);
  (arg1)->parseAsyncDataOutputFrequency(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseYawPitchRoll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Packet_parseYawPitchRoll",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseYawPitchRoll" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseYawPitchRoll" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  (arg1)->parseYawPitchRoll(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseAttitudeQuaternion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec4f *arg2 = (vn::math::vec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Packet_parseAttitudeQuaternion",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseAttitudeQuaternion" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseAttitudeQuaternion" "', argument " "2"" of type '" "vn::math::vec4f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec4f * >(argp2);
  (arg1)->parseAttitudeQuaternion(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseQuaternionMagneticAccelerationAndAngularRates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec4f *arg2 = (vn::math::vec4f *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg4 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg5 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Packet_parseQuaternionMagneticAccelerationAndAngularRates",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseQuaternionMagneticAccelerationAndAngularRates" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseQuaternionMagneticAccelerationAndAngularRates" "', argument " "2"" of type '" "vn::math::vec4f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec4f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseQuaternionMagneticAccelerationAndAngularRates" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseQuaternionMagneticAccelerationAndAngularRates" "', argument " "4"" of type '" "vn::math::vec3f *""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseQuaternionMagneticAccelerationAndAngularRates" "', argument " "5"" of type '" "vn::math::vec3f *""'"); 
  }
  arg5 = reinterpret_cast< vn::math::vec3f * >(argp5);
  (arg1)->parseQuaternionMagneticAccelerationAndAngularRates(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseMagneticMeasurements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Packet_parseMagneticMeasurements",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseMagneticMeasurements" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseMagneticMeasurements" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  (arg1)->parseMagneticMeasurements(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseAccelerationMeasurements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Packet_parseAccelerationMeasurements",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseAccelerationMeasurements" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseAccelerationMeasurements" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  (arg1)->parseAccelerationMeasurements(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseAngularRateMeasurements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Packet_parseAngularRateMeasurements",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseAngularRateMeasurements" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseAngularRateMeasurements" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  (arg1)->parseAngularRateMeasurements(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseMagneticAccelerationAndAngularRates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg4 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_parseMagneticAccelerationAndAngularRates",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseMagneticAccelerationAndAngularRates" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseMagneticAccelerationAndAngularRates" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseMagneticAccelerationAndAngularRates" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseMagneticAccelerationAndAngularRates" "', argument " "4"" of type '" "vn::math::vec3f *""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  (arg1)->parseMagneticAccelerationAndAngularRates(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseMagneticAndGravityReferenceVectors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_parseMagneticAndGravityReferenceVectors",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseMagneticAndGravityReferenceVectors" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseMagneticAndGravityReferenceVectors" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseMagneticAndGravityReferenceVectors" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  (arg1)->parseMagneticAndGravityReferenceVectors(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseFilterMeasurementsVarianceParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  float *arg2 = (float *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg4 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg5 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Packet_parseFilterMeasurementsVarianceParameters",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseFilterMeasurementsVarianceParameters" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseFilterMeasurementsVarianceParameters" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseFilterMeasurementsVarianceParameters" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseFilterMeasurementsVarianceParameters" "', argument " "4"" of type '" "vn::math::vec3f *""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseFilterMeasurementsVarianceParameters" "', argument " "5"" of type '" "vn::math::vec3f *""'"); 
  }
  arg5 = reinterpret_cast< vn::math::vec3f * >(argp5);
  (arg1)->parseFilterMeasurementsVarianceParameters(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseMagnetometerCompensation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::mat3f *arg2 = (vn::math::mat3f *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_parseMagnetometerCompensation",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseMagnetometerCompensation" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseMagnetometerCompensation" "', argument " "2"" of type '" "vn::math::mat3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::mat3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseMagnetometerCompensation" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  (arg1)->parseMagnetometerCompensation(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseFilterActiveTuningParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Packet_parseFilterActiveTuningParameters",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseFilterActiveTuningParameters" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseFilterActiveTuningParameters" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseFilterActiveTuningParameters" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseFilterActiveTuningParameters" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseFilterActiveTuningParameters" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  (arg1)->parseFilterActiveTuningParameters(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseAccelerationCompensation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::mat3f *arg2 = (vn::math::mat3f *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_parseAccelerationCompensation",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseAccelerationCompensation" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseAccelerationCompensation" "', argument " "2"" of type '" "vn::math::mat3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::mat3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseAccelerationCompensation" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  (arg1)->parseAccelerationCompensation(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseReferenceFrameRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::mat3f *arg2 = (vn::math::mat3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Packet_parseReferenceFrameRotation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseReferenceFrameRotation" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseReferenceFrameRotation" "', argument " "2"" of type '" "vn::math::mat3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::mat3f * >(argp2);
  (arg1)->parseReferenceFrameRotation(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseYawPitchRollMagneticAccelerationAndAngularRates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg4 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg5 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Packet_parseYawPitchRollMagneticAccelerationAndAngularRates",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseYawPitchRollMagneticAccelerationAndAngularRates" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseYawPitchRollMagneticAccelerationAndAngularRates" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseYawPitchRollMagneticAccelerationAndAngularRates" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseYawPitchRollMagneticAccelerationAndAngularRates" "', argument " "4"" of type '" "vn::math::vec3f *""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseYawPitchRollMagneticAccelerationAndAngularRates" "', argument " "5"" of type '" "vn::math::vec3f *""'"); 
  }
  arg5 = reinterpret_cast< vn::math::vec3f * >(argp5);
  (arg1)->parseYawPitchRollMagneticAccelerationAndAngularRates(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseCommunicationProtocolControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  uint8_t *arg6 = (uint8_t *) 0 ;
  uint8_t *arg7 = (uint8_t *) 0 ;
  uint8_t *arg8 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Packet_parseCommunicationProtocolControl",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseCommunicationProtocolControl" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseCommunicationProtocolControl" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseCommunicationProtocolControl" "', argument " "3"" of type '" "uint8_t *""'"); 
  }
  arg3 = reinterpret_cast< uint8_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseCommunicationProtocolControl" "', argument " "4"" of type '" "uint8_t *""'"); 
  }
  arg4 = reinterpret_cast< uint8_t * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseCommunicationProtocolControl" "', argument " "5"" of type '" "uint8_t *""'"); 
  }
  arg5 = reinterpret_cast< uint8_t * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_parseCommunicationProtocolControl" "', argument " "6"" of type '" "uint8_t *""'"); 
  }
  arg6 = reinterpret_cast< uint8_t * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Packet_parseCommunicationProtocolControl" "', argument " "7"" of type '" "uint8_t *""'"); 
  }
  arg7 = reinterpret_cast< uint8_t * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Packet_parseCommunicationProtocolControl" "', argument " "8"" of type '" "uint8_t *""'"); 
  }
  arg8 = reinterpret_cast< uint8_t * >(argp8);
  (arg1)->parseCommunicationProtocolControl(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseSynchronizationControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  uint16_t *arg4 = (uint16_t *) 0 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  uint8_t *arg6 = (uint8_t *) 0 ;
  uint16_t *arg7 = (uint16_t *) 0 ;
  uint32_t *arg8 = (uint32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Packet_parseSynchronizationControl",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseSynchronizationControl" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseSynchronizationControl" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseSynchronizationControl" "', argument " "3"" of type '" "uint8_t *""'"); 
  }
  arg3 = reinterpret_cast< uint8_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseSynchronizationControl" "', argument " "4"" of type '" "uint16_t *""'"); 
  }
  arg4 = reinterpret_cast< uint16_t * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseSynchronizationControl" "', argument " "5"" of type '" "uint8_t *""'"); 
  }
  arg5 = reinterpret_cast< uint8_t * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_parseSynchronizationControl" "', argument " "6"" of type '" "uint8_t *""'"); 
  }
  arg6 = reinterpret_cast< uint8_t * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Packet_parseSynchronizationControl" "', argument " "7"" of type '" "uint16_t *""'"); 
  }
  arg7 = reinterpret_cast< uint16_t * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Packet_parseSynchronizationControl" "', argument " "8"" of type '" "uint32_t *""'"); 
  }
  arg8 = reinterpret_cast< uint32_t * >(argp8);
  (arg1)->parseSynchronizationControl(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseSynchronizationStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  uint32_t *arg3 = (uint32_t *) 0 ;
  uint32_t *arg4 = (uint32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_parseSynchronizationStatus",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseSynchronizationStatus" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseSynchronizationStatus" "', argument " "2"" of type '" "uint32_t *""'"); 
  }
  arg2 = reinterpret_cast< uint32_t * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseSynchronizationStatus" "', argument " "3"" of type '" "uint32_t *""'"); 
  }
  arg3 = reinterpret_cast< uint32_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseSynchronizationStatus" "', argument " "4"" of type '" "uint32_t *""'"); 
  }
  arg4 = reinterpret_cast< uint32_t * >(argp4);
  (arg1)->parseSynchronizationStatus(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseFilterBasicControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  vn::math::vec3f *arg6 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Packet_parseFilterBasicControl",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseFilterBasicControl" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseFilterBasicControl" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseFilterBasicControl" "', argument " "3"" of type '" "uint8_t *""'"); 
  }
  arg3 = reinterpret_cast< uint8_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseFilterBasicControl" "', argument " "4"" of type '" "uint8_t *""'"); 
  }
  arg4 = reinterpret_cast< uint8_t * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseFilterBasicControl" "', argument " "5"" of type '" "uint8_t *""'"); 
  }
  arg5 = reinterpret_cast< uint8_t * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_parseFilterBasicControl" "', argument " "6"" of type '" "vn::math::vec3f *""'"); 
  }
  arg6 = reinterpret_cast< vn::math::vec3f * >(argp6);
  (arg1)->parseFilterBasicControl(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVpeBasicControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Packet_parseVpeBasicControl",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVpeBasicControl" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVpeBasicControl" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseVpeBasicControl" "', argument " "3"" of type '" "uint8_t *""'"); 
  }
  arg3 = reinterpret_cast< uint8_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseVpeBasicControl" "', argument " "4"" of type '" "uint8_t *""'"); 
  }
  arg4 = reinterpret_cast< uint8_t * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseVpeBasicControl" "', argument " "5"" of type '" "uint8_t *""'"); 
  }
  arg5 = reinterpret_cast< uint8_t * >(argp5);
  (arg1)->parseVpeBasicControl(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVpeMagnetometerBasicTuning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg4 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_parseVpeMagnetometerBasicTuning",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVpeMagnetometerBasicTuning" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVpeMagnetometerBasicTuning" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseVpeMagnetometerBasicTuning" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseVpeMagnetometerBasicTuning" "', argument " "4"" of type '" "vn::math::vec3f *""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  (arg1)->parseVpeMagnetometerBasicTuning(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVpeMagnetometerAdvancedTuning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Packet_parseVpeMagnetometerAdvancedTuning",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVpeMagnetometerAdvancedTuning" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVpeMagnetometerAdvancedTuning" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseVpeMagnetometerAdvancedTuning" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseVpeMagnetometerAdvancedTuning" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseVpeMagnetometerAdvancedTuning" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_parseVpeMagnetometerAdvancedTuning" "', argument " "6"" of type '" "float *""'"); 
  }
  arg6 = reinterpret_cast< float * >(argp6);
  (arg1)->parseVpeMagnetometerAdvancedTuning(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVpeAccelerometerBasicTuning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg4 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_parseVpeAccelerometerBasicTuning",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVpeAccelerometerBasicTuning" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVpeAccelerometerBasicTuning" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseVpeAccelerometerBasicTuning" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseVpeAccelerometerBasicTuning" "', argument " "4"" of type '" "vn::math::vec3f *""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  (arg1)->parseVpeAccelerometerBasicTuning(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVpeAccelerometerAdvancedTuning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Packet_parseVpeAccelerometerAdvancedTuning",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVpeAccelerometerAdvancedTuning" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVpeAccelerometerAdvancedTuning" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseVpeAccelerometerAdvancedTuning" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseVpeAccelerometerAdvancedTuning" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseVpeAccelerometerAdvancedTuning" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_parseVpeAccelerometerAdvancedTuning" "', argument " "6"" of type '" "float *""'"); 
  }
  arg6 = reinterpret_cast< float * >(argp6);
  (arg1)->parseVpeAccelerometerAdvancedTuning(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVpeGyroBasicTuning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg4 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_parseVpeGyroBasicTuning",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVpeGyroBasicTuning" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVpeGyroBasicTuning" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseVpeGyroBasicTuning" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseVpeGyroBasicTuning" "', argument " "4"" of type '" "vn::math::vec3f *""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  (arg1)->parseVpeGyroBasicTuning(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseFilterStartupGyroBias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Packet_parseFilterStartupGyroBias",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseFilterStartupGyroBias" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseFilterStartupGyroBias" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  (arg1)->parseFilterStartupGyroBias(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseMagnetometerCalibrationControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_parseMagnetometerCalibrationControl",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseMagnetometerCalibrationControl" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseMagnetometerCalibrationControl" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseMagnetometerCalibrationControl" "', argument " "3"" of type '" "uint8_t *""'"); 
  }
  arg3 = reinterpret_cast< uint8_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseMagnetometerCalibrationControl" "', argument " "4"" of type '" "uint8_t *""'"); 
  }
  arg4 = reinterpret_cast< uint8_t * >(argp4);
  (arg1)->parseMagnetometerCalibrationControl(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseCalculatedMagnetometerCalibration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::mat3f *arg2 = (vn::math::mat3f *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_parseCalculatedMagnetometerCalibration",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseCalculatedMagnetometerCalibration" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseCalculatedMagnetometerCalibration" "', argument " "2"" of type '" "vn::math::mat3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::mat3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseCalculatedMagnetometerCalibration" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  (arg1)->parseCalculatedMagnetometerCalibration(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseIndoorHeadingModeControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  float *arg2 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Packet_parseIndoorHeadingModeControl",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseIndoorHeadingModeControl" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseIndoorHeadingModeControl" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  (arg1)->parseIndoorHeadingModeControl(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVelocityCompensationMeasurement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Packet_parseVelocityCompensationMeasurement",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVelocityCompensationMeasurement" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVelocityCompensationMeasurement" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  (arg1)->parseVelocityCompensationMeasurement(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVelocityCompensationControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_parseVelocityCompensationControl",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVelocityCompensationControl" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVelocityCompensationControl" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseVelocityCompensationControl" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseVelocityCompensationControl" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  (arg1)->parseVelocityCompensationControl(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseVelocityCompensationStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  vn::math::vec3f *arg4 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg5 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Packet_parseVelocityCompensationStatus",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseVelocityCompensationStatus" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseVelocityCompensationStatus" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseVelocityCompensationStatus" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseVelocityCompensationStatus" "', argument " "4"" of type '" "vn::math::vec3f *""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseVelocityCompensationStatus" "', argument " "5"" of type '" "vn::math::vec3f *""'"); 
  }
  arg5 = reinterpret_cast< vn::math::vec3f * >(argp5);
  (arg1)->parseVelocityCompensationStatus(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseImuMeasurements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg4 = (vn::math::vec3f *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Packet_parseImuMeasurements",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseImuMeasurements" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseImuMeasurements" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseImuMeasurements" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseImuMeasurements" "', argument " "4"" of type '" "vn::math::vec3f *""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseImuMeasurements" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_parseImuMeasurements" "', argument " "6"" of type '" "float *""'"); 
  }
  arg6 = reinterpret_cast< float * >(argp6);
  (arg1)->parseImuMeasurements(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseGpsConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_parseGpsConfiguration",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseGpsConfiguration" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseGpsConfiguration" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseGpsConfiguration" "', argument " "3"" of type '" "uint8_t *""'"); 
  }
  arg3 = reinterpret_cast< uint8_t * >(argp3);
  (arg1)->parseGpsConfiguration(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseGpsAntennaOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Packet_parseGpsAntennaOffset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseGpsAntennaOffset" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseGpsAntennaOffset" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  (arg1)->parseGpsAntennaOffset(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseGpsSolutionLla(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  double *arg2 = (double *) 0 ;
  uint16_t *arg3 = (uint16_t *) 0 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  vn::math::vec3d *arg6 = (vn::math::vec3d *) 0 ;
  vn::math::vec3f *arg7 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg8 = (vn::math::vec3f *) 0 ;
  float *arg9 = (float *) 0 ;
  float *arg10 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:Packet_parseGpsSolutionLla",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseGpsSolutionLla" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseGpsSolutionLla" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseGpsSolutionLla" "', argument " "3"" of type '" "uint16_t *""'"); 
  }
  arg3 = reinterpret_cast< uint16_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseGpsSolutionLla" "', argument " "4"" of type '" "uint8_t *""'"); 
  }
  arg4 = reinterpret_cast< uint8_t * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseGpsSolutionLla" "', argument " "5"" of type '" "uint8_t *""'"); 
  }
  arg5 = reinterpret_cast< uint8_t * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_parseGpsSolutionLla" "', argument " "6"" of type '" "vn::math::vec3d *""'"); 
  }
  arg6 = reinterpret_cast< vn::math::vec3d * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Packet_parseGpsSolutionLla" "', argument " "7"" of type '" "vn::math::vec3f *""'"); 
  }
  arg7 = reinterpret_cast< vn::math::vec3f * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Packet_parseGpsSolutionLla" "', argument " "8"" of type '" "vn::math::vec3f *""'"); 
  }
  arg8 = reinterpret_cast< vn::math::vec3f * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Packet_parseGpsSolutionLla" "', argument " "9"" of type '" "float *""'"); 
  }
  arg9 = reinterpret_cast< float * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Packet_parseGpsSolutionLla" "', argument " "10"" of type '" "float *""'"); 
  }
  arg10 = reinterpret_cast< float * >(argp10);
  (arg1)->parseGpsSolutionLla(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseGpsSolutionEcef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  double *arg2 = (double *) 0 ;
  uint16_t *arg3 = (uint16_t *) 0 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  vn::math::vec3d *arg6 = (vn::math::vec3d *) 0 ;
  vn::math::vec3f *arg7 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg8 = (vn::math::vec3f *) 0 ;
  float *arg9 = (float *) 0 ;
  float *arg10 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:Packet_parseGpsSolutionEcef",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseGpsSolutionEcef" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseGpsSolutionEcef" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseGpsSolutionEcef" "', argument " "3"" of type '" "uint16_t *""'"); 
  }
  arg3 = reinterpret_cast< uint16_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseGpsSolutionEcef" "', argument " "4"" of type '" "uint8_t *""'"); 
  }
  arg4 = reinterpret_cast< uint8_t * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseGpsSolutionEcef" "', argument " "5"" of type '" "uint8_t *""'"); 
  }
  arg5 = reinterpret_cast< uint8_t * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_parseGpsSolutionEcef" "', argument " "6"" of type '" "vn::math::vec3d *""'"); 
  }
  arg6 = reinterpret_cast< vn::math::vec3d * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Packet_parseGpsSolutionEcef" "', argument " "7"" of type '" "vn::math::vec3f *""'"); 
  }
  arg7 = reinterpret_cast< vn::math::vec3f * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Packet_parseGpsSolutionEcef" "', argument " "8"" of type '" "vn::math::vec3f *""'"); 
  }
  arg8 = reinterpret_cast< vn::math::vec3f * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Packet_parseGpsSolutionEcef" "', argument " "9"" of type '" "float *""'"); 
  }
  arg9 = reinterpret_cast< float * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Packet_parseGpsSolutionEcef" "', argument " "10"" of type '" "float *""'"); 
  }
  arg10 = reinterpret_cast< float * >(argp10);
  (arg1)->parseGpsSolutionEcef(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseInsSolutionLla(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  double *arg2 = (double *) 0 ;
  uint16_t *arg3 = (uint16_t *) 0 ;
  uint16_t *arg4 = (uint16_t *) 0 ;
  vn::math::vec3f *arg5 = (vn::math::vec3f *) 0 ;
  vn::math::vec3d *arg6 = (vn::math::vec3d *) 0 ;
  vn::math::vec3f *arg7 = (vn::math::vec3f *) 0 ;
  float *arg8 = (float *) 0 ;
  float *arg9 = (float *) 0 ;
  float *arg10 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:Packet_parseInsSolutionLla",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseInsSolutionLla" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseInsSolutionLla" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseInsSolutionLla" "', argument " "3"" of type '" "uint16_t *""'"); 
  }
  arg3 = reinterpret_cast< uint16_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseInsSolutionLla" "', argument " "4"" of type '" "uint16_t *""'"); 
  }
  arg4 = reinterpret_cast< uint16_t * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseInsSolutionLla" "', argument " "5"" of type '" "vn::math::vec3f *""'"); 
  }
  arg5 = reinterpret_cast< vn::math::vec3f * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_parseInsSolutionLla" "', argument " "6"" of type '" "vn::math::vec3d *""'"); 
  }
  arg6 = reinterpret_cast< vn::math::vec3d * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Packet_parseInsSolutionLla" "', argument " "7"" of type '" "vn::math::vec3f *""'"); 
  }
  arg7 = reinterpret_cast< vn::math::vec3f * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Packet_parseInsSolutionLla" "', argument " "8"" of type '" "float *""'"); 
  }
  arg8 = reinterpret_cast< float * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Packet_parseInsSolutionLla" "', argument " "9"" of type '" "float *""'"); 
  }
  arg9 = reinterpret_cast< float * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Packet_parseInsSolutionLla" "', argument " "10"" of type '" "float *""'"); 
  }
  arg10 = reinterpret_cast< float * >(argp10);
  (arg1)->parseInsSolutionLla(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseInsSolutionEcef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  double *arg2 = (double *) 0 ;
  uint16_t *arg3 = (uint16_t *) 0 ;
  uint16_t *arg4 = (uint16_t *) 0 ;
  vn::math::vec3f *arg5 = (vn::math::vec3f *) 0 ;
  vn::math::vec3d *arg6 = (vn::math::vec3d *) 0 ;
  vn::math::vec3f *arg7 = (vn::math::vec3f *) 0 ;
  float *arg8 = (float *) 0 ;
  float *arg9 = (float *) 0 ;
  float *arg10 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:Packet_parseInsSolutionEcef",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseInsSolutionEcef" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseInsSolutionEcef" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseInsSolutionEcef" "', argument " "3"" of type '" "uint16_t *""'"); 
  }
  arg3 = reinterpret_cast< uint16_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseInsSolutionEcef" "', argument " "4"" of type '" "uint16_t *""'"); 
  }
  arg4 = reinterpret_cast< uint16_t * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseInsSolutionEcef" "', argument " "5"" of type '" "vn::math::vec3f *""'"); 
  }
  arg5 = reinterpret_cast< vn::math::vec3f * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_parseInsSolutionEcef" "', argument " "6"" of type '" "vn::math::vec3d *""'"); 
  }
  arg6 = reinterpret_cast< vn::math::vec3d * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Packet_parseInsSolutionEcef" "', argument " "7"" of type '" "vn::math::vec3f *""'"); 
  }
  arg7 = reinterpret_cast< vn::math::vec3f * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Packet_parseInsSolutionEcef" "', argument " "8"" of type '" "float *""'"); 
  }
  arg8 = reinterpret_cast< float * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Packet_parseInsSolutionEcef" "', argument " "9"" of type '" "float *""'"); 
  }
  arg9 = reinterpret_cast< float * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Packet_parseInsSolutionEcef" "', argument " "10"" of type '" "float *""'"); 
  }
  arg10 = reinterpret_cast< float * >(argp10);
  (arg1)->parseInsSolutionEcef(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseInsBasicConfiguration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_parseInsBasicConfiguration",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseInsBasicConfiguration" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseInsBasicConfiguration" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseInsBasicConfiguration" "', argument " "3"" of type '" "uint8_t *""'"); 
  }
  arg3 = reinterpret_cast< uint8_t * >(argp3);
  (arg1)->parseInsBasicConfiguration(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseInsBasicConfiguration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_parseInsBasicConfiguration",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseInsBasicConfiguration" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseInsBasicConfiguration" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseInsBasicConfiguration" "', argument " "3"" of type '" "uint8_t *""'"); 
  }
  arg3 = reinterpret_cast< uint8_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseInsBasicConfiguration" "', argument " "4"" of type '" "uint8_t *""'"); 
  }
  arg4 = reinterpret_cast< uint8_t * >(argp4);
  (arg1)->parseInsBasicConfiguration(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseInsBasicConfiguration(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__protocol__uart__Packet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_char, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_unsigned_char, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Packet_parseInsBasicConfiguration__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__protocol__uart__Packet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_char, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_unsigned_char, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_unsigned_char, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Packet_parseInsBasicConfiguration__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Packet_parseInsBasicConfiguration'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::protocol::uart::Packet::parseInsBasicConfiguration(uint8_t *,uint8_t *)\n"
    "    vn::protocol::uart::Packet::parseInsBasicConfiguration(uint8_t *,uint8_t *,uint8_t *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Packet_parseInsAdvancedConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  uint8_t *arg6 = (uint8_t *) 0 ;
  uint8_t *arg7 = (uint8_t *) 0 ;
  uint8_t *arg8 = (uint8_t *) 0 ;
  uint8_t *arg9 = (uint8_t *) 0 ;
  float *arg10 = (float *) 0 ;
  float *arg11 = (float *) 0 ;
  float *arg12 = (float *) 0 ;
  float *arg13 = (float *) 0 ;
  float *arg14 = (float *) 0 ;
  float *arg15 = (float *) 0 ;
  float *arg16 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  void *argp12 = 0 ;
  int res12 = 0 ;
  void *argp13 = 0 ;
  int res13 = 0 ;
  void *argp14 = 0 ;
  int res14 = 0 ;
  void *argp15 = 0 ;
  int res15 = 0 ;
  void *argp16 = 0 ;
  int res16 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  PyObject * obj14 = 0 ;
  PyObject * obj15 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOO:Packet_parseInsAdvancedConfiguration",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseInsAdvancedConfiguration" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseInsAdvancedConfiguration" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseInsAdvancedConfiguration" "', argument " "3"" of type '" "uint8_t *""'"); 
  }
  arg3 = reinterpret_cast< uint8_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseInsAdvancedConfiguration" "', argument " "4"" of type '" "uint8_t *""'"); 
  }
  arg4 = reinterpret_cast< uint8_t * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseInsAdvancedConfiguration" "', argument " "5"" of type '" "uint8_t *""'"); 
  }
  arg5 = reinterpret_cast< uint8_t * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_parseInsAdvancedConfiguration" "', argument " "6"" of type '" "uint8_t *""'"); 
  }
  arg6 = reinterpret_cast< uint8_t * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Packet_parseInsAdvancedConfiguration" "', argument " "7"" of type '" "uint8_t *""'"); 
  }
  arg7 = reinterpret_cast< uint8_t * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Packet_parseInsAdvancedConfiguration" "', argument " "8"" of type '" "uint8_t *""'"); 
  }
  arg8 = reinterpret_cast< uint8_t * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Packet_parseInsAdvancedConfiguration" "', argument " "9"" of type '" "uint8_t *""'"); 
  }
  arg9 = reinterpret_cast< uint8_t * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Packet_parseInsAdvancedConfiguration" "', argument " "10"" of type '" "float *""'"); 
  }
  arg10 = reinterpret_cast< float * >(argp10);
  res11 = SWIG_ConvertPtr(obj10, &argp11,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "Packet_parseInsAdvancedConfiguration" "', argument " "11"" of type '" "float *""'"); 
  }
  arg11 = reinterpret_cast< float * >(argp11);
  res12 = SWIG_ConvertPtr(obj11, &argp12,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "Packet_parseInsAdvancedConfiguration" "', argument " "12"" of type '" "float *""'"); 
  }
  arg12 = reinterpret_cast< float * >(argp12);
  res13 = SWIG_ConvertPtr(obj12, &argp13,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "Packet_parseInsAdvancedConfiguration" "', argument " "13"" of type '" "float *""'"); 
  }
  arg13 = reinterpret_cast< float * >(argp13);
  res14 = SWIG_ConvertPtr(obj13, &argp14,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res14)) {
    SWIG_exception_fail(SWIG_ArgError(res14), "in method '" "Packet_parseInsAdvancedConfiguration" "', argument " "14"" of type '" "float *""'"); 
  }
  arg14 = reinterpret_cast< float * >(argp14);
  res15 = SWIG_ConvertPtr(obj14, &argp15,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res15)) {
    SWIG_exception_fail(SWIG_ArgError(res15), "in method '" "Packet_parseInsAdvancedConfiguration" "', argument " "15"" of type '" "float *""'"); 
  }
  arg15 = reinterpret_cast< float * >(argp15);
  res16 = SWIG_ConvertPtr(obj15, &argp16,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res16)) {
    SWIG_exception_fail(SWIG_ArgError(res16), "in method '" "Packet_parseInsAdvancedConfiguration" "', argument " "16"" of type '" "float *""'"); 
  }
  arg16 = reinterpret_cast< float * >(argp16);
  (arg1)->parseInsAdvancedConfiguration(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseInsStateLla(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  vn::math::vec3d *arg3 = (vn::math::vec3d *) 0 ;
  vn::math::vec3f *arg4 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg5 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg6 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Packet_parseInsStateLla",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseInsStateLla" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseInsStateLla" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseInsStateLla" "', argument " "3"" of type '" "vn::math::vec3d *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3d * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseInsStateLla" "', argument " "4"" of type '" "vn::math::vec3f *""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseInsStateLla" "', argument " "5"" of type '" "vn::math::vec3f *""'"); 
  }
  arg5 = reinterpret_cast< vn::math::vec3f * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_parseInsStateLla" "', argument " "6"" of type '" "vn::math::vec3f *""'"); 
  }
  arg6 = reinterpret_cast< vn::math::vec3f * >(argp6);
  (arg1)->parseInsStateLla(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseInsStateEcef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  vn::math::vec3d *arg3 = (vn::math::vec3d *) 0 ;
  vn::math::vec3f *arg4 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg5 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg6 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Packet_parseInsStateEcef",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseInsStateEcef" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseInsStateEcef" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseInsStateEcef" "', argument " "3"" of type '" "vn::math::vec3d *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3d * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseInsStateEcef" "', argument " "4"" of type '" "vn::math::vec3f *""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseInsStateEcef" "', argument " "5"" of type '" "vn::math::vec3f *""'"); 
  }
  arg5 = reinterpret_cast< vn::math::vec3f * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_parseInsStateEcef" "', argument " "6"" of type '" "vn::math::vec3f *""'"); 
  }
  arg6 = reinterpret_cast< vn::math::vec3f * >(argp6);
  (arg1)->parseInsStateEcef(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseStartupFilterBiasEstimate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  float *arg4 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_parseStartupFilterBiasEstimate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseStartupFilterBiasEstimate" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseStartupFilterBiasEstimate" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseStartupFilterBiasEstimate" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseStartupFilterBiasEstimate" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  (arg1)->parseStartupFilterBiasEstimate(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseDeltaThetaAndDeltaVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  float *arg2 = (float *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg4 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_parseDeltaThetaAndDeltaVelocity",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseDeltaThetaAndDeltaVelocity" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseDeltaThetaAndDeltaVelocity" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseDeltaThetaAndDeltaVelocity" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseDeltaThetaAndDeltaVelocity" "', argument " "4"" of type '" "vn::math::vec3f *""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  (arg1)->parseDeltaThetaAndDeltaVelocity(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseDeltaThetaAndDeltaVelocityConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_parseDeltaThetaAndDeltaVelocityConfiguration",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseDeltaThetaAndDeltaVelocityConfiguration" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseDeltaThetaAndDeltaVelocityConfiguration" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseDeltaThetaAndDeltaVelocityConfiguration" "', argument " "3"" of type '" "uint8_t *""'"); 
  }
  arg3 = reinterpret_cast< uint8_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseDeltaThetaAndDeltaVelocityConfiguration" "', argument " "4"" of type '" "uint8_t *""'"); 
  }
  arg4 = reinterpret_cast< uint8_t * >(argp4);
  (arg1)->parseDeltaThetaAndDeltaVelocityConfiguration(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseReferenceVectorConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  uint32_t *arg4 = (uint32_t *) 0 ;
  float *arg5 = (float *) 0 ;
  vn::math::vec3d *arg6 = (vn::math::vec3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Packet_parseReferenceVectorConfiguration",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseReferenceVectorConfiguration" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseReferenceVectorConfiguration" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseReferenceVectorConfiguration" "', argument " "3"" of type '" "uint8_t *""'"); 
  }
  arg3 = reinterpret_cast< uint8_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseReferenceVectorConfiguration" "', argument " "4"" of type '" "uint32_t *""'"); 
  }
  arg4 = reinterpret_cast< uint32_t * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseReferenceVectorConfiguration" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_parseReferenceVectorConfiguration" "', argument " "6"" of type '" "vn::math::vec3d *""'"); 
  }
  arg6 = reinterpret_cast< vn::math::vec3d * >(argp6);
  (arg1)->parseReferenceVectorConfiguration(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseGyroCompensation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::mat3f *arg2 = (vn::math::mat3f *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_parseGyroCompensation",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseGyroCompensation" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseGyroCompensation" "', argument " "2"" of type '" "vn::math::mat3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::mat3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseGyroCompensation" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  (arg1)->parseGyroCompensation(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseImuFilteringConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  uint16_t *arg2 = (uint16_t *) 0 ;
  uint16_t *arg3 = (uint16_t *) 0 ;
  uint16_t *arg4 = (uint16_t *) 0 ;
  uint16_t *arg5 = (uint16_t *) 0 ;
  uint16_t *arg6 = (uint16_t *) 0 ;
  uint8_t *arg7 = (uint8_t *) 0 ;
  uint8_t *arg8 = (uint8_t *) 0 ;
  uint8_t *arg9 = (uint8_t *) 0 ;
  uint8_t *arg10 = (uint8_t *) 0 ;
  uint8_t *arg11 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:Packet_parseImuFilteringConfiguration",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseImuFilteringConfiguration" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseImuFilteringConfiguration" "', argument " "2"" of type '" "uint16_t *""'"); 
  }
  arg2 = reinterpret_cast< uint16_t * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseImuFilteringConfiguration" "', argument " "3"" of type '" "uint16_t *""'"); 
  }
  arg3 = reinterpret_cast< uint16_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseImuFilteringConfiguration" "', argument " "4"" of type '" "uint16_t *""'"); 
  }
  arg4 = reinterpret_cast< uint16_t * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseImuFilteringConfiguration" "', argument " "5"" of type '" "uint16_t *""'"); 
  }
  arg5 = reinterpret_cast< uint16_t * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Packet_parseImuFilteringConfiguration" "', argument " "6"" of type '" "uint16_t *""'"); 
  }
  arg6 = reinterpret_cast< uint16_t * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Packet_parseImuFilteringConfiguration" "', argument " "7"" of type '" "uint8_t *""'"); 
  }
  arg7 = reinterpret_cast< uint8_t * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Packet_parseImuFilteringConfiguration" "', argument " "8"" of type '" "uint8_t *""'"); 
  }
  arg8 = reinterpret_cast< uint8_t * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Packet_parseImuFilteringConfiguration" "', argument " "9"" of type '" "uint8_t *""'"); 
  }
  arg9 = reinterpret_cast< uint8_t * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Packet_parseImuFilteringConfiguration" "', argument " "10"" of type '" "uint8_t *""'"); 
  }
  arg10 = reinterpret_cast< uint8_t * >(argp10);
  res11 = SWIG_ConvertPtr(obj10, &argp11,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "Packet_parseImuFilteringConfiguration" "', argument " "11"" of type '" "uint8_t *""'"); 
  }
  arg11 = reinterpret_cast< uint8_t * >(argp11);
  (arg1)->parseImuFilteringConfiguration(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseGpsCompassBaseline(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Packet_parseGpsCompassBaseline",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseGpsCompassBaseline" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseGpsCompassBaseline" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseGpsCompassBaseline" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  (arg1)->parseGpsCompassBaseline(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseGpsCompassEstimatedBaseline(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint16_t *arg3 = (uint16_t *) 0 ;
  vn::math::vec3f *arg4 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg5 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Packet_parseGpsCompassEstimatedBaseline",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseGpsCompassEstimatedBaseline" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseGpsCompassEstimatedBaseline" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseGpsCompassEstimatedBaseline" "', argument " "3"" of type '" "uint16_t *""'"); 
  }
  arg3 = reinterpret_cast< uint16_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseGpsCompassEstimatedBaseline" "', argument " "4"" of type '" "vn::math::vec3f *""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseGpsCompassEstimatedBaseline" "', argument " "5"" of type '" "vn::math::vec3f *""'"); 
  }
  arg5 = reinterpret_cast< vn::math::vec3f * >(argp5);
  (arg1)->parseGpsCompassEstimatedBaseline(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseImuRateConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  uint16_t *arg2 = (uint16_t *) 0 ;
  uint16_t *arg3 = (uint16_t *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Packet_parseImuRateConfiguration",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseImuRateConfiguration" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseImuRateConfiguration" "', argument " "2"" of type '" "uint16_t *""'"); 
  }
  arg2 = reinterpret_cast< uint16_t * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseImuRateConfiguration" "', argument " "3"" of type '" "uint16_t *""'"); 
  }
  arg3 = reinterpret_cast< uint16_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseImuRateConfiguration" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Packet_parseImuRateConfiguration" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  (arg1)->parseImuRateConfiguration(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseYawPitchRollTrueBodyAccelerationAndAngularRates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg4 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_parseYawPitchRollTrueBodyAccelerationAndAngularRates",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseYawPitchRollTrueBodyAccelerationAndAngularRates" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseYawPitchRollTrueBodyAccelerationAndAngularRates" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseYawPitchRollTrueBodyAccelerationAndAngularRates" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseYawPitchRollTrueBodyAccelerationAndAngularRates" "', argument " "4"" of type '" "vn::math::vec3f *""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  (arg1)->parseYawPitchRollTrueBodyAccelerationAndAngularRates(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Packet_parseYawPitchRollTrueInertialAccelerationAndAngularRates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = (vn::protocol::uart::Packet *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg3 = (vn::math::vec3f *) 0 ;
  vn::math::vec3f *arg4 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Packet_parseYawPitchRollTrueInertialAccelerationAndAngularRates",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__protocol__uart__Packet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Packet_parseYawPitchRollTrueInertialAccelerationAndAngularRates" "', argument " "1"" of type '" "vn::protocol::uart::Packet *""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Packet_parseYawPitchRollTrueInertialAccelerationAndAngularRates" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Packet_parseYawPitchRollTrueInertialAccelerationAndAngularRates" "', argument " "3"" of type '" "vn::math::vec3f *""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Packet_parseYawPitchRollTrueInertialAccelerationAndAngularRates" "', argument " "4"" of type '" "vn::math::vec3f *""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  (arg1)->parseYawPitchRollTrueInertialAccelerationAndAngularRates(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Packet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__protocol__uart__Packet, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_BinaryOutputRegister_async_mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::BinaryOutputRegister *arg1 = (vn::sensors::BinaryOutputRegister *) 0 ;
  ASYNCMODE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BinaryOutputRegister_async_mode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__BinaryOutputRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryOutputRegister_async_mode_set" "', argument " "1"" of type '" "vn::sensors::BinaryOutputRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::BinaryOutputRegister * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ASYNCMODE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BinaryOutputRegister_async_mode_set" "', argument " "2"" of type '" "ASYNCMODE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BinaryOutputRegister_async_mode_set" "', argument " "2"" of type '" "ASYNCMODE""'");
    } else {
      ASYNCMODE * temp = reinterpret_cast< ASYNCMODE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->asyncMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryOutputRegister_async_mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::BinaryOutputRegister *arg1 = (vn::sensors::BinaryOutputRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ASYNCMODE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BinaryOutputRegister_async_mode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__BinaryOutputRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryOutputRegister_async_mode_get" "', argument " "1"" of type '" "vn::sensors::BinaryOutputRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::BinaryOutputRegister * >(argp1);
  result =  ((arg1)->asyncMode);
  resultobj = SWIG_NewPointerObj((new ASYNCMODE(static_cast< const ASYNCMODE& >(result))), SWIGTYPE_p_ASYNCMODE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryOutputRegister_rate_divisor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::BinaryOutputRegister *arg1 = (vn::sensors::BinaryOutputRegister *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BinaryOutputRegister_rate_divisor_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__BinaryOutputRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryOutputRegister_rate_divisor_set" "', argument " "1"" of type '" "vn::sensors::BinaryOutputRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::BinaryOutputRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinaryOutputRegister_rate_divisor_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->rateDivisor = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryOutputRegister_rate_divisor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::BinaryOutputRegister *arg1 = (vn::sensors::BinaryOutputRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BinaryOutputRegister_rate_divisor_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__BinaryOutputRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryOutputRegister_rate_divisor_get" "', argument " "1"" of type '" "vn::sensors::BinaryOutputRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::BinaryOutputRegister * >(argp1);
  result = (uint16_t) ((arg1)->rateDivisor);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryOutputRegister_common_field_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::BinaryOutputRegister *arg1 = (vn::sensors::BinaryOutputRegister *) 0 ;
  COMMONGROUP arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BinaryOutputRegister_common_field_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__BinaryOutputRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryOutputRegister_common_field_set" "', argument " "1"" of type '" "vn::sensors::BinaryOutputRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::BinaryOutputRegister * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_COMMONGROUP,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BinaryOutputRegister_common_field_set" "', argument " "2"" of type '" "COMMONGROUP""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BinaryOutputRegister_common_field_set" "', argument " "2"" of type '" "COMMONGROUP""'");
    } else {
      COMMONGROUP * temp = reinterpret_cast< COMMONGROUP * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->commonField = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryOutputRegister_common_field_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::BinaryOutputRegister *arg1 = (vn::sensors::BinaryOutputRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  COMMONGROUP result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BinaryOutputRegister_common_field_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__BinaryOutputRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryOutputRegister_common_field_get" "', argument " "1"" of type '" "vn::sensors::BinaryOutputRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::BinaryOutputRegister * >(argp1);
  result =  ((arg1)->commonField);
  resultobj = SWIG_NewPointerObj((new COMMONGROUP(static_cast< const COMMONGROUP& >(result))), SWIGTYPE_p_COMMONGROUP, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryOutputRegister_time_field_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::BinaryOutputRegister *arg1 = (vn::sensors::BinaryOutputRegister *) 0 ;
  TIMEGROUP arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BinaryOutputRegister_time_field_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__BinaryOutputRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryOutputRegister_time_field_set" "', argument " "1"" of type '" "vn::sensors::BinaryOutputRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::BinaryOutputRegister * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_TIMEGROUP,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BinaryOutputRegister_time_field_set" "', argument " "2"" of type '" "TIMEGROUP""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BinaryOutputRegister_time_field_set" "', argument " "2"" of type '" "TIMEGROUP""'");
    } else {
      TIMEGROUP * temp = reinterpret_cast< TIMEGROUP * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->timeField = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryOutputRegister_time_field_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::BinaryOutputRegister *arg1 = (vn::sensors::BinaryOutputRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TIMEGROUP result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BinaryOutputRegister_time_field_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__BinaryOutputRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryOutputRegister_time_field_get" "', argument " "1"" of type '" "vn::sensors::BinaryOutputRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::BinaryOutputRegister * >(argp1);
  result =  ((arg1)->timeField);
  resultobj = SWIG_NewPointerObj((new TIMEGROUP(static_cast< const TIMEGROUP& >(result))), SWIGTYPE_p_TIMEGROUP, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryOutputRegister_imu_field_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::BinaryOutputRegister *arg1 = (vn::sensors::BinaryOutputRegister *) 0 ;
  IMUGROUP arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BinaryOutputRegister_imu_field_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__BinaryOutputRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryOutputRegister_imu_field_set" "', argument " "1"" of type '" "vn::sensors::BinaryOutputRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::BinaryOutputRegister * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IMUGROUP,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BinaryOutputRegister_imu_field_set" "', argument " "2"" of type '" "IMUGROUP""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BinaryOutputRegister_imu_field_set" "', argument " "2"" of type '" "IMUGROUP""'");
    } else {
      IMUGROUP * temp = reinterpret_cast< IMUGROUP * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->imuField = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryOutputRegister_imu_field_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::BinaryOutputRegister *arg1 = (vn::sensors::BinaryOutputRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IMUGROUP result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BinaryOutputRegister_imu_field_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__BinaryOutputRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryOutputRegister_imu_field_get" "', argument " "1"" of type '" "vn::sensors::BinaryOutputRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::BinaryOutputRegister * >(argp1);
  result =  ((arg1)->imuField);
  resultobj = SWIG_NewPointerObj((new IMUGROUP(static_cast< const IMUGROUP& >(result))), SWIGTYPE_p_IMUGROUP, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryOutputRegister_gps_field_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::BinaryOutputRegister *arg1 = (vn::sensors::BinaryOutputRegister *) 0 ;
  GPSGROUP arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BinaryOutputRegister_gps_field_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__BinaryOutputRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryOutputRegister_gps_field_set" "', argument " "1"" of type '" "vn::sensors::BinaryOutputRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::BinaryOutputRegister * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GPSGROUP,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BinaryOutputRegister_gps_field_set" "', argument " "2"" of type '" "GPSGROUP""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BinaryOutputRegister_gps_field_set" "', argument " "2"" of type '" "GPSGROUP""'");
    } else {
      GPSGROUP * temp = reinterpret_cast< GPSGROUP * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->gpsField = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryOutputRegister_gps_field_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::BinaryOutputRegister *arg1 = (vn::sensors::BinaryOutputRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GPSGROUP result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BinaryOutputRegister_gps_field_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__BinaryOutputRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryOutputRegister_gps_field_get" "', argument " "1"" of type '" "vn::sensors::BinaryOutputRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::BinaryOutputRegister * >(argp1);
  result =  ((arg1)->gpsField);
  resultobj = SWIG_NewPointerObj((new GPSGROUP(static_cast< const GPSGROUP& >(result))), SWIGTYPE_p_GPSGROUP, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryOutputRegister_attitude_field_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::BinaryOutputRegister *arg1 = (vn::sensors::BinaryOutputRegister *) 0 ;
  ATTITUDEGROUP arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BinaryOutputRegister_attitude_field_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__BinaryOutputRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryOutputRegister_attitude_field_set" "', argument " "1"" of type '" "vn::sensors::BinaryOutputRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::BinaryOutputRegister * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ATTITUDEGROUP,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BinaryOutputRegister_attitude_field_set" "', argument " "2"" of type '" "ATTITUDEGROUP""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BinaryOutputRegister_attitude_field_set" "', argument " "2"" of type '" "ATTITUDEGROUP""'");
    } else {
      ATTITUDEGROUP * temp = reinterpret_cast< ATTITUDEGROUP * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->attitudeField = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryOutputRegister_attitude_field_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::BinaryOutputRegister *arg1 = (vn::sensors::BinaryOutputRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ATTITUDEGROUP result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BinaryOutputRegister_attitude_field_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__BinaryOutputRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryOutputRegister_attitude_field_get" "', argument " "1"" of type '" "vn::sensors::BinaryOutputRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::BinaryOutputRegister * >(argp1);
  result =  ((arg1)->attitudeField);
  resultobj = SWIG_NewPointerObj((new ATTITUDEGROUP(static_cast< const ATTITUDEGROUP& >(result))), SWIGTYPE_p_ATTITUDEGROUP, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryOutputRegister_ins_field_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::BinaryOutputRegister *arg1 = (vn::sensors::BinaryOutputRegister *) 0 ;
  INSGROUP arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BinaryOutputRegister_ins_field_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__BinaryOutputRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryOutputRegister_ins_field_set" "', argument " "1"" of type '" "vn::sensors::BinaryOutputRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::BinaryOutputRegister * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_INSGROUP,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BinaryOutputRegister_ins_field_set" "', argument " "2"" of type '" "INSGROUP""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BinaryOutputRegister_ins_field_set" "', argument " "2"" of type '" "INSGROUP""'");
    } else {
      INSGROUP * temp = reinterpret_cast< INSGROUP * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->insField = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryOutputRegister_ins_field_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::BinaryOutputRegister *arg1 = (vn::sensors::BinaryOutputRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  INSGROUP result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BinaryOutputRegister_ins_field_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__BinaryOutputRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryOutputRegister_ins_field_get" "', argument " "1"" of type '" "vn::sensors::BinaryOutputRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::BinaryOutputRegister * >(argp1);
  result =  ((arg1)->insField);
  resultobj = SWIG_NewPointerObj((new INSGROUP(static_cast< const INSGROUP& >(result))), SWIGTYPE_p_INSGROUP, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BinaryOutputRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::BinaryOutputRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BinaryOutputRegister")) SWIG_fail;
  result = (vn::sensors::BinaryOutputRegister *)new vn::sensors::BinaryOutputRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__BinaryOutputRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BinaryOutputRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ASYNCMODE arg1 ;
  uint16_t arg2 ;
  COMMONGROUP arg3 ;
  TIMEGROUP arg4 ;
  IMUGROUP arg5 ;
  GPSGROUP arg6 ;
  ATTITUDEGROUP arg7 ;
  INSGROUP arg8 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  vn::sensors::BinaryOutputRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_BinaryOutputRegister",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ASYNCMODE,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BinaryOutputRegister" "', argument " "1"" of type '" "ASYNCMODE""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinaryOutputRegister" "', argument " "1"" of type '" "ASYNCMODE""'");
    } else {
      ASYNCMODE * temp = reinterpret_cast< ASYNCMODE * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BinaryOutputRegister" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_COMMONGROUP,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_BinaryOutputRegister" "', argument " "3"" of type '" "COMMONGROUP""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinaryOutputRegister" "', argument " "3"" of type '" "COMMONGROUP""'");
    } else {
      COMMONGROUP * temp = reinterpret_cast< COMMONGROUP * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_TIMEGROUP,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_BinaryOutputRegister" "', argument " "4"" of type '" "TIMEGROUP""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinaryOutputRegister" "', argument " "4"" of type '" "TIMEGROUP""'");
    } else {
      TIMEGROUP * temp = reinterpret_cast< TIMEGROUP * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_IMUGROUP,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_BinaryOutputRegister" "', argument " "5"" of type '" "IMUGROUP""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinaryOutputRegister" "', argument " "5"" of type '" "IMUGROUP""'");
    } else {
      IMUGROUP * temp = reinterpret_cast< IMUGROUP * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_GPSGROUP,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_BinaryOutputRegister" "', argument " "6"" of type '" "GPSGROUP""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinaryOutputRegister" "', argument " "6"" of type '" "GPSGROUP""'");
    } else {
      GPSGROUP * temp = reinterpret_cast< GPSGROUP * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_ATTITUDEGROUP,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_BinaryOutputRegister" "', argument " "7"" of type '" "ATTITUDEGROUP""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinaryOutputRegister" "', argument " "7"" of type '" "ATTITUDEGROUP""'");
    } else {
      ATTITUDEGROUP * temp = reinterpret_cast< ATTITUDEGROUP * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_INSGROUP,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_BinaryOutputRegister" "', argument " "8"" of type '" "INSGROUP""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinaryOutputRegister" "', argument " "8"" of type '" "INSGROUP""'");
    } else {
      INSGROUP * temp = reinterpret_cast< INSGROUP * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  result = (vn::sensors::BinaryOutputRegister *)new vn::sensors::BinaryOutputRegister(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__BinaryOutputRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BinaryOutputRegister__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint16_t arg1 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  uint16_t arg4 ;
  uint16_t arg5 ;
  uint16_t arg6 ;
  uint16_t arg7 ;
  uint16_t arg8 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  unsigned short val6 ;
  int ecode6 = 0 ;
  unsigned short val7 ;
  int ecode7 = 0 ;
  unsigned short val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  vn::sensors::BinaryOutputRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_BinaryOutputRegister",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_short(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BinaryOutputRegister" "', argument " "1"" of type '" "uint16_t""'");
  } 
  arg1 = static_cast< uint16_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BinaryOutputRegister" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BinaryOutputRegister" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_BinaryOutputRegister" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_BinaryOutputRegister" "', argument " "5"" of type '" "uint16_t""'");
  } 
  arg5 = static_cast< uint16_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_short(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_BinaryOutputRegister" "', argument " "6"" of type '" "uint16_t""'");
  } 
  arg6 = static_cast< uint16_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_short(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_BinaryOutputRegister" "', argument " "7"" of type '" "uint16_t""'");
  } 
  arg7 = static_cast< uint16_t >(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_short(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_BinaryOutputRegister" "', argument " "8"" of type '" "uint16_t""'");
  } 
  arg8 = static_cast< uint16_t >(val8);
  result = (vn::sensors::BinaryOutputRegister *)new vn::sensors::BinaryOutputRegister(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__BinaryOutputRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BinaryOutputRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_BinaryOutputRegister__SWIG_0(self, args);
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ASYNCMODE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_COMMONGROUP, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_TIMEGROUP, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_IMUGROUP, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_GPSGROUP, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_ATTITUDEGROUP, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_INSGROUP, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_new_BinaryOutputRegister__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_short(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_short(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_unsigned_SS_short(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_unsigned_SS_short(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_new_BinaryOutputRegister__SWIG_2(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_BinaryOutputRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::BinaryOutputRegister::BinaryOutputRegister()\n"
    "    vn::sensors::BinaryOutputRegister::BinaryOutputRegister(ASYNCMODE,uint16_t,COMMONGROUP,TIMEGROUP,IMUGROUP,GPSGROUP,ATTITUDEGROUP,INSGROUP)\n"
    "    vn::sensors::BinaryOutputRegister::BinaryOutputRegister(uint16_t,uint16_t,uint16_t,uint16_t,uint16_t,uint16_t,uint16_t,uint16_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_BinaryOutputRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::BinaryOutputRegister *arg1 = (vn::sensors::BinaryOutputRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BinaryOutputRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__BinaryOutputRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BinaryOutputRegister" "', argument " "1"" of type '" "vn::sensors::BinaryOutputRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::BinaryOutputRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BinaryOutputRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__BinaryOutputRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_QuaternionMagneticAccelerationAndAngularRatesRegister_quat_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *) 0 ;
  vn::math::vec4f *arg2 = (vn::math::vec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:QuaternionMagneticAccelerationAndAngularRatesRegister_quat_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__QuaternionMagneticAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuaternionMagneticAccelerationAndAngularRatesRegister_quat_set" "', argument " "1"" of type '" "vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "QuaternionMagneticAccelerationAndAngularRatesRegister_quat_set" "', argument " "2"" of type '" "vn::math::vec4f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec4f * >(argp2);
  if (arg1) (arg1)->quat = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuaternionMagneticAccelerationAndAngularRatesRegister_quat_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec4f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:QuaternionMagneticAccelerationAndAngularRatesRegister_quat_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__QuaternionMagneticAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuaternionMagneticAccelerationAndAngularRatesRegister_quat_get" "', argument " "1"" of type '" "vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister * >(argp1);
  result = (vn::math::vec4f *)& ((arg1)->quat);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_4_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuaternionMagneticAccelerationAndAngularRatesRegister_mag_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:QuaternionMagneticAccelerationAndAngularRatesRegister_mag_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__QuaternionMagneticAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuaternionMagneticAccelerationAndAngularRatesRegister_mag_set" "', argument " "1"" of type '" "vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "QuaternionMagneticAccelerationAndAngularRatesRegister_mag_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->mag = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuaternionMagneticAccelerationAndAngularRatesRegister_mag_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:QuaternionMagneticAccelerationAndAngularRatesRegister_mag_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__QuaternionMagneticAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuaternionMagneticAccelerationAndAngularRatesRegister_mag_get" "', argument " "1"" of type '" "vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->mag);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuaternionMagneticAccelerationAndAngularRatesRegister_accel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:QuaternionMagneticAccelerationAndAngularRatesRegister_accel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__QuaternionMagneticAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuaternionMagneticAccelerationAndAngularRatesRegister_accel_set" "', argument " "1"" of type '" "vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "QuaternionMagneticAccelerationAndAngularRatesRegister_accel_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->accel = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuaternionMagneticAccelerationAndAngularRatesRegister_accel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:QuaternionMagneticAccelerationAndAngularRatesRegister_accel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__QuaternionMagneticAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuaternionMagneticAccelerationAndAngularRatesRegister_accel_get" "', argument " "1"" of type '" "vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->accel);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuaternionMagneticAccelerationAndAngularRatesRegister_gyro_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:QuaternionMagneticAccelerationAndAngularRatesRegister_gyro_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__QuaternionMagneticAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuaternionMagneticAccelerationAndAngularRatesRegister_gyro_set" "', argument " "1"" of type '" "vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "QuaternionMagneticAccelerationAndAngularRatesRegister_gyro_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->gyro = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuaternionMagneticAccelerationAndAngularRatesRegister_gyro_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:QuaternionMagneticAccelerationAndAngularRatesRegister_gyro_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__QuaternionMagneticAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuaternionMagneticAccelerationAndAngularRatesRegister_gyro_get" "', argument " "1"" of type '" "vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->gyro);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_QuaternionMagneticAccelerationAndAngularRatesRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_QuaternionMagneticAccelerationAndAngularRatesRegister")) SWIG_fail;
  result = (vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *)new vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__QuaternionMagneticAccelerationAndAngularRatesRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_QuaternionMagneticAccelerationAndAngularRatesRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec4f arg1 ;
  vn::math::vec3f arg2 ;
  vn::math::vec3f arg3 ;
  vn::math::vec3f arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_QuaternionMagneticAccelerationAndAngularRatesRegister",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_4_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_QuaternionMagneticAccelerationAndAngularRatesRegister" "', argument " "1"" of type '" "vn::math::vec4f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_QuaternionMagneticAccelerationAndAngularRatesRegister" "', argument " "1"" of type '" "vn::math::vec4f""'");
    } else {
      vn::math::vec4f * temp = reinterpret_cast< vn::math::vec4f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_QuaternionMagneticAccelerationAndAngularRatesRegister" "', argument " "2"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_QuaternionMagneticAccelerationAndAngularRatesRegister" "', argument " "2"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_QuaternionMagneticAccelerationAndAngularRatesRegister" "', argument " "3"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_QuaternionMagneticAccelerationAndAngularRatesRegister" "', argument " "3"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_QuaternionMagneticAccelerationAndAngularRatesRegister" "', argument " "4"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_QuaternionMagneticAccelerationAndAngularRatesRegister" "', argument " "4"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = (vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *)new vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__QuaternionMagneticAccelerationAndAngularRatesRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_QuaternionMagneticAccelerationAndAngularRatesRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_QuaternionMagneticAccelerationAndAngularRatesRegister__SWIG_0(self, args);
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__math__vecT_4_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_QuaternionMagneticAccelerationAndAngularRatesRegister__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_QuaternionMagneticAccelerationAndAngularRatesRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister::QuaternionMagneticAccelerationAndAngularRatesRegister()\n"
    "    vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister::QuaternionMagneticAccelerationAndAngularRatesRegister(vn::math::vec4f,vn::math::vec3f,vn::math::vec3f,vn::math::vec3f)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_QuaternionMagneticAccelerationAndAngularRatesRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_QuaternionMagneticAccelerationAndAngularRatesRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__QuaternionMagneticAccelerationAndAngularRatesRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_QuaternionMagneticAccelerationAndAngularRatesRegister" "', argument " "1"" of type '" "vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *QuaternionMagneticAccelerationAndAngularRatesRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__QuaternionMagneticAccelerationAndAngularRatesRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_MagneticAccelerationAndAngularRatesRegister_mag_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagneticAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::MagneticAccelerationAndAngularRatesRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MagneticAccelerationAndAngularRatesRegister_mag_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__MagneticAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagneticAccelerationAndAngularRatesRegister_mag_set" "', argument " "1"" of type '" "vn::sensors::MagneticAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagneticAccelerationAndAngularRatesRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MagneticAccelerationAndAngularRatesRegister_mag_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->mag = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MagneticAccelerationAndAngularRatesRegister_mag_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagneticAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::MagneticAccelerationAndAngularRatesRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MagneticAccelerationAndAngularRatesRegister_mag_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__MagneticAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagneticAccelerationAndAngularRatesRegister_mag_get" "', argument " "1"" of type '" "vn::sensors::MagneticAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagneticAccelerationAndAngularRatesRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->mag);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MagneticAccelerationAndAngularRatesRegister_accel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagneticAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::MagneticAccelerationAndAngularRatesRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MagneticAccelerationAndAngularRatesRegister_accel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__MagneticAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagneticAccelerationAndAngularRatesRegister_accel_set" "', argument " "1"" of type '" "vn::sensors::MagneticAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagneticAccelerationAndAngularRatesRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MagneticAccelerationAndAngularRatesRegister_accel_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->accel = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MagneticAccelerationAndAngularRatesRegister_accel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagneticAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::MagneticAccelerationAndAngularRatesRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MagneticAccelerationAndAngularRatesRegister_accel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__MagneticAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagneticAccelerationAndAngularRatesRegister_accel_get" "', argument " "1"" of type '" "vn::sensors::MagneticAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagneticAccelerationAndAngularRatesRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->accel);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MagneticAccelerationAndAngularRatesRegister_gyro_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagneticAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::MagneticAccelerationAndAngularRatesRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MagneticAccelerationAndAngularRatesRegister_gyro_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__MagneticAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagneticAccelerationAndAngularRatesRegister_gyro_set" "', argument " "1"" of type '" "vn::sensors::MagneticAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagneticAccelerationAndAngularRatesRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MagneticAccelerationAndAngularRatesRegister_gyro_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->gyro = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MagneticAccelerationAndAngularRatesRegister_gyro_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagneticAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::MagneticAccelerationAndAngularRatesRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MagneticAccelerationAndAngularRatesRegister_gyro_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__MagneticAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagneticAccelerationAndAngularRatesRegister_gyro_get" "', argument " "1"" of type '" "vn::sensors::MagneticAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagneticAccelerationAndAngularRatesRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->gyro);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MagneticAccelerationAndAngularRatesRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagneticAccelerationAndAngularRatesRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MagneticAccelerationAndAngularRatesRegister")) SWIG_fail;
  result = (vn::sensors::MagneticAccelerationAndAngularRatesRegister *)new vn::sensors::MagneticAccelerationAndAngularRatesRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__MagneticAccelerationAndAngularRatesRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MagneticAccelerationAndAngularRatesRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3f arg1 ;
  vn::math::vec3f arg2 ;
  vn::math::vec3f arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vn::sensors::MagneticAccelerationAndAngularRatesRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_MagneticAccelerationAndAngularRatesRegister",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MagneticAccelerationAndAngularRatesRegister" "', argument " "1"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MagneticAccelerationAndAngularRatesRegister" "', argument " "1"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MagneticAccelerationAndAngularRatesRegister" "', argument " "2"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MagneticAccelerationAndAngularRatesRegister" "', argument " "2"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_MagneticAccelerationAndAngularRatesRegister" "', argument " "3"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MagneticAccelerationAndAngularRatesRegister" "', argument " "3"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (vn::sensors::MagneticAccelerationAndAngularRatesRegister *)new vn::sensors::MagneticAccelerationAndAngularRatesRegister(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__MagneticAccelerationAndAngularRatesRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MagneticAccelerationAndAngularRatesRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MagneticAccelerationAndAngularRatesRegister__SWIG_0(self, args);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_MagneticAccelerationAndAngularRatesRegister__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MagneticAccelerationAndAngularRatesRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::MagneticAccelerationAndAngularRatesRegister::MagneticAccelerationAndAngularRatesRegister()\n"
    "    vn::sensors::MagneticAccelerationAndAngularRatesRegister::MagneticAccelerationAndAngularRatesRegister(vn::math::vec3f,vn::math::vec3f,vn::math::vec3f)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MagneticAccelerationAndAngularRatesRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagneticAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::MagneticAccelerationAndAngularRatesRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MagneticAccelerationAndAngularRatesRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__MagneticAccelerationAndAngularRatesRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MagneticAccelerationAndAngularRatesRegister" "', argument " "1"" of type '" "vn::sensors::MagneticAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagneticAccelerationAndAngularRatesRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MagneticAccelerationAndAngularRatesRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__MagneticAccelerationAndAngularRatesRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_MagneticAndGravityReferenceVectorsRegister_mag_ref_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagneticAndGravityReferenceVectorsRegister *arg1 = (vn::sensors::MagneticAndGravityReferenceVectorsRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MagneticAndGravityReferenceVectorsRegister_mag_ref_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__MagneticAndGravityReferenceVectorsRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagneticAndGravityReferenceVectorsRegister_mag_ref_set" "', argument " "1"" of type '" "vn::sensors::MagneticAndGravityReferenceVectorsRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagneticAndGravityReferenceVectorsRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MagneticAndGravityReferenceVectorsRegister_mag_ref_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->magRef = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MagneticAndGravityReferenceVectorsRegister_mag_ref_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagneticAndGravityReferenceVectorsRegister *arg1 = (vn::sensors::MagneticAndGravityReferenceVectorsRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MagneticAndGravityReferenceVectorsRegister_mag_ref_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__MagneticAndGravityReferenceVectorsRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagneticAndGravityReferenceVectorsRegister_mag_ref_get" "', argument " "1"" of type '" "vn::sensors::MagneticAndGravityReferenceVectorsRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagneticAndGravityReferenceVectorsRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->magRef);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MagneticAndGravityReferenceVectorsRegister_acc_ref_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagneticAndGravityReferenceVectorsRegister *arg1 = (vn::sensors::MagneticAndGravityReferenceVectorsRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MagneticAndGravityReferenceVectorsRegister_acc_ref_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__MagneticAndGravityReferenceVectorsRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagneticAndGravityReferenceVectorsRegister_acc_ref_set" "', argument " "1"" of type '" "vn::sensors::MagneticAndGravityReferenceVectorsRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagneticAndGravityReferenceVectorsRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MagneticAndGravityReferenceVectorsRegister_acc_ref_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->accRef = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MagneticAndGravityReferenceVectorsRegister_acc_ref_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagneticAndGravityReferenceVectorsRegister *arg1 = (vn::sensors::MagneticAndGravityReferenceVectorsRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MagneticAndGravityReferenceVectorsRegister_acc_ref_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__MagneticAndGravityReferenceVectorsRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagneticAndGravityReferenceVectorsRegister_acc_ref_get" "', argument " "1"" of type '" "vn::sensors::MagneticAndGravityReferenceVectorsRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagneticAndGravityReferenceVectorsRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->accRef);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MagneticAndGravityReferenceVectorsRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagneticAndGravityReferenceVectorsRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MagneticAndGravityReferenceVectorsRegister")) SWIG_fail;
  result = (vn::sensors::MagneticAndGravityReferenceVectorsRegister *)new vn::sensors::MagneticAndGravityReferenceVectorsRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__MagneticAndGravityReferenceVectorsRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MagneticAndGravityReferenceVectorsRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3f arg1 ;
  vn::math::vec3f arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::sensors::MagneticAndGravityReferenceVectorsRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_MagneticAndGravityReferenceVectorsRegister",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MagneticAndGravityReferenceVectorsRegister" "', argument " "1"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MagneticAndGravityReferenceVectorsRegister" "', argument " "1"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MagneticAndGravityReferenceVectorsRegister" "', argument " "2"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MagneticAndGravityReferenceVectorsRegister" "', argument " "2"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (vn::sensors::MagneticAndGravityReferenceVectorsRegister *)new vn::sensors::MagneticAndGravityReferenceVectorsRegister(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__MagneticAndGravityReferenceVectorsRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MagneticAndGravityReferenceVectorsRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MagneticAndGravityReferenceVectorsRegister__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_MagneticAndGravityReferenceVectorsRegister__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MagneticAndGravityReferenceVectorsRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::MagneticAndGravityReferenceVectorsRegister::MagneticAndGravityReferenceVectorsRegister()\n"
    "    vn::sensors::MagneticAndGravityReferenceVectorsRegister::MagneticAndGravityReferenceVectorsRegister(vn::math::vec3f,vn::math::vec3f)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MagneticAndGravityReferenceVectorsRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagneticAndGravityReferenceVectorsRegister *arg1 = (vn::sensors::MagneticAndGravityReferenceVectorsRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MagneticAndGravityReferenceVectorsRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__MagneticAndGravityReferenceVectorsRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MagneticAndGravityReferenceVectorsRegister" "', argument " "1"" of type '" "vn::sensors::MagneticAndGravityReferenceVectorsRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagneticAndGravityReferenceVectorsRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MagneticAndGravityReferenceVectorsRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__MagneticAndGravityReferenceVectorsRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_FilterMeasurementsVarianceParametersRegister_angular_walk_variance_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterMeasurementsVarianceParametersRegister *arg1 = (vn::sensors::FilterMeasurementsVarianceParametersRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FilterMeasurementsVarianceParametersRegister_angular_walk_variance_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterMeasurementsVarianceParametersRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterMeasurementsVarianceParametersRegister_angular_walk_variance_set" "', argument " "1"" of type '" "vn::sensors::FilterMeasurementsVarianceParametersRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterMeasurementsVarianceParametersRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FilterMeasurementsVarianceParametersRegister_angular_walk_variance_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->angularWalkVariance = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterMeasurementsVarianceParametersRegister_angular_walk_variance_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterMeasurementsVarianceParametersRegister *arg1 = (vn::sensors::FilterMeasurementsVarianceParametersRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FilterMeasurementsVarianceParametersRegister_angular_walk_variance_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterMeasurementsVarianceParametersRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterMeasurementsVarianceParametersRegister_angular_walk_variance_get" "', argument " "1"" of type '" "vn::sensors::FilterMeasurementsVarianceParametersRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterMeasurementsVarianceParametersRegister * >(argp1);
  result = (float) ((arg1)->angularWalkVariance);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterMeasurementsVarianceParametersRegister_angular_rate_variance_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterMeasurementsVarianceParametersRegister *arg1 = (vn::sensors::FilterMeasurementsVarianceParametersRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FilterMeasurementsVarianceParametersRegister_angular_rate_variance_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterMeasurementsVarianceParametersRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterMeasurementsVarianceParametersRegister_angular_rate_variance_set" "', argument " "1"" of type '" "vn::sensors::FilterMeasurementsVarianceParametersRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterMeasurementsVarianceParametersRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FilterMeasurementsVarianceParametersRegister_angular_rate_variance_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->angularRateVariance = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterMeasurementsVarianceParametersRegister_angular_rate_variance_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterMeasurementsVarianceParametersRegister *arg1 = (vn::sensors::FilterMeasurementsVarianceParametersRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FilterMeasurementsVarianceParametersRegister_angular_rate_variance_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterMeasurementsVarianceParametersRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterMeasurementsVarianceParametersRegister_angular_rate_variance_get" "', argument " "1"" of type '" "vn::sensors::FilterMeasurementsVarianceParametersRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterMeasurementsVarianceParametersRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->angularRateVariance);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterMeasurementsVarianceParametersRegister_magnetic_variance_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterMeasurementsVarianceParametersRegister *arg1 = (vn::sensors::FilterMeasurementsVarianceParametersRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FilterMeasurementsVarianceParametersRegister_magnetic_variance_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterMeasurementsVarianceParametersRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterMeasurementsVarianceParametersRegister_magnetic_variance_set" "', argument " "1"" of type '" "vn::sensors::FilterMeasurementsVarianceParametersRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterMeasurementsVarianceParametersRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FilterMeasurementsVarianceParametersRegister_magnetic_variance_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->magneticVariance = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterMeasurementsVarianceParametersRegister_magnetic_variance_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterMeasurementsVarianceParametersRegister *arg1 = (vn::sensors::FilterMeasurementsVarianceParametersRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FilterMeasurementsVarianceParametersRegister_magnetic_variance_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterMeasurementsVarianceParametersRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterMeasurementsVarianceParametersRegister_magnetic_variance_get" "', argument " "1"" of type '" "vn::sensors::FilterMeasurementsVarianceParametersRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterMeasurementsVarianceParametersRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->magneticVariance);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterMeasurementsVarianceParametersRegister_acceleration_variance_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterMeasurementsVarianceParametersRegister *arg1 = (vn::sensors::FilterMeasurementsVarianceParametersRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FilterMeasurementsVarianceParametersRegister_acceleration_variance_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterMeasurementsVarianceParametersRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterMeasurementsVarianceParametersRegister_acceleration_variance_set" "', argument " "1"" of type '" "vn::sensors::FilterMeasurementsVarianceParametersRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterMeasurementsVarianceParametersRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FilterMeasurementsVarianceParametersRegister_acceleration_variance_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->accelerationVariance = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterMeasurementsVarianceParametersRegister_acceleration_variance_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterMeasurementsVarianceParametersRegister *arg1 = (vn::sensors::FilterMeasurementsVarianceParametersRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FilterMeasurementsVarianceParametersRegister_acceleration_variance_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterMeasurementsVarianceParametersRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterMeasurementsVarianceParametersRegister_acceleration_variance_get" "', argument " "1"" of type '" "vn::sensors::FilterMeasurementsVarianceParametersRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterMeasurementsVarianceParametersRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->accelerationVariance);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FilterMeasurementsVarianceParametersRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterMeasurementsVarianceParametersRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FilterMeasurementsVarianceParametersRegister")) SWIG_fail;
  result = (vn::sensors::FilterMeasurementsVarianceParametersRegister *)new vn::sensors::FilterMeasurementsVarianceParametersRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__FilterMeasurementsVarianceParametersRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FilterMeasurementsVarianceParametersRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  vn::math::vec3f arg2 ;
  vn::math::vec3f arg3 ;
  vn::math::vec3f arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  vn::sensors::FilterMeasurementsVarianceParametersRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_FilterMeasurementsVarianceParametersRegister",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FilterMeasurementsVarianceParametersRegister" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_FilterMeasurementsVarianceParametersRegister" "', argument " "2"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FilterMeasurementsVarianceParametersRegister" "', argument " "2"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_FilterMeasurementsVarianceParametersRegister" "', argument " "3"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FilterMeasurementsVarianceParametersRegister" "', argument " "3"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_FilterMeasurementsVarianceParametersRegister" "', argument " "4"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FilterMeasurementsVarianceParametersRegister" "', argument " "4"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = (vn::sensors::FilterMeasurementsVarianceParametersRegister *)new vn::sensors::FilterMeasurementsVarianceParametersRegister(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__FilterMeasurementsVarianceParametersRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FilterMeasurementsVarianceParametersRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_FilterMeasurementsVarianceParametersRegister__SWIG_0(self, args);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_FilterMeasurementsVarianceParametersRegister__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FilterMeasurementsVarianceParametersRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::FilterMeasurementsVarianceParametersRegister::FilterMeasurementsVarianceParametersRegister()\n"
    "    vn::sensors::FilterMeasurementsVarianceParametersRegister::FilterMeasurementsVarianceParametersRegister(float,vn::math::vec3f,vn::math::vec3f,vn::math::vec3f)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_FilterMeasurementsVarianceParametersRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterMeasurementsVarianceParametersRegister *arg1 = (vn::sensors::FilterMeasurementsVarianceParametersRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FilterMeasurementsVarianceParametersRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterMeasurementsVarianceParametersRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FilterMeasurementsVarianceParametersRegister" "', argument " "1"" of type '" "vn::sensors::FilterMeasurementsVarianceParametersRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterMeasurementsVarianceParametersRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FilterMeasurementsVarianceParametersRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__FilterMeasurementsVarianceParametersRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_MagnetometerCompensationRegister_c_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagnetometerCompensationRegister *arg1 = (vn::sensors::MagnetometerCompensationRegister *) 0 ;
  vn::math::mat3f *arg2 = (vn::math::mat3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MagnetometerCompensationRegister_c_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__MagnetometerCompensationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagnetometerCompensationRegister_c_set" "', argument " "1"" of type '" "vn::sensors::MagnetometerCompensationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagnetometerCompensationRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MagnetometerCompensationRegister_c_set" "', argument " "2"" of type '" "vn::math::mat3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::mat3f * >(argp2);
  if (arg1) (arg1)->c = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MagnetometerCompensationRegister_c_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagnetometerCompensationRegister *arg1 = (vn::sensors::MagnetometerCompensationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::mat3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MagnetometerCompensationRegister_c_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__MagnetometerCompensationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagnetometerCompensationRegister_c_get" "', argument " "1"" of type '" "vn::sensors::MagnetometerCompensationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagnetometerCompensationRegister * >(argp1);
  result = (vn::math::mat3f *)& ((arg1)->c);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MagnetometerCompensationRegister_b_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagnetometerCompensationRegister *arg1 = (vn::sensors::MagnetometerCompensationRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MagnetometerCompensationRegister_b_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__MagnetometerCompensationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagnetometerCompensationRegister_b_set" "', argument " "1"" of type '" "vn::sensors::MagnetometerCompensationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagnetometerCompensationRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MagnetometerCompensationRegister_b_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->b = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MagnetometerCompensationRegister_b_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagnetometerCompensationRegister *arg1 = (vn::sensors::MagnetometerCompensationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MagnetometerCompensationRegister_b_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__MagnetometerCompensationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagnetometerCompensationRegister_b_get" "', argument " "1"" of type '" "vn::sensors::MagnetometerCompensationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagnetometerCompensationRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->b);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MagnetometerCompensationRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagnetometerCompensationRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MagnetometerCompensationRegister")) SWIG_fail;
  result = (vn::sensors::MagnetometerCompensationRegister *)new vn::sensors::MagnetometerCompensationRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__MagnetometerCompensationRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MagnetometerCompensationRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat3f arg1 ;
  vn::math::vec3f arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::sensors::MagnetometerCompensationRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_MagnetometerCompensationRegister",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__matT_3_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MagnetometerCompensationRegister" "', argument " "1"" of type '" "vn::math::mat3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MagnetometerCompensationRegister" "', argument " "1"" of type '" "vn::math::mat3f""'");
    } else {
      vn::math::mat3f * temp = reinterpret_cast< vn::math::mat3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MagnetometerCompensationRegister" "', argument " "2"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MagnetometerCompensationRegister" "', argument " "2"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (vn::sensors::MagnetometerCompensationRegister *)new vn::sensors::MagnetometerCompensationRegister(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__MagnetometerCompensationRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MagnetometerCompensationRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MagnetometerCompensationRegister__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__math__matT_3_3_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_MagnetometerCompensationRegister__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MagnetometerCompensationRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::MagnetometerCompensationRegister::MagnetometerCompensationRegister()\n"
    "    vn::sensors::MagnetometerCompensationRegister::MagnetometerCompensationRegister(vn::math::mat3f,vn::math::vec3f)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MagnetometerCompensationRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagnetometerCompensationRegister *arg1 = (vn::sensors::MagnetometerCompensationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MagnetometerCompensationRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__MagnetometerCompensationRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MagnetometerCompensationRegister" "', argument " "1"" of type '" "vn::sensors::MagnetometerCompensationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagnetometerCompensationRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MagnetometerCompensationRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__MagnetometerCompensationRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_FilterActiveTuningParametersRegister_magnetic_disturbance_gain_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterActiveTuningParametersRegister *arg1 = (vn::sensors::FilterActiveTuningParametersRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FilterActiveTuningParametersRegister_magnetic_disturbance_gain_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterActiveTuningParametersRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterActiveTuningParametersRegister_magnetic_disturbance_gain_set" "', argument " "1"" of type '" "vn::sensors::FilterActiveTuningParametersRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterActiveTuningParametersRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FilterActiveTuningParametersRegister_magnetic_disturbance_gain_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->magneticDisturbanceGain = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterActiveTuningParametersRegister_magnetic_disturbance_gain_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterActiveTuningParametersRegister *arg1 = (vn::sensors::FilterActiveTuningParametersRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FilterActiveTuningParametersRegister_magnetic_disturbance_gain_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterActiveTuningParametersRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterActiveTuningParametersRegister_magnetic_disturbance_gain_get" "', argument " "1"" of type '" "vn::sensors::FilterActiveTuningParametersRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterActiveTuningParametersRegister * >(argp1);
  result = (float) ((arg1)->magneticDisturbanceGain);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterActiveTuningParametersRegister_acceleration_disturbance_gain_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterActiveTuningParametersRegister *arg1 = (vn::sensors::FilterActiveTuningParametersRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FilterActiveTuningParametersRegister_acceleration_disturbance_gain_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterActiveTuningParametersRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterActiveTuningParametersRegister_acceleration_disturbance_gain_set" "', argument " "1"" of type '" "vn::sensors::FilterActiveTuningParametersRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterActiveTuningParametersRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FilterActiveTuningParametersRegister_acceleration_disturbance_gain_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->accelerationDisturbanceGain = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterActiveTuningParametersRegister_acceleration_disturbance_gain_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterActiveTuningParametersRegister *arg1 = (vn::sensors::FilterActiveTuningParametersRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FilterActiveTuningParametersRegister_acceleration_disturbance_gain_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterActiveTuningParametersRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterActiveTuningParametersRegister_acceleration_disturbance_gain_get" "', argument " "1"" of type '" "vn::sensors::FilterActiveTuningParametersRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterActiveTuningParametersRegister * >(argp1);
  result = (float) ((arg1)->accelerationDisturbanceGain);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterActiveTuningParametersRegister_magnetic_disturbance_memory_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterActiveTuningParametersRegister *arg1 = (vn::sensors::FilterActiveTuningParametersRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FilterActiveTuningParametersRegister_magnetic_disturbance_memory_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterActiveTuningParametersRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterActiveTuningParametersRegister_magnetic_disturbance_memory_set" "', argument " "1"" of type '" "vn::sensors::FilterActiveTuningParametersRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterActiveTuningParametersRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FilterActiveTuningParametersRegister_magnetic_disturbance_memory_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->magneticDisturbanceMemory = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterActiveTuningParametersRegister_magnetic_disturbance_memory_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterActiveTuningParametersRegister *arg1 = (vn::sensors::FilterActiveTuningParametersRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FilterActiveTuningParametersRegister_magnetic_disturbance_memory_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterActiveTuningParametersRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterActiveTuningParametersRegister_magnetic_disturbance_memory_get" "', argument " "1"" of type '" "vn::sensors::FilterActiveTuningParametersRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterActiveTuningParametersRegister * >(argp1);
  result = (float) ((arg1)->magneticDisturbanceMemory);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterActiveTuningParametersRegister_acceleration_disturbance_memory_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterActiveTuningParametersRegister *arg1 = (vn::sensors::FilterActiveTuningParametersRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FilterActiveTuningParametersRegister_acceleration_disturbance_memory_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterActiveTuningParametersRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterActiveTuningParametersRegister_acceleration_disturbance_memory_set" "', argument " "1"" of type '" "vn::sensors::FilterActiveTuningParametersRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterActiveTuningParametersRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FilterActiveTuningParametersRegister_acceleration_disturbance_memory_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->accelerationDisturbanceMemory = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterActiveTuningParametersRegister_acceleration_disturbance_memory_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterActiveTuningParametersRegister *arg1 = (vn::sensors::FilterActiveTuningParametersRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FilterActiveTuningParametersRegister_acceleration_disturbance_memory_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterActiveTuningParametersRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterActiveTuningParametersRegister_acceleration_disturbance_memory_get" "', argument " "1"" of type '" "vn::sensors::FilterActiveTuningParametersRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterActiveTuningParametersRegister * >(argp1);
  result = (float) ((arg1)->accelerationDisturbanceMemory);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FilterActiveTuningParametersRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterActiveTuningParametersRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FilterActiveTuningParametersRegister")) SWIG_fail;
  result = (vn::sensors::FilterActiveTuningParametersRegister *)new vn::sensors::FilterActiveTuningParametersRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__FilterActiveTuningParametersRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FilterActiveTuningParametersRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  vn::sensors::FilterActiveTuningParametersRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_FilterActiveTuningParametersRegister",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FilterActiveTuningParametersRegister" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FilterActiveTuningParametersRegister" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FilterActiveTuningParametersRegister" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_FilterActiveTuningParametersRegister" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = (vn::sensors::FilterActiveTuningParametersRegister *)new vn::sensors::FilterActiveTuningParametersRegister(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__FilterActiveTuningParametersRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FilterActiveTuningParametersRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_FilterActiveTuningParametersRegister__SWIG_0(self, args);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_FilterActiveTuningParametersRegister__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FilterActiveTuningParametersRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::FilterActiveTuningParametersRegister::FilterActiveTuningParametersRegister()\n"
    "    vn::sensors::FilterActiveTuningParametersRegister::FilterActiveTuningParametersRegister(float,float,float,float)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_FilterActiveTuningParametersRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterActiveTuningParametersRegister *arg1 = (vn::sensors::FilterActiveTuningParametersRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FilterActiveTuningParametersRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterActiveTuningParametersRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FilterActiveTuningParametersRegister" "', argument " "1"" of type '" "vn::sensors::FilterActiveTuningParametersRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterActiveTuningParametersRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FilterActiveTuningParametersRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__FilterActiveTuningParametersRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_AccelerationCompensationRegister_c_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::AccelerationCompensationRegister *arg1 = (vn::sensors::AccelerationCompensationRegister *) 0 ;
  vn::math::mat3f *arg2 = (vn::math::mat3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AccelerationCompensationRegister_c_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__AccelerationCompensationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AccelerationCompensationRegister_c_set" "', argument " "1"" of type '" "vn::sensors::AccelerationCompensationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::AccelerationCompensationRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AccelerationCompensationRegister_c_set" "', argument " "2"" of type '" "vn::math::mat3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::mat3f * >(argp2);
  if (arg1) (arg1)->c = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AccelerationCompensationRegister_c_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::AccelerationCompensationRegister *arg1 = (vn::sensors::AccelerationCompensationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::mat3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AccelerationCompensationRegister_c_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__AccelerationCompensationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AccelerationCompensationRegister_c_get" "', argument " "1"" of type '" "vn::sensors::AccelerationCompensationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::AccelerationCompensationRegister * >(argp1);
  result = (vn::math::mat3f *)& ((arg1)->c);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AccelerationCompensationRegister_b_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::AccelerationCompensationRegister *arg1 = (vn::sensors::AccelerationCompensationRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AccelerationCompensationRegister_b_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__AccelerationCompensationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AccelerationCompensationRegister_b_set" "', argument " "1"" of type '" "vn::sensors::AccelerationCompensationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::AccelerationCompensationRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AccelerationCompensationRegister_b_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->b = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AccelerationCompensationRegister_b_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::AccelerationCompensationRegister *arg1 = (vn::sensors::AccelerationCompensationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AccelerationCompensationRegister_b_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__AccelerationCompensationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AccelerationCompensationRegister_b_get" "', argument " "1"" of type '" "vn::sensors::AccelerationCompensationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::AccelerationCompensationRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->b);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AccelerationCompensationRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::AccelerationCompensationRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AccelerationCompensationRegister")) SWIG_fail;
  result = (vn::sensors::AccelerationCompensationRegister *)new vn::sensors::AccelerationCompensationRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__AccelerationCompensationRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AccelerationCompensationRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat3f arg1 ;
  vn::math::vec3f arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::sensors::AccelerationCompensationRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_AccelerationCompensationRegister",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__matT_3_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AccelerationCompensationRegister" "', argument " "1"" of type '" "vn::math::mat3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AccelerationCompensationRegister" "', argument " "1"" of type '" "vn::math::mat3f""'");
    } else {
      vn::math::mat3f * temp = reinterpret_cast< vn::math::mat3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_AccelerationCompensationRegister" "', argument " "2"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AccelerationCompensationRegister" "', argument " "2"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (vn::sensors::AccelerationCompensationRegister *)new vn::sensors::AccelerationCompensationRegister(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__AccelerationCompensationRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AccelerationCompensationRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_AccelerationCompensationRegister__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__math__matT_3_3_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_AccelerationCompensationRegister__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_AccelerationCompensationRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::AccelerationCompensationRegister::AccelerationCompensationRegister()\n"
    "    vn::sensors::AccelerationCompensationRegister::AccelerationCompensationRegister(vn::math::mat3f,vn::math::vec3f)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_AccelerationCompensationRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::AccelerationCompensationRegister *arg1 = (vn::sensors::AccelerationCompensationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AccelerationCompensationRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__AccelerationCompensationRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AccelerationCompensationRegister" "', argument " "1"" of type '" "vn::sensors::AccelerationCompensationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::AccelerationCompensationRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AccelerationCompensationRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__AccelerationCompensationRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_YawPitchRollMagneticAccelerationAndAngularRatesRegister_yaw_pitch_roll_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:YawPitchRollMagneticAccelerationAndAngularRatesRegister_yaw_pitch_roll_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__YawPitchRollMagneticAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YawPitchRollMagneticAccelerationAndAngularRatesRegister_yaw_pitch_roll_set" "', argument " "1"" of type '" "vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "YawPitchRollMagneticAccelerationAndAngularRatesRegister_yaw_pitch_roll_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->yawPitchRoll = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YawPitchRollMagneticAccelerationAndAngularRatesRegister_yaw_pitch_roll_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:YawPitchRollMagneticAccelerationAndAngularRatesRegister_yaw_pitch_roll_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__YawPitchRollMagneticAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YawPitchRollMagneticAccelerationAndAngularRatesRegister_yaw_pitch_roll_get" "', argument " "1"" of type '" "vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->yawPitchRoll);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YawPitchRollMagneticAccelerationAndAngularRatesRegister_mag_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:YawPitchRollMagneticAccelerationAndAngularRatesRegister_mag_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__YawPitchRollMagneticAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YawPitchRollMagneticAccelerationAndAngularRatesRegister_mag_set" "', argument " "1"" of type '" "vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "YawPitchRollMagneticAccelerationAndAngularRatesRegister_mag_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->mag = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YawPitchRollMagneticAccelerationAndAngularRatesRegister_mag_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:YawPitchRollMagneticAccelerationAndAngularRatesRegister_mag_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__YawPitchRollMagneticAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YawPitchRollMagneticAccelerationAndAngularRatesRegister_mag_get" "', argument " "1"" of type '" "vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->mag);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YawPitchRollMagneticAccelerationAndAngularRatesRegister_accel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:YawPitchRollMagneticAccelerationAndAngularRatesRegister_accel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__YawPitchRollMagneticAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YawPitchRollMagneticAccelerationAndAngularRatesRegister_accel_set" "', argument " "1"" of type '" "vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "YawPitchRollMagneticAccelerationAndAngularRatesRegister_accel_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->accel = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YawPitchRollMagneticAccelerationAndAngularRatesRegister_accel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:YawPitchRollMagneticAccelerationAndAngularRatesRegister_accel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__YawPitchRollMagneticAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YawPitchRollMagneticAccelerationAndAngularRatesRegister_accel_get" "', argument " "1"" of type '" "vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->accel);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YawPitchRollMagneticAccelerationAndAngularRatesRegister_gyro_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:YawPitchRollMagneticAccelerationAndAngularRatesRegister_gyro_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__YawPitchRollMagneticAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YawPitchRollMagneticAccelerationAndAngularRatesRegister_gyro_set" "', argument " "1"" of type '" "vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "YawPitchRollMagneticAccelerationAndAngularRatesRegister_gyro_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->gyro = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YawPitchRollMagneticAccelerationAndAngularRatesRegister_gyro_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:YawPitchRollMagneticAccelerationAndAngularRatesRegister_gyro_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__YawPitchRollMagneticAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YawPitchRollMagneticAccelerationAndAngularRatesRegister_gyro_get" "', argument " "1"" of type '" "vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->gyro);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_YawPitchRollMagneticAccelerationAndAngularRatesRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_YawPitchRollMagneticAccelerationAndAngularRatesRegister")) SWIG_fail;
  result = (vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *)new vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__YawPitchRollMagneticAccelerationAndAngularRatesRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_YawPitchRollMagneticAccelerationAndAngularRatesRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3f arg1 ;
  vn::math::vec3f arg2 ;
  vn::math::vec3f arg3 ;
  vn::math::vec3f arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_YawPitchRollMagneticAccelerationAndAngularRatesRegister",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_YawPitchRollMagneticAccelerationAndAngularRatesRegister" "', argument " "1"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_YawPitchRollMagneticAccelerationAndAngularRatesRegister" "', argument " "1"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_YawPitchRollMagneticAccelerationAndAngularRatesRegister" "', argument " "2"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_YawPitchRollMagneticAccelerationAndAngularRatesRegister" "', argument " "2"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_YawPitchRollMagneticAccelerationAndAngularRatesRegister" "', argument " "3"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_YawPitchRollMagneticAccelerationAndAngularRatesRegister" "', argument " "3"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_YawPitchRollMagneticAccelerationAndAngularRatesRegister" "', argument " "4"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_YawPitchRollMagneticAccelerationAndAngularRatesRegister" "', argument " "4"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = (vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *)new vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__YawPitchRollMagneticAccelerationAndAngularRatesRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_YawPitchRollMagneticAccelerationAndAngularRatesRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_YawPitchRollMagneticAccelerationAndAngularRatesRegister__SWIG_0(self, args);
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_YawPitchRollMagneticAccelerationAndAngularRatesRegister__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_YawPitchRollMagneticAccelerationAndAngularRatesRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister::YawPitchRollMagneticAccelerationAndAngularRatesRegister()\n"
    "    vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister::YawPitchRollMagneticAccelerationAndAngularRatesRegister(vn::math::vec3f,vn::math::vec3f,vn::math::vec3f,vn::math::vec3f)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_YawPitchRollMagneticAccelerationAndAngularRatesRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_YawPitchRollMagneticAccelerationAndAngularRatesRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__YawPitchRollMagneticAccelerationAndAngularRatesRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_YawPitchRollMagneticAccelerationAndAngularRatesRegister" "', argument " "1"" of type '" "vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *YawPitchRollMagneticAccelerationAndAngularRatesRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__YawPitchRollMagneticAccelerationAndAngularRatesRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CommunicationProtocolControlRegister_serial_status_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CommunicationProtocolControlRegister *arg1 = (vn::sensors::CommunicationProtocolControlRegister *) 0 ;
  vn::protocol::uart::CountMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CommunicationProtocolControlRegister_serial_status_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommunicationProtocolControlRegister_serial_status_set" "', argument " "1"" of type '" "vn::sensors::CommunicationProtocolControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CommunicationProtocolControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CommunicationProtocolControlRegister_serial_status_set" "', argument " "2"" of type '" "vn::protocol::uart::CountMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::CountMode >(val2);
  if (arg1) (arg1)->serialCount = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CommunicationProtocolControlRegister_serial_status_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CommunicationProtocolControlRegister *arg1 = (vn::sensors::CommunicationProtocolControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::CountMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CommunicationProtocolControlRegister_serial_status_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommunicationProtocolControlRegister_serial_status_get" "', argument " "1"" of type '" "vn::sensors::CommunicationProtocolControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CommunicationProtocolControlRegister * >(argp1);
  result = (vn::protocol::uart::CountMode) ((arg1)->serialCount);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CommunicationProtocolControlRegister_serialStatus_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CommunicationProtocolControlRegister *arg1 = (vn::sensors::CommunicationProtocolControlRegister *) 0 ;
  vn::protocol::uart::StatusMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CommunicationProtocolControlRegister_serialStatus_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommunicationProtocolControlRegister_serialStatus_set" "', argument " "1"" of type '" "vn::sensors::CommunicationProtocolControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CommunicationProtocolControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CommunicationProtocolControlRegister_serialStatus_set" "', argument " "2"" of type '" "vn::protocol::uart::StatusMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::StatusMode >(val2);
  if (arg1) (arg1)->serialStatus = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CommunicationProtocolControlRegister_serialStatus_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CommunicationProtocolControlRegister *arg1 = (vn::sensors::CommunicationProtocolControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::StatusMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CommunicationProtocolControlRegister_serialStatus_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommunicationProtocolControlRegister_serialStatus_get" "', argument " "1"" of type '" "vn::sensors::CommunicationProtocolControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CommunicationProtocolControlRegister * >(argp1);
  result = (vn::protocol::uart::StatusMode) ((arg1)->serialStatus);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CommunicationProtocolControlRegister_spi_count_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CommunicationProtocolControlRegister *arg1 = (vn::sensors::CommunicationProtocolControlRegister *) 0 ;
  vn::protocol::uart::CountMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CommunicationProtocolControlRegister_spi_count_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommunicationProtocolControlRegister_spi_count_set" "', argument " "1"" of type '" "vn::sensors::CommunicationProtocolControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CommunicationProtocolControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CommunicationProtocolControlRegister_spi_count_set" "', argument " "2"" of type '" "vn::protocol::uart::CountMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::CountMode >(val2);
  if (arg1) (arg1)->spiCount = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CommunicationProtocolControlRegister_spi_count_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CommunicationProtocolControlRegister *arg1 = (vn::sensors::CommunicationProtocolControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::CountMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CommunicationProtocolControlRegister_spi_count_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommunicationProtocolControlRegister_spi_count_get" "', argument " "1"" of type '" "vn::sensors::CommunicationProtocolControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CommunicationProtocolControlRegister * >(argp1);
  result = (vn::protocol::uart::CountMode) ((arg1)->spiCount);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CommunicationProtocolControlRegister_spi_status_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CommunicationProtocolControlRegister *arg1 = (vn::sensors::CommunicationProtocolControlRegister *) 0 ;
  vn::protocol::uart::StatusMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CommunicationProtocolControlRegister_spi_status_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommunicationProtocolControlRegister_spi_status_set" "', argument " "1"" of type '" "vn::sensors::CommunicationProtocolControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CommunicationProtocolControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CommunicationProtocolControlRegister_spi_status_set" "', argument " "2"" of type '" "vn::protocol::uart::StatusMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::StatusMode >(val2);
  if (arg1) (arg1)->spiStatus = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CommunicationProtocolControlRegister_spi_status_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CommunicationProtocolControlRegister *arg1 = (vn::sensors::CommunicationProtocolControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::StatusMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CommunicationProtocolControlRegister_spi_status_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommunicationProtocolControlRegister_spi_status_get" "', argument " "1"" of type '" "vn::sensors::CommunicationProtocolControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CommunicationProtocolControlRegister * >(argp1);
  result = (vn::protocol::uart::StatusMode) ((arg1)->spiStatus);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CommunicationProtocolControlRegister_serial_checksum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CommunicationProtocolControlRegister *arg1 = (vn::sensors::CommunicationProtocolControlRegister *) 0 ;
  vn::protocol::uart::ChecksumMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CommunicationProtocolControlRegister_serial_checksum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommunicationProtocolControlRegister_serial_checksum_set" "', argument " "1"" of type '" "vn::sensors::CommunicationProtocolControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CommunicationProtocolControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CommunicationProtocolControlRegister_serial_checksum_set" "', argument " "2"" of type '" "vn::protocol::uart::ChecksumMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::ChecksumMode >(val2);
  if (arg1) (arg1)->serialChecksum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CommunicationProtocolControlRegister_serial_checksum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CommunicationProtocolControlRegister *arg1 = (vn::sensors::CommunicationProtocolControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::ChecksumMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CommunicationProtocolControlRegister_serial_checksum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommunicationProtocolControlRegister_serial_checksum_get" "', argument " "1"" of type '" "vn::sensors::CommunicationProtocolControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CommunicationProtocolControlRegister * >(argp1);
  result = (vn::protocol::uart::ChecksumMode) ((arg1)->serialChecksum);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CommunicationProtocolControlRegister_spi_checksum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CommunicationProtocolControlRegister *arg1 = (vn::sensors::CommunicationProtocolControlRegister *) 0 ;
  vn::protocol::uart::ChecksumMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CommunicationProtocolControlRegister_spi_checksum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommunicationProtocolControlRegister_spi_checksum_set" "', argument " "1"" of type '" "vn::sensors::CommunicationProtocolControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CommunicationProtocolControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CommunicationProtocolControlRegister_spi_checksum_set" "', argument " "2"" of type '" "vn::protocol::uart::ChecksumMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::ChecksumMode >(val2);
  if (arg1) (arg1)->spiChecksum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CommunicationProtocolControlRegister_spi_checksum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CommunicationProtocolControlRegister *arg1 = (vn::sensors::CommunicationProtocolControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::ChecksumMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CommunicationProtocolControlRegister_spi_checksum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommunicationProtocolControlRegister_spi_checksum_get" "', argument " "1"" of type '" "vn::sensors::CommunicationProtocolControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CommunicationProtocolControlRegister * >(argp1);
  result = (vn::protocol::uart::ChecksumMode) ((arg1)->spiChecksum);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CommunicationProtocolControlRegister_error_mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CommunicationProtocolControlRegister *arg1 = (vn::sensors::CommunicationProtocolControlRegister *) 0 ;
  vn::protocol::uart::ErrorMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CommunicationProtocolControlRegister_error_mode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommunicationProtocolControlRegister_error_mode_set" "', argument " "1"" of type '" "vn::sensors::CommunicationProtocolControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CommunicationProtocolControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CommunicationProtocolControlRegister_error_mode_set" "', argument " "2"" of type '" "vn::protocol::uart::ErrorMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::ErrorMode >(val2);
  if (arg1) (arg1)->errorMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CommunicationProtocolControlRegister_error_mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CommunicationProtocolControlRegister *arg1 = (vn::sensors::CommunicationProtocolControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::ErrorMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CommunicationProtocolControlRegister_error_mode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommunicationProtocolControlRegister_error_mode_get" "', argument " "1"" of type '" "vn::sensors::CommunicationProtocolControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CommunicationProtocolControlRegister * >(argp1);
  result = (vn::protocol::uart::ErrorMode) ((arg1)->errorMode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CommunicationProtocolControlRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CommunicationProtocolControlRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CommunicationProtocolControlRegister")) SWIG_fail;
  result = (vn::sensors::CommunicationProtocolControlRegister *)new vn::sensors::CommunicationProtocolControlRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CommunicationProtocolControlRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::CountMode arg1 ;
  vn::protocol::uart::StatusMode arg2 ;
  vn::protocol::uart::CountMode arg3 ;
  vn::protocol::uart::StatusMode arg4 ;
  vn::protocol::uart::ChecksumMode arg5 ;
  vn::protocol::uart::ChecksumMode arg6 ;
  vn::protocol::uart::ErrorMode arg7 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  vn::sensors::CommunicationProtocolControlRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_CommunicationProtocolControlRegister",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CommunicationProtocolControlRegister" "', argument " "1"" of type '" "vn::protocol::uart::CountMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::CountMode >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CommunicationProtocolControlRegister" "', argument " "2"" of type '" "vn::protocol::uart::StatusMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::StatusMode >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CommunicationProtocolControlRegister" "', argument " "3"" of type '" "vn::protocol::uart::CountMode""'");
  } 
  arg3 = static_cast< vn::protocol::uart::CountMode >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_CommunicationProtocolControlRegister" "', argument " "4"" of type '" "vn::protocol::uart::StatusMode""'");
  } 
  arg4 = static_cast< vn::protocol::uart::StatusMode >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_CommunicationProtocolControlRegister" "', argument " "5"" of type '" "vn::protocol::uart::ChecksumMode""'");
  } 
  arg5 = static_cast< vn::protocol::uart::ChecksumMode >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_CommunicationProtocolControlRegister" "', argument " "6"" of type '" "vn::protocol::uart::ChecksumMode""'");
  } 
  arg6 = static_cast< vn::protocol::uart::ChecksumMode >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_CommunicationProtocolControlRegister" "', argument " "7"" of type '" "vn::protocol::uart::ErrorMode""'");
  } 
  arg7 = static_cast< vn::protocol::uart::ErrorMode >(val7);
  result = (vn::sensors::CommunicationProtocolControlRegister *)new vn::sensors::CommunicationProtocolControlRegister(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CommunicationProtocolControlRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CommunicationProtocolControlRegister__SWIG_0(self, args);
  }
  if (argc == 7) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_CommunicationProtocolControlRegister__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CommunicationProtocolControlRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::CommunicationProtocolControlRegister::CommunicationProtocolControlRegister()\n"
    "    vn::sensors::CommunicationProtocolControlRegister::CommunicationProtocolControlRegister(vn::protocol::uart::CountMode,vn::protocol::uart::StatusMode,vn::protocol::uart::CountMode,vn::protocol::uart::StatusMode,vn::protocol::uart::ChecksumMode,vn::protocol::uart::ChecksumMode,vn::protocol::uart::ErrorMode)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_CommunicationProtocolControlRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CommunicationProtocolControlRegister *arg1 = (vn::sensors::CommunicationProtocolControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CommunicationProtocolControlRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CommunicationProtocolControlRegister" "', argument " "1"" of type '" "vn::sensors::CommunicationProtocolControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CommunicationProtocolControlRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CommunicationProtocolControlRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SynchronizationControlRegister_syncInMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationControlRegister *arg1 = (vn::sensors::SynchronizationControlRegister *) 0 ;
  vn::protocol::uart::SyncInMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SynchronizationControlRegister_syncInMode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__SynchronizationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizationControlRegister_syncInMode_set" "', argument " "1"" of type '" "vn::sensors::SynchronizationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::SynchronizationControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynchronizationControlRegister_syncInMode_set" "', argument " "2"" of type '" "vn::protocol::uart::SyncInMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::SyncInMode >(val2);
  if (arg1) (arg1)->syncInMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizationControlRegister_syncInMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationControlRegister *arg1 = (vn::sensors::SynchronizationControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::SyncInMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SynchronizationControlRegister_syncInMode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__SynchronizationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizationControlRegister_syncInMode_get" "', argument " "1"" of type '" "vn::sensors::SynchronizationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::SynchronizationControlRegister * >(argp1);
  result = (vn::protocol::uart::SyncInMode) ((arg1)->syncInMode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizationControlRegister_syncInEdge_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationControlRegister *arg1 = (vn::sensors::SynchronizationControlRegister *) 0 ;
  vn::protocol::uart::SyncInEdge arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SynchronizationControlRegister_syncInEdge_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__SynchronizationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizationControlRegister_syncInEdge_set" "', argument " "1"" of type '" "vn::sensors::SynchronizationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::SynchronizationControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynchronizationControlRegister_syncInEdge_set" "', argument " "2"" of type '" "vn::protocol::uart::SyncInEdge""'");
  } 
  arg2 = static_cast< vn::protocol::uart::SyncInEdge >(val2);
  if (arg1) (arg1)->syncInEdge = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizationControlRegister_syncInEdge_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationControlRegister *arg1 = (vn::sensors::SynchronizationControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::SyncInEdge result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SynchronizationControlRegister_syncInEdge_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__SynchronizationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizationControlRegister_syncInEdge_get" "', argument " "1"" of type '" "vn::sensors::SynchronizationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::SynchronizationControlRegister * >(argp1);
  result = (vn::protocol::uart::SyncInEdge) ((arg1)->syncInEdge);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizationControlRegister_syncInSkipFactor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationControlRegister *arg1 = (vn::sensors::SynchronizationControlRegister *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SynchronizationControlRegister_syncInSkipFactor_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__SynchronizationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizationControlRegister_syncInSkipFactor_set" "', argument " "1"" of type '" "vn::sensors::SynchronizationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::SynchronizationControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynchronizationControlRegister_syncInSkipFactor_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->syncInSkipFactor = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizationControlRegister_syncInSkipFactor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationControlRegister *arg1 = (vn::sensors::SynchronizationControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SynchronizationControlRegister_syncInSkipFactor_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__SynchronizationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizationControlRegister_syncInSkipFactor_get" "', argument " "1"" of type '" "vn::sensors::SynchronizationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::SynchronizationControlRegister * >(argp1);
  result = (uint16_t) ((arg1)->syncInSkipFactor);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizationControlRegister_syncOutMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationControlRegister *arg1 = (vn::sensors::SynchronizationControlRegister *) 0 ;
  vn::protocol::uart::SyncOutMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SynchronizationControlRegister_syncOutMode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__SynchronizationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizationControlRegister_syncOutMode_set" "', argument " "1"" of type '" "vn::sensors::SynchronizationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::SynchronizationControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynchronizationControlRegister_syncOutMode_set" "', argument " "2"" of type '" "vn::protocol::uart::SyncOutMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::SyncOutMode >(val2);
  if (arg1) (arg1)->syncOutMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizationControlRegister_syncOutMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationControlRegister *arg1 = (vn::sensors::SynchronizationControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::SyncOutMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SynchronizationControlRegister_syncOutMode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__SynchronizationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizationControlRegister_syncOutMode_get" "', argument " "1"" of type '" "vn::sensors::SynchronizationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::SynchronizationControlRegister * >(argp1);
  result = (vn::protocol::uart::SyncOutMode) ((arg1)->syncOutMode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizationControlRegister_syncOutPolarity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationControlRegister *arg1 = (vn::sensors::SynchronizationControlRegister *) 0 ;
  vn::protocol::uart::SyncOutPolarity arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SynchronizationControlRegister_syncOutPolarity_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__SynchronizationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizationControlRegister_syncOutPolarity_set" "', argument " "1"" of type '" "vn::sensors::SynchronizationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::SynchronizationControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynchronizationControlRegister_syncOutPolarity_set" "', argument " "2"" of type '" "vn::protocol::uart::SyncOutPolarity""'");
  } 
  arg2 = static_cast< vn::protocol::uart::SyncOutPolarity >(val2);
  if (arg1) (arg1)->syncOutPolarity = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizationControlRegister_syncOutPolarity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationControlRegister *arg1 = (vn::sensors::SynchronizationControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::SyncOutPolarity result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SynchronizationControlRegister_syncOutPolarity_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__SynchronizationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizationControlRegister_syncOutPolarity_get" "', argument " "1"" of type '" "vn::sensors::SynchronizationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::SynchronizationControlRegister * >(argp1);
  result = (vn::protocol::uart::SyncOutPolarity) ((arg1)->syncOutPolarity);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizationControlRegister_syncOutSkipFactor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationControlRegister *arg1 = (vn::sensors::SynchronizationControlRegister *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SynchronizationControlRegister_syncOutSkipFactor_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__SynchronizationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizationControlRegister_syncOutSkipFactor_set" "', argument " "1"" of type '" "vn::sensors::SynchronizationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::SynchronizationControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynchronizationControlRegister_syncOutSkipFactor_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->syncOutSkipFactor = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizationControlRegister_syncOutSkipFactor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationControlRegister *arg1 = (vn::sensors::SynchronizationControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SynchronizationControlRegister_syncOutSkipFactor_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__SynchronizationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizationControlRegister_syncOutSkipFactor_get" "', argument " "1"" of type '" "vn::sensors::SynchronizationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::SynchronizationControlRegister * >(argp1);
  result = (uint16_t) ((arg1)->syncOutSkipFactor);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizationControlRegister_syncOutPulseWidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationControlRegister *arg1 = (vn::sensors::SynchronizationControlRegister *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SynchronizationControlRegister_syncOutPulseWidth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__SynchronizationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizationControlRegister_syncOutPulseWidth_set" "', argument " "1"" of type '" "vn::sensors::SynchronizationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::SynchronizationControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynchronizationControlRegister_syncOutPulseWidth_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->syncOutPulseWidth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizationControlRegister_syncOutPulseWidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationControlRegister *arg1 = (vn::sensors::SynchronizationControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SynchronizationControlRegister_syncOutPulseWidth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__SynchronizationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizationControlRegister_syncOutPulseWidth_get" "', argument " "1"" of type '" "vn::sensors::SynchronizationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::SynchronizationControlRegister * >(argp1);
  result = (uint32_t) ((arg1)->syncOutPulseWidth);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SynchronizationControlRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationControlRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SynchronizationControlRegister")) SWIG_fail;
  result = (vn::sensors::SynchronizationControlRegister *)new vn::sensors::SynchronizationControlRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__SynchronizationControlRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SynchronizationControlRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::SyncInMode arg1 ;
  vn::protocol::uart::SyncInEdge arg2 ;
  uint16_t arg3 ;
  vn::protocol::uart::SyncOutMode arg4 ;
  vn::protocol::uart::SyncOutPolarity arg5 ;
  uint16_t arg6 ;
  uint32_t arg7 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  unsigned short val6 ;
  int ecode6 = 0 ;
  unsigned int val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  vn::sensors::SynchronizationControlRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_SynchronizationControlRegister",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SynchronizationControlRegister" "', argument " "1"" of type '" "vn::protocol::uart::SyncInMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::SyncInMode >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SynchronizationControlRegister" "', argument " "2"" of type '" "vn::protocol::uart::SyncInEdge""'");
  } 
  arg2 = static_cast< vn::protocol::uart::SyncInEdge >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SynchronizationControlRegister" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SynchronizationControlRegister" "', argument " "4"" of type '" "vn::protocol::uart::SyncOutMode""'");
  } 
  arg4 = static_cast< vn::protocol::uart::SyncOutMode >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SynchronizationControlRegister" "', argument " "5"" of type '" "vn::protocol::uart::SyncOutPolarity""'");
  } 
  arg5 = static_cast< vn::protocol::uart::SyncOutPolarity >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_short(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_SynchronizationControlRegister" "', argument " "6"" of type '" "uint16_t""'");
  } 
  arg6 = static_cast< uint16_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_SynchronizationControlRegister" "', argument " "7"" of type '" "uint32_t""'");
  } 
  arg7 = static_cast< uint32_t >(val7);
  result = (vn::sensors::SynchronizationControlRegister *)new vn::sensors::SynchronizationControlRegister(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__SynchronizationControlRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SynchronizationControlRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SynchronizationControlRegister__SWIG_0(self, args);
  }
  if (argc == 7) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_short(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_unsigned_SS_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_SynchronizationControlRegister__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SynchronizationControlRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::SynchronizationControlRegister::SynchronizationControlRegister()\n"
    "    vn::sensors::SynchronizationControlRegister::SynchronizationControlRegister(vn::protocol::uart::SyncInMode,vn::protocol::uart::SyncInEdge,uint16_t,vn::protocol::uart::SyncOutMode,vn::protocol::uart::SyncOutPolarity,uint16_t,uint32_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SynchronizationControlRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationControlRegister *arg1 = (vn::sensors::SynchronizationControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SynchronizationControlRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__SynchronizationControlRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SynchronizationControlRegister" "', argument " "1"" of type '" "vn::sensors::SynchronizationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::SynchronizationControlRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SynchronizationControlRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__SynchronizationControlRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SynchronizationStatusRegister_sync_in_count_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationStatusRegister *arg1 = (vn::sensors::SynchronizationStatusRegister *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SynchronizationStatusRegister_sync_in_count_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__SynchronizationStatusRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizationStatusRegister_sync_in_count_set" "', argument " "1"" of type '" "vn::sensors::SynchronizationStatusRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::SynchronizationStatusRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynchronizationStatusRegister_sync_in_count_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->syncInCount = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizationStatusRegister_sync_in_count_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationStatusRegister *arg1 = (vn::sensors::SynchronizationStatusRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SynchronizationStatusRegister_sync_in_count_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__SynchronizationStatusRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizationStatusRegister_sync_in_count_get" "', argument " "1"" of type '" "vn::sensors::SynchronizationStatusRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::SynchronizationStatusRegister * >(argp1);
  result = (uint32_t) ((arg1)->syncInCount);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizationStatusRegister_sync_in_time_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationStatusRegister *arg1 = (vn::sensors::SynchronizationStatusRegister *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SynchronizationStatusRegister_sync_in_time_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__SynchronizationStatusRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizationStatusRegister_sync_in_time_set" "', argument " "1"" of type '" "vn::sensors::SynchronizationStatusRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::SynchronizationStatusRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynchronizationStatusRegister_sync_in_time_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->syncInTime = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizationStatusRegister_sync_in_time_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationStatusRegister *arg1 = (vn::sensors::SynchronizationStatusRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SynchronizationStatusRegister_sync_in_time_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__SynchronizationStatusRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizationStatusRegister_sync_in_time_get" "', argument " "1"" of type '" "vn::sensors::SynchronizationStatusRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::SynchronizationStatusRegister * >(argp1);
  result = (uint32_t) ((arg1)->syncInTime);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizationStatusRegister_sync_out_count_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationStatusRegister *arg1 = (vn::sensors::SynchronizationStatusRegister *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SynchronizationStatusRegister_sync_out_count_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__SynchronizationStatusRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizationStatusRegister_sync_out_count_set" "', argument " "1"" of type '" "vn::sensors::SynchronizationStatusRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::SynchronizationStatusRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynchronizationStatusRegister_sync_out_count_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->syncOutCount = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizationStatusRegister_sync_out_count_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationStatusRegister *arg1 = (vn::sensors::SynchronizationStatusRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SynchronizationStatusRegister_sync_out_count_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__SynchronizationStatusRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizationStatusRegister_sync_out_count_get" "', argument " "1"" of type '" "vn::sensors::SynchronizationStatusRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::SynchronizationStatusRegister * >(argp1);
  result = (uint32_t) ((arg1)->syncOutCount);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SynchronizationStatusRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationStatusRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SynchronizationStatusRegister")) SWIG_fail;
  result = (vn::sensors::SynchronizationStatusRegister *)new vn::sensors::SynchronizationStatusRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__SynchronizationStatusRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SynchronizationStatusRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vn::sensors::SynchronizationStatusRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SynchronizationStatusRegister",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SynchronizationStatusRegister" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SynchronizationStatusRegister" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SynchronizationStatusRegister" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  result = (vn::sensors::SynchronizationStatusRegister *)new vn::sensors::SynchronizationStatusRegister(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__SynchronizationStatusRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SynchronizationStatusRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SynchronizationStatusRegister__SWIG_0(self, args);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SynchronizationStatusRegister__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SynchronizationStatusRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::SynchronizationStatusRegister::SynchronizationStatusRegister()\n"
    "    vn::sensors::SynchronizationStatusRegister::SynchronizationStatusRegister(uint32_t,uint32_t,uint32_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SynchronizationStatusRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationStatusRegister *arg1 = (vn::sensors::SynchronizationStatusRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SynchronizationStatusRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__SynchronizationStatusRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SynchronizationStatusRegister" "', argument " "1"" of type '" "vn::sensors::SynchronizationStatusRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::SynchronizationStatusRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SynchronizationStatusRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__SynchronizationStatusRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_FilterBasicControlRegister_mag_mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterBasicControlRegister *arg1 = (vn::sensors::FilterBasicControlRegister *) 0 ;
  vn::protocol::uart::MagneticMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FilterBasicControlRegister_mag_mode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterBasicControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterBasicControlRegister_mag_mode_set" "', argument " "1"" of type '" "vn::sensors::FilterBasicControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterBasicControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FilterBasicControlRegister_mag_mode_set" "', argument " "2"" of type '" "vn::protocol::uart::MagneticMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::MagneticMode >(val2);
  if (arg1) (arg1)->magMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterBasicControlRegister_mag_mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterBasicControlRegister *arg1 = (vn::sensors::FilterBasicControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::MagneticMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FilterBasicControlRegister_mag_mode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterBasicControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterBasicControlRegister_mag_mode_get" "', argument " "1"" of type '" "vn::sensors::FilterBasicControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterBasicControlRegister * >(argp1);
  result = (vn::protocol::uart::MagneticMode) ((arg1)->magMode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterBasicControlRegister_ext_mag_mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterBasicControlRegister *arg1 = (vn::sensors::FilterBasicControlRegister *) 0 ;
  vn::protocol::uart::ExternalSensorMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FilterBasicControlRegister_ext_mag_mode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterBasicControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterBasicControlRegister_ext_mag_mode_set" "', argument " "1"" of type '" "vn::sensors::FilterBasicControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterBasicControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FilterBasicControlRegister_ext_mag_mode_set" "', argument " "2"" of type '" "vn::protocol::uart::ExternalSensorMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::ExternalSensorMode >(val2);
  if (arg1) (arg1)->extMagMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterBasicControlRegister_ext_mag_mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterBasicControlRegister *arg1 = (vn::sensors::FilterBasicControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::ExternalSensorMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FilterBasicControlRegister_ext_mag_mode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterBasicControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterBasicControlRegister_ext_mag_mode_get" "', argument " "1"" of type '" "vn::sensors::FilterBasicControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterBasicControlRegister * >(argp1);
  result = (vn::protocol::uart::ExternalSensorMode) ((arg1)->extMagMode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterBasicControlRegister_ext_acc_mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterBasicControlRegister *arg1 = (vn::sensors::FilterBasicControlRegister *) 0 ;
  vn::protocol::uart::ExternalSensorMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FilterBasicControlRegister_ext_acc_mode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterBasicControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterBasicControlRegister_ext_acc_mode_set" "', argument " "1"" of type '" "vn::sensors::FilterBasicControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterBasicControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FilterBasicControlRegister_ext_acc_mode_set" "', argument " "2"" of type '" "vn::protocol::uart::ExternalSensorMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::ExternalSensorMode >(val2);
  if (arg1) (arg1)->extAccMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterBasicControlRegister_ext_acc_mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterBasicControlRegister *arg1 = (vn::sensors::FilterBasicControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::ExternalSensorMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FilterBasicControlRegister_ext_acc_mode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterBasicControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterBasicControlRegister_ext_acc_mode_get" "', argument " "1"" of type '" "vn::sensors::FilterBasicControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterBasicControlRegister * >(argp1);
  result = (vn::protocol::uart::ExternalSensorMode) ((arg1)->extAccMode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterBasicControlRegister_ext_gyro_mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterBasicControlRegister *arg1 = (vn::sensors::FilterBasicControlRegister *) 0 ;
  vn::protocol::uart::ExternalSensorMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FilterBasicControlRegister_ext_gyro_mode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterBasicControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterBasicControlRegister_ext_gyro_mode_set" "', argument " "1"" of type '" "vn::sensors::FilterBasicControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterBasicControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FilterBasicControlRegister_ext_gyro_mode_set" "', argument " "2"" of type '" "vn::protocol::uart::ExternalSensorMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::ExternalSensorMode >(val2);
  if (arg1) (arg1)->extGyroMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterBasicControlRegister_ext_gyro_mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterBasicControlRegister *arg1 = (vn::sensors::FilterBasicControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::ExternalSensorMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FilterBasicControlRegister_ext_gyro_mode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterBasicControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterBasicControlRegister_ext_gyro_mode_get" "', argument " "1"" of type '" "vn::sensors::FilterBasicControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterBasicControlRegister * >(argp1);
  result = (vn::protocol::uart::ExternalSensorMode) ((arg1)->extGyroMode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterBasicControlRegister_gyro_limit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterBasicControlRegister *arg1 = (vn::sensors::FilterBasicControlRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FilterBasicControlRegister_gyro_limit_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterBasicControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterBasicControlRegister_gyro_limit_set" "', argument " "1"" of type '" "vn::sensors::FilterBasicControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterBasicControlRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FilterBasicControlRegister_gyro_limit_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->gyroLimit = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterBasicControlRegister_gyro_limit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterBasicControlRegister *arg1 = (vn::sensors::FilterBasicControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FilterBasicControlRegister_gyro_limit_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterBasicControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterBasicControlRegister_gyro_limit_get" "', argument " "1"" of type '" "vn::sensors::FilterBasicControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterBasicControlRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->gyroLimit);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FilterBasicControlRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterBasicControlRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FilterBasicControlRegister")) SWIG_fail;
  result = (vn::sensors::FilterBasicControlRegister *)new vn::sensors::FilterBasicControlRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__FilterBasicControlRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FilterBasicControlRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::MagneticMode arg1 ;
  vn::protocol::uart::ExternalSensorMode arg2 ;
  vn::protocol::uart::ExternalSensorMode arg3 ;
  vn::protocol::uart::ExternalSensorMode arg4 ;
  vn::math::vec3f arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  vn::sensors::FilterBasicControlRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_FilterBasicControlRegister",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FilterBasicControlRegister" "', argument " "1"" of type '" "vn::protocol::uart::MagneticMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::MagneticMode >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FilterBasicControlRegister" "', argument " "2"" of type '" "vn::protocol::uart::ExternalSensorMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::ExternalSensorMode >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FilterBasicControlRegister" "', argument " "3"" of type '" "vn::protocol::uart::ExternalSensorMode""'");
  } 
  arg3 = static_cast< vn::protocol::uart::ExternalSensorMode >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_FilterBasicControlRegister" "', argument " "4"" of type '" "vn::protocol::uart::ExternalSensorMode""'");
  } 
  arg4 = static_cast< vn::protocol::uart::ExternalSensorMode >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_FilterBasicControlRegister" "', argument " "5"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FilterBasicControlRegister" "', argument " "5"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = (vn::sensors::FilterBasicControlRegister *)new vn::sensors::FilterBasicControlRegister(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__FilterBasicControlRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FilterBasicControlRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_FilterBasicControlRegister__SWIG_0(self, args);
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_FilterBasicControlRegister__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FilterBasicControlRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::FilterBasicControlRegister::FilterBasicControlRegister()\n"
    "    vn::sensors::FilterBasicControlRegister::FilterBasicControlRegister(vn::protocol::uart::MagneticMode,vn::protocol::uart::ExternalSensorMode,vn::protocol::uart::ExternalSensorMode,vn::protocol::uart::ExternalSensorMode,vn::math::vec3f)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_FilterBasicControlRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterBasicControlRegister *arg1 = (vn::sensors::FilterBasicControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FilterBasicControlRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__FilterBasicControlRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FilterBasicControlRegister" "', argument " "1"" of type '" "vn::sensors::FilterBasicControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterBasicControlRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FilterBasicControlRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__FilterBasicControlRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VpeBasicControlRegister_enable_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeBasicControlRegister *arg1 = (vn::sensors::VpeBasicControlRegister *) 0 ;
  vn::protocol::uart::VpeEnable arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeBasicControlRegister_enable_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeBasicControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeBasicControlRegister_enable_set" "', argument " "1"" of type '" "vn::sensors::VpeBasicControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeBasicControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VpeBasicControlRegister_enable_set" "', argument " "2"" of type '" "vn::protocol::uart::VpeEnable""'");
  } 
  arg2 = static_cast< vn::protocol::uart::VpeEnable >(val2);
  if (arg1) (arg1)->enable = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeBasicControlRegister_enable_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeBasicControlRegister *arg1 = (vn::sensors::VpeBasicControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::VpeEnable result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeBasicControlRegister_enable_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeBasicControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeBasicControlRegister_enable_get" "', argument " "1"" of type '" "vn::sensors::VpeBasicControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeBasicControlRegister * >(argp1);
  result = (vn::protocol::uart::VpeEnable) ((arg1)->enable);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeBasicControlRegister_heading_mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeBasicControlRegister *arg1 = (vn::sensors::VpeBasicControlRegister *) 0 ;
  vn::protocol::uart::HeadingMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeBasicControlRegister_heading_mode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeBasicControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeBasicControlRegister_heading_mode_set" "', argument " "1"" of type '" "vn::sensors::VpeBasicControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeBasicControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VpeBasicControlRegister_heading_mode_set" "', argument " "2"" of type '" "vn::protocol::uart::HeadingMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::HeadingMode >(val2);
  if (arg1) (arg1)->headingMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeBasicControlRegister_heading_mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeBasicControlRegister *arg1 = (vn::sensors::VpeBasicControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::HeadingMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeBasicControlRegister_heading_mode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeBasicControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeBasicControlRegister_heading_mode_get" "', argument " "1"" of type '" "vn::sensors::VpeBasicControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeBasicControlRegister * >(argp1);
  result = (vn::protocol::uart::HeadingMode) ((arg1)->headingMode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeBasicControlRegister_filtering_mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeBasicControlRegister *arg1 = (vn::sensors::VpeBasicControlRegister *) 0 ;
  vn::protocol::uart::VpeMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeBasicControlRegister_filtering_mode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeBasicControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeBasicControlRegister_filtering_mode_set" "', argument " "1"" of type '" "vn::sensors::VpeBasicControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeBasicControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VpeBasicControlRegister_filtering_mode_set" "', argument " "2"" of type '" "vn::protocol::uart::VpeMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::VpeMode >(val2);
  if (arg1) (arg1)->filteringMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeBasicControlRegister_filtering_mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeBasicControlRegister *arg1 = (vn::sensors::VpeBasicControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::VpeMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeBasicControlRegister_filtering_mode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeBasicControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeBasicControlRegister_filtering_mode_get" "', argument " "1"" of type '" "vn::sensors::VpeBasicControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeBasicControlRegister * >(argp1);
  result = (vn::protocol::uart::VpeMode) ((arg1)->filteringMode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeBasicControlRegister_tuning_mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeBasicControlRegister *arg1 = (vn::sensors::VpeBasicControlRegister *) 0 ;
  vn::protocol::uart::VpeMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeBasicControlRegister_tuning_mode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeBasicControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeBasicControlRegister_tuning_mode_set" "', argument " "1"" of type '" "vn::sensors::VpeBasicControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeBasicControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VpeBasicControlRegister_tuning_mode_set" "', argument " "2"" of type '" "vn::protocol::uart::VpeMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::VpeMode >(val2);
  if (arg1) (arg1)->tuningMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeBasicControlRegister_tuning_mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeBasicControlRegister *arg1 = (vn::sensors::VpeBasicControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::VpeMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeBasicControlRegister_tuning_mode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeBasicControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeBasicControlRegister_tuning_mode_get" "', argument " "1"" of type '" "vn::sensors::VpeBasicControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeBasicControlRegister * >(argp1);
  result = (vn::protocol::uart::VpeMode) ((arg1)->tuningMode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VpeBasicControlRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeBasicControlRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VpeBasicControlRegister")) SWIG_fail;
  result = (vn::sensors::VpeBasicControlRegister *)new vn::sensors::VpeBasicControlRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__VpeBasicControlRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VpeBasicControlRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::VpeEnable arg1 ;
  vn::protocol::uart::HeadingMode arg2 ;
  vn::protocol::uart::VpeMode arg3 ;
  vn::protocol::uart::VpeMode arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  vn::sensors::VpeBasicControlRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_VpeBasicControlRegister",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VpeBasicControlRegister" "', argument " "1"" of type '" "vn::protocol::uart::VpeEnable""'");
  } 
  arg1 = static_cast< vn::protocol::uart::VpeEnable >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VpeBasicControlRegister" "', argument " "2"" of type '" "vn::protocol::uart::HeadingMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::HeadingMode >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VpeBasicControlRegister" "', argument " "3"" of type '" "vn::protocol::uart::VpeMode""'");
  } 
  arg3 = static_cast< vn::protocol::uart::VpeMode >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_VpeBasicControlRegister" "', argument " "4"" of type '" "vn::protocol::uart::VpeMode""'");
  } 
  arg4 = static_cast< vn::protocol::uart::VpeMode >(val4);
  result = (vn::sensors::VpeBasicControlRegister *)new vn::sensors::VpeBasicControlRegister(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__VpeBasicControlRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VpeBasicControlRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VpeBasicControlRegister__SWIG_0(self, args);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_VpeBasicControlRegister__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VpeBasicControlRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VpeBasicControlRegister::VpeBasicControlRegister()\n"
    "    vn::sensors::VpeBasicControlRegister::VpeBasicControlRegister(vn::protocol::uart::VpeEnable,vn::protocol::uart::HeadingMode,vn::protocol::uart::VpeMode,vn::protocol::uart::VpeMode)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VpeBasicControlRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeBasicControlRegister *arg1 = (vn::sensors::VpeBasicControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VpeBasicControlRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeBasicControlRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VpeBasicControlRegister" "', argument " "1"" of type '" "vn::sensors::VpeBasicControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeBasicControlRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VpeBasicControlRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__VpeBasicControlRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VpeMagnetometerBasicTuningRegister_base_tuning_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeMagnetometerBasicTuningRegister *arg1 = (vn::sensors::VpeMagnetometerBasicTuningRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeMagnetometerBasicTuningRegister_base_tuning_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeMagnetometerBasicTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeMagnetometerBasicTuningRegister_base_tuning_set" "', argument " "1"" of type '" "vn::sensors::VpeMagnetometerBasicTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeMagnetometerBasicTuningRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VpeMagnetometerBasicTuningRegister_base_tuning_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->baseTuning = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeMagnetometerBasicTuningRegister_base_tuning_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeMagnetometerBasicTuningRegister *arg1 = (vn::sensors::VpeMagnetometerBasicTuningRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeMagnetometerBasicTuningRegister_base_tuning_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeMagnetometerBasicTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeMagnetometerBasicTuningRegister_base_tuning_get" "', argument " "1"" of type '" "vn::sensors::VpeMagnetometerBasicTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeMagnetometerBasicTuningRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->baseTuning);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeMagnetometerBasicTuningRegister_adaptive_tuning_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeMagnetometerBasicTuningRegister *arg1 = (vn::sensors::VpeMagnetometerBasicTuningRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeMagnetometerBasicTuningRegister_adaptive_tuning_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeMagnetometerBasicTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeMagnetometerBasicTuningRegister_adaptive_tuning_set" "', argument " "1"" of type '" "vn::sensors::VpeMagnetometerBasicTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeMagnetometerBasicTuningRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VpeMagnetometerBasicTuningRegister_adaptive_tuning_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->adaptiveTuning = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeMagnetometerBasicTuningRegister_adaptive_tuning_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeMagnetometerBasicTuningRegister *arg1 = (vn::sensors::VpeMagnetometerBasicTuningRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeMagnetometerBasicTuningRegister_adaptive_tuning_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeMagnetometerBasicTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeMagnetometerBasicTuningRegister_adaptive_tuning_get" "', argument " "1"" of type '" "vn::sensors::VpeMagnetometerBasicTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeMagnetometerBasicTuningRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->adaptiveTuning);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeMagnetometerBasicTuningRegister_adaptive_filtering_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeMagnetometerBasicTuningRegister *arg1 = (vn::sensors::VpeMagnetometerBasicTuningRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeMagnetometerBasicTuningRegister_adaptive_filtering_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeMagnetometerBasicTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeMagnetometerBasicTuningRegister_adaptive_filtering_set" "', argument " "1"" of type '" "vn::sensors::VpeMagnetometerBasicTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeMagnetometerBasicTuningRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VpeMagnetometerBasicTuningRegister_adaptive_filtering_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->adaptiveFiltering = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeMagnetometerBasicTuningRegister_adaptive_filtering_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeMagnetometerBasicTuningRegister *arg1 = (vn::sensors::VpeMagnetometerBasicTuningRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeMagnetometerBasicTuningRegister_adaptive_filtering_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeMagnetometerBasicTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeMagnetometerBasicTuningRegister_adaptive_filtering_get" "', argument " "1"" of type '" "vn::sensors::VpeMagnetometerBasicTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeMagnetometerBasicTuningRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->adaptiveFiltering);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VpeMagnetometerBasicTuningRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeMagnetometerBasicTuningRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VpeMagnetometerBasicTuningRegister")) SWIG_fail;
  result = (vn::sensors::VpeMagnetometerBasicTuningRegister *)new vn::sensors::VpeMagnetometerBasicTuningRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__VpeMagnetometerBasicTuningRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VpeMagnetometerBasicTuningRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3f arg1 ;
  vn::math::vec3f arg2 ;
  vn::math::vec3f arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vn::sensors::VpeMagnetometerBasicTuningRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_VpeMagnetometerBasicTuningRegister",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VpeMagnetometerBasicTuningRegister" "', argument " "1"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VpeMagnetometerBasicTuningRegister" "', argument " "1"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VpeMagnetometerBasicTuningRegister" "', argument " "2"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VpeMagnetometerBasicTuningRegister" "', argument " "2"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_VpeMagnetometerBasicTuningRegister" "', argument " "3"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VpeMagnetometerBasicTuningRegister" "', argument " "3"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (vn::sensors::VpeMagnetometerBasicTuningRegister *)new vn::sensors::VpeMagnetometerBasicTuningRegister(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__VpeMagnetometerBasicTuningRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VpeMagnetometerBasicTuningRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VpeMagnetometerBasicTuningRegister__SWIG_0(self, args);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_VpeMagnetometerBasicTuningRegister__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VpeMagnetometerBasicTuningRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VpeMagnetometerBasicTuningRegister::VpeMagnetometerBasicTuningRegister()\n"
    "    vn::sensors::VpeMagnetometerBasicTuningRegister::VpeMagnetometerBasicTuningRegister(vn::math::vec3f,vn::math::vec3f,vn::math::vec3f)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VpeMagnetometerBasicTuningRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeMagnetometerBasicTuningRegister *arg1 = (vn::sensors::VpeMagnetometerBasicTuningRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VpeMagnetometerBasicTuningRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeMagnetometerBasicTuningRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VpeMagnetometerBasicTuningRegister" "', argument " "1"" of type '" "vn::sensors::VpeMagnetometerBasicTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeMagnetometerBasicTuningRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VpeMagnetometerBasicTuningRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__VpeMagnetometerBasicTuningRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VpeMagnetometerAdvancedTuningRegister_min_filtering_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeMagnetometerAdvancedTuningRegister *arg1 = (vn::sensors::VpeMagnetometerAdvancedTuningRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeMagnetometerAdvancedTuningRegister_min_filtering_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeMagnetometerAdvancedTuningRegister_min_filtering_set" "', argument " "1"" of type '" "vn::sensors::VpeMagnetometerAdvancedTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeMagnetometerAdvancedTuningRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VpeMagnetometerAdvancedTuningRegister_min_filtering_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->minFiltering = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeMagnetometerAdvancedTuningRegister_min_filtering_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeMagnetometerAdvancedTuningRegister *arg1 = (vn::sensors::VpeMagnetometerAdvancedTuningRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeMagnetometerAdvancedTuningRegister_min_filtering_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeMagnetometerAdvancedTuningRegister_min_filtering_get" "', argument " "1"" of type '" "vn::sensors::VpeMagnetometerAdvancedTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeMagnetometerAdvancedTuningRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->minFiltering);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeMagnetometerAdvancedTuningRegister_max_filtering_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeMagnetometerAdvancedTuningRegister *arg1 = (vn::sensors::VpeMagnetometerAdvancedTuningRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeMagnetometerAdvancedTuningRegister_max_filtering_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeMagnetometerAdvancedTuningRegister_max_filtering_set" "', argument " "1"" of type '" "vn::sensors::VpeMagnetometerAdvancedTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeMagnetometerAdvancedTuningRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VpeMagnetometerAdvancedTuningRegister_max_filtering_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->maxFiltering = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeMagnetometerAdvancedTuningRegister_max_filtering_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeMagnetometerAdvancedTuningRegister *arg1 = (vn::sensors::VpeMagnetometerAdvancedTuningRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeMagnetometerAdvancedTuningRegister_max_filtering_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeMagnetometerAdvancedTuningRegister_max_filtering_get" "', argument " "1"" of type '" "vn::sensors::VpeMagnetometerAdvancedTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeMagnetometerAdvancedTuningRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->maxFiltering);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeMagnetometerAdvancedTuningRegister_max_adapt_rate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeMagnetometerAdvancedTuningRegister *arg1 = (vn::sensors::VpeMagnetometerAdvancedTuningRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeMagnetometerAdvancedTuningRegister_max_adapt_rate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeMagnetometerAdvancedTuningRegister_max_adapt_rate_set" "', argument " "1"" of type '" "vn::sensors::VpeMagnetometerAdvancedTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeMagnetometerAdvancedTuningRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VpeMagnetometerAdvancedTuningRegister_max_adapt_rate_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->maxAdaptRate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeMagnetometerAdvancedTuningRegister_max_adapt_rate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeMagnetometerAdvancedTuningRegister *arg1 = (vn::sensors::VpeMagnetometerAdvancedTuningRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeMagnetometerAdvancedTuningRegister_max_adapt_rate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeMagnetometerAdvancedTuningRegister_max_adapt_rate_get" "', argument " "1"" of type '" "vn::sensors::VpeMagnetometerAdvancedTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeMagnetometerAdvancedTuningRegister * >(argp1);
  result = (float) ((arg1)->maxAdaptRate);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeMagnetometerAdvancedTuningRegister_disturbance_window_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeMagnetometerAdvancedTuningRegister *arg1 = (vn::sensors::VpeMagnetometerAdvancedTuningRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeMagnetometerAdvancedTuningRegister_disturbance_window_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeMagnetometerAdvancedTuningRegister_disturbance_window_set" "', argument " "1"" of type '" "vn::sensors::VpeMagnetometerAdvancedTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeMagnetometerAdvancedTuningRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VpeMagnetometerAdvancedTuningRegister_disturbance_window_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->disturbanceWindow = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeMagnetometerAdvancedTuningRegister_disturbance_window_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeMagnetometerAdvancedTuningRegister *arg1 = (vn::sensors::VpeMagnetometerAdvancedTuningRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeMagnetometerAdvancedTuningRegister_disturbance_window_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeMagnetometerAdvancedTuningRegister_disturbance_window_get" "', argument " "1"" of type '" "vn::sensors::VpeMagnetometerAdvancedTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeMagnetometerAdvancedTuningRegister * >(argp1);
  result = (float) ((arg1)->disturbanceWindow);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeMagnetometerAdvancedTuningRegister_max_tuning_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeMagnetometerAdvancedTuningRegister *arg1 = (vn::sensors::VpeMagnetometerAdvancedTuningRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeMagnetometerAdvancedTuningRegister_max_tuning_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeMagnetometerAdvancedTuningRegister_max_tuning_set" "', argument " "1"" of type '" "vn::sensors::VpeMagnetometerAdvancedTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeMagnetometerAdvancedTuningRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VpeMagnetometerAdvancedTuningRegister_max_tuning_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->maxTuning = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeMagnetometerAdvancedTuningRegister_max_tuning_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeMagnetometerAdvancedTuningRegister *arg1 = (vn::sensors::VpeMagnetometerAdvancedTuningRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeMagnetometerAdvancedTuningRegister_max_tuning_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeMagnetometerAdvancedTuningRegister_max_tuning_get" "', argument " "1"" of type '" "vn::sensors::VpeMagnetometerAdvancedTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeMagnetometerAdvancedTuningRegister * >(argp1);
  result = (float) ((arg1)->maxTuning);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VpeMagnetometerAdvancedTuningRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeMagnetometerAdvancedTuningRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VpeMagnetometerAdvancedTuningRegister")) SWIG_fail;
  result = (vn::sensors::VpeMagnetometerAdvancedTuningRegister *)new vn::sensors::VpeMagnetometerAdvancedTuningRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VpeMagnetometerAdvancedTuningRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3f arg1 ;
  vn::math::vec3f arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  vn::sensors::VpeMagnetometerAdvancedTuningRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_VpeMagnetometerAdvancedTuningRegister",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VpeMagnetometerAdvancedTuningRegister" "', argument " "1"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VpeMagnetometerAdvancedTuningRegister" "', argument " "1"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VpeMagnetometerAdvancedTuningRegister" "', argument " "2"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VpeMagnetometerAdvancedTuningRegister" "', argument " "2"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VpeMagnetometerAdvancedTuningRegister" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_VpeMagnetometerAdvancedTuningRegister" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_VpeMagnetometerAdvancedTuningRegister" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  result = (vn::sensors::VpeMagnetometerAdvancedTuningRegister *)new vn::sensors::VpeMagnetometerAdvancedTuningRegister(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VpeMagnetometerAdvancedTuningRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VpeMagnetometerAdvancedTuningRegister__SWIG_0(self, args);
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_VpeMagnetometerAdvancedTuningRegister__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VpeMagnetometerAdvancedTuningRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VpeMagnetometerAdvancedTuningRegister::VpeMagnetometerAdvancedTuningRegister()\n"
    "    vn::sensors::VpeMagnetometerAdvancedTuningRegister::VpeMagnetometerAdvancedTuningRegister(vn::math::vec3f,vn::math::vec3f,float,float,float)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VpeMagnetometerAdvancedTuningRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeMagnetometerAdvancedTuningRegister *arg1 = (vn::sensors::VpeMagnetometerAdvancedTuningRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VpeMagnetometerAdvancedTuningRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VpeMagnetometerAdvancedTuningRegister" "', argument " "1"" of type '" "vn::sensors::VpeMagnetometerAdvancedTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeMagnetometerAdvancedTuningRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VpeMagnetometerAdvancedTuningRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VpeAccelerometerBasicTuningRegister_base_tuning_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeAccelerometerBasicTuningRegister *arg1 = (vn::sensors::VpeAccelerometerBasicTuningRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeAccelerometerBasicTuningRegister_base_tuning_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeAccelerometerBasicTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeAccelerometerBasicTuningRegister_base_tuning_set" "', argument " "1"" of type '" "vn::sensors::VpeAccelerometerBasicTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeAccelerometerBasicTuningRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VpeAccelerometerBasicTuningRegister_base_tuning_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->baseTuning = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeAccelerometerBasicTuningRegister_base_tuning_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeAccelerometerBasicTuningRegister *arg1 = (vn::sensors::VpeAccelerometerBasicTuningRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeAccelerometerBasicTuningRegister_base_tuning_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeAccelerometerBasicTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeAccelerometerBasicTuningRegister_base_tuning_get" "', argument " "1"" of type '" "vn::sensors::VpeAccelerometerBasicTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeAccelerometerBasicTuningRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->baseTuning);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeAccelerometerBasicTuningRegister_adaptive_tuning_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeAccelerometerBasicTuningRegister *arg1 = (vn::sensors::VpeAccelerometerBasicTuningRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeAccelerometerBasicTuningRegister_adaptive_tuning_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeAccelerometerBasicTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeAccelerometerBasicTuningRegister_adaptive_tuning_set" "', argument " "1"" of type '" "vn::sensors::VpeAccelerometerBasicTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeAccelerometerBasicTuningRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VpeAccelerometerBasicTuningRegister_adaptive_tuning_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->adaptiveTuning = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeAccelerometerBasicTuningRegister_adaptive_tuning_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeAccelerometerBasicTuningRegister *arg1 = (vn::sensors::VpeAccelerometerBasicTuningRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeAccelerometerBasicTuningRegister_adaptive_tuning_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeAccelerometerBasicTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeAccelerometerBasicTuningRegister_adaptive_tuning_get" "', argument " "1"" of type '" "vn::sensors::VpeAccelerometerBasicTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeAccelerometerBasicTuningRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->adaptiveTuning);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeAccelerometerBasicTuningRegister_adaptive_filtering_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeAccelerometerBasicTuningRegister *arg1 = (vn::sensors::VpeAccelerometerBasicTuningRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeAccelerometerBasicTuningRegister_adaptive_filtering_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeAccelerometerBasicTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeAccelerometerBasicTuningRegister_adaptive_filtering_set" "', argument " "1"" of type '" "vn::sensors::VpeAccelerometerBasicTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeAccelerometerBasicTuningRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VpeAccelerometerBasicTuningRegister_adaptive_filtering_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->adaptiveFiltering = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeAccelerometerBasicTuningRegister_adaptive_filtering_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeAccelerometerBasicTuningRegister *arg1 = (vn::sensors::VpeAccelerometerBasicTuningRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeAccelerometerBasicTuningRegister_adaptive_filtering_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeAccelerometerBasicTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeAccelerometerBasicTuningRegister_adaptive_filtering_get" "', argument " "1"" of type '" "vn::sensors::VpeAccelerometerBasicTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeAccelerometerBasicTuningRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->adaptiveFiltering);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VpeAccelerometerBasicTuningRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeAccelerometerBasicTuningRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VpeAccelerometerBasicTuningRegister")) SWIG_fail;
  result = (vn::sensors::VpeAccelerometerBasicTuningRegister *)new vn::sensors::VpeAccelerometerBasicTuningRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__VpeAccelerometerBasicTuningRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VpeAccelerometerBasicTuningRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3f arg1 ;
  vn::math::vec3f arg2 ;
  vn::math::vec3f arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vn::sensors::VpeAccelerometerBasicTuningRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_VpeAccelerometerBasicTuningRegister",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VpeAccelerometerBasicTuningRegister" "', argument " "1"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VpeAccelerometerBasicTuningRegister" "', argument " "1"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VpeAccelerometerBasicTuningRegister" "', argument " "2"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VpeAccelerometerBasicTuningRegister" "', argument " "2"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_VpeAccelerometerBasicTuningRegister" "', argument " "3"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VpeAccelerometerBasicTuningRegister" "', argument " "3"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (vn::sensors::VpeAccelerometerBasicTuningRegister *)new vn::sensors::VpeAccelerometerBasicTuningRegister(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__VpeAccelerometerBasicTuningRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VpeAccelerometerBasicTuningRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VpeAccelerometerBasicTuningRegister__SWIG_0(self, args);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_VpeAccelerometerBasicTuningRegister__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VpeAccelerometerBasicTuningRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VpeAccelerometerBasicTuningRegister::VpeAccelerometerBasicTuningRegister()\n"
    "    vn::sensors::VpeAccelerometerBasicTuningRegister::VpeAccelerometerBasicTuningRegister(vn::math::vec3f,vn::math::vec3f,vn::math::vec3f)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VpeAccelerometerBasicTuningRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeAccelerometerBasicTuningRegister *arg1 = (vn::sensors::VpeAccelerometerBasicTuningRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VpeAccelerometerBasicTuningRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeAccelerometerBasicTuningRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VpeAccelerometerBasicTuningRegister" "', argument " "1"" of type '" "vn::sensors::VpeAccelerometerBasicTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeAccelerometerBasicTuningRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VpeAccelerometerBasicTuningRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__VpeAccelerometerBasicTuningRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VpeAccelerometerAdvancedTuningRegister_min_filtering_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeAccelerometerAdvancedTuningRegister *arg1 = (vn::sensors::VpeAccelerometerAdvancedTuningRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeAccelerometerAdvancedTuningRegister_min_filtering_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeAccelerometerAdvancedTuningRegister_min_filtering_set" "', argument " "1"" of type '" "vn::sensors::VpeAccelerometerAdvancedTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeAccelerometerAdvancedTuningRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VpeAccelerometerAdvancedTuningRegister_min_filtering_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->minFiltering = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeAccelerometerAdvancedTuningRegister_min_filtering_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeAccelerometerAdvancedTuningRegister *arg1 = (vn::sensors::VpeAccelerometerAdvancedTuningRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeAccelerometerAdvancedTuningRegister_min_filtering_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeAccelerometerAdvancedTuningRegister_min_filtering_get" "', argument " "1"" of type '" "vn::sensors::VpeAccelerometerAdvancedTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeAccelerometerAdvancedTuningRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->minFiltering);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeAccelerometerAdvancedTuningRegister_max_filtering_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeAccelerometerAdvancedTuningRegister *arg1 = (vn::sensors::VpeAccelerometerAdvancedTuningRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeAccelerometerAdvancedTuningRegister_max_filtering_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeAccelerometerAdvancedTuningRegister_max_filtering_set" "', argument " "1"" of type '" "vn::sensors::VpeAccelerometerAdvancedTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeAccelerometerAdvancedTuningRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VpeAccelerometerAdvancedTuningRegister_max_filtering_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->maxFiltering = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeAccelerometerAdvancedTuningRegister_max_filtering_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeAccelerometerAdvancedTuningRegister *arg1 = (vn::sensors::VpeAccelerometerAdvancedTuningRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeAccelerometerAdvancedTuningRegister_max_filtering_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeAccelerometerAdvancedTuningRegister_max_filtering_get" "', argument " "1"" of type '" "vn::sensors::VpeAccelerometerAdvancedTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeAccelerometerAdvancedTuningRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->maxFiltering);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeAccelerometerAdvancedTuningRegister_max_adapt_rate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeAccelerometerAdvancedTuningRegister *arg1 = (vn::sensors::VpeAccelerometerAdvancedTuningRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeAccelerometerAdvancedTuningRegister_max_adapt_rate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeAccelerometerAdvancedTuningRegister_max_adapt_rate_set" "', argument " "1"" of type '" "vn::sensors::VpeAccelerometerAdvancedTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeAccelerometerAdvancedTuningRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VpeAccelerometerAdvancedTuningRegister_max_adapt_rate_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->maxAdaptRate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeAccelerometerAdvancedTuningRegister_max_adapt_rate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeAccelerometerAdvancedTuningRegister *arg1 = (vn::sensors::VpeAccelerometerAdvancedTuningRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeAccelerometerAdvancedTuningRegister_max_adapt_rate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeAccelerometerAdvancedTuningRegister_max_adapt_rate_get" "', argument " "1"" of type '" "vn::sensors::VpeAccelerometerAdvancedTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeAccelerometerAdvancedTuningRegister * >(argp1);
  result = (float) ((arg1)->maxAdaptRate);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeAccelerometerAdvancedTuningRegister_disturbance_window_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeAccelerometerAdvancedTuningRegister *arg1 = (vn::sensors::VpeAccelerometerAdvancedTuningRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeAccelerometerAdvancedTuningRegister_disturbance_window_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeAccelerometerAdvancedTuningRegister_disturbance_window_set" "', argument " "1"" of type '" "vn::sensors::VpeAccelerometerAdvancedTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeAccelerometerAdvancedTuningRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VpeAccelerometerAdvancedTuningRegister_disturbance_window_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->disturbanceWindow = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeAccelerometerAdvancedTuningRegister_disturbance_window_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeAccelerometerAdvancedTuningRegister *arg1 = (vn::sensors::VpeAccelerometerAdvancedTuningRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeAccelerometerAdvancedTuningRegister_disturbance_window_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeAccelerometerAdvancedTuningRegister_disturbance_window_get" "', argument " "1"" of type '" "vn::sensors::VpeAccelerometerAdvancedTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeAccelerometerAdvancedTuningRegister * >(argp1);
  result = (float) ((arg1)->disturbanceWindow);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeAccelerometerAdvancedTuningRegister_max_tuning_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeAccelerometerAdvancedTuningRegister *arg1 = (vn::sensors::VpeAccelerometerAdvancedTuningRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeAccelerometerAdvancedTuningRegister_max_tuning_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeAccelerometerAdvancedTuningRegister_max_tuning_set" "', argument " "1"" of type '" "vn::sensors::VpeAccelerometerAdvancedTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeAccelerometerAdvancedTuningRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VpeAccelerometerAdvancedTuningRegister_max_tuning_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->maxTuning = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeAccelerometerAdvancedTuningRegister_max_tuning_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeAccelerometerAdvancedTuningRegister *arg1 = (vn::sensors::VpeAccelerometerAdvancedTuningRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeAccelerometerAdvancedTuningRegister_max_tuning_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeAccelerometerAdvancedTuningRegister_max_tuning_get" "', argument " "1"" of type '" "vn::sensors::VpeAccelerometerAdvancedTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeAccelerometerAdvancedTuningRegister * >(argp1);
  result = (float) ((arg1)->maxTuning);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VpeAccelerometerAdvancedTuningRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeAccelerometerAdvancedTuningRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VpeAccelerometerAdvancedTuningRegister")) SWIG_fail;
  result = (vn::sensors::VpeAccelerometerAdvancedTuningRegister *)new vn::sensors::VpeAccelerometerAdvancedTuningRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VpeAccelerometerAdvancedTuningRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3f arg1 ;
  vn::math::vec3f arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  vn::sensors::VpeAccelerometerAdvancedTuningRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_VpeAccelerometerAdvancedTuningRegister",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VpeAccelerometerAdvancedTuningRegister" "', argument " "1"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VpeAccelerometerAdvancedTuningRegister" "', argument " "1"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VpeAccelerometerAdvancedTuningRegister" "', argument " "2"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VpeAccelerometerAdvancedTuningRegister" "', argument " "2"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VpeAccelerometerAdvancedTuningRegister" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_VpeAccelerometerAdvancedTuningRegister" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_VpeAccelerometerAdvancedTuningRegister" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  result = (vn::sensors::VpeAccelerometerAdvancedTuningRegister *)new vn::sensors::VpeAccelerometerAdvancedTuningRegister(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VpeAccelerometerAdvancedTuningRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VpeAccelerometerAdvancedTuningRegister__SWIG_0(self, args);
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_VpeAccelerometerAdvancedTuningRegister__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VpeAccelerometerAdvancedTuningRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VpeAccelerometerAdvancedTuningRegister::VpeAccelerometerAdvancedTuningRegister()\n"
    "    vn::sensors::VpeAccelerometerAdvancedTuningRegister::VpeAccelerometerAdvancedTuningRegister(vn::math::vec3f,vn::math::vec3f,float,float,float)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VpeAccelerometerAdvancedTuningRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeAccelerometerAdvancedTuningRegister *arg1 = (vn::sensors::VpeAccelerometerAdvancedTuningRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VpeAccelerometerAdvancedTuningRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VpeAccelerometerAdvancedTuningRegister" "', argument " "1"" of type '" "vn::sensors::VpeAccelerometerAdvancedTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeAccelerometerAdvancedTuningRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VpeAccelerometerAdvancedTuningRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VpeGyroBasicTuningRegister_angularWalkVariance_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeGyroBasicTuningRegister *arg1 = (vn::sensors::VpeGyroBasicTuningRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeGyroBasicTuningRegister_angularWalkVariance_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeGyroBasicTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeGyroBasicTuningRegister_angularWalkVariance_set" "', argument " "1"" of type '" "vn::sensors::VpeGyroBasicTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeGyroBasicTuningRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VpeGyroBasicTuningRegister_angularWalkVariance_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->angularWalkVariance = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeGyroBasicTuningRegister_angularWalkVariance_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeGyroBasicTuningRegister *arg1 = (vn::sensors::VpeGyroBasicTuningRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeGyroBasicTuningRegister_angularWalkVariance_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeGyroBasicTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeGyroBasicTuningRegister_angularWalkVariance_get" "', argument " "1"" of type '" "vn::sensors::VpeGyroBasicTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeGyroBasicTuningRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->angularWalkVariance);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeGyroBasicTuningRegister_baseTuning_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeGyroBasicTuningRegister *arg1 = (vn::sensors::VpeGyroBasicTuningRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeGyroBasicTuningRegister_baseTuning_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeGyroBasicTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeGyroBasicTuningRegister_baseTuning_set" "', argument " "1"" of type '" "vn::sensors::VpeGyroBasicTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeGyroBasicTuningRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VpeGyroBasicTuningRegister_baseTuning_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->baseTuning = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeGyroBasicTuningRegister_baseTuning_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeGyroBasicTuningRegister *arg1 = (vn::sensors::VpeGyroBasicTuningRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeGyroBasicTuningRegister_baseTuning_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeGyroBasicTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeGyroBasicTuningRegister_baseTuning_get" "', argument " "1"" of type '" "vn::sensors::VpeGyroBasicTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeGyroBasicTuningRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->baseTuning);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeGyroBasicTuningRegister_adaptiveTuning_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeGyroBasicTuningRegister *arg1 = (vn::sensors::VpeGyroBasicTuningRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VpeGyroBasicTuningRegister_adaptiveTuning_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeGyroBasicTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeGyroBasicTuningRegister_adaptiveTuning_set" "', argument " "1"" of type '" "vn::sensors::VpeGyroBasicTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeGyroBasicTuningRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VpeGyroBasicTuningRegister_adaptiveTuning_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->adaptiveTuning = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VpeGyroBasicTuningRegister_adaptiveTuning_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeGyroBasicTuningRegister *arg1 = (vn::sensors::VpeGyroBasicTuningRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VpeGyroBasicTuningRegister_adaptiveTuning_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeGyroBasicTuningRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VpeGyroBasicTuningRegister_adaptiveTuning_get" "', argument " "1"" of type '" "vn::sensors::VpeGyroBasicTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeGyroBasicTuningRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->adaptiveTuning);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VpeGyroBasicTuningRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeGyroBasicTuningRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VpeGyroBasicTuningRegister")) SWIG_fail;
  result = (vn::sensors::VpeGyroBasicTuningRegister *)new vn::sensors::VpeGyroBasicTuningRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__VpeGyroBasicTuningRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VpeGyroBasicTuningRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3f arg1 ;
  vn::math::vec3f arg2 ;
  vn::math::vec3f arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vn::sensors::VpeGyroBasicTuningRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_VpeGyroBasicTuningRegister",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VpeGyroBasicTuningRegister" "', argument " "1"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VpeGyroBasicTuningRegister" "', argument " "1"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VpeGyroBasicTuningRegister" "', argument " "2"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VpeGyroBasicTuningRegister" "', argument " "2"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_VpeGyroBasicTuningRegister" "', argument " "3"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VpeGyroBasicTuningRegister" "', argument " "3"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (vn::sensors::VpeGyroBasicTuningRegister *)new vn::sensors::VpeGyroBasicTuningRegister(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__VpeGyroBasicTuningRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VpeGyroBasicTuningRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VpeGyroBasicTuningRegister__SWIG_0(self, args);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_VpeGyroBasicTuningRegister__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VpeGyroBasicTuningRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VpeGyroBasicTuningRegister::VpeGyroBasicTuningRegister()\n"
    "    vn::sensors::VpeGyroBasicTuningRegister::VpeGyroBasicTuningRegister(vn::math::vec3f,vn::math::vec3f,vn::math::vec3f)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VpeGyroBasicTuningRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeGyroBasicTuningRegister *arg1 = (vn::sensors::VpeGyroBasicTuningRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VpeGyroBasicTuningRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VpeGyroBasicTuningRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VpeGyroBasicTuningRegister" "', argument " "1"" of type '" "vn::sensors::VpeGyroBasicTuningRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeGyroBasicTuningRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VpeGyroBasicTuningRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__VpeGyroBasicTuningRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_MagnetometerCalibrationControlRegister_hsi_mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagnetometerCalibrationControlRegister *arg1 = (vn::sensors::MagnetometerCalibrationControlRegister *) 0 ;
  vn::protocol::uart::HsiMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MagnetometerCalibrationControlRegister_hsi_mode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__MagnetometerCalibrationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagnetometerCalibrationControlRegister_hsi_mode_set" "', argument " "1"" of type '" "vn::sensors::MagnetometerCalibrationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagnetometerCalibrationControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MagnetometerCalibrationControlRegister_hsi_mode_set" "', argument " "2"" of type '" "vn::protocol::uart::HsiMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::HsiMode >(val2);
  if (arg1) (arg1)->hsiMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MagnetometerCalibrationControlRegister_hsi_mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagnetometerCalibrationControlRegister *arg1 = (vn::sensors::MagnetometerCalibrationControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::HsiMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MagnetometerCalibrationControlRegister_hsi_mode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__MagnetometerCalibrationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagnetometerCalibrationControlRegister_hsi_mode_get" "', argument " "1"" of type '" "vn::sensors::MagnetometerCalibrationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagnetometerCalibrationControlRegister * >(argp1);
  result = (vn::protocol::uart::HsiMode) ((arg1)->hsiMode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MagnetometerCalibrationControlRegister_hsi_output_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagnetometerCalibrationControlRegister *arg1 = (vn::sensors::MagnetometerCalibrationControlRegister *) 0 ;
  vn::protocol::uart::HsiOutput arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MagnetometerCalibrationControlRegister_hsi_output_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__MagnetometerCalibrationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagnetometerCalibrationControlRegister_hsi_output_set" "', argument " "1"" of type '" "vn::sensors::MagnetometerCalibrationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagnetometerCalibrationControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MagnetometerCalibrationControlRegister_hsi_output_set" "', argument " "2"" of type '" "vn::protocol::uart::HsiOutput""'");
  } 
  arg2 = static_cast< vn::protocol::uart::HsiOutput >(val2);
  if (arg1) (arg1)->hsiOutput = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MagnetometerCalibrationControlRegister_hsi_output_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagnetometerCalibrationControlRegister *arg1 = (vn::sensors::MagnetometerCalibrationControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::HsiOutput result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MagnetometerCalibrationControlRegister_hsi_output_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__MagnetometerCalibrationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagnetometerCalibrationControlRegister_hsi_output_get" "', argument " "1"" of type '" "vn::sensors::MagnetometerCalibrationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagnetometerCalibrationControlRegister * >(argp1);
  result = (vn::protocol::uart::HsiOutput) ((arg1)->hsiOutput);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MagnetometerCalibrationControlRegister_converge_rate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagnetometerCalibrationControlRegister *arg1 = (vn::sensors::MagnetometerCalibrationControlRegister *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MagnetometerCalibrationControlRegister_converge_rate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__MagnetometerCalibrationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagnetometerCalibrationControlRegister_converge_rate_set" "', argument " "1"" of type '" "vn::sensors::MagnetometerCalibrationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagnetometerCalibrationControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MagnetometerCalibrationControlRegister_converge_rate_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->convergeRate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MagnetometerCalibrationControlRegister_converge_rate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagnetometerCalibrationControlRegister *arg1 = (vn::sensors::MagnetometerCalibrationControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MagnetometerCalibrationControlRegister_converge_rate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__MagnetometerCalibrationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagnetometerCalibrationControlRegister_converge_rate_get" "', argument " "1"" of type '" "vn::sensors::MagnetometerCalibrationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagnetometerCalibrationControlRegister * >(argp1);
  result = (uint8_t) ((arg1)->convergeRate);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MagnetometerCalibrationControlRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagnetometerCalibrationControlRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MagnetometerCalibrationControlRegister")) SWIG_fail;
  result = (vn::sensors::MagnetometerCalibrationControlRegister *)new vn::sensors::MagnetometerCalibrationControlRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__MagnetometerCalibrationControlRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MagnetometerCalibrationControlRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::HsiMode arg1 ;
  vn::protocol::uart::HsiOutput arg2 ;
  uint8_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vn::sensors::MagnetometerCalibrationControlRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_MagnetometerCalibrationControlRegister",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MagnetometerCalibrationControlRegister" "', argument " "1"" of type '" "vn::protocol::uart::HsiMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::HsiMode >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MagnetometerCalibrationControlRegister" "', argument " "2"" of type '" "vn::protocol::uart::HsiOutput""'");
  } 
  arg2 = static_cast< vn::protocol::uart::HsiOutput >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MagnetometerCalibrationControlRegister" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  result = (vn::sensors::MagnetometerCalibrationControlRegister *)new vn::sensors::MagnetometerCalibrationControlRegister(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__MagnetometerCalibrationControlRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MagnetometerCalibrationControlRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MagnetometerCalibrationControlRegister__SWIG_0(self, args);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_MagnetometerCalibrationControlRegister__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MagnetometerCalibrationControlRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::MagnetometerCalibrationControlRegister::MagnetometerCalibrationControlRegister()\n"
    "    vn::sensors::MagnetometerCalibrationControlRegister::MagnetometerCalibrationControlRegister(vn::protocol::uart::HsiMode,vn::protocol::uart::HsiOutput,uint8_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MagnetometerCalibrationControlRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagnetometerCalibrationControlRegister *arg1 = (vn::sensors::MagnetometerCalibrationControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MagnetometerCalibrationControlRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__MagnetometerCalibrationControlRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MagnetometerCalibrationControlRegister" "', argument " "1"" of type '" "vn::sensors::MagnetometerCalibrationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagnetometerCalibrationControlRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MagnetometerCalibrationControlRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__MagnetometerCalibrationControlRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CalculatedMagnetometerCalibrationRegister_c_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CalculatedMagnetometerCalibrationRegister *arg1 = (vn::sensors::CalculatedMagnetometerCalibrationRegister *) 0 ;
  vn::math::mat3f *arg2 = (vn::math::mat3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalculatedMagnetometerCalibrationRegister_c_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CalculatedMagnetometerCalibrationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculatedMagnetometerCalibrationRegister_c_set" "', argument " "1"" of type '" "vn::sensors::CalculatedMagnetometerCalibrationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CalculatedMagnetometerCalibrationRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalculatedMagnetometerCalibrationRegister_c_set" "', argument " "2"" of type '" "vn::math::mat3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::mat3f * >(argp2);
  if (arg1) (arg1)->c = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculatedMagnetometerCalibrationRegister_c_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CalculatedMagnetometerCalibrationRegister *arg1 = (vn::sensors::CalculatedMagnetometerCalibrationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::mat3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculatedMagnetometerCalibrationRegister_c_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CalculatedMagnetometerCalibrationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculatedMagnetometerCalibrationRegister_c_get" "', argument " "1"" of type '" "vn::sensors::CalculatedMagnetometerCalibrationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CalculatedMagnetometerCalibrationRegister * >(argp1);
  result = (vn::math::mat3f *)& ((arg1)->c);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculatedMagnetometerCalibrationRegister_b_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CalculatedMagnetometerCalibrationRegister *arg1 = (vn::sensors::CalculatedMagnetometerCalibrationRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalculatedMagnetometerCalibrationRegister_b_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CalculatedMagnetometerCalibrationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculatedMagnetometerCalibrationRegister_b_set" "', argument " "1"" of type '" "vn::sensors::CalculatedMagnetometerCalibrationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CalculatedMagnetometerCalibrationRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalculatedMagnetometerCalibrationRegister_b_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->b = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculatedMagnetometerCalibrationRegister_b_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CalculatedMagnetometerCalibrationRegister *arg1 = (vn::sensors::CalculatedMagnetometerCalibrationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculatedMagnetometerCalibrationRegister_b_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CalculatedMagnetometerCalibrationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculatedMagnetometerCalibrationRegister_b_get" "', argument " "1"" of type '" "vn::sensors::CalculatedMagnetometerCalibrationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CalculatedMagnetometerCalibrationRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->b);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CalculatedMagnetometerCalibrationRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CalculatedMagnetometerCalibrationRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CalculatedMagnetometerCalibrationRegister")) SWIG_fail;
  result = (vn::sensors::CalculatedMagnetometerCalibrationRegister *)new vn::sensors::CalculatedMagnetometerCalibrationRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__CalculatedMagnetometerCalibrationRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CalculatedMagnetometerCalibrationRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat3f arg1 ;
  vn::math::vec3f arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::sensors::CalculatedMagnetometerCalibrationRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CalculatedMagnetometerCalibrationRegister",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__matT_3_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CalculatedMagnetometerCalibrationRegister" "', argument " "1"" of type '" "vn::math::mat3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CalculatedMagnetometerCalibrationRegister" "', argument " "1"" of type '" "vn::math::mat3f""'");
    } else {
      vn::math::mat3f * temp = reinterpret_cast< vn::math::mat3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CalculatedMagnetometerCalibrationRegister" "', argument " "2"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CalculatedMagnetometerCalibrationRegister" "', argument " "2"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (vn::sensors::CalculatedMagnetometerCalibrationRegister *)new vn::sensors::CalculatedMagnetometerCalibrationRegister(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__CalculatedMagnetometerCalibrationRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CalculatedMagnetometerCalibrationRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CalculatedMagnetometerCalibrationRegister__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__math__matT_3_3_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_CalculatedMagnetometerCalibrationRegister__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CalculatedMagnetometerCalibrationRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::CalculatedMagnetometerCalibrationRegister::CalculatedMagnetometerCalibrationRegister()\n"
    "    vn::sensors::CalculatedMagnetometerCalibrationRegister::CalculatedMagnetometerCalibrationRegister(vn::math::mat3f,vn::math::vec3f)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_CalculatedMagnetometerCalibrationRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CalculatedMagnetometerCalibrationRegister *arg1 = (vn::sensors::CalculatedMagnetometerCalibrationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CalculatedMagnetometerCalibrationRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CalculatedMagnetometerCalibrationRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CalculatedMagnetometerCalibrationRegister" "', argument " "1"" of type '" "vn::sensors::CalculatedMagnetometerCalibrationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CalculatedMagnetometerCalibrationRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CalculatedMagnetometerCalibrationRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__CalculatedMagnetometerCalibrationRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VelocityCompensationControlRegister_mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VelocityCompensationControlRegister *arg1 = (vn::sensors::VelocityCompensationControlRegister *) 0 ;
  vn::protocol::uart::VelocityCompensationMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VelocityCompensationControlRegister_mode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VelocityCompensationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VelocityCompensationControlRegister_mode_set" "', argument " "1"" of type '" "vn::sensors::VelocityCompensationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VelocityCompensationControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VelocityCompensationControlRegister_mode_set" "', argument " "2"" of type '" "vn::protocol::uart::VelocityCompensationMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::VelocityCompensationMode >(val2);
  if (arg1) (arg1)->mode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VelocityCompensationControlRegister_mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VelocityCompensationControlRegister *arg1 = (vn::sensors::VelocityCompensationControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::VelocityCompensationMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VelocityCompensationControlRegister_mode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VelocityCompensationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VelocityCompensationControlRegister_mode_get" "', argument " "1"" of type '" "vn::sensors::VelocityCompensationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VelocityCompensationControlRegister * >(argp1);
  result = (vn::protocol::uart::VelocityCompensationMode) ((arg1)->mode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VelocityCompensationControlRegister_velocity_tuning_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VelocityCompensationControlRegister *arg1 = (vn::sensors::VelocityCompensationControlRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VelocityCompensationControlRegister_velocity_tuning_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VelocityCompensationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VelocityCompensationControlRegister_velocity_tuning_set" "', argument " "1"" of type '" "vn::sensors::VelocityCompensationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VelocityCompensationControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VelocityCompensationControlRegister_velocity_tuning_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->velocityTuning = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VelocityCompensationControlRegister_velocity_tuning_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VelocityCompensationControlRegister *arg1 = (vn::sensors::VelocityCompensationControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VelocityCompensationControlRegister_velocity_tuning_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VelocityCompensationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VelocityCompensationControlRegister_velocity_tuning_get" "', argument " "1"" of type '" "vn::sensors::VelocityCompensationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VelocityCompensationControlRegister * >(argp1);
  result = (float) ((arg1)->velocityTuning);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VelocityCompensationControlRegister_rate_tuning_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VelocityCompensationControlRegister *arg1 = (vn::sensors::VelocityCompensationControlRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VelocityCompensationControlRegister_rate_tuning_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VelocityCompensationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VelocityCompensationControlRegister_rate_tuning_set" "', argument " "1"" of type '" "vn::sensors::VelocityCompensationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VelocityCompensationControlRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VelocityCompensationControlRegister_rate_tuning_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->rateTuning = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VelocityCompensationControlRegister_rate_tuning_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VelocityCompensationControlRegister *arg1 = (vn::sensors::VelocityCompensationControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VelocityCompensationControlRegister_rate_tuning_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VelocityCompensationControlRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VelocityCompensationControlRegister_rate_tuning_get" "', argument " "1"" of type '" "vn::sensors::VelocityCompensationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VelocityCompensationControlRegister * >(argp1);
  result = (float) ((arg1)->rateTuning);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VelocityCompensationControlRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VelocityCompensationControlRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VelocityCompensationControlRegister")) SWIG_fail;
  result = (vn::sensors::VelocityCompensationControlRegister *)new vn::sensors::VelocityCompensationControlRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__VelocityCompensationControlRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VelocityCompensationControlRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::VelocityCompensationMode arg1 ;
  float arg2 ;
  float arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vn::sensors::VelocityCompensationControlRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_VelocityCompensationControlRegister",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VelocityCompensationControlRegister" "', argument " "1"" of type '" "vn::protocol::uart::VelocityCompensationMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::VelocityCompensationMode >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VelocityCompensationControlRegister" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VelocityCompensationControlRegister" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (vn::sensors::VelocityCompensationControlRegister *)new vn::sensors::VelocityCompensationControlRegister(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__VelocityCompensationControlRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VelocityCompensationControlRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VelocityCompensationControlRegister__SWIG_0(self, args);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_VelocityCompensationControlRegister__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VelocityCompensationControlRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VelocityCompensationControlRegister::VelocityCompensationControlRegister()\n"
    "    vn::sensors::VelocityCompensationControlRegister::VelocityCompensationControlRegister(vn::protocol::uart::VelocityCompensationMode,float,float)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VelocityCompensationControlRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VelocityCompensationControlRegister *arg1 = (vn::sensors::VelocityCompensationControlRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VelocityCompensationControlRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VelocityCompensationControlRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VelocityCompensationControlRegister" "', argument " "1"" of type '" "vn::sensors::VelocityCompensationControlRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VelocityCompensationControlRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VelocityCompensationControlRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__VelocityCompensationControlRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VelocityCompensationStatusRegister_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VelocityCompensationStatusRegister *arg1 = (vn::sensors::VelocityCompensationStatusRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VelocityCompensationStatusRegister_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VelocityCompensationStatusRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VelocityCompensationStatusRegister_x_set" "', argument " "1"" of type '" "vn::sensors::VelocityCompensationStatusRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VelocityCompensationStatusRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VelocityCompensationStatusRegister_x_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VelocityCompensationStatusRegister_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VelocityCompensationStatusRegister *arg1 = (vn::sensors::VelocityCompensationStatusRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VelocityCompensationStatusRegister_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VelocityCompensationStatusRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VelocityCompensationStatusRegister_x_get" "', argument " "1"" of type '" "vn::sensors::VelocityCompensationStatusRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VelocityCompensationStatusRegister * >(argp1);
  result = (float) ((arg1)->x);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VelocityCompensationStatusRegister_x_dot_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VelocityCompensationStatusRegister *arg1 = (vn::sensors::VelocityCompensationStatusRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VelocityCompensationStatusRegister_x_dot_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VelocityCompensationStatusRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VelocityCompensationStatusRegister_x_dot_set" "', argument " "1"" of type '" "vn::sensors::VelocityCompensationStatusRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VelocityCompensationStatusRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VelocityCompensationStatusRegister_x_dot_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->xDot = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VelocityCompensationStatusRegister_x_dot_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VelocityCompensationStatusRegister *arg1 = (vn::sensors::VelocityCompensationStatusRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VelocityCompensationStatusRegister_x_dot_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VelocityCompensationStatusRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VelocityCompensationStatusRegister_x_dot_get" "', argument " "1"" of type '" "vn::sensors::VelocityCompensationStatusRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VelocityCompensationStatusRegister * >(argp1);
  result = (float) ((arg1)->xDot);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VelocityCompensationStatusRegister_accel_offset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VelocityCompensationStatusRegister *arg1 = (vn::sensors::VelocityCompensationStatusRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VelocityCompensationStatusRegister_accel_offset_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VelocityCompensationStatusRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VelocityCompensationStatusRegister_accel_offset_set" "', argument " "1"" of type '" "vn::sensors::VelocityCompensationStatusRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VelocityCompensationStatusRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VelocityCompensationStatusRegister_accel_offset_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->accelOffset = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VelocityCompensationStatusRegister_accel_offset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VelocityCompensationStatusRegister *arg1 = (vn::sensors::VelocityCompensationStatusRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VelocityCompensationStatusRegister_accel_offset_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VelocityCompensationStatusRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VelocityCompensationStatusRegister_accel_offset_get" "', argument " "1"" of type '" "vn::sensors::VelocityCompensationStatusRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VelocityCompensationStatusRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->accelOffset);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VelocityCompensationStatusRegister_omega_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VelocityCompensationStatusRegister *arg1 = (vn::sensors::VelocityCompensationStatusRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VelocityCompensationStatusRegister_omega_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VelocityCompensationStatusRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VelocityCompensationStatusRegister_omega_set" "', argument " "1"" of type '" "vn::sensors::VelocityCompensationStatusRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VelocityCompensationStatusRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VelocityCompensationStatusRegister_omega_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->omega = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VelocityCompensationStatusRegister_omega_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VelocityCompensationStatusRegister *arg1 = (vn::sensors::VelocityCompensationStatusRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VelocityCompensationStatusRegister_omega_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VelocityCompensationStatusRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VelocityCompensationStatusRegister_omega_get" "', argument " "1"" of type '" "vn::sensors::VelocityCompensationStatusRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VelocityCompensationStatusRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->omega);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VelocityCompensationStatusRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VelocityCompensationStatusRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VelocityCompensationStatusRegister")) SWIG_fail;
  result = (vn::sensors::VelocityCompensationStatusRegister *)new vn::sensors::VelocityCompensationStatusRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__VelocityCompensationStatusRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VelocityCompensationStatusRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  vn::math::vec3f arg3 ;
  vn::math::vec3f arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  vn::sensors::VelocityCompensationStatusRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_VelocityCompensationStatusRegister",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VelocityCompensationStatusRegister" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VelocityCompensationStatusRegister" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_VelocityCompensationStatusRegister" "', argument " "3"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VelocityCompensationStatusRegister" "', argument " "3"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_VelocityCompensationStatusRegister" "', argument " "4"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VelocityCompensationStatusRegister" "', argument " "4"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = (vn::sensors::VelocityCompensationStatusRegister *)new vn::sensors::VelocityCompensationStatusRegister(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__VelocityCompensationStatusRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VelocityCompensationStatusRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VelocityCompensationStatusRegister__SWIG_0(self, args);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_VelocityCompensationStatusRegister__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VelocityCompensationStatusRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VelocityCompensationStatusRegister::VelocityCompensationStatusRegister()\n"
    "    vn::sensors::VelocityCompensationStatusRegister::VelocityCompensationStatusRegister(float,float,vn::math::vec3f,vn::math::vec3f)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VelocityCompensationStatusRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VelocityCompensationStatusRegister *arg1 = (vn::sensors::VelocityCompensationStatusRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VelocityCompensationStatusRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VelocityCompensationStatusRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VelocityCompensationStatusRegister" "', argument " "1"" of type '" "vn::sensors::VelocityCompensationStatusRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VelocityCompensationStatusRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VelocityCompensationStatusRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__VelocityCompensationStatusRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ImuMeasurementsRegister_mag_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuMeasurementsRegister *arg1 = (vn::sensors::ImuMeasurementsRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImuMeasurementsRegister_mag_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuMeasurementsRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuMeasurementsRegister_mag_set" "', argument " "1"" of type '" "vn::sensors::ImuMeasurementsRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuMeasurementsRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImuMeasurementsRegister_mag_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->mag = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuMeasurementsRegister_mag_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuMeasurementsRegister *arg1 = (vn::sensors::ImuMeasurementsRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImuMeasurementsRegister_mag_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuMeasurementsRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuMeasurementsRegister_mag_get" "', argument " "1"" of type '" "vn::sensors::ImuMeasurementsRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuMeasurementsRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->mag);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuMeasurementsRegister_accel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuMeasurementsRegister *arg1 = (vn::sensors::ImuMeasurementsRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImuMeasurementsRegister_accel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuMeasurementsRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuMeasurementsRegister_accel_set" "', argument " "1"" of type '" "vn::sensors::ImuMeasurementsRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuMeasurementsRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImuMeasurementsRegister_accel_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->accel = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuMeasurementsRegister_accel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuMeasurementsRegister *arg1 = (vn::sensors::ImuMeasurementsRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImuMeasurementsRegister_accel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuMeasurementsRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuMeasurementsRegister_accel_get" "', argument " "1"" of type '" "vn::sensors::ImuMeasurementsRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuMeasurementsRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->accel);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuMeasurementsRegister_gyro_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuMeasurementsRegister *arg1 = (vn::sensors::ImuMeasurementsRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImuMeasurementsRegister_gyro_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuMeasurementsRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuMeasurementsRegister_gyro_set" "', argument " "1"" of type '" "vn::sensors::ImuMeasurementsRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuMeasurementsRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImuMeasurementsRegister_gyro_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->gyro = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuMeasurementsRegister_gyro_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuMeasurementsRegister *arg1 = (vn::sensors::ImuMeasurementsRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImuMeasurementsRegister_gyro_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuMeasurementsRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuMeasurementsRegister_gyro_get" "', argument " "1"" of type '" "vn::sensors::ImuMeasurementsRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuMeasurementsRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->gyro);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuMeasurementsRegister_temp_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuMeasurementsRegister *arg1 = (vn::sensors::ImuMeasurementsRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImuMeasurementsRegister_temp_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuMeasurementsRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuMeasurementsRegister_temp_set" "', argument " "1"" of type '" "vn::sensors::ImuMeasurementsRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuMeasurementsRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImuMeasurementsRegister_temp_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->temp = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuMeasurementsRegister_temp_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuMeasurementsRegister *arg1 = (vn::sensors::ImuMeasurementsRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImuMeasurementsRegister_temp_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuMeasurementsRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuMeasurementsRegister_temp_get" "', argument " "1"" of type '" "vn::sensors::ImuMeasurementsRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuMeasurementsRegister * >(argp1);
  result = (float) ((arg1)->temp);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuMeasurementsRegister_pressure_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuMeasurementsRegister *arg1 = (vn::sensors::ImuMeasurementsRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImuMeasurementsRegister_pressure_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuMeasurementsRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuMeasurementsRegister_pressure_set" "', argument " "1"" of type '" "vn::sensors::ImuMeasurementsRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuMeasurementsRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImuMeasurementsRegister_pressure_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->pressure = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuMeasurementsRegister_pressure_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuMeasurementsRegister *arg1 = (vn::sensors::ImuMeasurementsRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImuMeasurementsRegister_pressure_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuMeasurementsRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuMeasurementsRegister_pressure_get" "', argument " "1"" of type '" "vn::sensors::ImuMeasurementsRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuMeasurementsRegister * >(argp1);
  result = (float) ((arg1)->pressure);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ImuMeasurementsRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuMeasurementsRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ImuMeasurementsRegister")) SWIG_fail;
  result = (vn::sensors::ImuMeasurementsRegister *)new vn::sensors::ImuMeasurementsRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__ImuMeasurementsRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ImuMeasurementsRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3f arg1 ;
  vn::math::vec3f arg2 ;
  vn::math::vec3f arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  vn::sensors::ImuMeasurementsRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_ImuMeasurementsRegister",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ImuMeasurementsRegister" "', argument " "1"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ImuMeasurementsRegister" "', argument " "1"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ImuMeasurementsRegister" "', argument " "2"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ImuMeasurementsRegister" "', argument " "2"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ImuMeasurementsRegister" "', argument " "3"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ImuMeasurementsRegister" "', argument " "3"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ImuMeasurementsRegister" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ImuMeasurementsRegister" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  result = (vn::sensors::ImuMeasurementsRegister *)new vn::sensors::ImuMeasurementsRegister(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__ImuMeasurementsRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ImuMeasurementsRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ImuMeasurementsRegister__SWIG_0(self, args);
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_ImuMeasurementsRegister__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ImuMeasurementsRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::ImuMeasurementsRegister::ImuMeasurementsRegister()\n"
    "    vn::sensors::ImuMeasurementsRegister::ImuMeasurementsRegister(vn::math::vec3f,vn::math::vec3f,vn::math::vec3f,float,float)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ImuMeasurementsRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuMeasurementsRegister *arg1 = (vn::sensors::ImuMeasurementsRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ImuMeasurementsRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuMeasurementsRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ImuMeasurementsRegister" "', argument " "1"" of type '" "vn::sensors::ImuMeasurementsRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuMeasurementsRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ImuMeasurementsRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__ImuMeasurementsRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_GpsConfigurationRegister_mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsConfigurationRegister *arg1 = (vn::sensors::GpsConfigurationRegister *) 0 ;
  vn::protocol::uart::GpsMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsConfigurationRegister_mode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsConfigurationRegister_mode_set" "', argument " "1"" of type '" "vn::sensors::GpsConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GpsConfigurationRegister_mode_set" "', argument " "2"" of type '" "vn::protocol::uart::GpsMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::GpsMode >(val2);
  if (arg1) (arg1)->mode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsConfigurationRegister_mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsConfigurationRegister *arg1 = (vn::sensors::GpsConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::GpsMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsConfigurationRegister_mode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsConfigurationRegister_mode_get" "', argument " "1"" of type '" "vn::sensors::GpsConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsConfigurationRegister * >(argp1);
  result = (vn::protocol::uart::GpsMode) ((arg1)->mode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsConfigurationRegister_pps_source_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsConfigurationRegister *arg1 = (vn::sensors::GpsConfigurationRegister *) 0 ;
  vn::protocol::uart::PpsSource arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsConfigurationRegister_pps_source_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsConfigurationRegister_pps_source_set" "', argument " "1"" of type '" "vn::sensors::GpsConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GpsConfigurationRegister_pps_source_set" "', argument " "2"" of type '" "vn::protocol::uart::PpsSource""'");
  } 
  arg2 = static_cast< vn::protocol::uart::PpsSource >(val2);
  if (arg1) (arg1)->ppsSource = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsConfigurationRegister_pps_source_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsConfigurationRegister *arg1 = (vn::sensors::GpsConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::PpsSource result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsConfigurationRegister_pps_source_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsConfigurationRegister_pps_source_get" "', argument " "1"" of type '" "vn::sensors::GpsConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsConfigurationRegister * >(argp1);
  result = (vn::protocol::uart::PpsSource) ((arg1)->ppsSource);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GpsConfigurationRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsConfigurationRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GpsConfigurationRegister")) SWIG_fail;
  result = (vn::sensors::GpsConfigurationRegister *)new vn::sensors::GpsConfigurationRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__GpsConfigurationRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GpsConfigurationRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::GpsMode arg1 ;
  vn::protocol::uart::PpsSource arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::sensors::GpsConfigurationRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_GpsConfigurationRegister",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GpsConfigurationRegister" "', argument " "1"" of type '" "vn::protocol::uart::GpsMode""'");
  } 
  arg1 = static_cast< vn::protocol::uart::GpsMode >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GpsConfigurationRegister" "', argument " "2"" of type '" "vn::protocol::uart::PpsSource""'");
  } 
  arg2 = static_cast< vn::protocol::uart::PpsSource >(val2);
  result = (vn::sensors::GpsConfigurationRegister *)new vn::sensors::GpsConfigurationRegister(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__GpsConfigurationRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GpsConfigurationRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GpsConfigurationRegister__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_GpsConfigurationRegister__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_GpsConfigurationRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::GpsConfigurationRegister::GpsConfigurationRegister()\n"
    "    vn::sensors::GpsConfigurationRegister::GpsConfigurationRegister(vn::protocol::uart::GpsMode,vn::protocol::uart::PpsSource)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_GpsConfigurationRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsConfigurationRegister *arg1 = (vn::sensors::GpsConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GpsConfigurationRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsConfigurationRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GpsConfigurationRegister" "', argument " "1"" of type '" "vn::sensors::GpsConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsConfigurationRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GpsConfigurationRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__GpsConfigurationRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_GpsSolutionLlaRegister_time_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionLlaRegister *arg1 = (vn::sensors::GpsSolutionLlaRegister *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsSolutionLlaRegister_time_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionLlaRegister_time_set" "', argument " "1"" of type '" "vn::sensors::GpsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionLlaRegister * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GpsSolutionLlaRegister_time_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->time = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionLlaRegister_time_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionLlaRegister *arg1 = (vn::sensors::GpsSolutionLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsSolutionLlaRegister_time_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionLlaRegister_time_get" "', argument " "1"" of type '" "vn::sensors::GpsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionLlaRegister * >(argp1);
  result = (double) ((arg1)->time);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionLlaRegister_week_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionLlaRegister *arg1 = (vn::sensors::GpsSolutionLlaRegister *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsSolutionLlaRegister_week_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionLlaRegister_week_set" "', argument " "1"" of type '" "vn::sensors::GpsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionLlaRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GpsSolutionLlaRegister_week_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->week = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionLlaRegister_week_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionLlaRegister *arg1 = (vn::sensors::GpsSolutionLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsSolutionLlaRegister_week_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionLlaRegister_week_get" "', argument " "1"" of type '" "vn::sensors::GpsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionLlaRegister * >(argp1);
  result = (uint16_t) ((arg1)->week);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionLlaRegister_gps_fix_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionLlaRegister *arg1 = (vn::sensors::GpsSolutionLlaRegister *) 0 ;
  vn::protocol::uart::GpsFix arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsSolutionLlaRegister_gps_fix_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionLlaRegister_gps_fix_set" "', argument " "1"" of type '" "vn::sensors::GpsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionLlaRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GpsSolutionLlaRegister_gps_fix_set" "', argument " "2"" of type '" "vn::protocol::uart::GpsFix""'");
  } 
  arg2 = static_cast< vn::protocol::uart::GpsFix >(val2);
  if (arg1) (arg1)->gpsFix = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionLlaRegister_gps_fix_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionLlaRegister *arg1 = (vn::sensors::GpsSolutionLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::GpsFix result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsSolutionLlaRegister_gps_fix_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionLlaRegister_gps_fix_get" "', argument " "1"" of type '" "vn::sensors::GpsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionLlaRegister * >(argp1);
  result = (vn::protocol::uart::GpsFix) ((arg1)->gpsFix);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionLlaRegister_num_sats_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionLlaRegister *arg1 = (vn::sensors::GpsSolutionLlaRegister *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsSolutionLlaRegister_num_sats_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionLlaRegister_num_sats_set" "', argument " "1"" of type '" "vn::sensors::GpsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionLlaRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GpsSolutionLlaRegister_num_sats_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->numSats = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionLlaRegister_num_sats_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionLlaRegister *arg1 = (vn::sensors::GpsSolutionLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsSolutionLlaRegister_num_sats_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionLlaRegister_num_sats_get" "', argument " "1"" of type '" "vn::sensors::GpsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionLlaRegister * >(argp1);
  result = (uint8_t) ((arg1)->numSats);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionLlaRegister_lla_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionLlaRegister *arg1 = (vn::sensors::GpsSolutionLlaRegister *) 0 ;
  vn::math::vec3d *arg2 = (vn::math::vec3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsSolutionLlaRegister_lla_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionLlaRegister_lla_set" "', argument " "1"" of type '" "vn::sensors::GpsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionLlaRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GpsSolutionLlaRegister_lla_set" "', argument " "2"" of type '" "vn::math::vec3d *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3d * >(argp2);
  if (arg1) (arg1)->lla = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionLlaRegister_lla_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionLlaRegister *arg1 = (vn::sensors::GpsSolutionLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3d *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsSolutionLlaRegister_lla_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionLlaRegister_lla_get" "', argument " "1"" of type '" "vn::sensors::GpsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionLlaRegister * >(argp1);
  result = (vn::math::vec3d *)& ((arg1)->lla);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionLlaRegister_ned_vel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionLlaRegister *arg1 = (vn::sensors::GpsSolutionLlaRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsSolutionLlaRegister_ned_vel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionLlaRegister_ned_vel_set" "', argument " "1"" of type '" "vn::sensors::GpsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionLlaRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GpsSolutionLlaRegister_ned_vel_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->nedVel = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionLlaRegister_ned_vel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionLlaRegister *arg1 = (vn::sensors::GpsSolutionLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsSolutionLlaRegister_ned_vel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionLlaRegister_ned_vel_get" "', argument " "1"" of type '" "vn::sensors::GpsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionLlaRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->nedVel);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionLlaRegister_ned_acc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionLlaRegister *arg1 = (vn::sensors::GpsSolutionLlaRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsSolutionLlaRegister_ned_acc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionLlaRegister_ned_acc_set" "', argument " "1"" of type '" "vn::sensors::GpsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionLlaRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GpsSolutionLlaRegister_ned_acc_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->nedAcc = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionLlaRegister_ned_acc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionLlaRegister *arg1 = (vn::sensors::GpsSolutionLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsSolutionLlaRegister_ned_acc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionLlaRegister_ned_acc_get" "', argument " "1"" of type '" "vn::sensors::GpsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionLlaRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->nedAcc);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionLlaRegister_speed_acc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionLlaRegister *arg1 = (vn::sensors::GpsSolutionLlaRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsSolutionLlaRegister_speed_acc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionLlaRegister_speed_acc_set" "', argument " "1"" of type '" "vn::sensors::GpsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionLlaRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GpsSolutionLlaRegister_speed_acc_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->speedAcc = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionLlaRegister_speed_acc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionLlaRegister *arg1 = (vn::sensors::GpsSolutionLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsSolutionLlaRegister_speed_acc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionLlaRegister_speed_acc_get" "', argument " "1"" of type '" "vn::sensors::GpsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionLlaRegister * >(argp1);
  result = (float) ((arg1)->speedAcc);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionLlaRegister_time_acc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionLlaRegister *arg1 = (vn::sensors::GpsSolutionLlaRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsSolutionLlaRegister_time_acc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionLlaRegister_time_acc_set" "', argument " "1"" of type '" "vn::sensors::GpsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionLlaRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GpsSolutionLlaRegister_time_acc_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->timeAcc = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionLlaRegister_time_acc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionLlaRegister *arg1 = (vn::sensors::GpsSolutionLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsSolutionLlaRegister_time_acc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionLlaRegister_time_acc_get" "', argument " "1"" of type '" "vn::sensors::GpsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionLlaRegister * >(argp1);
  result = (float) ((arg1)->timeAcc);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GpsSolutionLlaRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionLlaRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GpsSolutionLlaRegister")) SWIG_fail;
  result = (vn::sensors::GpsSolutionLlaRegister *)new vn::sensors::GpsSolutionLlaRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GpsSolutionLlaRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  uint16_t arg2 ;
  vn::protocol::uart::GpsFix arg3 ;
  uint8_t arg4 ;
  vn::math::vec3d arg5 ;
  vn::math::vec3f arg6 ;
  vn::math::vec3f arg7 ;
  float arg8 ;
  float arg9 ;
  double val1 ;
  int ecode1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  vn::sensors::GpsSolutionLlaRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_GpsSolutionLlaRegister",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GpsSolutionLlaRegister" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GpsSolutionLlaRegister" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GpsSolutionLlaRegister" "', argument " "3"" of type '" "vn::protocol::uart::GpsFix""'");
  } 
  arg3 = static_cast< vn::protocol::uart::GpsFix >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_GpsSolutionLlaRegister" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = static_cast< uint8_t >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vn__math__vecT_3_double_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_GpsSolutionLlaRegister" "', argument " "5"" of type '" "vn::math::vec3d""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GpsSolutionLlaRegister" "', argument " "5"" of type '" "vn::math::vec3d""'");
    } else {
      vn::math::vec3d * temp = reinterpret_cast< vn::math::vec3d * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_GpsSolutionLlaRegister" "', argument " "6"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GpsSolutionLlaRegister" "', argument " "6"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_GpsSolutionLlaRegister" "', argument " "7"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GpsSolutionLlaRegister" "', argument " "7"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  ecode8 = SWIG_AsVal_float(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_GpsSolutionLlaRegister" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = static_cast< float >(val8);
  ecode9 = SWIG_AsVal_float(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_GpsSolutionLlaRegister" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = static_cast< float >(val9);
  result = (vn::sensors::GpsSolutionLlaRegister *)new vn::sensors::GpsSolutionLlaRegister(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GpsSolutionLlaRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GpsSolutionLlaRegister__SWIG_0(self, args);
  }
  if (argc == 9) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_vn__math__vecT_3_double_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_float(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_float(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_GpsSolutionLlaRegister__SWIG_1(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_GpsSolutionLlaRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::GpsSolutionLlaRegister::GpsSolutionLlaRegister()\n"
    "    vn::sensors::GpsSolutionLlaRegister::GpsSolutionLlaRegister(double,uint16_t,vn::protocol::uart::GpsFix,uint8_t,vn::math::vec3d,vn::math::vec3f,vn::math::vec3f,float,float)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_GpsSolutionLlaRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionLlaRegister *arg1 = (vn::sensors::GpsSolutionLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GpsSolutionLlaRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GpsSolutionLlaRegister" "', argument " "1"" of type '" "vn::sensors::GpsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionLlaRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GpsSolutionLlaRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_GpsSolutionEcefRegister_tow_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionEcefRegister *arg1 = (vn::sensors::GpsSolutionEcefRegister *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsSolutionEcefRegister_tow_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionEcefRegister_tow_set" "', argument " "1"" of type '" "vn::sensors::GpsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionEcefRegister * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GpsSolutionEcefRegister_tow_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->tow = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionEcefRegister_tow_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionEcefRegister *arg1 = (vn::sensors::GpsSolutionEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsSolutionEcefRegister_tow_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionEcefRegister_tow_get" "', argument " "1"" of type '" "vn::sensors::GpsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionEcefRegister * >(argp1);
  result = (double) ((arg1)->tow);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionEcefRegister_week_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionEcefRegister *arg1 = (vn::sensors::GpsSolutionEcefRegister *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsSolutionEcefRegister_week_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionEcefRegister_week_set" "', argument " "1"" of type '" "vn::sensors::GpsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionEcefRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GpsSolutionEcefRegister_week_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->week = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionEcefRegister_week_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionEcefRegister *arg1 = (vn::sensors::GpsSolutionEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsSolutionEcefRegister_week_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionEcefRegister_week_get" "', argument " "1"" of type '" "vn::sensors::GpsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionEcefRegister * >(argp1);
  result = (uint16_t) ((arg1)->week);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionEcefRegister_gps_fix_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionEcefRegister *arg1 = (vn::sensors::GpsSolutionEcefRegister *) 0 ;
  vn::protocol::uart::GpsFix arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsSolutionEcefRegister_gps_fix_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionEcefRegister_gps_fix_set" "', argument " "1"" of type '" "vn::sensors::GpsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionEcefRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GpsSolutionEcefRegister_gps_fix_set" "', argument " "2"" of type '" "vn::protocol::uart::GpsFix""'");
  } 
  arg2 = static_cast< vn::protocol::uart::GpsFix >(val2);
  if (arg1) (arg1)->gpsFix = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionEcefRegister_gps_fix_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionEcefRegister *arg1 = (vn::sensors::GpsSolutionEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::GpsFix result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsSolutionEcefRegister_gps_fix_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionEcefRegister_gps_fix_get" "', argument " "1"" of type '" "vn::sensors::GpsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionEcefRegister * >(argp1);
  result = (vn::protocol::uart::GpsFix) ((arg1)->gpsFix);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionEcefRegister_num_sats_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionEcefRegister *arg1 = (vn::sensors::GpsSolutionEcefRegister *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsSolutionEcefRegister_num_sats_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionEcefRegister_num_sats_set" "', argument " "1"" of type '" "vn::sensors::GpsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionEcefRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GpsSolutionEcefRegister_num_sats_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->numSats = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionEcefRegister_num_sats_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionEcefRegister *arg1 = (vn::sensors::GpsSolutionEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsSolutionEcefRegister_num_sats_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionEcefRegister_num_sats_get" "', argument " "1"" of type '" "vn::sensors::GpsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionEcefRegister * >(argp1);
  result = (uint8_t) ((arg1)->numSats);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionEcefRegister_position_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionEcefRegister *arg1 = (vn::sensors::GpsSolutionEcefRegister *) 0 ;
  vn::math::vec3d *arg2 = (vn::math::vec3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsSolutionEcefRegister_position_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionEcefRegister_position_set" "', argument " "1"" of type '" "vn::sensors::GpsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionEcefRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GpsSolutionEcefRegister_position_set" "', argument " "2"" of type '" "vn::math::vec3d *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3d * >(argp2);
  if (arg1) (arg1)->position = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionEcefRegister_position_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionEcefRegister *arg1 = (vn::sensors::GpsSolutionEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3d *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsSolutionEcefRegister_position_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionEcefRegister_position_get" "', argument " "1"" of type '" "vn::sensors::GpsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionEcefRegister * >(argp1);
  result = (vn::math::vec3d *)& ((arg1)->position);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionEcefRegister_velocity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionEcefRegister *arg1 = (vn::sensors::GpsSolutionEcefRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsSolutionEcefRegister_velocity_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionEcefRegister_velocity_set" "', argument " "1"" of type '" "vn::sensors::GpsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionEcefRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GpsSolutionEcefRegister_velocity_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->velocity = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionEcefRegister_velocity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionEcefRegister *arg1 = (vn::sensors::GpsSolutionEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsSolutionEcefRegister_velocity_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionEcefRegister_velocity_get" "', argument " "1"" of type '" "vn::sensors::GpsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionEcefRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->velocity);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionEcefRegister_pos_acc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionEcefRegister *arg1 = (vn::sensors::GpsSolutionEcefRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsSolutionEcefRegister_pos_acc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionEcefRegister_pos_acc_set" "', argument " "1"" of type '" "vn::sensors::GpsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionEcefRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GpsSolutionEcefRegister_pos_acc_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->posAcc = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionEcefRegister_pos_acc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionEcefRegister *arg1 = (vn::sensors::GpsSolutionEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsSolutionEcefRegister_pos_acc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionEcefRegister_pos_acc_get" "', argument " "1"" of type '" "vn::sensors::GpsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionEcefRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->posAcc);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionEcefRegister_speed_acc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionEcefRegister *arg1 = (vn::sensors::GpsSolutionEcefRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsSolutionEcefRegister_speed_acc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionEcefRegister_speed_acc_set" "', argument " "1"" of type '" "vn::sensors::GpsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionEcefRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GpsSolutionEcefRegister_speed_acc_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->speedAcc = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionEcefRegister_speed_acc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionEcefRegister *arg1 = (vn::sensors::GpsSolutionEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsSolutionEcefRegister_speed_acc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionEcefRegister_speed_acc_get" "', argument " "1"" of type '" "vn::sensors::GpsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionEcefRegister * >(argp1);
  result = (float) ((arg1)->speedAcc);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionEcefRegister_time_acc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionEcefRegister *arg1 = (vn::sensors::GpsSolutionEcefRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsSolutionEcefRegister_time_acc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionEcefRegister_time_acc_set" "', argument " "1"" of type '" "vn::sensors::GpsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionEcefRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GpsSolutionEcefRegister_time_acc_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->timeAcc = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsSolutionEcefRegister_time_acc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionEcefRegister *arg1 = (vn::sensors::GpsSolutionEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsSolutionEcefRegister_time_acc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsSolutionEcefRegister_time_acc_get" "', argument " "1"" of type '" "vn::sensors::GpsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionEcefRegister * >(argp1);
  result = (float) ((arg1)->timeAcc);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GpsSolutionEcefRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionEcefRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GpsSolutionEcefRegister")) SWIG_fail;
  result = (vn::sensors::GpsSolutionEcefRegister *)new vn::sensors::GpsSolutionEcefRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GpsSolutionEcefRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  uint16_t arg2 ;
  vn::protocol::uart::GpsFix arg3 ;
  uint8_t arg4 ;
  vn::math::vec3d arg5 ;
  vn::math::vec3f arg6 ;
  vn::math::vec3f arg7 ;
  float arg8 ;
  float arg9 ;
  double val1 ;
  int ecode1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  vn::sensors::GpsSolutionEcefRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_GpsSolutionEcefRegister",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GpsSolutionEcefRegister" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GpsSolutionEcefRegister" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GpsSolutionEcefRegister" "', argument " "3"" of type '" "vn::protocol::uart::GpsFix""'");
  } 
  arg3 = static_cast< vn::protocol::uart::GpsFix >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_GpsSolutionEcefRegister" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = static_cast< uint8_t >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vn__math__vecT_3_double_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_GpsSolutionEcefRegister" "', argument " "5"" of type '" "vn::math::vec3d""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GpsSolutionEcefRegister" "', argument " "5"" of type '" "vn::math::vec3d""'");
    } else {
      vn::math::vec3d * temp = reinterpret_cast< vn::math::vec3d * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_GpsSolutionEcefRegister" "', argument " "6"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GpsSolutionEcefRegister" "', argument " "6"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_GpsSolutionEcefRegister" "', argument " "7"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GpsSolutionEcefRegister" "', argument " "7"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  ecode8 = SWIG_AsVal_float(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_GpsSolutionEcefRegister" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = static_cast< float >(val8);
  ecode9 = SWIG_AsVal_float(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_GpsSolutionEcefRegister" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = static_cast< float >(val9);
  result = (vn::sensors::GpsSolutionEcefRegister *)new vn::sensors::GpsSolutionEcefRegister(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GpsSolutionEcefRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GpsSolutionEcefRegister__SWIG_0(self, args);
  }
  if (argc == 9) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_vn__math__vecT_3_double_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_float(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_float(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_GpsSolutionEcefRegister__SWIG_1(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_GpsSolutionEcefRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::GpsSolutionEcefRegister::GpsSolutionEcefRegister()\n"
    "    vn::sensors::GpsSolutionEcefRegister::GpsSolutionEcefRegister(double,uint16_t,vn::protocol::uart::GpsFix,uint8_t,vn::math::vec3d,vn::math::vec3f,vn::math::vec3f,float,float)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_GpsSolutionEcefRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionEcefRegister *arg1 = (vn::sensors::GpsSolutionEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GpsSolutionEcefRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GpsSolutionEcefRegister" "', argument " "1"" of type '" "vn::sensors::GpsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionEcefRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GpsSolutionEcefRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_InsSolutionLlaRegister_time_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionLlaRegister *arg1 = (vn::sensors::InsSolutionLlaRegister *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsSolutionLlaRegister_time_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionLlaRegister_time_set" "', argument " "1"" of type '" "vn::sensors::InsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionLlaRegister * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsSolutionLlaRegister_time_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->time = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionLlaRegister_time_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionLlaRegister *arg1 = (vn::sensors::InsSolutionLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsSolutionLlaRegister_time_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionLlaRegister_time_get" "', argument " "1"" of type '" "vn::sensors::InsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionLlaRegister * >(argp1);
  result = (double) ((arg1)->time);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionLlaRegister_week_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionLlaRegister *arg1 = (vn::sensors::InsSolutionLlaRegister *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsSolutionLlaRegister_week_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionLlaRegister_week_set" "', argument " "1"" of type '" "vn::sensors::InsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionLlaRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsSolutionLlaRegister_week_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->week = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionLlaRegister_week_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionLlaRegister *arg1 = (vn::sensors::InsSolutionLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsSolutionLlaRegister_week_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionLlaRegister_week_get" "', argument " "1"" of type '" "vn::sensors::InsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionLlaRegister * >(argp1);
  result = (uint16_t) ((arg1)->week);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionLlaRegister_status_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionLlaRegister *arg1 = (vn::sensors::InsSolutionLlaRegister *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsSolutionLlaRegister_status_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionLlaRegister_status_set" "', argument " "1"" of type '" "vn::sensors::InsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionLlaRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsSolutionLlaRegister_status_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->status = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionLlaRegister_status_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionLlaRegister *arg1 = (vn::sensors::InsSolutionLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsSolutionLlaRegister_status_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionLlaRegister_status_get" "', argument " "1"" of type '" "vn::sensors::InsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionLlaRegister * >(argp1);
  result = (uint16_t) ((arg1)->status);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionLlaRegister_yawPitchRoll_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionLlaRegister *arg1 = (vn::sensors::InsSolutionLlaRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsSolutionLlaRegister_yawPitchRoll_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionLlaRegister_yawPitchRoll_set" "', argument " "1"" of type '" "vn::sensors::InsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionLlaRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InsSolutionLlaRegister_yawPitchRoll_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->yawPitchRoll = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionLlaRegister_yawPitchRoll_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionLlaRegister *arg1 = (vn::sensors::InsSolutionLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsSolutionLlaRegister_yawPitchRoll_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionLlaRegister_yawPitchRoll_get" "', argument " "1"" of type '" "vn::sensors::InsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionLlaRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->yawPitchRoll);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionLlaRegister_position_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionLlaRegister *arg1 = (vn::sensors::InsSolutionLlaRegister *) 0 ;
  vn::math::vec3d *arg2 = (vn::math::vec3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsSolutionLlaRegister_position_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionLlaRegister_position_set" "', argument " "1"" of type '" "vn::sensors::InsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionLlaRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InsSolutionLlaRegister_position_set" "', argument " "2"" of type '" "vn::math::vec3d *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3d * >(argp2);
  if (arg1) (arg1)->position = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionLlaRegister_position_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionLlaRegister *arg1 = (vn::sensors::InsSolutionLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3d *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsSolutionLlaRegister_position_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionLlaRegister_position_get" "', argument " "1"" of type '" "vn::sensors::InsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionLlaRegister * >(argp1);
  result = (vn::math::vec3d *)& ((arg1)->position);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionLlaRegister_nedVel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionLlaRegister *arg1 = (vn::sensors::InsSolutionLlaRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsSolutionLlaRegister_nedVel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionLlaRegister_nedVel_set" "', argument " "1"" of type '" "vn::sensors::InsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionLlaRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InsSolutionLlaRegister_nedVel_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->nedVel = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionLlaRegister_nedVel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionLlaRegister *arg1 = (vn::sensors::InsSolutionLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsSolutionLlaRegister_nedVel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionLlaRegister_nedVel_get" "', argument " "1"" of type '" "vn::sensors::InsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionLlaRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->nedVel);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionLlaRegister_attUncertainty_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionLlaRegister *arg1 = (vn::sensors::InsSolutionLlaRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsSolutionLlaRegister_attUncertainty_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionLlaRegister_attUncertainty_set" "', argument " "1"" of type '" "vn::sensors::InsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionLlaRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsSolutionLlaRegister_attUncertainty_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->attUncertainty = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionLlaRegister_attUncertainty_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionLlaRegister *arg1 = (vn::sensors::InsSolutionLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsSolutionLlaRegister_attUncertainty_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionLlaRegister_attUncertainty_get" "', argument " "1"" of type '" "vn::sensors::InsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionLlaRegister * >(argp1);
  result = (float) ((arg1)->attUncertainty);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionLlaRegister_posUncertainty_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionLlaRegister *arg1 = (vn::sensors::InsSolutionLlaRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsSolutionLlaRegister_posUncertainty_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionLlaRegister_posUncertainty_set" "', argument " "1"" of type '" "vn::sensors::InsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionLlaRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsSolutionLlaRegister_posUncertainty_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->posUncertainty = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionLlaRegister_posUncertainty_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionLlaRegister *arg1 = (vn::sensors::InsSolutionLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsSolutionLlaRegister_posUncertainty_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionLlaRegister_posUncertainty_get" "', argument " "1"" of type '" "vn::sensors::InsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionLlaRegister * >(argp1);
  result = (float) ((arg1)->posUncertainty);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionLlaRegister_velUncertainty_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionLlaRegister *arg1 = (vn::sensors::InsSolutionLlaRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsSolutionLlaRegister_velUncertainty_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionLlaRegister_velUncertainty_set" "', argument " "1"" of type '" "vn::sensors::InsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionLlaRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsSolutionLlaRegister_velUncertainty_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->velUncertainty = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionLlaRegister_velUncertainty_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionLlaRegister *arg1 = (vn::sensors::InsSolutionLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsSolutionLlaRegister_velUncertainty_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionLlaRegister_velUncertainty_get" "', argument " "1"" of type '" "vn::sensors::InsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionLlaRegister * >(argp1);
  result = (float) ((arg1)->velUncertainty);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InsSolutionLlaRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionLlaRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_InsSolutionLlaRegister")) SWIG_fail;
  result = (vn::sensors::InsSolutionLlaRegister *)new vn::sensors::InsSolutionLlaRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InsSolutionLlaRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  vn::math::vec3f arg4 ;
  vn::math::vec3d arg5 ;
  vn::math::vec3f arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  double val1 ;
  int ecode1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  vn::sensors::InsSolutionLlaRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_InsSolutionLlaRegister",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InsSolutionLlaRegister" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_InsSolutionLlaRegister" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_InsSolutionLlaRegister" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_InsSolutionLlaRegister" "', argument " "4"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InsSolutionLlaRegister" "', argument " "4"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vn__math__vecT_3_double_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_InsSolutionLlaRegister" "', argument " "5"" of type '" "vn::math::vec3d""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InsSolutionLlaRegister" "', argument " "5"" of type '" "vn::math::vec3d""'");
    } else {
      vn::math::vec3d * temp = reinterpret_cast< vn::math::vec3d * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_InsSolutionLlaRegister" "', argument " "6"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InsSolutionLlaRegister" "', argument " "6"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  ecode7 = SWIG_AsVal_float(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_InsSolutionLlaRegister" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  ecode8 = SWIG_AsVal_float(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_InsSolutionLlaRegister" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = static_cast< float >(val8);
  ecode9 = SWIG_AsVal_float(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_InsSolutionLlaRegister" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = static_cast< float >(val9);
  result = (vn::sensors::InsSolutionLlaRegister *)new vn::sensors::InsSolutionLlaRegister(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InsSolutionLlaRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_InsSolutionLlaRegister__SWIG_0(self, args);
  }
  if (argc == 9) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_vn__math__vecT_3_double_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_float(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_float(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_float(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_InsSolutionLlaRegister__SWIG_1(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_InsSolutionLlaRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::InsSolutionLlaRegister::InsSolutionLlaRegister()\n"
    "    vn::sensors::InsSolutionLlaRegister::InsSolutionLlaRegister(double,uint16_t,uint16_t,vn::math::vec3f,vn::math::vec3d,vn::math::vec3f,float,float,float)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_InsSolutionLlaRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionLlaRegister *arg1 = (vn::sensors::InsSolutionLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InsSolutionLlaRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InsSolutionLlaRegister" "', argument " "1"" of type '" "vn::sensors::InsSolutionLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionLlaRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InsSolutionLlaRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_InsSolutionEcefRegister_time_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionEcefRegister *arg1 = (vn::sensors::InsSolutionEcefRegister *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsSolutionEcefRegister_time_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionEcefRegister_time_set" "', argument " "1"" of type '" "vn::sensors::InsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionEcefRegister * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsSolutionEcefRegister_time_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->time = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionEcefRegister_time_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionEcefRegister *arg1 = (vn::sensors::InsSolutionEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsSolutionEcefRegister_time_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionEcefRegister_time_get" "', argument " "1"" of type '" "vn::sensors::InsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionEcefRegister * >(argp1);
  result = (double) ((arg1)->time);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionEcefRegister_week_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionEcefRegister *arg1 = (vn::sensors::InsSolutionEcefRegister *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsSolutionEcefRegister_week_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionEcefRegister_week_set" "', argument " "1"" of type '" "vn::sensors::InsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionEcefRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsSolutionEcefRegister_week_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->week = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionEcefRegister_week_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionEcefRegister *arg1 = (vn::sensors::InsSolutionEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsSolutionEcefRegister_week_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionEcefRegister_week_get" "', argument " "1"" of type '" "vn::sensors::InsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionEcefRegister * >(argp1);
  result = (uint16_t) ((arg1)->week);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionEcefRegister_status_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionEcefRegister *arg1 = (vn::sensors::InsSolutionEcefRegister *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsSolutionEcefRegister_status_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionEcefRegister_status_set" "', argument " "1"" of type '" "vn::sensors::InsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionEcefRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsSolutionEcefRegister_status_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->status = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionEcefRegister_status_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionEcefRegister *arg1 = (vn::sensors::InsSolutionEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsSolutionEcefRegister_status_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionEcefRegister_status_get" "', argument " "1"" of type '" "vn::sensors::InsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionEcefRegister * >(argp1);
  result = (uint16_t) ((arg1)->status);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionEcefRegister_yawPitchRoll_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionEcefRegister *arg1 = (vn::sensors::InsSolutionEcefRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsSolutionEcefRegister_yawPitchRoll_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionEcefRegister_yawPitchRoll_set" "', argument " "1"" of type '" "vn::sensors::InsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionEcefRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InsSolutionEcefRegister_yawPitchRoll_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->yawPitchRoll = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionEcefRegister_yawPitchRoll_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionEcefRegister *arg1 = (vn::sensors::InsSolutionEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsSolutionEcefRegister_yawPitchRoll_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionEcefRegister_yawPitchRoll_get" "', argument " "1"" of type '" "vn::sensors::InsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionEcefRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->yawPitchRoll);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionEcefRegister_position_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionEcefRegister *arg1 = (vn::sensors::InsSolutionEcefRegister *) 0 ;
  vn::math::vec3d *arg2 = (vn::math::vec3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsSolutionEcefRegister_position_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionEcefRegister_position_set" "', argument " "1"" of type '" "vn::sensors::InsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionEcefRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InsSolutionEcefRegister_position_set" "', argument " "2"" of type '" "vn::math::vec3d *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3d * >(argp2);
  if (arg1) (arg1)->position = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionEcefRegister_position_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionEcefRegister *arg1 = (vn::sensors::InsSolutionEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3d *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsSolutionEcefRegister_position_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionEcefRegister_position_get" "', argument " "1"" of type '" "vn::sensors::InsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionEcefRegister * >(argp1);
  result = (vn::math::vec3d *)& ((arg1)->position);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionEcefRegister_velocity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionEcefRegister *arg1 = (vn::sensors::InsSolutionEcefRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsSolutionEcefRegister_velocity_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionEcefRegister_velocity_set" "', argument " "1"" of type '" "vn::sensors::InsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionEcefRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InsSolutionEcefRegister_velocity_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->velocity = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionEcefRegister_velocity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionEcefRegister *arg1 = (vn::sensors::InsSolutionEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsSolutionEcefRegister_velocity_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionEcefRegister_velocity_get" "', argument " "1"" of type '" "vn::sensors::InsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionEcefRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->velocity);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionEcefRegister_attUncertainty_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionEcefRegister *arg1 = (vn::sensors::InsSolutionEcefRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsSolutionEcefRegister_attUncertainty_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionEcefRegister_attUncertainty_set" "', argument " "1"" of type '" "vn::sensors::InsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionEcefRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsSolutionEcefRegister_attUncertainty_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->attUncertainty = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionEcefRegister_attUncertainty_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionEcefRegister *arg1 = (vn::sensors::InsSolutionEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsSolutionEcefRegister_attUncertainty_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionEcefRegister_attUncertainty_get" "', argument " "1"" of type '" "vn::sensors::InsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionEcefRegister * >(argp1);
  result = (float) ((arg1)->attUncertainty);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionEcefRegister_posUncertainty_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionEcefRegister *arg1 = (vn::sensors::InsSolutionEcefRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsSolutionEcefRegister_posUncertainty_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionEcefRegister_posUncertainty_set" "', argument " "1"" of type '" "vn::sensors::InsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionEcefRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsSolutionEcefRegister_posUncertainty_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->posUncertainty = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionEcefRegister_posUncertainty_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionEcefRegister *arg1 = (vn::sensors::InsSolutionEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsSolutionEcefRegister_posUncertainty_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionEcefRegister_posUncertainty_get" "', argument " "1"" of type '" "vn::sensors::InsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionEcefRegister * >(argp1);
  result = (float) ((arg1)->posUncertainty);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionEcefRegister_velUncertainty_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionEcefRegister *arg1 = (vn::sensors::InsSolutionEcefRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsSolutionEcefRegister_velUncertainty_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionEcefRegister_velUncertainty_set" "', argument " "1"" of type '" "vn::sensors::InsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionEcefRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsSolutionEcefRegister_velUncertainty_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->velUncertainty = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsSolutionEcefRegister_velUncertainty_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionEcefRegister *arg1 = (vn::sensors::InsSolutionEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsSolutionEcefRegister_velUncertainty_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsSolutionEcefRegister_velUncertainty_get" "', argument " "1"" of type '" "vn::sensors::InsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionEcefRegister * >(argp1);
  result = (float) ((arg1)->velUncertainty);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InsSolutionEcefRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionEcefRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_InsSolutionEcefRegister")) SWIG_fail;
  result = (vn::sensors::InsSolutionEcefRegister *)new vn::sensors::InsSolutionEcefRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InsSolutionEcefRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  vn::math::vec3f arg4 ;
  vn::math::vec3d arg5 ;
  vn::math::vec3f arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  double val1 ;
  int ecode1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  vn::sensors::InsSolutionEcefRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_InsSolutionEcefRegister",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InsSolutionEcefRegister" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_InsSolutionEcefRegister" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_InsSolutionEcefRegister" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_InsSolutionEcefRegister" "', argument " "4"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InsSolutionEcefRegister" "', argument " "4"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vn__math__vecT_3_double_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_InsSolutionEcefRegister" "', argument " "5"" of type '" "vn::math::vec3d""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InsSolutionEcefRegister" "', argument " "5"" of type '" "vn::math::vec3d""'");
    } else {
      vn::math::vec3d * temp = reinterpret_cast< vn::math::vec3d * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_InsSolutionEcefRegister" "', argument " "6"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InsSolutionEcefRegister" "', argument " "6"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  ecode7 = SWIG_AsVal_float(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_InsSolutionEcefRegister" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  ecode8 = SWIG_AsVal_float(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_InsSolutionEcefRegister" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = static_cast< float >(val8);
  ecode9 = SWIG_AsVal_float(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_InsSolutionEcefRegister" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = static_cast< float >(val9);
  result = (vn::sensors::InsSolutionEcefRegister *)new vn::sensors::InsSolutionEcefRegister(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InsSolutionEcefRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_InsSolutionEcefRegister__SWIG_0(self, args);
  }
  if (argc == 9) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_vn__math__vecT_3_double_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_float(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_float(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_float(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_InsSolutionEcefRegister__SWIG_1(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_InsSolutionEcefRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::InsSolutionEcefRegister::InsSolutionEcefRegister()\n"
    "    vn::sensors::InsSolutionEcefRegister::InsSolutionEcefRegister(double,uint16_t,uint16_t,vn::math::vec3f,vn::math::vec3d,vn::math::vec3f,float,float,float)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_InsSolutionEcefRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionEcefRegister *arg1 = (vn::sensors::InsSolutionEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InsSolutionEcefRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InsSolutionEcefRegister" "', argument " "1"" of type '" "vn::sensors::InsSolutionEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionEcefRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InsSolutionEcefRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_InsBasicConfigurationRegisterVn200_scenario_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsBasicConfigurationRegisterVn200 *arg1 = (vn::sensors::InsBasicConfigurationRegisterVn200 *) 0 ;
  vn::protocol::uart::Scenario arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsBasicConfigurationRegisterVn200_scenario_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn200, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsBasicConfigurationRegisterVn200_scenario_set" "', argument " "1"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn200 *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsBasicConfigurationRegisterVn200 * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsBasicConfigurationRegisterVn200_scenario_set" "', argument " "2"" of type '" "vn::protocol::uart::Scenario""'");
  } 
  arg2 = static_cast< vn::protocol::uart::Scenario >(val2);
  if (arg1) (arg1)->scenario = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsBasicConfigurationRegisterVn200_scenario_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsBasicConfigurationRegisterVn200 *arg1 = (vn::sensors::InsBasicConfigurationRegisterVn200 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::Scenario result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsBasicConfigurationRegisterVn200_scenario_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn200, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsBasicConfigurationRegisterVn200_scenario_get" "', argument " "1"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn200 *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsBasicConfigurationRegisterVn200 * >(argp1);
  result = (vn::protocol::uart::Scenario) ((arg1)->scenario);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsBasicConfigurationRegisterVn200_ahrs_aiding_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsBasicConfigurationRegisterVn200 *arg1 = (vn::sensors::InsBasicConfigurationRegisterVn200 *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsBasicConfigurationRegisterVn200_ahrs_aiding_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn200, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsBasicConfigurationRegisterVn200_ahrs_aiding_set" "', argument " "1"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn200 *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsBasicConfigurationRegisterVn200 * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsBasicConfigurationRegisterVn200_ahrs_aiding_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->ahrsAiding = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsBasicConfigurationRegisterVn200_ahrs_aiding_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsBasicConfigurationRegisterVn200 *arg1 = (vn::sensors::InsBasicConfigurationRegisterVn200 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsBasicConfigurationRegisterVn200_ahrs_aiding_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn200, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsBasicConfigurationRegisterVn200_ahrs_aiding_get" "', argument " "1"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn200 *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsBasicConfigurationRegisterVn200 * >(argp1);
  result = (bool) ((arg1)->ahrsAiding);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InsBasicConfigurationRegisterVn200__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsBasicConfigurationRegisterVn200 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_InsBasicConfigurationRegisterVn200")) SWIG_fail;
  result = (vn::sensors::InsBasicConfigurationRegisterVn200 *)new vn::sensors::InsBasicConfigurationRegisterVn200();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn200, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InsBasicConfigurationRegisterVn200__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Scenario arg1 ;
  bool arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::sensors::InsBasicConfigurationRegisterVn200 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_InsBasicConfigurationRegisterVn200",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InsBasicConfigurationRegisterVn200" "', argument " "1"" of type '" "vn::protocol::uart::Scenario""'");
  } 
  arg1 = static_cast< vn::protocol::uart::Scenario >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_InsBasicConfigurationRegisterVn200" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (vn::sensors::InsBasicConfigurationRegisterVn200 *)new vn::sensors::InsBasicConfigurationRegisterVn200(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn200, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InsBasicConfigurationRegisterVn200(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_InsBasicConfigurationRegisterVn200__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_InsBasicConfigurationRegisterVn200__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_InsBasicConfigurationRegisterVn200'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::InsBasicConfigurationRegisterVn200::InsBasicConfigurationRegisterVn200()\n"
    "    vn::sensors::InsBasicConfigurationRegisterVn200::InsBasicConfigurationRegisterVn200(vn::protocol::uart::Scenario,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_InsBasicConfigurationRegisterVn200(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsBasicConfigurationRegisterVn200 *arg1 = (vn::sensors::InsBasicConfigurationRegisterVn200 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InsBasicConfigurationRegisterVn200",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn200, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InsBasicConfigurationRegisterVn200" "', argument " "1"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn200 *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsBasicConfigurationRegisterVn200 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InsBasicConfigurationRegisterVn200_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn200, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_InsBasicConfigurationRegisterVn300_scenario_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsBasicConfigurationRegisterVn300 *arg1 = (vn::sensors::InsBasicConfigurationRegisterVn300 *) 0 ;
  vn::protocol::uart::Scenario arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsBasicConfigurationRegisterVn300_scenario_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn300, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsBasicConfigurationRegisterVn300_scenario_set" "', argument " "1"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn300 *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsBasicConfigurationRegisterVn300 * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsBasicConfigurationRegisterVn300_scenario_set" "', argument " "2"" of type '" "vn::protocol::uart::Scenario""'");
  } 
  arg2 = static_cast< vn::protocol::uart::Scenario >(val2);
  if (arg1) (arg1)->scenario = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsBasicConfigurationRegisterVn300_scenario_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsBasicConfigurationRegisterVn300 *arg1 = (vn::sensors::InsBasicConfigurationRegisterVn300 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::Scenario result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsBasicConfigurationRegisterVn300_scenario_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn300, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsBasicConfigurationRegisterVn300_scenario_get" "', argument " "1"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn300 *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsBasicConfigurationRegisterVn300 * >(argp1);
  result = (vn::protocol::uart::Scenario) ((arg1)->scenario);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsBasicConfigurationRegisterVn300_ahrs_aiding_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsBasicConfigurationRegisterVn300 *arg1 = (vn::sensors::InsBasicConfigurationRegisterVn300 *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsBasicConfigurationRegisterVn300_ahrs_aiding_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn300, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsBasicConfigurationRegisterVn300_ahrs_aiding_set" "', argument " "1"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn300 *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsBasicConfigurationRegisterVn300 * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsBasicConfigurationRegisterVn300_ahrs_aiding_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->ahrsAiding = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsBasicConfigurationRegisterVn300_ahrs_aiding_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsBasicConfigurationRegisterVn300 *arg1 = (vn::sensors::InsBasicConfigurationRegisterVn300 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsBasicConfigurationRegisterVn300_ahrs_aiding_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn300, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsBasicConfigurationRegisterVn300_ahrs_aiding_get" "', argument " "1"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn300 *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsBasicConfigurationRegisterVn300 * >(argp1);
  result = (bool) ((arg1)->ahrsAiding);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsBasicConfigurationRegisterVn300_est_baseline_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsBasicConfigurationRegisterVn300 *arg1 = (vn::sensors::InsBasicConfigurationRegisterVn300 *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsBasicConfigurationRegisterVn300_est_baseline_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn300, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsBasicConfigurationRegisterVn300_est_baseline_set" "', argument " "1"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn300 *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsBasicConfigurationRegisterVn300 * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsBasicConfigurationRegisterVn300_est_baseline_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->estBaseline = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsBasicConfigurationRegisterVn300_est_baseline_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsBasicConfigurationRegisterVn300 *arg1 = (vn::sensors::InsBasicConfigurationRegisterVn300 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsBasicConfigurationRegisterVn300_est_baseline_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn300, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsBasicConfigurationRegisterVn300_est_baseline_get" "', argument " "1"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn300 *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsBasicConfigurationRegisterVn300 * >(argp1);
  result = (bool) ((arg1)->estBaseline);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InsBasicConfigurationRegisterVn300__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsBasicConfigurationRegisterVn300 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_InsBasicConfigurationRegisterVn300")) SWIG_fail;
  result = (vn::sensors::InsBasicConfigurationRegisterVn300 *)new vn::sensors::InsBasicConfigurationRegisterVn300();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn300, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InsBasicConfigurationRegisterVn300__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Scenario arg1 ;
  bool arg2 ;
  bool arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vn::sensors::InsBasicConfigurationRegisterVn300 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_InsBasicConfigurationRegisterVn300",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InsBasicConfigurationRegisterVn300" "', argument " "1"" of type '" "vn::protocol::uart::Scenario""'");
  } 
  arg1 = static_cast< vn::protocol::uart::Scenario >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_InsBasicConfigurationRegisterVn300" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_InsBasicConfigurationRegisterVn300" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (vn::sensors::InsBasicConfigurationRegisterVn300 *)new vn::sensors::InsBasicConfigurationRegisterVn300(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn300, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InsBasicConfigurationRegisterVn300(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_InsBasicConfigurationRegisterVn300__SWIG_0(self, args);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_InsBasicConfigurationRegisterVn300__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_InsBasicConfigurationRegisterVn300'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::InsBasicConfigurationRegisterVn300::InsBasicConfigurationRegisterVn300()\n"
    "    vn::sensors::InsBasicConfigurationRegisterVn300::InsBasicConfigurationRegisterVn300(vn::protocol::uart::Scenario,bool,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_InsBasicConfigurationRegisterVn300(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsBasicConfigurationRegisterVn300 *arg1 = (vn::sensors::InsBasicConfigurationRegisterVn300 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InsBasicConfigurationRegisterVn300",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn300, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InsBasicConfigurationRegisterVn300" "', argument " "1"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn300 *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsBasicConfigurationRegisterVn300 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InsBasicConfigurationRegisterVn300_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn300, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_use_mag_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsAdvancedConfigurationRegister_use_mag_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_use_mag_set" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsAdvancedConfigurationRegister_use_mag_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->useMag = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_use_mag_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsAdvancedConfigurationRegister_use_mag_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_use_mag_get" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  result = (bool) ((arg1)->useMag);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_use_pres_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsAdvancedConfigurationRegister_use_pres_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_use_pres_set" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsAdvancedConfigurationRegister_use_pres_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->usePres = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_use_pres_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsAdvancedConfigurationRegister_use_pres_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_use_pres_get" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  result = (bool) ((arg1)->usePres);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_pos_att_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsAdvancedConfigurationRegister_pos_att_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_pos_att_set" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsAdvancedConfigurationRegister_pos_att_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->posAtt = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_pos_att_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsAdvancedConfigurationRegister_pos_att_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_pos_att_get" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  result = (bool) ((arg1)->posAtt);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_vel_att_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsAdvancedConfigurationRegister_vel_att_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_vel_att_set" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsAdvancedConfigurationRegister_vel_att_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->velAtt = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_vel_att_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsAdvancedConfigurationRegister_vel_att_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_vel_att_get" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  result = (bool) ((arg1)->velAtt);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_vel_bias_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsAdvancedConfigurationRegister_vel_bias_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_vel_bias_set" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsAdvancedConfigurationRegister_vel_bias_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->velBias = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_vel_bias_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsAdvancedConfigurationRegister_vel_bias_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_vel_bias_get" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  result = (bool) ((arg1)->velBias);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_use_foam_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  vn::protocol::uart::FoamInit arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsAdvancedConfigurationRegister_use_foam_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_use_foam_set" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsAdvancedConfigurationRegister_use_foam_set" "', argument " "2"" of type '" "vn::protocol::uart::FoamInit""'");
  } 
  arg2 = static_cast< vn::protocol::uart::FoamInit >(val2);
  if (arg1) (arg1)->useFoam = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_use_foam_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::FoamInit result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsAdvancedConfigurationRegister_use_foam_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_use_foam_get" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  result = (vn::protocol::uart::FoamInit) ((arg1)->useFoam);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_gps_conv_type_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsAdvancedConfigurationRegister_gps_conv_type_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_gps_conv_type_set" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsAdvancedConfigurationRegister_gps_conv_type_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->gpsCovType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_gps_conv_type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsAdvancedConfigurationRegister_gps_conv_type_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_gps_conv_type_get" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  result = (uint8_t) ((arg1)->gpsCovType);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_vel_count_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsAdvancedConfigurationRegister_vel_count_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_vel_count_set" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsAdvancedConfigurationRegister_vel_count_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->velCount = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_vel_count_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsAdvancedConfigurationRegister_vel_count_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_vel_count_get" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  result = (uint8_t) ((arg1)->velCount);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_vel_init_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsAdvancedConfigurationRegister_vel_init_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_vel_init_set" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsAdvancedConfigurationRegister_vel_init_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->velInit = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_vel_init_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsAdvancedConfigurationRegister_vel_init_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_vel_init_get" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  result = (float) ((arg1)->velInit);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_move_origin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsAdvancedConfigurationRegister_move_origin_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_move_origin_set" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsAdvancedConfigurationRegister_move_origin_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->moveOrigin = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_move_origin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsAdvancedConfigurationRegister_move_origin_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_move_origin_get" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  result = (float) ((arg1)->moveOrigin);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_gps_timeout_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsAdvancedConfigurationRegister_gps_timeout_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_gps_timeout_set" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsAdvancedConfigurationRegister_gps_timeout_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->gpsTimeout = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_gps_timeout_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsAdvancedConfigurationRegister_gps_timeout_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_gps_timeout_get" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  result = (float) ((arg1)->gpsTimeout);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_delta_limit_pos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsAdvancedConfigurationRegister_delta_limit_pos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_delta_limit_pos_set" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsAdvancedConfigurationRegister_delta_limit_pos_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->deltaLimitPos = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_delta_limit_pos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsAdvancedConfigurationRegister_delta_limit_pos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_delta_limit_pos_get" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  result = (float) ((arg1)->deltaLimitPos);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_delta_limit_vel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsAdvancedConfigurationRegister_delta_limit_vel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_delta_limit_vel_set" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsAdvancedConfigurationRegister_delta_limit_vel_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->deltaLimitVel = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_delta_limit_vel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsAdvancedConfigurationRegister_delta_limit_vel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_delta_limit_vel_get" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  result = (float) ((arg1)->deltaLimitVel);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_min_pos_uncertainty_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsAdvancedConfigurationRegister_min_pos_uncertainty_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_min_pos_uncertainty_set" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsAdvancedConfigurationRegister_min_pos_uncertainty_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->minPosUncertainty = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_min_pos_uncertainty_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsAdvancedConfigurationRegister_min_pos_uncertainty_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_min_pos_uncertainty_get" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  result = (float) ((arg1)->minPosUncertainty);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_min_vel_uncertainty_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsAdvancedConfigurationRegister_min_vel_uncertainty_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_min_vel_uncertainty_set" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InsAdvancedConfigurationRegister_min_vel_uncertainty_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->minVelUncertainty = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsAdvancedConfigurationRegister_min_vel_uncertainty_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsAdvancedConfigurationRegister_min_vel_uncertainty_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsAdvancedConfigurationRegister_min_vel_uncertainty_get" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  result = (float) ((arg1)->minVelUncertainty);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InsAdvancedConfigurationRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_InsAdvancedConfigurationRegister")) SWIG_fail;
  result = (vn::sensors::InsAdvancedConfigurationRegister *)new vn::sensors::InsAdvancedConfigurationRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InsAdvancedConfigurationRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  vn::protocol::uart::FoamInit arg6 ;
  uint8_t arg7 ;
  uint8_t arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  unsigned char val7 ;
  int ecode7 = 0 ;
  unsigned char val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  float val11 ;
  int ecode11 = 0 ;
  float val12 ;
  int ecode12 = 0 ;
  float val13 ;
  int ecode13 = 0 ;
  float val14 ;
  int ecode14 = 0 ;
  float val15 ;
  int ecode15 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  PyObject * obj14 = 0 ;
  vn::sensors::InsAdvancedConfigurationRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOO:new_InsAdvancedConfigurationRegister",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InsAdvancedConfigurationRegister" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_InsAdvancedConfigurationRegister" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_InsAdvancedConfigurationRegister" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_InsAdvancedConfigurationRegister" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_InsAdvancedConfigurationRegister" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_InsAdvancedConfigurationRegister" "', argument " "6"" of type '" "vn::protocol::uart::FoamInit""'");
  } 
  arg6 = static_cast< vn::protocol::uart::FoamInit >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_InsAdvancedConfigurationRegister" "', argument " "7"" of type '" "uint8_t""'");
  } 
  arg7 = static_cast< uint8_t >(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_char(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_InsAdvancedConfigurationRegister" "', argument " "8"" of type '" "uint8_t""'");
  } 
  arg8 = static_cast< uint8_t >(val8);
  ecode9 = SWIG_AsVal_float(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_InsAdvancedConfigurationRegister" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = static_cast< float >(val9);
  ecode10 = SWIG_AsVal_float(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_InsAdvancedConfigurationRegister" "', argument " "10"" of type '" "float""'");
  } 
  arg10 = static_cast< float >(val10);
  ecode11 = SWIG_AsVal_float(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "new_InsAdvancedConfigurationRegister" "', argument " "11"" of type '" "float""'");
  } 
  arg11 = static_cast< float >(val11);
  ecode12 = SWIG_AsVal_float(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "new_InsAdvancedConfigurationRegister" "', argument " "12"" of type '" "float""'");
  } 
  arg12 = static_cast< float >(val12);
  ecode13 = SWIG_AsVal_float(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "new_InsAdvancedConfigurationRegister" "', argument " "13"" of type '" "float""'");
  } 
  arg13 = static_cast< float >(val13);
  ecode14 = SWIG_AsVal_float(obj13, &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "new_InsAdvancedConfigurationRegister" "', argument " "14"" of type '" "float""'");
  } 
  arg14 = static_cast< float >(val14);
  ecode15 = SWIG_AsVal_float(obj14, &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "new_InsAdvancedConfigurationRegister" "', argument " "15"" of type '" "float""'");
  } 
  arg15 = static_cast< float >(val15);
  result = (vn::sensors::InsAdvancedConfigurationRegister *)new vn::sensors::InsAdvancedConfigurationRegister(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InsAdvancedConfigurationRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[16] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 15) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_InsAdvancedConfigurationRegister__SWIG_0(self, args);
  }
  if (argc == 15) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_unsigned_SS_char(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_unsigned_SS_char(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_float(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_float(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_float(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_float(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            {
                              int res = SWIG_AsVal_float(argv[12], NULL);
                              _v = SWIG_CheckState(res);
                            }
                            if (_v) {
                              {
                                int res = SWIG_AsVal_float(argv[13], NULL);
                                _v = SWIG_CheckState(res);
                              }
                              if (_v) {
                                {
                                  int res = SWIG_AsVal_float(argv[14], NULL);
                                  _v = SWIG_CheckState(res);
                                }
                                if (_v) {
                                  return _wrap_new_InsAdvancedConfigurationRegister__SWIG_1(self, args);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_InsAdvancedConfigurationRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::InsAdvancedConfigurationRegister::InsAdvancedConfigurationRegister()\n"
    "    vn::sensors::InsAdvancedConfigurationRegister::InsAdvancedConfigurationRegister(bool,bool,bool,bool,bool,vn::protocol::uart::FoamInit,uint8_t,uint8_t,float,float,float,float,float,float,float)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_InsAdvancedConfigurationRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = (vn::sensors::InsAdvancedConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InsAdvancedConfigurationRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InsAdvancedConfigurationRegister" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InsAdvancedConfigurationRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_InsStateLlaRegister_yaw_pitch_roll_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateLlaRegister *arg1 = (vn::sensors::InsStateLlaRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsStateLlaRegister_yaw_pitch_roll_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsStateLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsStateLlaRegister_yaw_pitch_roll_set" "', argument " "1"" of type '" "vn::sensors::InsStateLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsStateLlaRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InsStateLlaRegister_yaw_pitch_roll_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->yawPitchRoll = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsStateLlaRegister_yaw_pitch_roll_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateLlaRegister *arg1 = (vn::sensors::InsStateLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsStateLlaRegister_yaw_pitch_roll_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsStateLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsStateLlaRegister_yaw_pitch_roll_get" "', argument " "1"" of type '" "vn::sensors::InsStateLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsStateLlaRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->yawPitchRoll);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsStateLlaRegister_position_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateLlaRegister *arg1 = (vn::sensors::InsStateLlaRegister *) 0 ;
  vn::math::vec3d *arg2 = (vn::math::vec3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsStateLlaRegister_position_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsStateLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsStateLlaRegister_position_set" "', argument " "1"" of type '" "vn::sensors::InsStateLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsStateLlaRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InsStateLlaRegister_position_set" "', argument " "2"" of type '" "vn::math::vec3d *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3d * >(argp2);
  if (arg1) (arg1)->position = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsStateLlaRegister_position_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateLlaRegister *arg1 = (vn::sensors::InsStateLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3d *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsStateLlaRegister_position_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsStateLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsStateLlaRegister_position_get" "', argument " "1"" of type '" "vn::sensors::InsStateLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsStateLlaRegister * >(argp1);
  result = (vn::math::vec3d *)& ((arg1)->position);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsStateLlaRegister_velocity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateLlaRegister *arg1 = (vn::sensors::InsStateLlaRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsStateLlaRegister_velocity_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsStateLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsStateLlaRegister_velocity_set" "', argument " "1"" of type '" "vn::sensors::InsStateLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsStateLlaRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InsStateLlaRegister_velocity_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->velocity = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsStateLlaRegister_velocity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateLlaRegister *arg1 = (vn::sensors::InsStateLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsStateLlaRegister_velocity_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsStateLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsStateLlaRegister_velocity_get" "', argument " "1"" of type '" "vn::sensors::InsStateLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsStateLlaRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->velocity);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsStateLlaRegister_accel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateLlaRegister *arg1 = (vn::sensors::InsStateLlaRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsStateLlaRegister_accel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsStateLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsStateLlaRegister_accel_set" "', argument " "1"" of type '" "vn::sensors::InsStateLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsStateLlaRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InsStateLlaRegister_accel_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->accel = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsStateLlaRegister_accel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateLlaRegister *arg1 = (vn::sensors::InsStateLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsStateLlaRegister_accel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsStateLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsStateLlaRegister_accel_get" "', argument " "1"" of type '" "vn::sensors::InsStateLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsStateLlaRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->accel);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsStateLlaRegister_angular_rate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateLlaRegister *arg1 = (vn::sensors::InsStateLlaRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsStateLlaRegister_angular_rate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsStateLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsStateLlaRegister_angular_rate_set" "', argument " "1"" of type '" "vn::sensors::InsStateLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsStateLlaRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InsStateLlaRegister_angular_rate_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->angularRate = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsStateLlaRegister_angular_rate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateLlaRegister *arg1 = (vn::sensors::InsStateLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsStateLlaRegister_angular_rate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsStateLlaRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsStateLlaRegister_angular_rate_get" "', argument " "1"" of type '" "vn::sensors::InsStateLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsStateLlaRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->angularRate);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InsStateLlaRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateLlaRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_InsStateLlaRegister")) SWIG_fail;
  result = (vn::sensors::InsStateLlaRegister *)new vn::sensors::InsStateLlaRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__InsStateLlaRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InsStateLlaRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3f arg1 ;
  vn::math::vec3d arg2 ;
  vn::math::vec3f arg3 ;
  vn::math::vec3f arg4 ;
  vn::math::vec3f arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  vn::sensors::InsStateLlaRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_InsStateLlaRegister",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InsStateLlaRegister" "', argument " "1"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InsStateLlaRegister" "', argument " "1"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_double_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_InsStateLlaRegister" "', argument " "2"" of type '" "vn::math::vec3d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InsStateLlaRegister" "', argument " "2"" of type '" "vn::math::vec3d""'");
    } else {
      vn::math::vec3d * temp = reinterpret_cast< vn::math::vec3d * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_InsStateLlaRegister" "', argument " "3"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InsStateLlaRegister" "', argument " "3"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_InsStateLlaRegister" "', argument " "4"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InsStateLlaRegister" "', argument " "4"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_InsStateLlaRegister" "', argument " "5"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InsStateLlaRegister" "', argument " "5"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = (vn::sensors::InsStateLlaRegister *)new vn::sensors::InsStateLlaRegister(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__InsStateLlaRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InsStateLlaRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_InsStateLlaRegister__SWIG_0(self, args);
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_InsStateLlaRegister__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_InsStateLlaRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::InsStateLlaRegister::InsStateLlaRegister()\n"
    "    vn::sensors::InsStateLlaRegister::InsStateLlaRegister(vn::math::vec3f,vn::math::vec3d,vn::math::vec3f,vn::math::vec3f,vn::math::vec3f)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_InsStateLlaRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateLlaRegister *arg1 = (vn::sensors::InsStateLlaRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InsStateLlaRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsStateLlaRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InsStateLlaRegister" "', argument " "1"" of type '" "vn::sensors::InsStateLlaRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsStateLlaRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InsStateLlaRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__InsStateLlaRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_InsStateEcefRegister_yaw_pitch_roll_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateEcefRegister *arg1 = (vn::sensors::InsStateEcefRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsStateEcefRegister_yaw_pitch_roll_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsStateEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsStateEcefRegister_yaw_pitch_roll_set" "', argument " "1"" of type '" "vn::sensors::InsStateEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsStateEcefRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InsStateEcefRegister_yaw_pitch_roll_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->yawPitchRoll = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsStateEcefRegister_yaw_pitch_roll_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateEcefRegister *arg1 = (vn::sensors::InsStateEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsStateEcefRegister_yaw_pitch_roll_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsStateEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsStateEcefRegister_yaw_pitch_roll_get" "', argument " "1"" of type '" "vn::sensors::InsStateEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsStateEcefRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->yawPitchRoll);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsStateEcefRegister_position_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateEcefRegister *arg1 = (vn::sensors::InsStateEcefRegister *) 0 ;
  vn::math::vec3d *arg2 = (vn::math::vec3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsStateEcefRegister_position_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsStateEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsStateEcefRegister_position_set" "', argument " "1"" of type '" "vn::sensors::InsStateEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsStateEcefRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InsStateEcefRegister_position_set" "', argument " "2"" of type '" "vn::math::vec3d *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3d * >(argp2);
  if (arg1) (arg1)->position = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsStateEcefRegister_position_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateEcefRegister *arg1 = (vn::sensors::InsStateEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3d *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsStateEcefRegister_position_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsStateEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsStateEcefRegister_position_get" "', argument " "1"" of type '" "vn::sensors::InsStateEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsStateEcefRegister * >(argp1);
  result = (vn::math::vec3d *)& ((arg1)->position);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsStateEcefRegister_velocity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateEcefRegister *arg1 = (vn::sensors::InsStateEcefRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsStateEcefRegister_velocity_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsStateEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsStateEcefRegister_velocity_set" "', argument " "1"" of type '" "vn::sensors::InsStateEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsStateEcefRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InsStateEcefRegister_velocity_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->velocity = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsStateEcefRegister_velocity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateEcefRegister *arg1 = (vn::sensors::InsStateEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsStateEcefRegister_velocity_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsStateEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsStateEcefRegister_velocity_get" "', argument " "1"" of type '" "vn::sensors::InsStateEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsStateEcefRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->velocity);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsStateEcefRegister_accel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateEcefRegister *arg1 = (vn::sensors::InsStateEcefRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsStateEcefRegister_accel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsStateEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsStateEcefRegister_accel_set" "', argument " "1"" of type '" "vn::sensors::InsStateEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsStateEcefRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InsStateEcefRegister_accel_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->accel = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsStateEcefRegister_accel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateEcefRegister *arg1 = (vn::sensors::InsStateEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsStateEcefRegister_accel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsStateEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsStateEcefRegister_accel_get" "', argument " "1"" of type '" "vn::sensors::InsStateEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsStateEcefRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->accel);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsStateEcefRegister_angular_rate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateEcefRegister *arg1 = (vn::sensors::InsStateEcefRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InsStateEcefRegister_angular_rate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsStateEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsStateEcefRegister_angular_rate_set" "', argument " "1"" of type '" "vn::sensors::InsStateEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsStateEcefRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InsStateEcefRegister_angular_rate_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->angularRate = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InsStateEcefRegister_angular_rate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateEcefRegister *arg1 = (vn::sensors::InsStateEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InsStateEcefRegister_angular_rate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsStateEcefRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InsStateEcefRegister_angular_rate_get" "', argument " "1"" of type '" "vn::sensors::InsStateEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsStateEcefRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->angularRate);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InsStateEcefRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateEcefRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_InsStateEcefRegister")) SWIG_fail;
  result = (vn::sensors::InsStateEcefRegister *)new vn::sensors::InsStateEcefRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__InsStateEcefRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InsStateEcefRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3f arg1 ;
  vn::math::vec3d arg2 ;
  vn::math::vec3f arg3 ;
  vn::math::vec3f arg4 ;
  vn::math::vec3f arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  vn::sensors::InsStateEcefRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_InsStateEcefRegister",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InsStateEcefRegister" "', argument " "1"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InsStateEcefRegister" "', argument " "1"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_double_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_InsStateEcefRegister" "', argument " "2"" of type '" "vn::math::vec3d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InsStateEcefRegister" "', argument " "2"" of type '" "vn::math::vec3d""'");
    } else {
      vn::math::vec3d * temp = reinterpret_cast< vn::math::vec3d * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_InsStateEcefRegister" "', argument " "3"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InsStateEcefRegister" "', argument " "3"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_InsStateEcefRegister" "', argument " "4"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InsStateEcefRegister" "', argument " "4"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_InsStateEcefRegister" "', argument " "5"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InsStateEcefRegister" "', argument " "5"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = (vn::sensors::InsStateEcefRegister *)new vn::sensors::InsStateEcefRegister(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__InsStateEcefRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InsStateEcefRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_InsStateEcefRegister__SWIG_0(self, args);
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_InsStateEcefRegister__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_InsStateEcefRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::InsStateEcefRegister::InsStateEcefRegister()\n"
    "    vn::sensors::InsStateEcefRegister::InsStateEcefRegister(vn::math::vec3f,vn::math::vec3d,vn::math::vec3f,vn::math::vec3f,vn::math::vec3f)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_InsStateEcefRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateEcefRegister *arg1 = (vn::sensors::InsStateEcefRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InsStateEcefRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__InsStateEcefRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InsStateEcefRegister" "', argument " "1"" of type '" "vn::sensors::InsStateEcefRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsStateEcefRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InsStateEcefRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__InsStateEcefRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_StartupFilterBiasEstimateRegister_gyro_bias_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::StartupFilterBiasEstimateRegister *arg1 = (vn::sensors::StartupFilterBiasEstimateRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StartupFilterBiasEstimateRegister_gyro_bias_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__StartupFilterBiasEstimateRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StartupFilterBiasEstimateRegister_gyro_bias_set" "', argument " "1"" of type '" "vn::sensors::StartupFilterBiasEstimateRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::StartupFilterBiasEstimateRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StartupFilterBiasEstimateRegister_gyro_bias_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->gyroBias = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StartupFilterBiasEstimateRegister_gyro_bias_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::StartupFilterBiasEstimateRegister *arg1 = (vn::sensors::StartupFilterBiasEstimateRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StartupFilterBiasEstimateRegister_gyro_bias_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__StartupFilterBiasEstimateRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StartupFilterBiasEstimateRegister_gyro_bias_get" "', argument " "1"" of type '" "vn::sensors::StartupFilterBiasEstimateRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::StartupFilterBiasEstimateRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->gyroBias);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StartupFilterBiasEstimateRegister_accel_bias_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::StartupFilterBiasEstimateRegister *arg1 = (vn::sensors::StartupFilterBiasEstimateRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StartupFilterBiasEstimateRegister_accel_bias_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__StartupFilterBiasEstimateRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StartupFilterBiasEstimateRegister_accel_bias_set" "', argument " "1"" of type '" "vn::sensors::StartupFilterBiasEstimateRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::StartupFilterBiasEstimateRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StartupFilterBiasEstimateRegister_accel_bias_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->accelBias = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StartupFilterBiasEstimateRegister_accel_bias_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::StartupFilterBiasEstimateRegister *arg1 = (vn::sensors::StartupFilterBiasEstimateRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StartupFilterBiasEstimateRegister_accel_bias_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__StartupFilterBiasEstimateRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StartupFilterBiasEstimateRegister_accel_bias_get" "', argument " "1"" of type '" "vn::sensors::StartupFilterBiasEstimateRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::StartupFilterBiasEstimateRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->accelBias);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StartupFilterBiasEstimateRegister_pressure_bias_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::StartupFilterBiasEstimateRegister *arg1 = (vn::sensors::StartupFilterBiasEstimateRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StartupFilterBiasEstimateRegister_pressure_bias_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__StartupFilterBiasEstimateRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StartupFilterBiasEstimateRegister_pressure_bias_set" "', argument " "1"" of type '" "vn::sensors::StartupFilterBiasEstimateRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::StartupFilterBiasEstimateRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StartupFilterBiasEstimateRegister_pressure_bias_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->pressureBias = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StartupFilterBiasEstimateRegister_pressure_bias_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::StartupFilterBiasEstimateRegister *arg1 = (vn::sensors::StartupFilterBiasEstimateRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StartupFilterBiasEstimateRegister_pressure_bias_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__StartupFilterBiasEstimateRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StartupFilterBiasEstimateRegister_pressure_bias_get" "', argument " "1"" of type '" "vn::sensors::StartupFilterBiasEstimateRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::StartupFilterBiasEstimateRegister * >(argp1);
  result = (float) ((arg1)->pressureBias);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StartupFilterBiasEstimateRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::StartupFilterBiasEstimateRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StartupFilterBiasEstimateRegister")) SWIG_fail;
  result = (vn::sensors::StartupFilterBiasEstimateRegister *)new vn::sensors::StartupFilterBiasEstimateRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__StartupFilterBiasEstimateRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StartupFilterBiasEstimateRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3f arg1 ;
  vn::math::vec3f arg2 ;
  float arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vn::sensors::StartupFilterBiasEstimateRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_StartupFilterBiasEstimateRegister",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StartupFilterBiasEstimateRegister" "', argument " "1"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StartupFilterBiasEstimateRegister" "', argument " "1"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StartupFilterBiasEstimateRegister" "', argument " "2"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StartupFilterBiasEstimateRegister" "', argument " "2"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_StartupFilterBiasEstimateRegister" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (vn::sensors::StartupFilterBiasEstimateRegister *)new vn::sensors::StartupFilterBiasEstimateRegister(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__StartupFilterBiasEstimateRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StartupFilterBiasEstimateRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_StartupFilterBiasEstimateRegister__SWIG_0(self, args);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_StartupFilterBiasEstimateRegister__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_StartupFilterBiasEstimateRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::StartupFilterBiasEstimateRegister::StartupFilterBiasEstimateRegister()\n"
    "    vn::sensors::StartupFilterBiasEstimateRegister::StartupFilterBiasEstimateRegister(vn::math::vec3f,vn::math::vec3f,float)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_StartupFilterBiasEstimateRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::StartupFilterBiasEstimateRegister *arg1 = (vn::sensors::StartupFilterBiasEstimateRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StartupFilterBiasEstimateRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__StartupFilterBiasEstimateRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StartupFilterBiasEstimateRegister" "', argument " "1"" of type '" "vn::sensors::StartupFilterBiasEstimateRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::StartupFilterBiasEstimateRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StartupFilterBiasEstimateRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__StartupFilterBiasEstimateRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DeltaThetaAndDeltaVelocityRegister_delta_time_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::DeltaThetaAndDeltaVelocityRegister *arg1 = (vn::sensors::DeltaThetaAndDeltaVelocityRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DeltaThetaAndDeltaVelocityRegister_delta_time_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeltaThetaAndDeltaVelocityRegister_delta_time_set" "', argument " "1"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::DeltaThetaAndDeltaVelocityRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DeltaThetaAndDeltaVelocityRegister_delta_time_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->deltaTime = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeltaThetaAndDeltaVelocityRegister_delta_time_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::DeltaThetaAndDeltaVelocityRegister *arg1 = (vn::sensors::DeltaThetaAndDeltaVelocityRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DeltaThetaAndDeltaVelocityRegister_delta_time_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeltaThetaAndDeltaVelocityRegister_delta_time_get" "', argument " "1"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::DeltaThetaAndDeltaVelocityRegister * >(argp1);
  result = (float) ((arg1)->deltaTime);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeltaThetaAndDeltaVelocityRegister_delta_theta_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::DeltaThetaAndDeltaVelocityRegister *arg1 = (vn::sensors::DeltaThetaAndDeltaVelocityRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DeltaThetaAndDeltaVelocityRegister_delta_theta_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeltaThetaAndDeltaVelocityRegister_delta_theta_set" "', argument " "1"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::DeltaThetaAndDeltaVelocityRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DeltaThetaAndDeltaVelocityRegister_delta_theta_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->deltaTheta = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeltaThetaAndDeltaVelocityRegister_delta_theta_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::DeltaThetaAndDeltaVelocityRegister *arg1 = (vn::sensors::DeltaThetaAndDeltaVelocityRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DeltaThetaAndDeltaVelocityRegister_delta_theta_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeltaThetaAndDeltaVelocityRegister_delta_theta_get" "', argument " "1"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::DeltaThetaAndDeltaVelocityRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->deltaTheta);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeltaThetaAndDeltaVelocityRegister_delta_velocity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::DeltaThetaAndDeltaVelocityRegister *arg1 = (vn::sensors::DeltaThetaAndDeltaVelocityRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DeltaThetaAndDeltaVelocityRegister_delta_velocity_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeltaThetaAndDeltaVelocityRegister_delta_velocity_set" "', argument " "1"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::DeltaThetaAndDeltaVelocityRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DeltaThetaAndDeltaVelocityRegister_delta_velocity_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->deltaVelocity = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeltaThetaAndDeltaVelocityRegister_delta_velocity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::DeltaThetaAndDeltaVelocityRegister *arg1 = (vn::sensors::DeltaThetaAndDeltaVelocityRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DeltaThetaAndDeltaVelocityRegister_delta_velocity_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeltaThetaAndDeltaVelocityRegister_delta_velocity_get" "', argument " "1"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::DeltaThetaAndDeltaVelocityRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->deltaVelocity);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DeltaThetaAndDeltaVelocityRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::DeltaThetaAndDeltaVelocityRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DeltaThetaAndDeltaVelocityRegister")) SWIG_fail;
  result = (vn::sensors::DeltaThetaAndDeltaVelocityRegister *)new vn::sensors::DeltaThetaAndDeltaVelocityRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DeltaThetaAndDeltaVelocityRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  vn::math::vec3f arg2 ;
  vn::math::vec3f arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vn::sensors::DeltaThetaAndDeltaVelocityRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_DeltaThetaAndDeltaVelocityRegister",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DeltaThetaAndDeltaVelocityRegister" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DeltaThetaAndDeltaVelocityRegister" "', argument " "2"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DeltaThetaAndDeltaVelocityRegister" "', argument " "2"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_DeltaThetaAndDeltaVelocityRegister" "', argument " "3"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DeltaThetaAndDeltaVelocityRegister" "', argument " "3"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (vn::sensors::DeltaThetaAndDeltaVelocityRegister *)new vn::sensors::DeltaThetaAndDeltaVelocityRegister(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DeltaThetaAndDeltaVelocityRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DeltaThetaAndDeltaVelocityRegister__SWIG_0(self, args);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_DeltaThetaAndDeltaVelocityRegister__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DeltaThetaAndDeltaVelocityRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::DeltaThetaAndDeltaVelocityRegister::DeltaThetaAndDeltaVelocityRegister()\n"
    "    vn::sensors::DeltaThetaAndDeltaVelocityRegister::DeltaThetaAndDeltaVelocityRegister(float,vn::math::vec3f,vn::math::vec3f)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DeltaThetaAndDeltaVelocityRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::DeltaThetaAndDeltaVelocityRegister *arg1 = (vn::sensors::DeltaThetaAndDeltaVelocityRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DeltaThetaAndDeltaVelocityRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DeltaThetaAndDeltaVelocityRegister" "', argument " "1"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::DeltaThetaAndDeltaVelocityRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DeltaThetaAndDeltaVelocityRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DeltaThetaAndDeltaVelocityConfigurationRegister_integration_frame_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *arg1 = (vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *) 0 ;
  vn::protocol::uart::IntegrationFrame arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DeltaThetaAndDeltaVelocityConfigurationRegister_integration_frame_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeltaThetaAndDeltaVelocityConfigurationRegister_integration_frame_set" "', argument " "1"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DeltaThetaAndDeltaVelocityConfigurationRegister_integration_frame_set" "', argument " "2"" of type '" "vn::protocol::uart::IntegrationFrame""'");
  } 
  arg2 = static_cast< vn::protocol::uart::IntegrationFrame >(val2);
  if (arg1) (arg1)->integrationFrame = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeltaThetaAndDeltaVelocityConfigurationRegister_integration_frame_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *arg1 = (vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::IntegrationFrame result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DeltaThetaAndDeltaVelocityConfigurationRegister_integration_frame_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeltaThetaAndDeltaVelocityConfigurationRegister_integration_frame_get" "', argument " "1"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister * >(argp1);
  result = (vn::protocol::uart::IntegrationFrame) ((arg1)->integrationFrame);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeltaThetaAndDeltaVelocityConfigurationRegister_gyro_compensation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *arg1 = (vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *) 0 ;
  vn::protocol::uart::CompensationMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DeltaThetaAndDeltaVelocityConfigurationRegister_gyro_compensation_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeltaThetaAndDeltaVelocityConfigurationRegister_gyro_compensation_set" "', argument " "1"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DeltaThetaAndDeltaVelocityConfigurationRegister_gyro_compensation_set" "', argument " "2"" of type '" "vn::protocol::uart::CompensationMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::CompensationMode >(val2);
  if (arg1) (arg1)->gyroCompensation = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeltaThetaAndDeltaVelocityConfigurationRegister_gyro_compensation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *arg1 = (vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::CompensationMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DeltaThetaAndDeltaVelocityConfigurationRegister_gyro_compensation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeltaThetaAndDeltaVelocityConfigurationRegister_gyro_compensation_get" "', argument " "1"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister * >(argp1);
  result = (vn::protocol::uart::CompensationMode) ((arg1)->gyroCompensation);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeltaThetaAndDeltaVelocityConfigurationRegister_accel_compensation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *arg1 = (vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *) 0 ;
  vn::protocol::uart::CompensationMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DeltaThetaAndDeltaVelocityConfigurationRegister_accel_compensation_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeltaThetaAndDeltaVelocityConfigurationRegister_accel_compensation_set" "', argument " "1"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DeltaThetaAndDeltaVelocityConfigurationRegister_accel_compensation_set" "', argument " "2"" of type '" "vn::protocol::uart::CompensationMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::CompensationMode >(val2);
  if (arg1) (arg1)->accelCompensation = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeltaThetaAndDeltaVelocityConfigurationRegister_accel_compensation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *arg1 = (vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::CompensationMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DeltaThetaAndDeltaVelocityConfigurationRegister_accel_compensation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeltaThetaAndDeltaVelocityConfigurationRegister_accel_compensation_get" "', argument " "1"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister * >(argp1);
  result = (vn::protocol::uart::CompensationMode) ((arg1)->accelCompensation);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DeltaThetaAndDeltaVelocityConfigurationRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DeltaThetaAndDeltaVelocityConfigurationRegister")) SWIG_fail;
  result = (vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *)new vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DeltaThetaAndDeltaVelocityConfigurationRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::IntegrationFrame arg1 ;
  vn::protocol::uart::CompensationMode arg2 ;
  vn::protocol::uart::CompensationMode arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_DeltaThetaAndDeltaVelocityConfigurationRegister",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DeltaThetaAndDeltaVelocityConfigurationRegister" "', argument " "1"" of type '" "vn::protocol::uart::IntegrationFrame""'");
  } 
  arg1 = static_cast< vn::protocol::uart::IntegrationFrame >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DeltaThetaAndDeltaVelocityConfigurationRegister" "', argument " "2"" of type '" "vn::protocol::uart::CompensationMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::CompensationMode >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DeltaThetaAndDeltaVelocityConfigurationRegister" "', argument " "3"" of type '" "vn::protocol::uart::CompensationMode""'");
  } 
  arg3 = static_cast< vn::protocol::uart::CompensationMode >(val3);
  result = (vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *)new vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DeltaThetaAndDeltaVelocityConfigurationRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DeltaThetaAndDeltaVelocityConfigurationRegister__SWIG_0(self, args);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_DeltaThetaAndDeltaVelocityConfigurationRegister__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DeltaThetaAndDeltaVelocityConfigurationRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister::DeltaThetaAndDeltaVelocityConfigurationRegister()\n"
    "    vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister::DeltaThetaAndDeltaVelocityConfigurationRegister(vn::protocol::uart::IntegrationFrame,vn::protocol::uart::CompensationMode,vn::protocol::uart::CompensationMode)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DeltaThetaAndDeltaVelocityConfigurationRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *arg1 = (vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DeltaThetaAndDeltaVelocityConfigurationRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DeltaThetaAndDeltaVelocityConfigurationRegister" "', argument " "1"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DeltaThetaAndDeltaVelocityConfigurationRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ReferenceVectorConfigurationRegister_use_mag_model_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ReferenceVectorConfigurationRegister *arg1 = (vn::sensors::ReferenceVectorConfigurationRegister *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ReferenceVectorConfigurationRegister_use_mag_model_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReferenceVectorConfigurationRegister_use_mag_model_set" "', argument " "1"" of type '" "vn::sensors::ReferenceVectorConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ReferenceVectorConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ReferenceVectorConfigurationRegister_use_mag_model_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->useMagModel = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReferenceVectorConfigurationRegister_use_mag_model_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ReferenceVectorConfigurationRegister *arg1 = (vn::sensors::ReferenceVectorConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ReferenceVectorConfigurationRegister_use_mag_model_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReferenceVectorConfigurationRegister_use_mag_model_get" "', argument " "1"" of type '" "vn::sensors::ReferenceVectorConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ReferenceVectorConfigurationRegister * >(argp1);
  result = (bool) ((arg1)->useMagModel);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReferenceVectorConfigurationRegister_use_gravity_model_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ReferenceVectorConfigurationRegister *arg1 = (vn::sensors::ReferenceVectorConfigurationRegister *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ReferenceVectorConfigurationRegister_use_gravity_model_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReferenceVectorConfigurationRegister_use_gravity_model_set" "', argument " "1"" of type '" "vn::sensors::ReferenceVectorConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ReferenceVectorConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ReferenceVectorConfigurationRegister_use_gravity_model_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->useGravityModel = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReferenceVectorConfigurationRegister_use_gravity_model_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ReferenceVectorConfigurationRegister *arg1 = (vn::sensors::ReferenceVectorConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ReferenceVectorConfigurationRegister_use_gravity_model_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReferenceVectorConfigurationRegister_use_gravity_model_get" "', argument " "1"" of type '" "vn::sensors::ReferenceVectorConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ReferenceVectorConfigurationRegister * >(argp1);
  result = (bool) ((arg1)->useGravityModel);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReferenceVectorConfigurationRegister_recalc_threshold_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ReferenceVectorConfigurationRegister *arg1 = (vn::sensors::ReferenceVectorConfigurationRegister *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ReferenceVectorConfigurationRegister_recalc_threshold_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReferenceVectorConfigurationRegister_recalc_threshold_set" "', argument " "1"" of type '" "vn::sensors::ReferenceVectorConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ReferenceVectorConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ReferenceVectorConfigurationRegister_recalc_threshold_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->recalcThreshold = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReferenceVectorConfigurationRegister_recalc_threshold_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ReferenceVectorConfigurationRegister *arg1 = (vn::sensors::ReferenceVectorConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ReferenceVectorConfigurationRegister_recalc_threshold_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReferenceVectorConfigurationRegister_recalc_threshold_get" "', argument " "1"" of type '" "vn::sensors::ReferenceVectorConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ReferenceVectorConfigurationRegister * >(argp1);
  result = (uint32_t) ((arg1)->recalcThreshold);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReferenceVectorConfigurationRegister_year_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ReferenceVectorConfigurationRegister *arg1 = (vn::sensors::ReferenceVectorConfigurationRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ReferenceVectorConfigurationRegister_year_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReferenceVectorConfigurationRegister_year_set" "', argument " "1"" of type '" "vn::sensors::ReferenceVectorConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ReferenceVectorConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ReferenceVectorConfigurationRegister_year_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->year = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReferenceVectorConfigurationRegister_year_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ReferenceVectorConfigurationRegister *arg1 = (vn::sensors::ReferenceVectorConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ReferenceVectorConfigurationRegister_year_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReferenceVectorConfigurationRegister_year_get" "', argument " "1"" of type '" "vn::sensors::ReferenceVectorConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ReferenceVectorConfigurationRegister * >(argp1);
  result = (float) ((arg1)->year);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReferenceVectorConfigurationRegister_position_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ReferenceVectorConfigurationRegister *arg1 = (vn::sensors::ReferenceVectorConfigurationRegister *) 0 ;
  vn::math::vec3d *arg2 = (vn::math::vec3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ReferenceVectorConfigurationRegister_position_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReferenceVectorConfigurationRegister_position_set" "', argument " "1"" of type '" "vn::sensors::ReferenceVectorConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ReferenceVectorConfigurationRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ReferenceVectorConfigurationRegister_position_set" "', argument " "2"" of type '" "vn::math::vec3d *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3d * >(argp2);
  if (arg1) (arg1)->position = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReferenceVectorConfigurationRegister_position_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ReferenceVectorConfigurationRegister *arg1 = (vn::sensors::ReferenceVectorConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3d *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ReferenceVectorConfigurationRegister_position_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReferenceVectorConfigurationRegister_position_get" "', argument " "1"" of type '" "vn::sensors::ReferenceVectorConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ReferenceVectorConfigurationRegister * >(argp1);
  result = (vn::math::vec3d *)& ((arg1)->position);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ReferenceVectorConfigurationRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ReferenceVectorConfigurationRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ReferenceVectorConfigurationRegister")) SWIG_fail;
  result = (vn::sensors::ReferenceVectorConfigurationRegister *)new vn::sensors::ReferenceVectorConfigurationRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ReferenceVectorConfigurationRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool arg2 ;
  uint32_t arg3 ;
  float arg4 ;
  vn::math::vec3d arg5 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  vn::sensors::ReferenceVectorConfigurationRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_ReferenceVectorConfigurationRegister",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ReferenceVectorConfigurationRegister" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ReferenceVectorConfigurationRegister" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ReferenceVectorConfigurationRegister" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ReferenceVectorConfigurationRegister" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vn__math__vecT_3_double_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_ReferenceVectorConfigurationRegister" "', argument " "5"" of type '" "vn::math::vec3d""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ReferenceVectorConfigurationRegister" "', argument " "5"" of type '" "vn::math::vec3d""'");
    } else {
      vn::math::vec3d * temp = reinterpret_cast< vn::math::vec3d * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = (vn::sensors::ReferenceVectorConfigurationRegister *)new vn::sensors::ReferenceVectorConfigurationRegister(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ReferenceVectorConfigurationRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ReferenceVectorConfigurationRegister__SWIG_0(self, args);
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_vn__math__vecT_3_double_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_ReferenceVectorConfigurationRegister__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ReferenceVectorConfigurationRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::ReferenceVectorConfigurationRegister::ReferenceVectorConfigurationRegister()\n"
    "    vn::sensors::ReferenceVectorConfigurationRegister::ReferenceVectorConfigurationRegister(bool,bool,uint32_t,float,vn::math::vec3d)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ReferenceVectorConfigurationRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ReferenceVectorConfigurationRegister *arg1 = (vn::sensors::ReferenceVectorConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ReferenceVectorConfigurationRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ReferenceVectorConfigurationRegister" "', argument " "1"" of type '" "vn::sensors::ReferenceVectorConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ReferenceVectorConfigurationRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ReferenceVectorConfigurationRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_GyroCompensationRegister_c_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GyroCompensationRegister *arg1 = (vn::sensors::GyroCompensationRegister *) 0 ;
  vn::math::mat3f *arg2 = (vn::math::mat3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GyroCompensationRegister_c_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GyroCompensationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GyroCompensationRegister_c_set" "', argument " "1"" of type '" "vn::sensors::GyroCompensationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GyroCompensationRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GyroCompensationRegister_c_set" "', argument " "2"" of type '" "vn::math::mat3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::mat3f * >(argp2);
  if (arg1) (arg1)->c = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GyroCompensationRegister_c_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GyroCompensationRegister *arg1 = (vn::sensors::GyroCompensationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::mat3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GyroCompensationRegister_c_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GyroCompensationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GyroCompensationRegister_c_get" "', argument " "1"" of type '" "vn::sensors::GyroCompensationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GyroCompensationRegister * >(argp1);
  result = (vn::math::mat3f *)& ((arg1)->c);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__matT_3_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GyroCompensationRegister_b_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GyroCompensationRegister *arg1 = (vn::sensors::GyroCompensationRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GyroCompensationRegister_b_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GyroCompensationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GyroCompensationRegister_b_set" "', argument " "1"" of type '" "vn::sensors::GyroCompensationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GyroCompensationRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GyroCompensationRegister_b_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->b = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GyroCompensationRegister_b_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GyroCompensationRegister *arg1 = (vn::sensors::GyroCompensationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GyroCompensationRegister_b_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GyroCompensationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GyroCompensationRegister_b_get" "', argument " "1"" of type '" "vn::sensors::GyroCompensationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GyroCompensationRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->b);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GyroCompensationRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GyroCompensationRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GyroCompensationRegister")) SWIG_fail;
  result = (vn::sensors::GyroCompensationRegister *)new vn::sensors::GyroCompensationRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__GyroCompensationRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GyroCompensationRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::mat3f arg1 ;
  vn::math::vec3f arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::sensors::GyroCompensationRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_GyroCompensationRegister",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__matT_3_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GyroCompensationRegister" "', argument " "1"" of type '" "vn::math::mat3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GyroCompensationRegister" "', argument " "1"" of type '" "vn::math::mat3f""'");
    } else {
      vn::math::mat3f * temp = reinterpret_cast< vn::math::mat3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_GyroCompensationRegister" "', argument " "2"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GyroCompensationRegister" "', argument " "2"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (vn::sensors::GyroCompensationRegister *)new vn::sensors::GyroCompensationRegister(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__GyroCompensationRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GyroCompensationRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GyroCompensationRegister__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__math__matT_3_3_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_GyroCompensationRegister__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_GyroCompensationRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::GyroCompensationRegister::GyroCompensationRegister()\n"
    "    vn::sensors::GyroCompensationRegister::GyroCompensationRegister(vn::math::mat3f,vn::math::vec3f)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_GyroCompensationRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GyroCompensationRegister *arg1 = (vn::sensors::GyroCompensationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GyroCompensationRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GyroCompensationRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GyroCompensationRegister" "', argument " "1"" of type '" "vn::sensors::GyroCompensationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GyroCompensationRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GyroCompensationRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__GyroCompensationRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ImuFilteringConfigurationRegister_mag_window_size_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuFilteringConfigurationRegister *arg1 = (vn::sensors::ImuFilteringConfigurationRegister *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImuFilteringConfigurationRegister_mag_window_size_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuFilteringConfigurationRegister_mag_window_size_set" "', argument " "1"" of type '" "vn::sensors::ImuFilteringConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImuFilteringConfigurationRegister_mag_window_size_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->magWindowSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuFilteringConfigurationRegister_mag_window_size_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuFilteringConfigurationRegister *arg1 = (vn::sensors::ImuFilteringConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImuFilteringConfigurationRegister_mag_window_size_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuFilteringConfigurationRegister_mag_window_size_get" "', argument " "1"" of type '" "vn::sensors::ImuFilteringConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp1);
  result = (uint16_t) ((arg1)->magWindowSize);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuFilteringConfigurationRegister_accel_window_size_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuFilteringConfigurationRegister *arg1 = (vn::sensors::ImuFilteringConfigurationRegister *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImuFilteringConfigurationRegister_accel_window_size_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuFilteringConfigurationRegister_accel_window_size_set" "', argument " "1"" of type '" "vn::sensors::ImuFilteringConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImuFilteringConfigurationRegister_accel_window_size_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->accelWindowSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuFilteringConfigurationRegister_accel_window_size_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuFilteringConfigurationRegister *arg1 = (vn::sensors::ImuFilteringConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImuFilteringConfigurationRegister_accel_window_size_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuFilteringConfigurationRegister_accel_window_size_get" "', argument " "1"" of type '" "vn::sensors::ImuFilteringConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp1);
  result = (uint16_t) ((arg1)->accelWindowSize);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuFilteringConfigurationRegister_gyro_window_size_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuFilteringConfigurationRegister *arg1 = (vn::sensors::ImuFilteringConfigurationRegister *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImuFilteringConfigurationRegister_gyro_window_size_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuFilteringConfigurationRegister_gyro_window_size_set" "', argument " "1"" of type '" "vn::sensors::ImuFilteringConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImuFilteringConfigurationRegister_gyro_window_size_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->gyroWindowSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuFilteringConfigurationRegister_gyro_window_size_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuFilteringConfigurationRegister *arg1 = (vn::sensors::ImuFilteringConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImuFilteringConfigurationRegister_gyro_window_size_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuFilteringConfigurationRegister_gyro_window_size_get" "', argument " "1"" of type '" "vn::sensors::ImuFilteringConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp1);
  result = (uint16_t) ((arg1)->gyroWindowSize);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuFilteringConfigurationRegister_temp_window_size_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuFilteringConfigurationRegister *arg1 = (vn::sensors::ImuFilteringConfigurationRegister *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImuFilteringConfigurationRegister_temp_window_size_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuFilteringConfigurationRegister_temp_window_size_set" "', argument " "1"" of type '" "vn::sensors::ImuFilteringConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImuFilteringConfigurationRegister_temp_window_size_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->tempWindowSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuFilteringConfigurationRegister_temp_window_size_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuFilteringConfigurationRegister *arg1 = (vn::sensors::ImuFilteringConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImuFilteringConfigurationRegister_temp_window_size_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuFilteringConfigurationRegister_temp_window_size_get" "', argument " "1"" of type '" "vn::sensors::ImuFilteringConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp1);
  result = (uint16_t) ((arg1)->tempWindowSize);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuFilteringConfigurationRegister_pres_window_size_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuFilteringConfigurationRegister *arg1 = (vn::sensors::ImuFilteringConfigurationRegister *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImuFilteringConfigurationRegister_pres_window_size_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuFilteringConfigurationRegister_pres_window_size_set" "', argument " "1"" of type '" "vn::sensors::ImuFilteringConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImuFilteringConfigurationRegister_pres_window_size_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->presWindowSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuFilteringConfigurationRegister_pres_window_size_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuFilteringConfigurationRegister *arg1 = (vn::sensors::ImuFilteringConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImuFilteringConfigurationRegister_pres_window_size_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuFilteringConfigurationRegister_pres_window_size_get" "', argument " "1"" of type '" "vn::sensors::ImuFilteringConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp1);
  result = (uint16_t) ((arg1)->presWindowSize);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuFilteringConfigurationRegister_mag_filter_mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuFilteringConfigurationRegister *arg1 = (vn::sensors::ImuFilteringConfigurationRegister *) 0 ;
  vn::protocol::uart::FilterMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImuFilteringConfigurationRegister_mag_filter_mode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuFilteringConfigurationRegister_mag_filter_mode_set" "', argument " "1"" of type '" "vn::sensors::ImuFilteringConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImuFilteringConfigurationRegister_mag_filter_mode_set" "', argument " "2"" of type '" "vn::protocol::uart::FilterMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::FilterMode >(val2);
  if (arg1) (arg1)->magFilterMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuFilteringConfigurationRegister_mag_filter_mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuFilteringConfigurationRegister *arg1 = (vn::sensors::ImuFilteringConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::FilterMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImuFilteringConfigurationRegister_mag_filter_mode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuFilteringConfigurationRegister_mag_filter_mode_get" "', argument " "1"" of type '" "vn::sensors::ImuFilteringConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp1);
  result = (vn::protocol::uart::FilterMode) ((arg1)->magFilterMode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuFilteringConfigurationRegister_accel_filter_mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuFilteringConfigurationRegister *arg1 = (vn::sensors::ImuFilteringConfigurationRegister *) 0 ;
  vn::protocol::uart::FilterMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImuFilteringConfigurationRegister_accel_filter_mode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuFilteringConfigurationRegister_accel_filter_mode_set" "', argument " "1"" of type '" "vn::sensors::ImuFilteringConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImuFilteringConfigurationRegister_accel_filter_mode_set" "', argument " "2"" of type '" "vn::protocol::uart::FilterMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::FilterMode >(val2);
  if (arg1) (arg1)->accelFilterMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuFilteringConfigurationRegister_accel_filter_mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuFilteringConfigurationRegister *arg1 = (vn::sensors::ImuFilteringConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::FilterMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImuFilteringConfigurationRegister_accel_filter_mode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuFilteringConfigurationRegister_accel_filter_mode_get" "', argument " "1"" of type '" "vn::sensors::ImuFilteringConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp1);
  result = (vn::protocol::uart::FilterMode) ((arg1)->accelFilterMode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuFilteringConfigurationRegister_gyro_filter_mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuFilteringConfigurationRegister *arg1 = (vn::sensors::ImuFilteringConfigurationRegister *) 0 ;
  vn::protocol::uart::FilterMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImuFilteringConfigurationRegister_gyro_filter_mode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuFilteringConfigurationRegister_gyro_filter_mode_set" "', argument " "1"" of type '" "vn::sensors::ImuFilteringConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImuFilteringConfigurationRegister_gyro_filter_mode_set" "', argument " "2"" of type '" "vn::protocol::uart::FilterMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::FilterMode >(val2);
  if (arg1) (arg1)->gyroFilterMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuFilteringConfigurationRegister_gyro_filter_mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuFilteringConfigurationRegister *arg1 = (vn::sensors::ImuFilteringConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::FilterMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImuFilteringConfigurationRegister_gyro_filter_mode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuFilteringConfigurationRegister_gyro_filter_mode_get" "', argument " "1"" of type '" "vn::sensors::ImuFilteringConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp1);
  result = (vn::protocol::uart::FilterMode) ((arg1)->gyroFilterMode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuFilteringConfigurationRegister_temp_filter_mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuFilteringConfigurationRegister *arg1 = (vn::sensors::ImuFilteringConfigurationRegister *) 0 ;
  vn::protocol::uart::FilterMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImuFilteringConfigurationRegister_temp_filter_mode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuFilteringConfigurationRegister_temp_filter_mode_set" "', argument " "1"" of type '" "vn::sensors::ImuFilteringConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImuFilteringConfigurationRegister_temp_filter_mode_set" "', argument " "2"" of type '" "vn::protocol::uart::FilterMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::FilterMode >(val2);
  if (arg1) (arg1)->tempFilterMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuFilteringConfigurationRegister_temp_filter_mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuFilteringConfigurationRegister *arg1 = (vn::sensors::ImuFilteringConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::FilterMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImuFilteringConfigurationRegister_temp_filter_mode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuFilteringConfigurationRegister_temp_filter_mode_get" "', argument " "1"" of type '" "vn::sensors::ImuFilteringConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp1);
  result = (vn::protocol::uart::FilterMode) ((arg1)->tempFilterMode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuFilteringConfigurationRegister_pres_filter_mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuFilteringConfigurationRegister *arg1 = (vn::sensors::ImuFilteringConfigurationRegister *) 0 ;
  vn::protocol::uart::FilterMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImuFilteringConfigurationRegister_pres_filter_mode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuFilteringConfigurationRegister_pres_filter_mode_set" "', argument " "1"" of type '" "vn::sensors::ImuFilteringConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImuFilteringConfigurationRegister_pres_filter_mode_set" "', argument " "2"" of type '" "vn::protocol::uart::FilterMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::FilterMode >(val2);
  if (arg1) (arg1)->presFilterMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuFilteringConfigurationRegister_pres_filter_mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuFilteringConfigurationRegister *arg1 = (vn::sensors::ImuFilteringConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::FilterMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImuFilteringConfigurationRegister_pres_filter_mode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuFilteringConfigurationRegister_pres_filter_mode_get" "', argument " "1"" of type '" "vn::sensors::ImuFilteringConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp1);
  result = (vn::protocol::uart::FilterMode) ((arg1)->presFilterMode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ImuFilteringConfigurationRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuFilteringConfigurationRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ImuFilteringConfigurationRegister")) SWIG_fail;
  result = (vn::sensors::ImuFilteringConfigurationRegister *)new vn::sensors::ImuFilteringConfigurationRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ImuFilteringConfigurationRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint16_t arg1 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  uint16_t arg4 ;
  uint16_t arg5 ;
  vn::protocol::uart::FilterMode arg6 ;
  vn::protocol::uart::FilterMode arg7 ;
  vn::protocol::uart::FilterMode arg8 ;
  vn::protocol::uart::FilterMode arg9 ;
  vn::protocol::uart::FilterMode arg10 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  vn::sensors::ImuFilteringConfigurationRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:new_ImuFilteringConfigurationRegister",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_short(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ImuFilteringConfigurationRegister" "', argument " "1"" of type '" "uint16_t""'");
  } 
  arg1 = static_cast< uint16_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ImuFilteringConfigurationRegister" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ImuFilteringConfigurationRegister" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ImuFilteringConfigurationRegister" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ImuFilteringConfigurationRegister" "', argument " "5"" of type '" "uint16_t""'");
  } 
  arg5 = static_cast< uint16_t >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ImuFilteringConfigurationRegister" "', argument " "6"" of type '" "vn::protocol::uart::FilterMode""'");
  } 
  arg6 = static_cast< vn::protocol::uart::FilterMode >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_ImuFilteringConfigurationRegister" "', argument " "7"" of type '" "vn::protocol::uart::FilterMode""'");
  } 
  arg7 = static_cast< vn::protocol::uart::FilterMode >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_ImuFilteringConfigurationRegister" "', argument " "8"" of type '" "vn::protocol::uart::FilterMode""'");
  } 
  arg8 = static_cast< vn::protocol::uart::FilterMode >(val8);
  ecode9 = SWIG_AsVal_int(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_ImuFilteringConfigurationRegister" "', argument " "9"" of type '" "vn::protocol::uart::FilterMode""'");
  } 
  arg9 = static_cast< vn::protocol::uart::FilterMode >(val9);
  ecode10 = SWIG_AsVal_int(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_ImuFilteringConfigurationRegister" "', argument " "10"" of type '" "vn::protocol::uart::FilterMode""'");
  } 
  arg10 = static_cast< vn::protocol::uart::FilterMode >(val10);
  result = (vn::sensors::ImuFilteringConfigurationRegister *)new vn::sensors::ImuFilteringConfigurationRegister(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ImuFilteringConfigurationRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[11] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 10) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ImuFilteringConfigurationRegister__SWIG_0(self, args);
  }
  if (argc == 10) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_short(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_int(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_int(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        return _wrap_new_ImuFilteringConfigurationRegister__SWIG_1(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ImuFilteringConfigurationRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::ImuFilteringConfigurationRegister::ImuFilteringConfigurationRegister()\n"
    "    vn::sensors::ImuFilteringConfigurationRegister::ImuFilteringConfigurationRegister(uint16_t,uint16_t,uint16_t,uint16_t,uint16_t,vn::protocol::uart::FilterMode,vn::protocol::uart::FilterMode,vn::protocol::uart::FilterMode,vn::protocol::uart::FilterMode,vn::protocol::uart::FilterMode)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ImuFilteringConfigurationRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuFilteringConfigurationRegister *arg1 = (vn::sensors::ImuFilteringConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ImuFilteringConfigurationRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ImuFilteringConfigurationRegister" "', argument " "1"" of type '" "vn::sensors::ImuFilteringConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ImuFilteringConfigurationRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_GpsCompassBaselineRegister_position_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsCompassBaselineRegister *arg1 = (vn::sensors::GpsCompassBaselineRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsCompassBaselineRegister_position_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsCompassBaselineRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsCompassBaselineRegister_position_set" "', argument " "1"" of type '" "vn::sensors::GpsCompassBaselineRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsCompassBaselineRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GpsCompassBaselineRegister_position_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->position = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsCompassBaselineRegister_position_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsCompassBaselineRegister *arg1 = (vn::sensors::GpsCompassBaselineRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsCompassBaselineRegister_position_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsCompassBaselineRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsCompassBaselineRegister_position_get" "', argument " "1"" of type '" "vn::sensors::GpsCompassBaselineRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsCompassBaselineRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->position);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsCompassBaselineRegister_uncertainty_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsCompassBaselineRegister *arg1 = (vn::sensors::GpsCompassBaselineRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsCompassBaselineRegister_uncertainty_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsCompassBaselineRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsCompassBaselineRegister_uncertainty_set" "', argument " "1"" of type '" "vn::sensors::GpsCompassBaselineRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsCompassBaselineRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GpsCompassBaselineRegister_uncertainty_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->uncertainty = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsCompassBaselineRegister_uncertainty_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsCompassBaselineRegister *arg1 = (vn::sensors::GpsCompassBaselineRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsCompassBaselineRegister_uncertainty_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsCompassBaselineRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsCompassBaselineRegister_uncertainty_get" "', argument " "1"" of type '" "vn::sensors::GpsCompassBaselineRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsCompassBaselineRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->uncertainty);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GpsCompassBaselineRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsCompassBaselineRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GpsCompassBaselineRegister")) SWIG_fail;
  result = (vn::sensors::GpsCompassBaselineRegister *)new vn::sensors::GpsCompassBaselineRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__GpsCompassBaselineRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GpsCompassBaselineRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3f arg1 ;
  vn::math::vec3f arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::sensors::GpsCompassBaselineRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_GpsCompassBaselineRegister",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GpsCompassBaselineRegister" "', argument " "1"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GpsCompassBaselineRegister" "', argument " "1"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_GpsCompassBaselineRegister" "', argument " "2"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GpsCompassBaselineRegister" "', argument " "2"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (vn::sensors::GpsCompassBaselineRegister *)new vn::sensors::GpsCompassBaselineRegister(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__GpsCompassBaselineRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GpsCompassBaselineRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GpsCompassBaselineRegister__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_GpsCompassBaselineRegister__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_GpsCompassBaselineRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::GpsCompassBaselineRegister::GpsCompassBaselineRegister()\n"
    "    vn::sensors::GpsCompassBaselineRegister::GpsCompassBaselineRegister(vn::math::vec3f,vn::math::vec3f)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_GpsCompassBaselineRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsCompassBaselineRegister *arg1 = (vn::sensors::GpsCompassBaselineRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GpsCompassBaselineRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsCompassBaselineRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GpsCompassBaselineRegister" "', argument " "1"" of type '" "vn::sensors::GpsCompassBaselineRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsCompassBaselineRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GpsCompassBaselineRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__GpsCompassBaselineRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_GpsCompassEstimatedBaselineRegister_est_baseline_used_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsCompassEstimatedBaselineRegister *arg1 = (vn::sensors::GpsCompassEstimatedBaselineRegister *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsCompassEstimatedBaselineRegister_est_baseline_used_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsCompassEstimatedBaselineRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsCompassEstimatedBaselineRegister_est_baseline_used_set" "', argument " "1"" of type '" "vn::sensors::GpsCompassEstimatedBaselineRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsCompassEstimatedBaselineRegister * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GpsCompassEstimatedBaselineRegister_est_baseline_used_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->estBaselineUsed = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsCompassEstimatedBaselineRegister_est_baseline_used_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsCompassEstimatedBaselineRegister *arg1 = (vn::sensors::GpsCompassEstimatedBaselineRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsCompassEstimatedBaselineRegister_est_baseline_used_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsCompassEstimatedBaselineRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsCompassEstimatedBaselineRegister_est_baseline_used_get" "', argument " "1"" of type '" "vn::sensors::GpsCompassEstimatedBaselineRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsCompassEstimatedBaselineRegister * >(argp1);
  result = (bool) ((arg1)->estBaselineUsed);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsCompassEstimatedBaselineRegister_num_meas_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsCompassEstimatedBaselineRegister *arg1 = (vn::sensors::GpsCompassEstimatedBaselineRegister *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsCompassEstimatedBaselineRegister_num_meas_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsCompassEstimatedBaselineRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsCompassEstimatedBaselineRegister_num_meas_set" "', argument " "1"" of type '" "vn::sensors::GpsCompassEstimatedBaselineRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsCompassEstimatedBaselineRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GpsCompassEstimatedBaselineRegister_num_meas_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->numMeas = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsCompassEstimatedBaselineRegister_num_meas_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsCompassEstimatedBaselineRegister *arg1 = (vn::sensors::GpsCompassEstimatedBaselineRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsCompassEstimatedBaselineRegister_num_meas_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsCompassEstimatedBaselineRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsCompassEstimatedBaselineRegister_num_meas_get" "', argument " "1"" of type '" "vn::sensors::GpsCompassEstimatedBaselineRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsCompassEstimatedBaselineRegister * >(argp1);
  result = (uint16_t) ((arg1)->numMeas);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsCompassEstimatedBaselineRegister_position_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsCompassEstimatedBaselineRegister *arg1 = (vn::sensors::GpsCompassEstimatedBaselineRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsCompassEstimatedBaselineRegister_position_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsCompassEstimatedBaselineRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsCompassEstimatedBaselineRegister_position_set" "', argument " "1"" of type '" "vn::sensors::GpsCompassEstimatedBaselineRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsCompassEstimatedBaselineRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GpsCompassEstimatedBaselineRegister_position_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->position = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsCompassEstimatedBaselineRegister_position_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsCompassEstimatedBaselineRegister *arg1 = (vn::sensors::GpsCompassEstimatedBaselineRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsCompassEstimatedBaselineRegister_position_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsCompassEstimatedBaselineRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsCompassEstimatedBaselineRegister_position_get" "', argument " "1"" of type '" "vn::sensors::GpsCompassEstimatedBaselineRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsCompassEstimatedBaselineRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->position);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsCompassEstimatedBaselineRegister_uncertainty_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsCompassEstimatedBaselineRegister *arg1 = (vn::sensors::GpsCompassEstimatedBaselineRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GpsCompassEstimatedBaselineRegister_uncertainty_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsCompassEstimatedBaselineRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsCompassEstimatedBaselineRegister_uncertainty_set" "', argument " "1"" of type '" "vn::sensors::GpsCompassEstimatedBaselineRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsCompassEstimatedBaselineRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GpsCompassEstimatedBaselineRegister_uncertainty_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->uncertainty = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GpsCompassEstimatedBaselineRegister_uncertainty_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsCompassEstimatedBaselineRegister *arg1 = (vn::sensors::GpsCompassEstimatedBaselineRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GpsCompassEstimatedBaselineRegister_uncertainty_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsCompassEstimatedBaselineRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GpsCompassEstimatedBaselineRegister_uncertainty_get" "', argument " "1"" of type '" "vn::sensors::GpsCompassEstimatedBaselineRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsCompassEstimatedBaselineRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->uncertainty);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GpsCompassEstimatedBaselineRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsCompassEstimatedBaselineRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GpsCompassEstimatedBaselineRegister")) SWIG_fail;
  result = (vn::sensors::GpsCompassEstimatedBaselineRegister *)new vn::sensors::GpsCompassEstimatedBaselineRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__GpsCompassEstimatedBaselineRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GpsCompassEstimatedBaselineRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  uint16_t arg2 ;
  vn::math::vec3f arg3 ;
  vn::math::vec3f arg4 ;
  bool val1 ;
  int ecode1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  vn::sensors::GpsCompassEstimatedBaselineRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_GpsCompassEstimatedBaselineRegister",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GpsCompassEstimatedBaselineRegister" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GpsCompassEstimatedBaselineRegister" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_GpsCompassEstimatedBaselineRegister" "', argument " "3"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GpsCompassEstimatedBaselineRegister" "', argument " "3"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_GpsCompassEstimatedBaselineRegister" "', argument " "4"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GpsCompassEstimatedBaselineRegister" "', argument " "4"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = (vn::sensors::GpsCompassEstimatedBaselineRegister *)new vn::sensors::GpsCompassEstimatedBaselineRegister(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__GpsCompassEstimatedBaselineRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GpsCompassEstimatedBaselineRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GpsCompassEstimatedBaselineRegister__SWIG_0(self, args);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_GpsCompassEstimatedBaselineRegister__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_GpsCompassEstimatedBaselineRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::GpsCompassEstimatedBaselineRegister::GpsCompassEstimatedBaselineRegister()\n"
    "    vn::sensors::GpsCompassEstimatedBaselineRegister::GpsCompassEstimatedBaselineRegister(bool,uint16_t,vn::math::vec3f,vn::math::vec3f)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_GpsCompassEstimatedBaselineRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsCompassEstimatedBaselineRegister *arg1 = (vn::sensors::GpsCompassEstimatedBaselineRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GpsCompassEstimatedBaselineRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__GpsCompassEstimatedBaselineRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GpsCompassEstimatedBaselineRegister" "', argument " "1"" of type '" "vn::sensors::GpsCompassEstimatedBaselineRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsCompassEstimatedBaselineRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GpsCompassEstimatedBaselineRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__GpsCompassEstimatedBaselineRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ImuRateConfigurationRegister_imu_rate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuRateConfigurationRegister *arg1 = (vn::sensors::ImuRateConfigurationRegister *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImuRateConfigurationRegister_imu_rate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuRateConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuRateConfigurationRegister_imu_rate_set" "', argument " "1"" of type '" "vn::sensors::ImuRateConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuRateConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImuRateConfigurationRegister_imu_rate_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->imuRate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuRateConfigurationRegister_imu_rate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuRateConfigurationRegister *arg1 = (vn::sensors::ImuRateConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImuRateConfigurationRegister_imu_rate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuRateConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuRateConfigurationRegister_imu_rate_get" "', argument " "1"" of type '" "vn::sensors::ImuRateConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuRateConfigurationRegister * >(argp1);
  result = (uint16_t) ((arg1)->imuRate);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuRateConfigurationRegister_nav_divisor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuRateConfigurationRegister *arg1 = (vn::sensors::ImuRateConfigurationRegister *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImuRateConfigurationRegister_nav_divisor_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuRateConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuRateConfigurationRegister_nav_divisor_set" "', argument " "1"" of type '" "vn::sensors::ImuRateConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuRateConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImuRateConfigurationRegister_nav_divisor_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->navDivisor = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuRateConfigurationRegister_nav_divisor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuRateConfigurationRegister *arg1 = (vn::sensors::ImuRateConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImuRateConfigurationRegister_nav_divisor_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuRateConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuRateConfigurationRegister_nav_divisor_get" "', argument " "1"" of type '" "vn::sensors::ImuRateConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuRateConfigurationRegister * >(argp1);
  result = (uint16_t) ((arg1)->navDivisor);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuRateConfigurationRegister_filter_target_rate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuRateConfigurationRegister *arg1 = (vn::sensors::ImuRateConfigurationRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImuRateConfigurationRegister_filter_target_rate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuRateConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuRateConfigurationRegister_filter_target_rate_set" "', argument " "1"" of type '" "vn::sensors::ImuRateConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuRateConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImuRateConfigurationRegister_filter_target_rate_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->filterTargetRate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuRateConfigurationRegister_filter_target_rate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuRateConfigurationRegister *arg1 = (vn::sensors::ImuRateConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImuRateConfigurationRegister_filter_target_rate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuRateConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuRateConfigurationRegister_filter_target_rate_get" "', argument " "1"" of type '" "vn::sensors::ImuRateConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuRateConfigurationRegister * >(argp1);
  result = (float) ((arg1)->filterTargetRate);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuRateConfigurationRegister_filter_min_rate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuRateConfigurationRegister *arg1 = (vn::sensors::ImuRateConfigurationRegister *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImuRateConfigurationRegister_filter_min_rate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuRateConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuRateConfigurationRegister_filter_min_rate_set" "', argument " "1"" of type '" "vn::sensors::ImuRateConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuRateConfigurationRegister * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImuRateConfigurationRegister_filter_min_rate_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->filterMinRate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImuRateConfigurationRegister_filter_min_rate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuRateConfigurationRegister *arg1 = (vn::sensors::ImuRateConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImuRateConfigurationRegister_filter_min_rate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuRateConfigurationRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImuRateConfigurationRegister_filter_min_rate_get" "', argument " "1"" of type '" "vn::sensors::ImuRateConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuRateConfigurationRegister * >(argp1);
  result = (float) ((arg1)->filterMinRate);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ImuRateConfigurationRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuRateConfigurationRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ImuRateConfigurationRegister")) SWIG_fail;
  result = (vn::sensors::ImuRateConfigurationRegister *)new vn::sensors::ImuRateConfigurationRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__ImuRateConfigurationRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ImuRateConfigurationRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint16_t arg1 ;
  uint16_t arg2 ;
  float arg3 ;
  float arg4 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  vn::sensors::ImuRateConfigurationRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ImuRateConfigurationRegister",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_short(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ImuRateConfigurationRegister" "', argument " "1"" of type '" "uint16_t""'");
  } 
  arg1 = static_cast< uint16_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ImuRateConfigurationRegister" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ImuRateConfigurationRegister" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ImuRateConfigurationRegister" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = (vn::sensors::ImuRateConfigurationRegister *)new vn::sensors::ImuRateConfigurationRegister(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__ImuRateConfigurationRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ImuRateConfigurationRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ImuRateConfigurationRegister__SWIG_0(self, args);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_short(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ImuRateConfigurationRegister__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ImuRateConfigurationRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::ImuRateConfigurationRegister::ImuRateConfigurationRegister()\n"
    "    vn::sensors::ImuRateConfigurationRegister::ImuRateConfigurationRegister(uint16_t,uint16_t,float,float)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ImuRateConfigurationRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuRateConfigurationRegister *arg1 = (vn::sensors::ImuRateConfigurationRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ImuRateConfigurationRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__ImuRateConfigurationRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ImuRateConfigurationRegister" "', argument " "1"" of type '" "vn::sensors::ImuRateConfigurationRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuRateConfigurationRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ImuRateConfigurationRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__ImuRateConfigurationRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_yaw_pitch_roll_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_yaw_pitch_roll_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__YawPitchRollTrueBodyAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_yaw_pitch_roll_set" "', argument " "1"" of type '" "vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_yaw_pitch_roll_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->yawPitchRoll = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_yaw_pitch_roll_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_yaw_pitch_roll_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__YawPitchRollTrueBodyAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_yaw_pitch_roll_get" "', argument " "1"" of type '" "vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->yawPitchRoll);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_body_accel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_body_accel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__YawPitchRollTrueBodyAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_body_accel_set" "', argument " "1"" of type '" "vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_body_accel_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->bodyAccel = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_body_accel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_body_accel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__YawPitchRollTrueBodyAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_body_accel_get" "', argument " "1"" of type '" "vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->bodyAccel);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_gyro_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_gyro_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__YawPitchRollTrueBodyAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_gyro_set" "', argument " "1"" of type '" "vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_gyro_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->gyro = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_gyro_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_gyro_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__YawPitchRollTrueBodyAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_gyro_get" "', argument " "1"" of type '" "vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->gyro);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister")) SWIG_fail;
  result = (vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *)new vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__YawPitchRollTrueBodyAccelerationAndAngularRatesRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3f arg1 ;
  vn::math::vec3f arg2 ;
  vn::math::vec3f arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister" "', argument " "1"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister" "', argument " "1"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister" "', argument " "2"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister" "', argument " "2"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister" "', argument " "3"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister" "', argument " "3"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *)new vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__YawPitchRollTrueBodyAccelerationAndAngularRatesRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister__SWIG_0(self, args);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister()\n"
    "    vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister(vn::math::vec3f,vn::math::vec3f,vn::math::vec3f)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__YawPitchRollTrueBodyAccelerationAndAngularRatesRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister" "', argument " "1"" of type '" "vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__YawPitchRollTrueBodyAccelerationAndAngularRatesRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_yaw_pitch_roll_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_yaw_pitch_roll_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__YawPitchRollTrueInertialAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_yaw_pitch_roll_set" "', argument " "1"" of type '" "vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_yaw_pitch_roll_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->yawPitchRoll = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_yaw_pitch_roll_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_yaw_pitch_roll_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__YawPitchRollTrueInertialAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_yaw_pitch_roll_get" "', argument " "1"" of type '" "vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->yawPitchRoll);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_inertial_accel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_inertial_accel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__YawPitchRollTrueInertialAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_inertial_accel_set" "', argument " "1"" of type '" "vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_inertial_accel_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->inertialAccel = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_inertial_accel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_inertial_accel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__YawPitchRollTrueInertialAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_inertial_accel_get" "', argument " "1"" of type '" "vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->inertialAccel);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_gyro_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *) 0 ;
  vn::math::vec3f *arg2 = (vn::math::vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_gyro_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__YawPitchRollTrueInertialAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_gyro_set" "', argument " "1"" of type '" "vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_gyro_set" "', argument " "2"" of type '" "vn::math::vec3f *""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  if (arg1) (arg1)->gyro = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_gyro_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_gyro_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__YawPitchRollTrueInertialAccelerationAndAngularRatesRegister, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_gyro_get" "', argument " "1"" of type '" "vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister * >(argp1);
  result = (vn::math::vec3f *)& ((arg1)->gyro);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__math__vecT_3_float_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister")) SWIG_fail;
  result = (vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *)new vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__YawPitchRollTrueInertialAccelerationAndAngularRatesRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::math::vec3f arg1 ;
  vn::math::vec3f arg2 ;
  vn::math::vec3f arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister" "', argument " "1"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister" "', argument " "1"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister" "', argument " "2"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister" "', argument " "2"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister" "', argument " "3"" of type '" "vn::math::vec3f""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister" "', argument " "3"" of type '" "vn::math::vec3f""'");
    } else {
      vn::math::vec3f * temp = reinterpret_cast< vn::math::vec3f * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *)new vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__YawPitchRollTrueInertialAccelerationAndAngularRatesRegister, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister__SWIG_0(self, args);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister()\n"
    "    vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister(vn::math::vec3f,vn::math::vec3f,vn::math::vec3f)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *arg1 = (vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__YawPitchRollTrueInertialAccelerationAndAngularRatesRegister, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister" "', argument " "1"" of type '" "vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__YawPitchRollTrueInertialAccelerationAndAngularRatesRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_str__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__QuaternionMagneticAccelerationAndAngularRatesRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagneticAccelerationAndAngularRatesRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__MagneticAccelerationAndAngularRatesRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::MagneticAccelerationAndAngularRatesRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::MagneticAccelerationAndAngularRatesRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagneticAccelerationAndAngularRatesRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::MagneticAccelerationAndAngularRatesRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagneticAndGravityReferenceVectorsRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__MagneticAndGravityReferenceVectorsRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::MagneticAndGravityReferenceVectorsRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::MagneticAndGravityReferenceVectorsRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagneticAndGravityReferenceVectorsRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::MagneticAndGravityReferenceVectorsRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterMeasurementsVarianceParametersRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__FilterMeasurementsVarianceParametersRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::FilterMeasurementsVarianceParametersRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::FilterMeasurementsVarianceParametersRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterMeasurementsVarianceParametersRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::FilterMeasurementsVarianceParametersRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagnetometerCompensationRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__MagnetometerCompensationRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::MagnetometerCompensationRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::MagnetometerCompensationRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagnetometerCompensationRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::MagnetometerCompensationRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterActiveTuningParametersRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__FilterActiveTuningParametersRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::FilterActiveTuningParametersRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::FilterActiveTuningParametersRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterActiveTuningParametersRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::FilterActiveTuningParametersRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::AccelerationCompensationRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__AccelerationCompensationRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::AccelerationCompensationRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::AccelerationCompensationRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::AccelerationCompensationRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::AccelerationCompensationRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__YawPitchRollMagneticAccelerationAndAngularRatesRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CommunicationProtocolControlRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::CommunicationProtocolControlRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::CommunicationProtocolControlRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CommunicationProtocolControlRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::CommunicationProtocolControlRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationControlRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__SynchronizationControlRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::SynchronizationControlRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::SynchronizationControlRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::SynchronizationControlRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::SynchronizationControlRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::SynchronizationStatusRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__SynchronizationStatusRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::SynchronizationStatusRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::SynchronizationStatusRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::SynchronizationStatusRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::SynchronizationStatusRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::FilterBasicControlRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__FilterBasicControlRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::FilterBasicControlRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::FilterBasicControlRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::FilterBasicControlRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::FilterBasicControlRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeBasicControlRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__VpeBasicControlRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::VpeBasicControlRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::VpeBasicControlRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeBasicControlRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::VpeBasicControlRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeMagnetometerBasicTuningRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__VpeMagnetometerBasicTuningRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::VpeMagnetometerBasicTuningRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::VpeMagnetometerBasicTuningRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeMagnetometerBasicTuningRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::VpeMagnetometerBasicTuningRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeMagnetometerAdvancedTuningRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::VpeMagnetometerAdvancedTuningRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::VpeMagnetometerAdvancedTuningRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeMagnetometerAdvancedTuningRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::VpeMagnetometerAdvancedTuningRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeAccelerometerBasicTuningRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__VpeAccelerometerBasicTuningRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::VpeAccelerometerBasicTuningRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::VpeAccelerometerBasicTuningRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeAccelerometerBasicTuningRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::VpeAccelerometerBasicTuningRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeAccelerometerAdvancedTuningRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::VpeAccelerometerAdvancedTuningRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::VpeAccelerometerAdvancedTuningRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeAccelerometerAdvancedTuningRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::VpeAccelerometerAdvancedTuningRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_17(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VpeGyroBasicTuningRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__VpeGyroBasicTuningRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::VpeGyroBasicTuningRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::VpeGyroBasicTuningRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VpeGyroBasicTuningRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::VpeGyroBasicTuningRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_18(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::MagnetometerCalibrationControlRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__MagnetometerCalibrationControlRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::MagnetometerCalibrationControlRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::MagnetometerCalibrationControlRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::MagnetometerCalibrationControlRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::MagnetometerCalibrationControlRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_19(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CalculatedMagnetometerCalibrationRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__CalculatedMagnetometerCalibrationRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::CalculatedMagnetometerCalibrationRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::CalculatedMagnetometerCalibrationRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CalculatedMagnetometerCalibrationRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::CalculatedMagnetometerCalibrationRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_20(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VelocityCompensationControlRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__VelocityCompensationControlRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::VelocityCompensationControlRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::VelocityCompensationControlRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VelocityCompensationControlRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::VelocityCompensationControlRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_21(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VelocityCompensationStatusRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__VelocityCompensationStatusRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::VelocityCompensationStatusRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::VelocityCompensationStatusRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VelocityCompensationStatusRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::VelocityCompensationStatusRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_22(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuMeasurementsRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__ImuMeasurementsRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::ImuMeasurementsRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::ImuMeasurementsRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuMeasurementsRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::ImuMeasurementsRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_23(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsConfigurationRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__GpsConfigurationRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::GpsConfigurationRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::GpsConfigurationRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsConfigurationRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::GpsConfigurationRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_24(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionLlaRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::GpsSolutionLlaRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::GpsSolutionLlaRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionLlaRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::GpsSolutionLlaRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_25(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsSolutionEcefRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::GpsSolutionEcefRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::GpsSolutionEcefRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsSolutionEcefRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::GpsSolutionEcefRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_26(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionLlaRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::InsSolutionLlaRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::InsSolutionLlaRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionLlaRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::InsSolutionLlaRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_27(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsSolutionEcefRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::InsSolutionEcefRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::InsSolutionEcefRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsSolutionEcefRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::InsSolutionEcefRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_28(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsBasicConfigurationRegisterVn200 *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn200,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn200 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn200 const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsBasicConfigurationRegisterVn200 * >(argp1);
  result = vn::sensors::str((vn::sensors::InsBasicConfigurationRegisterVn200 const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_29(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsBasicConfigurationRegisterVn300 *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn300,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn300 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn300 const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsBasicConfigurationRegisterVn300 * >(argp1);
  result = vn::sensors::str((vn::sensors::InsBasicConfigurationRegisterVn300 const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsAdvancedConfigurationRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::InsAdvancedConfigurationRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::InsAdvancedConfigurationRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_31(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateLlaRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__InsStateLlaRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::InsStateLlaRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::InsStateLlaRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsStateLlaRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::InsStateLlaRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::InsStateEcefRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__InsStateEcefRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::InsStateEcefRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::InsStateEcefRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::InsStateEcefRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::InsStateEcefRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_33(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::StartupFilterBiasEstimateRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__StartupFilterBiasEstimateRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::StartupFilterBiasEstimateRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::StartupFilterBiasEstimateRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::StartupFilterBiasEstimateRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::StartupFilterBiasEstimateRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_34(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::DeltaThetaAndDeltaVelocityRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::DeltaThetaAndDeltaVelocityRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::DeltaThetaAndDeltaVelocityRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_35(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_36(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ReferenceVectorConfigurationRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::ReferenceVectorConfigurationRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::ReferenceVectorConfigurationRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ReferenceVectorConfigurationRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::ReferenceVectorConfigurationRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_37(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GyroCompensationRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__GyroCompensationRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::GyroCompensationRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::GyroCompensationRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GyroCompensationRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::GyroCompensationRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_38(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuFilteringConfigurationRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::ImuFilteringConfigurationRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::ImuFilteringConfigurationRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::ImuFilteringConfigurationRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_39(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsCompassBaselineRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__GpsCompassBaselineRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::GpsCompassBaselineRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::GpsCompassBaselineRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsCompassBaselineRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::GpsCompassBaselineRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_40(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::GpsCompassEstimatedBaselineRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__GpsCompassEstimatedBaselineRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::GpsCompassEstimatedBaselineRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::GpsCompassEstimatedBaselineRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::GpsCompassEstimatedBaselineRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::GpsCompassEstimatedBaselineRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_41(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::ImuRateConfigurationRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__ImuRateConfigurationRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::ImuRateConfigurationRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::ImuRateConfigurationRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::ImuRateConfigurationRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::ImuRateConfigurationRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_42(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__YawPitchRollTrueBodyAccelerationAndAngularRatesRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str__SWIG_43(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__YawPitchRollTrueInertialAccelerationAndAngularRatesRegister,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "str" "', argument " "1"" of type '" "vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "str" "', argument " "1"" of type '" "vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister * >(argp1);
  result = vn::sensors::str((vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_str(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__QuaternionMagneticAccelerationAndAngularRatesRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__MagneticAccelerationAndAngularRatesRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__MagneticAndGravityReferenceVectorsRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__FilterMeasurementsVarianceParametersRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__MagnetometerCompensationRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__FilterActiveTuningParametersRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__AccelerationCompensationRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_6(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__YawPitchRollMagneticAccelerationAndAngularRatesRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_7(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_8(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__SynchronizationControlRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_9(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__SynchronizationStatusRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_10(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__FilterBasicControlRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_11(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__VpeBasicControlRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_12(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__VpeMagnetometerBasicTuningRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_13(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_14(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__VpeAccelerometerBasicTuningRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_15(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_16(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__VpeGyroBasicTuningRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_17(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__MagnetometerCalibrationControlRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_18(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__CalculatedMagnetometerCalibrationRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_19(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__VelocityCompensationControlRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_20(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__VelocityCompensationStatusRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_21(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__ImuMeasurementsRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_22(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__GpsConfigurationRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_23(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_24(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_25(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_26(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_27(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn200, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_28(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn300, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_29(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_30(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__InsStateLlaRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_31(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__InsStateEcefRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_32(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__StartupFilterBiasEstimateRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_33(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_34(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_35(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_36(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__GyroCompensationRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_37(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_38(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__GpsCompassBaselineRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_39(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__GpsCompassEstimatedBaselineRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_40(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__ImuRateConfigurationRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_41(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__YawPitchRollTrueBodyAccelerationAndAngularRatesRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_42(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__YawPitchRollTrueInertialAccelerationAndAngularRatesRegister, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_str__SWIG_43(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'str'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::str(vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister const &)\n"
    "    vn::sensors::str(vn::sensors::MagneticAccelerationAndAngularRatesRegister const &)\n"
    "    vn::sensors::str(vn::sensors::MagneticAndGravityReferenceVectorsRegister const &)\n"
    "    vn::sensors::str(vn::sensors::FilterMeasurementsVarianceParametersRegister const &)\n"
    "    vn::sensors::str(vn::sensors::MagnetometerCompensationRegister const &)\n"
    "    vn::sensors::str(vn::sensors::FilterActiveTuningParametersRegister const &)\n"
    "    vn::sensors::str(vn::sensors::AccelerationCompensationRegister const &)\n"
    "    vn::sensors::str(vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister const &)\n"
    "    vn::sensors::str(vn::sensors::CommunicationProtocolControlRegister const &)\n"
    "    vn::sensors::str(vn::sensors::SynchronizationControlRegister const &)\n"
    "    vn::sensors::str(vn::sensors::SynchronizationStatusRegister const &)\n"
    "    vn::sensors::str(vn::sensors::FilterBasicControlRegister const &)\n"
    "    vn::sensors::str(vn::sensors::VpeBasicControlRegister const &)\n"
    "    vn::sensors::str(vn::sensors::VpeMagnetometerBasicTuningRegister const &)\n"
    "    vn::sensors::str(vn::sensors::VpeMagnetometerAdvancedTuningRegister const &)\n"
    "    vn::sensors::str(vn::sensors::VpeAccelerometerBasicTuningRegister const &)\n"
    "    vn::sensors::str(vn::sensors::VpeAccelerometerAdvancedTuningRegister const &)\n"
    "    vn::sensors::str(vn::sensors::VpeGyroBasicTuningRegister const &)\n"
    "    vn::sensors::str(vn::sensors::MagnetometerCalibrationControlRegister const &)\n"
    "    vn::sensors::str(vn::sensors::CalculatedMagnetometerCalibrationRegister const &)\n"
    "    vn::sensors::str(vn::sensors::VelocityCompensationControlRegister const &)\n"
    "    vn::sensors::str(vn::sensors::VelocityCompensationStatusRegister const &)\n"
    "    vn::sensors::str(vn::sensors::ImuMeasurementsRegister const &)\n"
    "    vn::sensors::str(vn::sensors::GpsConfigurationRegister const &)\n"
    "    vn::sensors::str(vn::sensors::GpsSolutionLlaRegister const &)\n"
    "    vn::sensors::str(vn::sensors::GpsSolutionEcefRegister const &)\n"
    "    vn::sensors::str(vn::sensors::InsSolutionLlaRegister const &)\n"
    "    vn::sensors::str(vn::sensors::InsSolutionEcefRegister const &)\n"
    "    vn::sensors::str(vn::sensors::InsBasicConfigurationRegisterVn200 const &)\n"
    "    vn::sensors::str(vn::sensors::InsBasicConfigurationRegisterVn300 const &)\n"
    "    vn::sensors::str(vn::sensors::InsAdvancedConfigurationRegister const &)\n"
    "    vn::sensors::str(vn::sensors::InsStateLlaRegister const &)\n"
    "    vn::sensors::str(vn::sensors::InsStateEcefRegister const &)\n"
    "    vn::sensors::str(vn::sensors::StartupFilterBiasEstimateRegister const &)\n"
    "    vn::sensors::str(vn::sensors::DeltaThetaAndDeltaVelocityRegister const &)\n"
    "    vn::sensors::str(vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister const &)\n"
    "    vn::sensors::str(vn::sensors::ReferenceVectorConfigurationRegister const &)\n"
    "    vn::sensors::str(vn::sensors::GyroCompensationRegister const &)\n"
    "    vn::sensors::str(vn::sensors::ImuFilteringConfigurationRegister const &)\n"
    "    vn::sensors::str(vn::sensors::GpsCompassBaselineRegister const &)\n"
    "    vn::sensors::str(vn::sensors::GpsCompassEstimatedBaselineRegister const &)\n"
    "    vn::sensors::str(vn::sensors::ImuRateConfigurationRegister const &)\n"
    "    vn::sensors::str(vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister const &)\n"
    "    vn::sensors::str(vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_50(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::MagneticAndGravityReferenceVectorsRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__MagneticAndGravityReferenceVectorsRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::MagneticAndGravityReferenceVectorsRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::MagneticAndGravityReferenceVectorsRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::MagneticAndGravityReferenceVectorsRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_51(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::MagneticAndGravityReferenceVectorsRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__MagneticAndGravityReferenceVectorsRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::MagneticAndGravityReferenceVectorsRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::MagneticAndGravityReferenceVectorsRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::MagneticAndGravityReferenceVectorsRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_52(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::FilterMeasurementsVarianceParametersRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__FilterMeasurementsVarianceParametersRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::FilterMeasurementsVarianceParametersRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::FilterMeasurementsVarianceParametersRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::FilterMeasurementsVarianceParametersRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_53(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::FilterMeasurementsVarianceParametersRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__FilterMeasurementsVarianceParametersRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::FilterMeasurementsVarianceParametersRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::FilterMeasurementsVarianceParametersRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::FilterMeasurementsVarianceParametersRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_54(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::MagnetometerCompensationRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__MagnetometerCompensationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::MagnetometerCompensationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::MagnetometerCompensationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::MagnetometerCompensationRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_55(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::MagnetometerCompensationRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__MagnetometerCompensationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::MagnetometerCompensationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::MagnetometerCompensationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::MagnetometerCompensationRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_56(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::FilterActiveTuningParametersRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__FilterActiveTuningParametersRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::FilterActiveTuningParametersRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::FilterActiveTuningParametersRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::FilterActiveTuningParametersRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_57(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::FilterActiveTuningParametersRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__FilterActiveTuningParametersRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::FilterActiveTuningParametersRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::FilterActiveTuningParametersRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::FilterActiveTuningParametersRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_58(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::AccelerationCompensationRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__AccelerationCompensationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::AccelerationCompensationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::AccelerationCompensationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::AccelerationCompensationRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_59(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::AccelerationCompensationRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__AccelerationCompensationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::AccelerationCompensationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::AccelerationCompensationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::AccelerationCompensationRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_60(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::CommunicationProtocolControlRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::CommunicationProtocolControlRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::CommunicationProtocolControlRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::CommunicationProtocolControlRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_61(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::CommunicationProtocolControlRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::CommunicationProtocolControlRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::CommunicationProtocolControlRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::CommunicationProtocolControlRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_62(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::SynchronizationControlRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__SynchronizationControlRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::SynchronizationControlRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::SynchronizationControlRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::SynchronizationControlRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_63(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::SynchronizationControlRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__SynchronizationControlRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::SynchronizationControlRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::SynchronizationControlRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::SynchronizationControlRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::SynchronizationStatusRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__SynchronizationStatusRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::SynchronizationStatusRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::SynchronizationStatusRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::SynchronizationStatusRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_65(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::SynchronizationStatusRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__SynchronizationStatusRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::SynchronizationStatusRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::SynchronizationStatusRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::SynchronizationStatusRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_66(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::FilterBasicControlRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__FilterBasicControlRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::FilterBasicControlRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::FilterBasicControlRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::FilterBasicControlRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_67(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::FilterBasicControlRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__FilterBasicControlRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::FilterBasicControlRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::FilterBasicControlRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::FilterBasicControlRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_68(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::VpeBasicControlRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VpeBasicControlRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VpeBasicControlRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VpeBasicControlRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VpeBasicControlRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_69(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::VpeBasicControlRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VpeBasicControlRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VpeBasicControlRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VpeBasicControlRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VpeBasicControlRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_70(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::VpeMagnetometerBasicTuningRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VpeMagnetometerBasicTuningRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VpeMagnetometerBasicTuningRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VpeMagnetometerBasicTuningRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VpeMagnetometerBasicTuningRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_71(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::VpeMagnetometerBasicTuningRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VpeMagnetometerBasicTuningRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VpeMagnetometerBasicTuningRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VpeMagnetometerBasicTuningRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VpeMagnetometerBasicTuningRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_72(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::VpeMagnetometerAdvancedTuningRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VpeMagnetometerAdvancedTuningRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VpeMagnetometerAdvancedTuningRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VpeMagnetometerAdvancedTuningRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_73(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::VpeMagnetometerAdvancedTuningRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VpeMagnetometerAdvancedTuningRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VpeMagnetometerAdvancedTuningRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VpeMagnetometerAdvancedTuningRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_74(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::VpeAccelerometerBasicTuningRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VpeAccelerometerBasicTuningRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VpeAccelerometerBasicTuningRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VpeAccelerometerBasicTuningRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VpeAccelerometerBasicTuningRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_75(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::VpeAccelerometerBasicTuningRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VpeAccelerometerBasicTuningRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VpeAccelerometerBasicTuningRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VpeAccelerometerBasicTuningRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VpeAccelerometerBasicTuningRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_76(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::VpeAccelerometerAdvancedTuningRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VpeAccelerometerAdvancedTuningRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VpeAccelerometerAdvancedTuningRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VpeAccelerometerAdvancedTuningRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_77(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::VpeAccelerometerAdvancedTuningRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VpeAccelerometerAdvancedTuningRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VpeAccelerometerAdvancedTuningRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VpeAccelerometerAdvancedTuningRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_78(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::VpeGyroBasicTuningRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VpeGyroBasicTuningRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VpeGyroBasicTuningRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VpeGyroBasicTuningRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VpeGyroBasicTuningRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_79(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::VpeGyroBasicTuningRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VpeGyroBasicTuningRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VpeGyroBasicTuningRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VpeGyroBasicTuningRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VpeGyroBasicTuningRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_80(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::MagnetometerCalibrationControlRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__MagnetometerCalibrationControlRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::MagnetometerCalibrationControlRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::MagnetometerCalibrationControlRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::MagnetometerCalibrationControlRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_81(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::MagnetometerCalibrationControlRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__MagnetometerCalibrationControlRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::MagnetometerCalibrationControlRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::MagnetometerCalibrationControlRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::MagnetometerCalibrationControlRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_82(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::VelocityCompensationControlRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VelocityCompensationControlRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VelocityCompensationControlRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VelocityCompensationControlRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VelocityCompensationControlRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_83(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::VelocityCompensationControlRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VelocityCompensationControlRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VelocityCompensationControlRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::VelocityCompensationControlRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VelocityCompensationControlRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_84(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::GpsConfigurationRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__GpsConfigurationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::GpsConfigurationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::GpsConfigurationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::GpsConfigurationRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_85(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::GpsConfigurationRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__GpsConfigurationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::GpsConfigurationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::GpsConfigurationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::GpsConfigurationRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_86(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::InsBasicConfigurationRegisterVn200 *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn200,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn200 &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn200 &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::InsBasicConfigurationRegisterVn200 * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_87(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::InsBasicConfigurationRegisterVn200 *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn200,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn200 &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn200 &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::InsBasicConfigurationRegisterVn200 * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_88(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::InsBasicConfigurationRegisterVn300 *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn300,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn300 &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn300 &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::InsBasicConfigurationRegisterVn300 * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_89(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::InsBasicConfigurationRegisterVn300 *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn300,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn300 &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn300 &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::InsBasicConfigurationRegisterVn300 * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_90(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::InsAdvancedConfigurationRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::InsAdvancedConfigurationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::InsAdvancedConfigurationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_91(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::InsAdvancedConfigurationRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::InsAdvancedConfigurationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::InsAdvancedConfigurationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_92(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::StartupFilterBiasEstimateRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__StartupFilterBiasEstimateRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::StartupFilterBiasEstimateRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::StartupFilterBiasEstimateRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::StartupFilterBiasEstimateRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_93(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::StartupFilterBiasEstimateRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__StartupFilterBiasEstimateRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::StartupFilterBiasEstimateRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::StartupFilterBiasEstimateRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::StartupFilterBiasEstimateRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_94(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_95(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_96(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::ReferenceVectorConfigurationRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::ReferenceVectorConfigurationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::ReferenceVectorConfigurationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::ReferenceVectorConfigurationRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_97(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::ReferenceVectorConfigurationRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::ReferenceVectorConfigurationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::ReferenceVectorConfigurationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::ReferenceVectorConfigurationRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_98(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::GyroCompensationRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__GyroCompensationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::GyroCompensationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::GyroCompensationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::GyroCompensationRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_99(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::GyroCompensationRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__GyroCompensationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::GyroCompensationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::GyroCompensationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::GyroCompensationRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_100(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::ImuFilteringConfigurationRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::ImuFilteringConfigurationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::ImuFilteringConfigurationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_101(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::ImuFilteringConfigurationRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::ImuFilteringConfigurationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::ImuFilteringConfigurationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_102(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::GpsCompassBaselineRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__GpsCompassBaselineRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::GpsCompassBaselineRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::GpsCompassBaselineRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::GpsCompassBaselineRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_103(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::GpsCompassBaselineRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__GpsCompassBaselineRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::GpsCompassBaselineRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::GpsCompassBaselineRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::GpsCompassBaselineRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_104(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::ImuRateConfigurationRegister *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:parse",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__ImuRateConfigurationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::ImuRateConfigurationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::ImuRateConfigurationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::ImuRateConfigurationRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parse" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse__SWIG_105(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  vn::sensors::ImuRateConfigurationRegister *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__ImuRateConfigurationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::ImuRateConfigurationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse" "', argument " "2"" of type '" "vn::sensors::ImuRateConfigurationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::ImuRateConfigurationRegister * >(argp2);
  result = (bool)vn::parse((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__AsciiAsync, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__SyncInMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__SyncInEdge, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__SyncOutMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__SyncOutPolarity, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__CountMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_11(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__StatusMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_13(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__ChecksumMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_15(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__ErrorMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_17(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__FilterMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_19(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__IntegrationFrame, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_21(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__CompensationMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_23(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__GpsFix, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_25(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__GpsMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_27(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__PpsSource, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_29(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__VpeEnable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_31(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__HeadingMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_33(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__VpeMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_35(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__Scenario, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_37(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__HsiMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_39(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__HsiOutput, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_41(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__VelocityCompensationMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_43(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__MagneticMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_45(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__ExternalSensorMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_47(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__FoamInit, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_49(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__MagneticAndGravityReferenceVectorsRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_51(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__FilterMeasurementsVarianceParametersRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_53(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__MagnetometerCompensationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_55(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__FilterActiveTuningParametersRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_57(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__AccelerationCompensationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_59(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_61(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__SynchronizationControlRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_63(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__SynchronizationStatusRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_65(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__FilterBasicControlRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_67(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VpeBasicControlRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_69(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VpeMagnetometerBasicTuningRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_71(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_73(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VpeAccelerometerBasicTuningRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_75(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_77(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VpeGyroBasicTuningRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_79(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__MagnetometerCalibrationControlRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_81(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VelocityCompensationControlRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_83(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__GpsConfigurationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_85(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn200, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_87(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn300, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_89(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_91(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__StartupFilterBiasEstimateRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_93(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_95(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_97(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__GyroCompensationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_99(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_101(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__GpsCompassBaselineRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_103(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__ImuRateConfigurationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse__SWIG_105(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__GpsMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_26(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__MagnetometerCompensationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_54(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__SyncOutMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__FilterActiveTuningParametersRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_56(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__PpsSource, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_28(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__AccelerationCompensationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_58(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__ChecksumMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_14(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_60(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__VpeEnable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_30(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__SynchronizationControlRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_62(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__AsciiAsync, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__SynchronizationStatusRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_64(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__HeadingMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_32(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__FilterBasicControlRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_66(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__ErrorMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_16(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VpeBasicControlRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_68(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__VpeMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_34(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VpeMagnetometerBasicTuningRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_70(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__SyncOutPolarity, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_72(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__Scenario, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_36(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VpeAccelerometerBasicTuningRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_74(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__FilterMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_18(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_76(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__HsiMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_38(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VpeGyroBasicTuningRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_78(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__SyncInEdge, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__MagnetometerCalibrationControlRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_80(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__HsiOutput, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_40(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VelocityCompensationControlRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_82(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__IntegrationFrame, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_20(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__GpsConfigurationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_84(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__VelocityCompensationMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_42(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn200, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_86(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__CountMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_10(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn300, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_88(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__MagneticMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_44(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_90(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__CompensationMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_22(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__StartupFilterBiasEstimateRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_92(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__ExternalSensorMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_46(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_94(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__SyncInMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_96(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__FoamInit, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_48(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__GyroCompensationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_98(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__GpsFix, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_24(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_100(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__MagneticAndGravityReferenceVectorsRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_50(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__GpsCompassBaselineRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_102(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__protocol__uart__StatusMode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_12(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__ImuRateConfigurationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_104(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__FilterMeasurementsVarianceParametersRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parse__SWIG_52(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'parse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::parse(std::string const &,vn::protocol::uart::AsciiAsync &,bool)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::AsciiAsync &)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::SyncInMode &,bool)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::SyncInMode &)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::SyncInEdge &,bool)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::SyncInEdge &)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::SyncOutMode &,bool)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::SyncOutMode &)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::SyncOutPolarity &,bool)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::SyncOutPolarity &)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::CountMode &,bool)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::CountMode &)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::StatusMode &,bool)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::StatusMode &)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::ChecksumMode &,bool)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::ChecksumMode &)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::ErrorMode &,bool)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::ErrorMode &)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::FilterMode &,bool)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::FilterMode &)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::IntegrationFrame &,bool)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::IntegrationFrame &)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::CompensationMode &,bool)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::CompensationMode &)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::GpsFix &,bool)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::GpsFix &)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::GpsMode &,bool)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::GpsMode &)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::PpsSource &,bool)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::PpsSource &)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::VpeEnable &,bool)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::VpeEnable &)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::HeadingMode &,bool)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::HeadingMode &)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::VpeMode &,bool)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::VpeMode &)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::Scenario &,bool)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::Scenario &)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::HsiMode &,bool)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::HsiMode &)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::HsiOutput &,bool)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::HsiOutput &)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::VelocityCompensationMode &,bool)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::VelocityCompensationMode &)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::MagneticMode &,bool)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::MagneticMode &)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::ExternalSensorMode &,bool)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::ExternalSensorMode &)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::FoamInit &,bool)\n"
    "    vn::parse(std::string const &,vn::protocol::uart::FoamInit &)\n"
    "    vn::parse(std::string const &,vn::sensors::MagneticAndGravityReferenceVectorsRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::MagneticAndGravityReferenceVectorsRegister &)\n"
    "    vn::parse(std::string const &,vn::sensors::FilterMeasurementsVarianceParametersRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::FilterMeasurementsVarianceParametersRegister &)\n"
    "    vn::parse(std::string const &,vn::sensors::MagnetometerCompensationRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::MagnetometerCompensationRegister &)\n"
    "    vn::parse(std::string const &,vn::sensors::FilterActiveTuningParametersRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::FilterActiveTuningParametersRegister &)\n"
    "    vn::parse(std::string const &,vn::sensors::AccelerationCompensationRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::AccelerationCompensationRegister &)\n"
    "    vn::parse(std::string const &,vn::sensors::CommunicationProtocolControlRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::CommunicationProtocolControlRegister &)\n"
    "    vn::parse(std::string const &,vn::sensors::SynchronizationControlRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::SynchronizationControlRegister &)\n"
    "    vn::parse(std::string const &,vn::sensors::SynchronizationStatusRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::SynchronizationStatusRegister &)\n"
    "    vn::parse(std::string const &,vn::sensors::FilterBasicControlRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::FilterBasicControlRegister &)\n"
    "    vn::parse(std::string const &,vn::sensors::VpeBasicControlRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::VpeBasicControlRegister &)\n"
    "    vn::parse(std::string const &,vn::sensors::VpeMagnetometerBasicTuningRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::VpeMagnetometerBasicTuningRegister &)\n"
    "    vn::parse(std::string const &,vn::sensors::VpeMagnetometerAdvancedTuningRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::VpeMagnetometerAdvancedTuningRegister &)\n"
    "    vn::parse(std::string const &,vn::sensors::VpeAccelerometerBasicTuningRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::VpeAccelerometerBasicTuningRegister &)\n"
    "    vn::parse(std::string const &,vn::sensors::VpeAccelerometerAdvancedTuningRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::VpeAccelerometerAdvancedTuningRegister &)\n"
    "    vn::parse(std::string const &,vn::sensors::VpeGyroBasicTuningRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::VpeGyroBasicTuningRegister &)\n"
    "    vn::parse(std::string const &,vn::sensors::MagnetometerCalibrationControlRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::MagnetometerCalibrationControlRegister &)\n"
    "    vn::parse(std::string const &,vn::sensors::VelocityCompensationControlRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::VelocityCompensationControlRegister &)\n"
    "    vn::parse(std::string const &,vn::sensors::GpsConfigurationRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::GpsConfigurationRegister &)\n"
    "    vn::parse(std::string const &,vn::sensors::InsBasicConfigurationRegisterVn200 &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::InsBasicConfigurationRegisterVn200 &)\n"
    "    vn::parse(std::string const &,vn::sensors::InsBasicConfigurationRegisterVn300 &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::InsBasicConfigurationRegisterVn300 &)\n"
    "    vn::parse(std::string const &,vn::sensors::InsAdvancedConfigurationRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::InsAdvancedConfigurationRegister &)\n"
    "    vn::parse(std::string const &,vn::sensors::StartupFilterBiasEstimateRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::StartupFilterBiasEstimateRegister &)\n"
    "    vn::parse(std::string const &,vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister &)\n"
    "    vn::parse(std::string const &,vn::sensors::ReferenceVectorConfigurationRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::ReferenceVectorConfigurationRegister &)\n"
    "    vn::parse(std::string const &,vn::sensors::GyroCompensationRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::GyroCompensationRegister &)\n"
    "    vn::parse(std::string const &,vn::sensors::ImuFilteringConfigurationRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::ImuFilteringConfigurationRegister &)\n"
    "    vn::parse(std::string const &,vn::sensors::GpsCompassBaselineRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::GpsCompassBaselineRegister &)\n"
    "    vn::parse(std::string const &,vn::sensors::ImuRateConfigurationRegister &,bool)\n"
    "    vn::parse(std::string const &,vn::sensors::ImuRateConfigurationRegister &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VnSensor___supported_baudrates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t,std::allocator< uint32_t > > result;
  
  if (!PyArg_ParseTuple(args,(char *)":VnSensor___supported_baudrates")) SWIG_fail;
  result = vn::sensors::VnSensor::supportedBaudrates();
  resultobj = SWIG_NewPointerObj((new std::vector< uint32_t,std::allocator< uint32_t > >(static_cast< const std::vector< uint32_t,std::allocator< uint32_t > >& >(result))), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_supportedAsyncDataOutputFrequencies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t,std::allocator< uint32_t > > result;
  
  if (!PyArg_ParseTuple(args,(char *)":VnSensor_supportedAsyncDataOutputFrequencies")) SWIG_fail;
  result = vn::sensors::VnSensor::supportedAsyncDataOutputFrequencies();
  resultobj = SWIG_NewPointerObj((new std::vector< uint32_t,std::allocator< uint32_t > >(static_cast< const std::vector< uint32_t,std::allocator< uint32_t > >& >(result))), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VnSensor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VnSensor")) SWIG_fail;
  result = (vn::sensors::VnSensor *)new vn::sensors::VnSensor();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__VnSensor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VnSensor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VnSensor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VnSensor" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_verify_sensor_connectivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_verify_sensor_connectivity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_verify_sensor_connectivity" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (bool)(arg1)->verifySensorConnectivity();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_connect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  std::string *arg2 = 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_connect",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_connect" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_connect" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_connect" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_connect" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  (arg1)->connect((std::string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_connect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::xplat::IPort *arg2 = (vn::xplat::IPort *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_connect",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_connect" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vn__xplat__IPort, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_connect" "', argument " "2"" of type '" "vn::xplat::IPort *""'"); 
  }
  arg2 = reinterpret_cast< vn::xplat::IPort * >(argp2);
  (arg1)->connect(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_connect(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__xplat__IPort, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_connect__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_connect__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_connect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::connect(std::string const &,uint32_t)\n"
    "    vn::sensors::VnSensor::connect(vn::xplat::IPort *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_disconnect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_disconnect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_disconnect" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  (arg1)->disconnect();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_transaction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_transaction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_transaction" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "VnSensor_transaction" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (arg1)->transaction(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_tare__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_tare",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_tare" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_tare" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->tare(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_tare__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_tare",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_tare" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  (arg1)->tare();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_tare(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VnSensor_tare__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VnSensor_tare__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_tare'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::tare(bool)\n"
    "    vn::sensors::VnSensor::tare()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_set_gyro_bias__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_set_gyro_bias",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_set_gyro_bias" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_set_gyro_bias" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setGyroBias(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_set_gyro_bias__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_set_gyro_bias",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_set_gyro_bias" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  (arg1)->setGyroBias();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_set_gyro_bias(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VnSensor_set_gyro_bias__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VnSensor_set_gyro_bias__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_set_gyro_bias'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::setGyroBias(bool)\n"
    "    vn::sensors::VnSensor::setGyroBias()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_magnetic_disturbance_present__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  bool arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_magnetic_disturbance_present",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_magnetic_disturbance_present" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_magnetic_disturbance_present" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_magnetic_disturbance_present" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->magneticDisturbancePresent(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_magnetic_disturbance_present__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_magnetic_disturbance_present",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_magnetic_disturbance_present" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_magnetic_disturbance_present" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->magneticDisturbancePresent(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_magnetic_disturbance_present(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VnSensor_magnetic_disturbance_present__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_magnetic_disturbance_present__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_magnetic_disturbance_present'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::magneticDisturbancePresent(bool,bool)\n"
    "    vn::sensors::VnSensor::magneticDisturbancePresent(bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_acceleration_disturbance_present__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  bool arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_acceleration_disturbance_present",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_acceleration_disturbance_present" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_acceleration_disturbance_present" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_acceleration_disturbance_present" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->accelerationDisturbancePresent(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_acceleration_disturbance_present__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_acceleration_disturbance_present",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_acceleration_disturbance_present" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_acceleration_disturbance_present" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->accelerationDisturbancePresent(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_acceleration_disturbance_present(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VnSensor_acceleration_disturbance_present__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_acceleration_disturbance_present__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_acceleration_disturbance_present'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::accelerationDisturbancePresent(bool,bool)\n"
    "    vn::sensors::VnSensor::accelerationDisturbancePresent(bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_settings__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_settings",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_settings" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_settings" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->writeSettings(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_settings__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_write_settings",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_settings" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  (arg1)->writeSettings();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_settings(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VnSensor_write_settings__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VnSensor_write_settings__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_settings'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeSettings(bool)\n"
    "    vn::sensors::VnSensor::writeSettings()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_restore_factory_settings__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_restore_factory_settings",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_restore_factory_settings" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_restore_factory_settings" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->restoreFactorySettings(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_restore_factory_settings__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_restore_factory_settings",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_restore_factory_settings" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  (arg1)->restoreFactorySettings();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_restore_factory_settings(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VnSensor_restore_factory_settings__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VnSensor_restore_factory_settings__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_restore_factory_settings'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::restoreFactorySettings(bool)\n"
    "    vn::sensors::VnSensor::restoreFactorySettings()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_reset" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_reset" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->reset(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_reset" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  (arg1)->reset();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_reset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VnSensor_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VnSensor_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::reset(bool)\n"
    "    vn::sensors::VnSensor::reset()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_change_baudrate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint32_t arg2 ;
  bool arg3 ;
  uint8_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VnSensor_change_baudrate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_change_baudrate" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_change_baudrate" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_change_baudrate" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_change_baudrate" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = static_cast< uint8_t >(val4);
  (arg1)->changeBaudRate(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_change_baudrate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint32_t arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_change_baudrate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_change_baudrate" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_change_baudrate" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_change_baudrate" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->changeBaudRate(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_change_baudrate__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_change_baudrate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_change_baudrate" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_change_baudrate" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  (arg1)->changeBaudRate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_change_baudrate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VnSensor_change_baudrate__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_change_baudrate__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_VnSensor_change_baudrate__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_change_baudrate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::changeBaudRate(uint32_t,bool,uint8_t)\n"
    "    vn::sensors::VnSensor::changeBaudRate(uint32_t,bool)\n"
    "    vn::sensors::VnSensor::changeBaudRate(uint32_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_determine_device_family__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::VnSensor::Family result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_determine_device_family",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_determine_device_family" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (vn::sensors::VnSensor::Family)(arg1)->determineDeviceFamily();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_determine_device_family__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  vn::sensors::VnSensor::Family result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_determine_device_family",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "VnSensor_determine_device_family" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (vn::sensors::VnSensor::Family)vn::sensors::VnSensor::determineDeviceFamily(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_determine_device_family(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VnSensor_determine_device_family__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VnSensor_determine_device_family__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_determine_device_family'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::determineDeviceFamily()\n"
    "    vn::sensors::VnSensor::determineDeviceFamily(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_registerRawDataReceivedHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *arg2 = (void *) 0 ;
  vn::sensors::VnSensor::RawDataReceivedHandler arg3 = (vn::sensors::VnSensor::RawDataReceivedHandler) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_registerRawDataReceivedHandler",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_registerRawDataReceivedHandler" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_registerRawDataReceivedHandler" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    int res = SWIG_ConvertFunctionPtr(obj2, (void**)(&arg3), SWIGTYPE_p_f_p_void_p_q_const__char_size_t_size_t__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "VnSensor_registerRawDataReceivedHandler" "', argument " "3"" of type '" "vn::sensors::VnSensor::RawDataReceivedHandler""'"); 
    }
  }
  (arg1)->registerRawDataReceivedHandler(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_unregisterRawDataReceivedHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_unregisterRawDataReceivedHandler",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_unregisterRawDataReceivedHandler" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  (arg1)->unregisterRawDataReceivedHandler();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_registerPossiblePacketFoundHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *arg2 = (void *) 0 ;
  vn::sensors::VnSensor::PossiblePacketFoundHandler arg3 = (vn::sensors::VnSensor::PossiblePacketFoundHandler) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_registerPossiblePacketFoundHandler",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_registerPossiblePacketFoundHandler" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_registerPossiblePacketFoundHandler" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    int res = SWIG_ConvertFunctionPtr(obj2, (void**)(&arg3), SWIGTYPE_p_f_p_void_r_vn__protocol__uart__Packet_size_t__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "VnSensor_registerPossiblePacketFoundHandler" "', argument " "3"" of type '" "vn::sensors::VnSensor::PossiblePacketFoundHandler""'"); 
    }
  }
  (arg1)->registerPossiblePacketFoundHandler(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_unregisterPossiblePacketFoundHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_unregisterPossiblePacketFoundHandler",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_unregisterPossiblePacketFoundHandler" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  (arg1)->unregisterPossiblePacketFoundHandler();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_registerAsyncPacketReceivedHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *arg2 = (void *) 0 ;
  vn::sensors::VnSensor::AsyncPacketReceivedHandler arg3 = (vn::sensors::VnSensor::AsyncPacketReceivedHandler) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_registerAsyncPacketReceivedHandler",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_registerAsyncPacketReceivedHandler" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_registerAsyncPacketReceivedHandler" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    int res = SWIG_ConvertFunctionPtr(obj2, (void**)(&arg3), SWIGTYPE_p_f_p_void_r_vn__protocol__uart__Packet_size_t__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "VnSensor_registerAsyncPacketReceivedHandler" "', argument " "3"" of type '" "vn::sensors::VnSensor::AsyncPacketReceivedHandler""'"); 
    }
  }
  (arg1)->registerAsyncPacketReceivedHandler(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_unregisterAsyncPacketReceivedHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_unregisterAsyncPacketReceivedHandler",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_unregisterAsyncPacketReceivedHandler" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  (arg1)->unregisterAsyncPacketReceivedHandler();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_registerErrorPacketReceivedHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *arg2 = (void *) 0 ;
  vn::sensors::VnSensor::ErrorPacketReceivedHandler arg3 = (vn::sensors::VnSensor::ErrorPacketReceivedHandler) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_registerErrorPacketReceivedHandler",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_registerErrorPacketReceivedHandler" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_registerErrorPacketReceivedHandler" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    int res = SWIG_ConvertFunctionPtr(obj2, (void**)(&arg3), SWIGTYPE_p_f_p_void_r_vn__protocol__uart__Packet_size_t__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "VnSensor_registerErrorPacketReceivedHandler" "', argument " "3"" of type '" "vn::sensors::VnSensor::ErrorPacketReceivedHandler""'"); 
    }
  }
  (arg1)->registerErrorPacketReceivedHandler(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_unregisterErrorPacketReceivedHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_unregisterErrorPacketReceivedHandler",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_unregisterErrorPacketReceivedHandler" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  (arg1)->unregisterErrorPacketReceivedHandler();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_registerUsbCableUnpluggedNotificationHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *arg2 = (void *) 0 ;
  void (*arg3)(void *) = (void (*)(void *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_registerUsbCableUnpluggedNotificationHandler",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_registerUsbCableUnpluggedNotificationHandler" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_registerUsbCableUnpluggedNotificationHandler" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    int res = SWIG_ConvertFunctionPtr(obj2, (void**)(&arg3), SWIGTYPE_p_f_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "VnSensor_registerUsbCableUnpluggedNotificationHandler" "', argument " "3"" of type '" "void (*)(void *)""'"); 
    }
  }
  (arg1)->registerUsbCableUnpluggedNotificationHandler(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_unregisterUsbCableUnpluggedNotificationHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_unregisterUsbCableUnpluggedNotificationHandler",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_unregisterUsbCableUnpluggedNotificationHandler" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  (arg1)->unregisterUsbCableUnpluggedNotificationHandler();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_binary_output_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::BinaryOutputRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_binary_output_1",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_binary_output_1" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readBinaryOutput1();
  resultobj = SWIG_NewPointerObj((new vn::sensors::BinaryOutputRegister(static_cast< const vn::sensors::BinaryOutputRegister& >(result))), SWIGTYPE_p_vn__sensors__BinaryOutputRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_binary_output_1__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::BinaryOutputRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_binary_output_1",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_binary_output_1" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__BinaryOutputRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_binary_output_1" "', argument " "2"" of type '" "vn::sensors::BinaryOutputRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_binary_output_1" "', argument " "2"" of type '" "vn::sensors::BinaryOutputRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::BinaryOutputRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_binary_output_1" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeBinaryOutput1(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_binary_output_1__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::BinaryOutputRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_binary_output_1",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_binary_output_1" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__BinaryOutputRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_binary_output_1" "', argument " "2"" of type '" "vn::sensors::BinaryOutputRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_binary_output_1" "', argument " "2"" of type '" "vn::sensors::BinaryOutputRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::BinaryOutputRegister * >(argp2);
  (arg1)->writeBinaryOutput1(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_binary_output_1(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__BinaryOutputRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_binary_output_1__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__BinaryOutputRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_binary_output_1__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_binary_output_1'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeBinaryOutput1(vn::sensors::BinaryOutputRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeBinaryOutput1(vn::sensors::BinaryOutputRegister &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_binary_output_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::BinaryOutputRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_binary_output_2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_binary_output_2" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readBinaryOutput2();
  resultobj = SWIG_NewPointerObj((new vn::sensors::BinaryOutputRegister(static_cast< const vn::sensors::BinaryOutputRegister& >(result))), SWIGTYPE_p_vn__sensors__BinaryOutputRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_binary_output_2__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::BinaryOutputRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_binary_output_2",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_binary_output_2" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__BinaryOutputRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_binary_output_2" "', argument " "2"" of type '" "vn::sensors::BinaryOutputRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_binary_output_2" "', argument " "2"" of type '" "vn::sensors::BinaryOutputRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::BinaryOutputRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_binary_output_2" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeBinaryOutput2(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_binary_output_2__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::BinaryOutputRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_binary_output_2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_binary_output_2" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__BinaryOutputRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_binary_output_2" "', argument " "2"" of type '" "vn::sensors::BinaryOutputRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_binary_output_2" "', argument " "2"" of type '" "vn::sensors::BinaryOutputRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::BinaryOutputRegister * >(argp2);
  (arg1)->writeBinaryOutput2(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_binary_output_2(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__BinaryOutputRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_binary_output_2__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__BinaryOutputRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_binary_output_2__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_binary_output_2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeBinaryOutput2(vn::sensors::BinaryOutputRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeBinaryOutput2(vn::sensors::BinaryOutputRegister &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_binary_output_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::BinaryOutputRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_binary_output_3",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_binary_output_3" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readBinaryOutput3();
  resultobj = SWIG_NewPointerObj((new vn::sensors::BinaryOutputRegister(static_cast< const vn::sensors::BinaryOutputRegister& >(result))), SWIGTYPE_p_vn__sensors__BinaryOutputRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_binary_output_3__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::BinaryOutputRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_binary_output_3",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_binary_output_3" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__BinaryOutputRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_binary_output_3" "', argument " "2"" of type '" "vn::sensors::BinaryOutputRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_binary_output_3" "', argument " "2"" of type '" "vn::sensors::BinaryOutputRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::BinaryOutputRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_binary_output_3" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeBinaryOutput3(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_binary_output_3__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::BinaryOutputRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_binary_output_3",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_binary_output_3" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__BinaryOutputRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_binary_output_3" "', argument " "2"" of type '" "vn::sensors::BinaryOutputRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_binary_output_3" "', argument " "2"" of type '" "vn::sensors::BinaryOutputRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::BinaryOutputRegister * >(argp2);
  (arg1)->writeBinaryOutput3(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_binary_output_3(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__BinaryOutputRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_binary_output_3__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__BinaryOutputRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_binary_output_3__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_binary_output_3'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeBinaryOutput3(vn::sensors::BinaryOutputRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeBinaryOutput3(vn::sensors::BinaryOutputRegister &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_serial_baudrate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_read_serial_baudrate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_serial_baudrate" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_read_serial_baudrate" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  result = (uint32_t)(arg1)->readSerialBaudRate(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_serial_baudrate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint32_t *arg2 = 0 ;
  uint8_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VnSensor_write_serial_baudrate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_serial_baudrate" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_serial_baudrate" "', argument " "2"" of type '" "uint32_t""'");
  } 
  temp2 = static_cast< uint32_t >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_serial_baudrate" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_serial_baudrate" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->writeSerialBaudRate((uint32_t const &)*arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_serial_baudrate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint32_t *arg2 = 0 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_serial_baudrate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_serial_baudrate" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_serial_baudrate" "', argument " "2"" of type '" "uint32_t""'");
  } 
  temp2 = static_cast< uint32_t >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_serial_baudrate" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  (arg1)->writeSerialBaudRate((uint32_t const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_async_data_output_type__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::protocol::uart::AsciiAsync result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_read_async_data_output_type",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_async_data_output_type" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_read_async_data_output_type" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  result = (vn::protocol::uart::AsciiAsync)(arg1)->readAsyncDataOutputType(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_async_data_output_type__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::protocol::uart::AsciiAsync arg2 ;
  uint8_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VnSensor_write_async_data_output_type",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_async_data_output_type" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_async_data_output_type" "', argument " "2"" of type '" "vn::protocol::uart::AsciiAsync""'");
  } 
  arg2 = static_cast< vn::protocol::uart::AsciiAsync >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_async_data_output_type" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_async_data_output_type" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->writeAsyncDataOutputType(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_async_data_output_type__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::protocol::uart::AsciiAsync arg2 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_async_data_output_type",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_async_data_output_type" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_async_data_output_type" "', argument " "2"" of type '" "vn::protocol::uart::AsciiAsync""'");
  } 
  arg2 = static_cast< vn::protocol::uart::AsciiAsync >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_async_data_output_type" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  (arg1)->writeAsyncDataOutputType(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_async_data_output_frequency__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_read_async_data_output_frequency",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_async_data_output_frequency" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_read_async_data_output_frequency" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  result = (uint32_t)(arg1)->readAsyncDataOutputFrequency(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_async_data_output_frequency__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint32_t *arg2 = 0 ;
  uint8_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VnSensor_write_async_data_output_frequency",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_async_data_output_frequency" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_async_data_output_frequency" "', argument " "2"" of type '" "uint32_t""'");
  } 
  temp2 = static_cast< uint32_t >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_async_data_output_frequency" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_async_data_output_frequency" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->writeAsyncDataOutputFrequency((uint32_t const &)*arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_async_data_output_frequency__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint32_t *arg2 = 0 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_async_data_output_frequency",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_async_data_output_frequency" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_async_data_output_frequency" "', argument " "2"" of type '" "uint32_t""'");
  } 
  temp2 = static_cast< uint32_t >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_async_data_output_frequency" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  (arg1)->writeAsyncDataOutputFrequency((uint32_t const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_ins_basic_configuration_vn200(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::InsBasicConfigurationRegisterVn200 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_ins_basic_configuration_vn200",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_ins_basic_configuration_vn200" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readInsBasicConfigurationVn200();
  resultobj = SWIG_NewPointerObj((new vn::sensors::InsBasicConfigurationRegisterVn200(static_cast< const vn::sensors::InsBasicConfigurationRegisterVn200& >(result))), SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn200, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_ins_basic_configuration_vn200__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::InsBasicConfigurationRegisterVn200 *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_ins_basic_configuration_vn200",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_ins_basic_configuration_vn200" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn200,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_ins_basic_configuration_vn200" "', argument " "2"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn200 &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_ins_basic_configuration_vn200" "', argument " "2"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn200 &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::InsBasicConfigurationRegisterVn200 * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_ins_basic_configuration_vn200" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeInsBasicConfigurationVn200(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_ins_basic_configuration_vn200__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::InsBasicConfigurationRegisterVn200 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_ins_basic_configuration_vn200",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_ins_basic_configuration_vn200" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn200,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_ins_basic_configuration_vn200" "', argument " "2"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn200 &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_ins_basic_configuration_vn200" "', argument " "2"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn200 &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::InsBasicConfigurationRegisterVn200 * >(argp2);
  (arg1)->writeInsBasicConfigurationVn200(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_ins_basic_configuration_vn200__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::protocol::uart::Scenario arg2 ;
  uint8_t *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  uint8_t temp3 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VnSensor_write_ins_basic_configuration_vn200",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_ins_basic_configuration_vn200" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_ins_basic_configuration_vn200" "', argument " "2"" of type '" "vn::protocol::uart::Scenario""'");
  } 
  arg2 = static_cast< vn::protocol::uart::Scenario >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_ins_basic_configuration_vn200" "', argument " "3"" of type '" "uint8_t""'");
  } 
  temp3 = static_cast< uint8_t >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_ins_basic_configuration_vn200" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->writeInsBasicConfigurationVn200(arg2,(uint8_t const &)*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_ins_basic_configuration_vn200__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::protocol::uart::Scenario arg2 ;
  uint8_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  uint8_t temp3 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_ins_basic_configuration_vn200",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_ins_basic_configuration_vn200" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_ins_basic_configuration_vn200" "', argument " "2"" of type '" "vn::protocol::uart::Scenario""'");
  } 
  arg2 = static_cast< vn::protocol::uart::Scenario >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_ins_basic_configuration_vn200" "', argument " "3"" of type '" "uint8_t""'");
  } 
  temp3 = static_cast< uint8_t >(val3);
  arg3 = &temp3;
  (arg1)->writeInsBasicConfigurationVn200(arg2,(uint8_t const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_ins_basic_configuration_vn200(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn200, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_ins_basic_configuration_vn200__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn200, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_ins_basic_configuration_vn200__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_ins_basic_configuration_vn200__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_VnSensor_write_ins_basic_configuration_vn200__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_ins_basic_configuration_vn200'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeInsBasicConfigurationVn200(vn::sensors::InsBasicConfigurationRegisterVn200 &,bool)\n"
    "    vn::sensors::VnSensor::writeInsBasicConfigurationVn200(vn::sensors::InsBasicConfigurationRegisterVn200 &)\n"
    "    vn::sensors::VnSensor::writeInsBasicConfigurationVn200(vn::protocol::uart::Scenario,uint8_t const &,bool)\n"
    "    vn::sensors::VnSensor::writeInsBasicConfigurationVn200(vn::protocol::uart::Scenario,uint8_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_ins_basic_configuration_vn300(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::InsBasicConfigurationRegisterVn300 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_ins_basic_configuration_vn300",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_ins_basic_configuration_vn300" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readInsBasicConfigurationVn300();
  resultobj = SWIG_NewPointerObj((new vn::sensors::InsBasicConfigurationRegisterVn300(static_cast< const vn::sensors::InsBasicConfigurationRegisterVn300& >(result))), SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn300, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_ins_basic_configuration_vn300__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::InsBasicConfigurationRegisterVn300 *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_ins_basic_configuration_vn300",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_ins_basic_configuration_vn300" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn300,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_ins_basic_configuration_vn300" "', argument " "2"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn300 &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_ins_basic_configuration_vn300" "', argument " "2"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn300 &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::InsBasicConfigurationRegisterVn300 * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_ins_basic_configuration_vn300" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeInsBasicConfigurationVn300(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_ins_basic_configuration_vn300__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::InsBasicConfigurationRegisterVn300 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_ins_basic_configuration_vn300",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_ins_basic_configuration_vn300" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn300,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_ins_basic_configuration_vn300" "', argument " "2"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn300 &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_ins_basic_configuration_vn300" "', argument " "2"" of type '" "vn::sensors::InsBasicConfigurationRegisterVn300 &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::InsBasicConfigurationRegisterVn300 * >(argp2);
  (arg1)->writeInsBasicConfigurationVn300(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_ins_basic_configuration_vn300__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::protocol::uart::Scenario arg2 ;
  uint8_t *arg3 = 0 ;
  uint8_t *arg4 = 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  uint8_t temp3 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  uint8_t temp4 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:VnSensor_write_ins_basic_configuration_vn300",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_ins_basic_configuration_vn300" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_ins_basic_configuration_vn300" "', argument " "2"" of type '" "vn::protocol::uart::Scenario""'");
  } 
  arg2 = static_cast< vn::protocol::uart::Scenario >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_ins_basic_configuration_vn300" "', argument " "3"" of type '" "uint8_t""'");
  } 
  temp3 = static_cast< uint8_t >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_ins_basic_configuration_vn300" "', argument " "4"" of type '" "uint8_t""'");
  } 
  temp4 = static_cast< uint8_t >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_ins_basic_configuration_vn300" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  (arg1)->writeInsBasicConfigurationVn300(arg2,(uint8_t const &)*arg3,(uint8_t const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_ins_basic_configuration_vn300__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::protocol::uart::Scenario arg2 ;
  uint8_t *arg3 = 0 ;
  uint8_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  uint8_t temp3 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  uint8_t temp4 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VnSensor_write_ins_basic_configuration_vn300",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_ins_basic_configuration_vn300" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_ins_basic_configuration_vn300" "', argument " "2"" of type '" "vn::protocol::uart::Scenario""'");
  } 
  arg2 = static_cast< vn::protocol::uart::Scenario >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_ins_basic_configuration_vn300" "', argument " "3"" of type '" "uint8_t""'");
  } 
  temp3 = static_cast< uint8_t >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_ins_basic_configuration_vn300" "', argument " "4"" of type '" "uint8_t""'");
  } 
  temp4 = static_cast< uint8_t >(val4);
  arg4 = &temp4;
  (arg1)->writeInsBasicConfigurationVn300(arg2,(uint8_t const &)*arg3,(uint8_t const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_ins_basic_configuration_vn300(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn300, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_ins_basic_configuration_vn300__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__InsBasicConfigurationRegisterVn300, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_ins_basic_configuration_vn300__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_VnSensor_write_ins_basic_configuration_vn300__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_VnSensor_write_ins_basic_configuration_vn300__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_ins_basic_configuration_vn300'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeInsBasicConfigurationVn300(vn::sensors::InsBasicConfigurationRegisterVn300 &,bool)\n"
    "    vn::sensors::VnSensor::writeInsBasicConfigurationVn300(vn::sensors::InsBasicConfigurationRegisterVn300 &)\n"
    "    vn::sensors::VnSensor::writeInsBasicConfigurationVn300(vn::protocol::uart::Scenario,uint8_t const &,uint8_t const &,bool)\n"
    "    vn::sensors::VnSensor::writeInsBasicConfigurationVn300(vn::protocol::uart::Scenario,uint8_t const &,uint8_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_user_tag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_user_tag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_user_tag" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readUserTag();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_user_tag__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_user_tag",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_user_tag" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_user_tag" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_user_tag" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_user_tag" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeUserTag((std::string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_user_tag__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_user_tag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_user_tag" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_user_tag" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_user_tag" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->writeUserTag((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_user_tag(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_user_tag__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_user_tag__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_user_tag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeUserTag(std::string const &,bool)\n"
    "    vn::sensors::VnSensor::writeUserTag(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_model_number(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_model_number",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_model_number" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readModelNumber();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_hardware_revision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_hardware_revision",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_hardware_revision" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (uint32_t)(arg1)->readHardwareRevision();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_serial_number(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_serial_number",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_serial_number" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (uint32_t)(arg1)->readSerialNumber();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_firmware_version(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_firmware_version",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_firmware_version" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readFirmwareVersion();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_serial_baudrate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_serial_baudrate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_serial_baudrate" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (uint32_t)(arg1)->readSerialBaudRate();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_serial_baudrate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VnSensor_read_serial_baudrate__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VnSensor_read_serial_baudrate__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_read_serial_baudrate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::readSerialBaudRate(uint8_t)\n"
    "    vn::sensors::VnSensor::readSerialBaudRate()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_serial_baudrate__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint32_t *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_serial_baudrate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_serial_baudrate" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_serial_baudrate" "', argument " "2"" of type '" "uint32_t""'");
  } 
  temp2 = static_cast< uint32_t >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_serial_baudrate" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeSerialBaudRate((uint32_t const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_serial_baudrate__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint32_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_serial_baudrate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_serial_baudrate" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_serial_baudrate" "', argument " "2"" of type '" "uint32_t""'");
  } 
  temp2 = static_cast< uint32_t >(val2);
  arg2 = &temp2;
  (arg1)->writeSerialBaudRate((uint32_t const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_serial_baudrate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VnSensor_write_serial_baudrate__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_serial_baudrate__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_serial_baudrate__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_VnSensor_write_serial_baudrate__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_serial_baudrate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeSerialBaudRate(uint32_t const &,uint8_t,bool)\n"
    "    vn::sensors::VnSensor::writeSerialBaudRate(uint32_t const &,uint8_t)\n"
    "    vn::sensors::VnSensor::writeSerialBaudRate(uint32_t const &,bool)\n"
    "    vn::sensors::VnSensor::writeSerialBaudRate(uint32_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_async_data_output_type__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::AsciiAsync result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_async_data_output_type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_async_data_output_type" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (vn::protocol::uart::AsciiAsync)(arg1)->readAsyncDataOutputType();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_async_data_output_type(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VnSensor_read_async_data_output_type__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VnSensor_read_async_data_output_type__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_read_async_data_output_type'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::readAsyncDataOutputType(uint8_t)\n"
    "    vn::sensors::VnSensor::readAsyncDataOutputType()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_async_data_output_type__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::protocol::uart::AsciiAsync arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_async_data_output_type",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_async_data_output_type" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_async_data_output_type" "', argument " "2"" of type '" "vn::protocol::uart::AsciiAsync""'");
  } 
  arg2 = static_cast< vn::protocol::uart::AsciiAsync >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_async_data_output_type" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeAsyncDataOutputType(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_async_data_output_type__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::protocol::uart::AsciiAsync arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_async_data_output_type",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_async_data_output_type" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_async_data_output_type" "', argument " "2"" of type '" "vn::protocol::uart::AsciiAsync""'");
  } 
  arg2 = static_cast< vn::protocol::uart::AsciiAsync >(val2);
  (arg1)->writeAsyncDataOutputType(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_async_data_output_type(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VnSensor_write_async_data_output_type__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_async_data_output_type__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_async_data_output_type__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_VnSensor_write_async_data_output_type__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_async_data_output_type'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeAsyncDataOutputType(vn::protocol::uart::AsciiAsync,uint8_t,bool)\n"
    "    vn::sensors::VnSensor::writeAsyncDataOutputType(vn::protocol::uart::AsciiAsync,uint8_t)\n"
    "    vn::sensors::VnSensor::writeAsyncDataOutputType(vn::protocol::uart::AsciiAsync,bool)\n"
    "    vn::sensors::VnSensor::writeAsyncDataOutputType(vn::protocol::uart::AsciiAsync)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_async_data_output_frequency__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_async_data_output_frequency",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_async_data_output_frequency" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (uint32_t)(arg1)->readAsyncDataOutputFrequency();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_async_data_output_frequency(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VnSensor_read_async_data_output_frequency__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VnSensor_read_async_data_output_frequency__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_read_async_data_output_frequency'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::readAsyncDataOutputFrequency(uint8_t)\n"
    "    vn::sensors::VnSensor::readAsyncDataOutputFrequency()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_async_data_output_frequency__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint32_t *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_async_data_output_frequency",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_async_data_output_frequency" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_async_data_output_frequency" "', argument " "2"" of type '" "uint32_t""'");
  } 
  temp2 = static_cast< uint32_t >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_async_data_output_frequency" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeAsyncDataOutputFrequency((uint32_t const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_async_data_output_frequency__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint32_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_async_data_output_frequency",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_async_data_output_frequency" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_async_data_output_frequency" "', argument " "2"" of type '" "uint32_t""'");
  } 
  temp2 = static_cast< uint32_t >(val2);
  arg2 = &temp2;
  (arg1)->writeAsyncDataOutputFrequency((uint32_t const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_async_data_output_frequency(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VnSensor_write_async_data_output_frequency__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_async_data_output_frequency__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_async_data_output_frequency__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_VnSensor_write_async_data_output_frequency__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_async_data_output_frequency'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeAsyncDataOutputFrequency(uint32_t const &,uint8_t,bool)\n"
    "    vn::sensors::VnSensor::writeAsyncDataOutputFrequency(uint32_t const &,uint8_t)\n"
    "    vn::sensors::VnSensor::writeAsyncDataOutputFrequency(uint32_t const &,bool)\n"
    "    vn::sensors::VnSensor::writeAsyncDataOutputFrequency(uint32_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_yaw_pitch_roll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_yaw_pitch_roll",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_yaw_pitch_roll" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readYawPitchRoll();
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_attitude_quaternion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_attitude_quaternion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_attitude_quaternion" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readAttitudeQuaternion();
  resultobj = SWIG_NewPointerObj((new vn::math::vec4f(static_cast< const vn::math::vec4f& >(result))), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_quaternion_magnetic_acceleration_and_angular_rates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_quaternion_magnetic_acceleration_and_angular_rates",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_quaternion_magnetic_acceleration_and_angular_rates" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readQuaternionMagneticAccelerationAndAngularRates();
  resultobj = SWIG_NewPointerObj((new vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister(static_cast< const vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister& >(result))), SWIGTYPE_p_vn__sensors__QuaternionMagneticAccelerationAndAngularRatesRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_magnetic_measurements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_magnetic_measurements",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_magnetic_measurements" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readMagneticMeasurements();
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_acceleration_measurements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_acceleration_measurements",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_acceleration_measurements" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readAccelerationMeasurements();
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_angular_rate_measurements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_angular_rate_measurements",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_angular_rate_measurements" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readAngularRateMeasurements();
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_magnetic_acceleration_and_angular_rates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::MagneticAccelerationAndAngularRatesRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_magnetic_acceleration_and_angular_rates",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_magnetic_acceleration_and_angular_rates" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readMagneticAccelerationAndAngularRates();
  resultobj = SWIG_NewPointerObj((new vn::sensors::MagneticAccelerationAndAngularRatesRegister(static_cast< const vn::sensors::MagneticAccelerationAndAngularRatesRegister& >(result))), SWIGTYPE_p_vn__sensors__MagneticAccelerationAndAngularRatesRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_magnetic_and_gravity_reference_vectors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::MagneticAndGravityReferenceVectorsRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_magnetic_and_gravity_reference_vectors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_magnetic_and_gravity_reference_vectors" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readMagneticAndGravityReferenceVectors();
  resultobj = SWIG_NewPointerObj((new vn::sensors::MagneticAndGravityReferenceVectorsRegister(static_cast< const vn::sensors::MagneticAndGravityReferenceVectorsRegister& >(result))), SWIGTYPE_p_vn__sensors__MagneticAndGravityReferenceVectorsRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_magnetic_and_gravity_reference_vectors__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::MagneticAndGravityReferenceVectorsRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_magnetic_and_gravity_reference_vectors",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_magnetic_and_gravity_reference_vectors" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__MagneticAndGravityReferenceVectorsRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_magnetic_and_gravity_reference_vectors" "', argument " "2"" of type '" "vn::sensors::MagneticAndGravityReferenceVectorsRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_magnetic_and_gravity_reference_vectors" "', argument " "2"" of type '" "vn::sensors::MagneticAndGravityReferenceVectorsRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::MagneticAndGravityReferenceVectorsRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_magnetic_and_gravity_reference_vectors" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeMagneticAndGravityReferenceVectors(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_magnetic_and_gravity_reference_vectors__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::MagneticAndGravityReferenceVectorsRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_magnetic_and_gravity_reference_vectors",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_magnetic_and_gravity_reference_vectors" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__MagneticAndGravityReferenceVectorsRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_magnetic_and_gravity_reference_vectors" "', argument " "2"" of type '" "vn::sensors::MagneticAndGravityReferenceVectorsRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_magnetic_and_gravity_reference_vectors" "', argument " "2"" of type '" "vn::sensors::MagneticAndGravityReferenceVectorsRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::MagneticAndGravityReferenceVectorsRegister * >(argp2);
  (arg1)->writeMagneticAndGravityReferenceVectors(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_magnetic_and_gravity_reference_vectors__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::vec3f *arg2 = 0 ;
  vn::math::vec3f *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VnSensor_write_magnetic_and_gravity_reference_vectors",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_magnetic_and_gravity_reference_vectors" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_magnetic_and_gravity_reference_vectors" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_magnetic_and_gravity_reference_vectors" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VnSensor_write_magnetic_and_gravity_reference_vectors" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_magnetic_and_gravity_reference_vectors" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_magnetic_and_gravity_reference_vectors" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->writeMagneticAndGravityReferenceVectors((vn::math::vec3f const &)*arg2,(vn::math::vec3f const &)*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_magnetic_and_gravity_reference_vectors__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::vec3f *arg2 = 0 ;
  vn::math::vec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_magnetic_and_gravity_reference_vectors",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_magnetic_and_gravity_reference_vectors" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_magnetic_and_gravity_reference_vectors" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_magnetic_and_gravity_reference_vectors" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VnSensor_write_magnetic_and_gravity_reference_vectors" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_magnetic_and_gravity_reference_vectors" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  (arg1)->writeMagneticAndGravityReferenceVectors((vn::math::vec3f const &)*arg2,(vn::math::vec3f const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_magnetic_and_gravity_reference_vectors(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__MagneticAndGravityReferenceVectorsRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_magnetic_and_gravity_reference_vectors__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__MagneticAndGravityReferenceVectorsRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_magnetic_and_gravity_reference_vectors__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VnSensor_write_magnetic_and_gravity_reference_vectors__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_VnSensor_write_magnetic_and_gravity_reference_vectors__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_magnetic_and_gravity_reference_vectors'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeMagneticAndGravityReferenceVectors(vn::sensors::MagneticAndGravityReferenceVectorsRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeMagneticAndGravityReferenceVectors(vn::sensors::MagneticAndGravityReferenceVectorsRegister &)\n"
    "    vn::sensors::VnSensor::writeMagneticAndGravityReferenceVectors(vn::math::vec3f const &,vn::math::vec3f const &,bool)\n"
    "    vn::sensors::VnSensor::writeMagneticAndGravityReferenceVectors(vn::math::vec3f const &,vn::math::vec3f const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_filter_measurements_variance_parameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::FilterMeasurementsVarianceParametersRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_filter_measurements_variance_parameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_filter_measurements_variance_parameters" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readFilterMeasurementsVarianceParameters();
  resultobj = SWIG_NewPointerObj((new vn::sensors::FilterMeasurementsVarianceParametersRegister(static_cast< const vn::sensors::FilterMeasurementsVarianceParametersRegister& >(result))), SWIGTYPE_p_vn__sensors__FilterMeasurementsVarianceParametersRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_filter_measurements_variance_parameters__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::FilterMeasurementsVarianceParametersRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_filter_measurements_variance_parameters",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_filter_measurements_variance_parameters" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__FilterMeasurementsVarianceParametersRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_filter_measurements_variance_parameters" "', argument " "2"" of type '" "vn::sensors::FilterMeasurementsVarianceParametersRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_filter_measurements_variance_parameters" "', argument " "2"" of type '" "vn::sensors::FilterMeasurementsVarianceParametersRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::FilterMeasurementsVarianceParametersRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_filter_measurements_variance_parameters" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeFilterMeasurementsVarianceParameters(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_filter_measurements_variance_parameters__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::FilterMeasurementsVarianceParametersRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_filter_measurements_variance_parameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_filter_measurements_variance_parameters" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__FilterMeasurementsVarianceParametersRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_filter_measurements_variance_parameters" "', argument " "2"" of type '" "vn::sensors::FilterMeasurementsVarianceParametersRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_filter_measurements_variance_parameters" "', argument " "2"" of type '" "vn::sensors::FilterMeasurementsVarianceParametersRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::FilterMeasurementsVarianceParametersRegister * >(argp2);
  (arg1)->writeFilterMeasurementsVarianceParameters(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_filter_measurements_variance_parameters__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  float *arg2 = 0 ;
  vn::math::vec3f *arg3 = 0 ;
  vn::math::vec3f *arg4 = 0 ;
  vn::math::vec3f *arg5 = 0 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:VnSensor_write_filter_measurements_variance_parameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_filter_measurements_variance_parameters" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_filter_measurements_variance_parameters" "', argument " "2"" of type '" "float""'");
  } 
  temp2 = static_cast< float >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VnSensor_write_filter_measurements_variance_parameters" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_filter_measurements_variance_parameters" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VnSensor_write_filter_measurements_variance_parameters" "', argument " "4"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_filter_measurements_variance_parameters" "', argument " "4"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "VnSensor_write_filter_measurements_variance_parameters" "', argument " "5"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_filter_measurements_variance_parameters" "', argument " "5"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg5 = reinterpret_cast< vn::math::vec3f * >(argp5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "VnSensor_write_filter_measurements_variance_parameters" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  (arg1)->writeFilterMeasurementsVarianceParameters((float const &)*arg2,(vn::math::vec3f const &)*arg3,(vn::math::vec3f const &)*arg4,(vn::math::vec3f const &)*arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_filter_measurements_variance_parameters__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  float *arg2 = 0 ;
  vn::math::vec3f *arg3 = 0 ;
  vn::math::vec3f *arg4 = 0 ;
  vn::math::vec3f *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:VnSensor_write_filter_measurements_variance_parameters",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_filter_measurements_variance_parameters" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_filter_measurements_variance_parameters" "', argument " "2"" of type '" "float""'");
  } 
  temp2 = static_cast< float >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VnSensor_write_filter_measurements_variance_parameters" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_filter_measurements_variance_parameters" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VnSensor_write_filter_measurements_variance_parameters" "', argument " "4"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_filter_measurements_variance_parameters" "', argument " "4"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "VnSensor_write_filter_measurements_variance_parameters" "', argument " "5"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_filter_measurements_variance_parameters" "', argument " "5"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg5 = reinterpret_cast< vn::math::vec3f * >(argp5);
  (arg1)->writeFilterMeasurementsVarianceParameters((float const &)*arg2,(vn::math::vec3f const &)*arg3,(vn::math::vec3f const &)*arg4,(vn::math::vec3f const &)*arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_filter_measurements_variance_parameters(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__FilterMeasurementsVarianceParametersRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_filter_measurements_variance_parameters__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__FilterMeasurementsVarianceParametersRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_filter_measurements_variance_parameters__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_VnSensor_write_filter_measurements_variance_parameters__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_VnSensor_write_filter_measurements_variance_parameters__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_filter_measurements_variance_parameters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeFilterMeasurementsVarianceParameters(vn::sensors::FilterMeasurementsVarianceParametersRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeFilterMeasurementsVarianceParameters(vn::sensors::FilterMeasurementsVarianceParametersRegister &)\n"
    "    vn::sensors::VnSensor::writeFilterMeasurementsVarianceParameters(float const &,vn::math::vec3f const &,vn::math::vec3f const &,vn::math::vec3f const &,bool)\n"
    "    vn::sensors::VnSensor::writeFilterMeasurementsVarianceParameters(float const &,vn::math::vec3f const &,vn::math::vec3f const &,vn::math::vec3f const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_magnetometer_compensation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::MagnetometerCompensationRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_magnetometer_compensation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_magnetometer_compensation" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readMagnetometerCompensation();
  resultobj = SWIG_NewPointerObj((new vn::sensors::MagnetometerCompensationRegister(static_cast< const vn::sensors::MagnetometerCompensationRegister& >(result))), SWIGTYPE_p_vn__sensors__MagnetometerCompensationRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_magnetometer_compensation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::MagnetometerCompensationRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_magnetometer_compensation",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_magnetometer_compensation" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__MagnetometerCompensationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_magnetometer_compensation" "', argument " "2"" of type '" "vn::sensors::MagnetometerCompensationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_magnetometer_compensation" "', argument " "2"" of type '" "vn::sensors::MagnetometerCompensationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::MagnetometerCompensationRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_magnetometer_compensation" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeMagnetometerCompensation(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_magnetometer_compensation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::MagnetometerCompensationRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_magnetometer_compensation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_magnetometer_compensation" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__MagnetometerCompensationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_magnetometer_compensation" "', argument " "2"" of type '" "vn::sensors::MagnetometerCompensationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_magnetometer_compensation" "', argument " "2"" of type '" "vn::sensors::MagnetometerCompensationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::MagnetometerCompensationRegister * >(argp2);
  (arg1)->writeMagnetometerCompensation(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_magnetometer_compensation__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::mat3f *arg2 = 0 ;
  vn::math::vec3f *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VnSensor_write_magnetometer_compensation",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_magnetometer_compensation" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__matT_3_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_magnetometer_compensation" "', argument " "2"" of type '" "vn::math::mat3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_magnetometer_compensation" "', argument " "2"" of type '" "vn::math::mat3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::mat3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VnSensor_write_magnetometer_compensation" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_magnetometer_compensation" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_magnetometer_compensation" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->writeMagnetometerCompensation((vn::math::mat3f const &)*arg2,(vn::math::vec3f const &)*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_magnetometer_compensation__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::mat3f *arg2 = 0 ;
  vn::math::vec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_magnetometer_compensation",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_magnetometer_compensation" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__matT_3_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_magnetometer_compensation" "', argument " "2"" of type '" "vn::math::mat3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_magnetometer_compensation" "', argument " "2"" of type '" "vn::math::mat3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::mat3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VnSensor_write_magnetometer_compensation" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_magnetometer_compensation" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  (arg1)->writeMagnetometerCompensation((vn::math::mat3f const &)*arg2,(vn::math::vec3f const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_magnetometer_compensation(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__MagnetometerCompensationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_magnetometer_compensation__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__MagnetometerCompensationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_magnetometer_compensation__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__matT_3_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VnSensor_write_magnetometer_compensation__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__matT_3_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_VnSensor_write_magnetometer_compensation__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_magnetometer_compensation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeMagnetometerCompensation(vn::sensors::MagnetometerCompensationRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeMagnetometerCompensation(vn::sensors::MagnetometerCompensationRegister &)\n"
    "    vn::sensors::VnSensor::writeMagnetometerCompensation(vn::math::mat3f const &,vn::math::vec3f const &,bool)\n"
    "    vn::sensors::VnSensor::writeMagnetometerCompensation(vn::math::mat3f const &,vn::math::vec3f const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_filter_active_tuning_parameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::FilterActiveTuningParametersRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_filter_active_tuning_parameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_filter_active_tuning_parameters" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readFilterActiveTuningParameters();
  resultobj = SWIG_NewPointerObj((new vn::sensors::FilterActiveTuningParametersRegister(static_cast< const vn::sensors::FilterActiveTuningParametersRegister& >(result))), SWIGTYPE_p_vn__sensors__FilterActiveTuningParametersRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_filter_active_tuning_parameters__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::FilterActiveTuningParametersRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_filter_active_tuning_parameters",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_filter_active_tuning_parameters" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__FilterActiveTuningParametersRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_filter_active_tuning_parameters" "', argument " "2"" of type '" "vn::sensors::FilterActiveTuningParametersRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_filter_active_tuning_parameters" "', argument " "2"" of type '" "vn::sensors::FilterActiveTuningParametersRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::FilterActiveTuningParametersRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_filter_active_tuning_parameters" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeFilterActiveTuningParameters(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_filter_active_tuning_parameters__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::FilterActiveTuningParametersRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_filter_active_tuning_parameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_filter_active_tuning_parameters" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__FilterActiveTuningParametersRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_filter_active_tuning_parameters" "', argument " "2"" of type '" "vn::sensors::FilterActiveTuningParametersRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_filter_active_tuning_parameters" "', argument " "2"" of type '" "vn::sensors::FilterActiveTuningParametersRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::FilterActiveTuningParametersRegister * >(argp2);
  (arg1)->writeFilterActiveTuningParameters(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_filter_active_tuning_parameters__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:VnSensor_write_filter_active_tuning_parameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_filter_active_tuning_parameters" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_filter_active_tuning_parameters" "', argument " "2"" of type '" "float""'");
  } 
  temp2 = static_cast< float >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_filter_active_tuning_parameters" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_filter_active_tuning_parameters" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_filter_active_tuning_parameters" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "VnSensor_write_filter_active_tuning_parameters" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  (arg1)->writeFilterActiveTuningParameters((float const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_filter_active_tuning_parameters__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:VnSensor_write_filter_active_tuning_parameters",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_filter_active_tuning_parameters" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_filter_active_tuning_parameters" "', argument " "2"" of type '" "float""'");
  } 
  temp2 = static_cast< float >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_filter_active_tuning_parameters" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_filter_active_tuning_parameters" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_filter_active_tuning_parameters" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  (arg1)->writeFilterActiveTuningParameters((float const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_filter_active_tuning_parameters(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__FilterActiveTuningParametersRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_filter_active_tuning_parameters__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__FilterActiveTuningParametersRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_filter_active_tuning_parameters__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_VnSensor_write_filter_active_tuning_parameters__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_VnSensor_write_filter_active_tuning_parameters__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_filter_active_tuning_parameters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeFilterActiveTuningParameters(vn::sensors::FilterActiveTuningParametersRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeFilterActiveTuningParameters(vn::sensors::FilterActiveTuningParametersRegister &)\n"
    "    vn::sensors::VnSensor::writeFilterActiveTuningParameters(float const &,float const &,float const &,float const &,bool)\n"
    "    vn::sensors::VnSensor::writeFilterActiveTuningParameters(float const &,float const &,float const &,float const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_acceleration_compensation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::AccelerationCompensationRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_acceleration_compensation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_acceleration_compensation" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readAccelerationCompensation();
  resultobj = SWIG_NewPointerObj((new vn::sensors::AccelerationCompensationRegister(static_cast< const vn::sensors::AccelerationCompensationRegister& >(result))), SWIGTYPE_p_vn__sensors__AccelerationCompensationRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_acceleration_compensation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::AccelerationCompensationRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_acceleration_compensation",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_acceleration_compensation" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__AccelerationCompensationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_acceleration_compensation" "', argument " "2"" of type '" "vn::sensors::AccelerationCompensationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_acceleration_compensation" "', argument " "2"" of type '" "vn::sensors::AccelerationCompensationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::AccelerationCompensationRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_acceleration_compensation" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeAccelerationCompensation(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_acceleration_compensation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::AccelerationCompensationRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_acceleration_compensation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_acceleration_compensation" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__AccelerationCompensationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_acceleration_compensation" "', argument " "2"" of type '" "vn::sensors::AccelerationCompensationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_acceleration_compensation" "', argument " "2"" of type '" "vn::sensors::AccelerationCompensationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::AccelerationCompensationRegister * >(argp2);
  (arg1)->writeAccelerationCompensation(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_acceleration_compensation__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::mat3f *arg2 = 0 ;
  vn::math::vec3f *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VnSensor_write_acceleration_compensation",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_acceleration_compensation" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__matT_3_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_acceleration_compensation" "', argument " "2"" of type '" "vn::math::mat3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_acceleration_compensation" "', argument " "2"" of type '" "vn::math::mat3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::mat3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VnSensor_write_acceleration_compensation" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_acceleration_compensation" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_acceleration_compensation" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->writeAccelerationCompensation((vn::math::mat3f const &)*arg2,(vn::math::vec3f const &)*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_acceleration_compensation__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::mat3f *arg2 = 0 ;
  vn::math::vec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_acceleration_compensation",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_acceleration_compensation" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__matT_3_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_acceleration_compensation" "', argument " "2"" of type '" "vn::math::mat3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_acceleration_compensation" "', argument " "2"" of type '" "vn::math::mat3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::mat3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VnSensor_write_acceleration_compensation" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_acceleration_compensation" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  (arg1)->writeAccelerationCompensation((vn::math::mat3f const &)*arg2,(vn::math::vec3f const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_acceleration_compensation(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__AccelerationCompensationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_acceleration_compensation__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__AccelerationCompensationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_acceleration_compensation__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__matT_3_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VnSensor_write_acceleration_compensation__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__matT_3_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_VnSensor_write_acceleration_compensation__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_acceleration_compensation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeAccelerationCompensation(vn::sensors::AccelerationCompensationRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeAccelerationCompensation(vn::sensors::AccelerationCompensationRegister &)\n"
    "    vn::sensors::VnSensor::writeAccelerationCompensation(vn::math::mat3f const &,vn::math::vec3f const &,bool)\n"
    "    vn::sensors::VnSensor::writeAccelerationCompensation(vn::math::mat3f const &,vn::math::vec3f const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_reference_frame_rotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::mat3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_reference_frame_rotation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_reference_frame_rotation" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readReferenceFrameRotation();
  resultobj = SWIG_NewPointerObj((new vn::math::mat3f(static_cast< const vn::math::mat3f& >(result))), SWIGTYPE_p_vn__math__matT_3_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_reference_frame_rotation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::mat3f *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_reference_frame_rotation",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_reference_frame_rotation" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__matT_3_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_reference_frame_rotation" "', argument " "2"" of type '" "vn::math::mat3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_reference_frame_rotation" "', argument " "2"" of type '" "vn::math::mat3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::mat3f * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_reference_frame_rotation" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeReferenceFrameRotation((vn::math::mat3f const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_reference_frame_rotation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::mat3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_reference_frame_rotation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_reference_frame_rotation" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__matT_3_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_reference_frame_rotation" "', argument " "2"" of type '" "vn::math::mat3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_reference_frame_rotation" "', argument " "2"" of type '" "vn::math::mat3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::mat3f * >(argp2);
  (arg1)->writeReferenceFrameRotation((vn::math::mat3f const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_reference_frame_rotation(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__matT_3_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_reference_frame_rotation__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__matT_3_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_reference_frame_rotation__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_reference_frame_rotation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeReferenceFrameRotation(vn::math::mat3f const &,bool)\n"
    "    vn::sensors::VnSensor::writeReferenceFrameRotation(vn::math::mat3f const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_yaw_pitch_roll_magnetic_acceleration_and_angular_rates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_yaw_pitch_roll_magnetic_acceleration_and_angular_rates",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_yaw_pitch_roll_magnetic_acceleration_and_angular_rates" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readYawPitchRollMagneticAccelerationAndAngularRates();
  resultobj = SWIG_NewPointerObj((new vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister(static_cast< const vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister& >(result))), SWIGTYPE_p_vn__sensors__YawPitchRollMagneticAccelerationAndAngularRatesRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_communication_protocol_control(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::CommunicationProtocolControlRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_communication_protocol_control",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_communication_protocol_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readCommunicationProtocolControl();
  resultobj = SWIG_NewPointerObj((new vn::sensors::CommunicationProtocolControlRegister(static_cast< const vn::sensors::CommunicationProtocolControlRegister& >(result))), SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_communication_protocol_control__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::CommunicationProtocolControlRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_communication_protocol_control",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_communication_protocol_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_communication_protocol_control" "', argument " "2"" of type '" "vn::sensors::CommunicationProtocolControlRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_communication_protocol_control" "', argument " "2"" of type '" "vn::sensors::CommunicationProtocolControlRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::CommunicationProtocolControlRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_communication_protocol_control" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeCommunicationProtocolControl(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_communication_protocol_control__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::CommunicationProtocolControlRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_communication_protocol_control",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_communication_protocol_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_communication_protocol_control" "', argument " "2"" of type '" "vn::sensors::CommunicationProtocolControlRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_communication_protocol_control" "', argument " "2"" of type '" "vn::sensors::CommunicationProtocolControlRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::CommunicationProtocolControlRegister * >(argp2);
  (arg1)->writeCommunicationProtocolControl(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_communication_protocol_control__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::protocol::uart::CountMode arg2 ;
  vn::protocol::uart::StatusMode arg3 ;
  vn::protocol::uart::CountMode arg4 ;
  vn::protocol::uart::StatusMode arg5 ;
  vn::protocol::uart::ChecksumMode arg6 ;
  vn::protocol::uart::ChecksumMode arg7 ;
  vn::protocol::uart::ErrorMode arg8 ;
  bool arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:VnSensor_write_communication_protocol_control",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_communication_protocol_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_communication_protocol_control" "', argument " "2"" of type '" "vn::protocol::uart::CountMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::CountMode >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_communication_protocol_control" "', argument " "3"" of type '" "vn::protocol::uart::StatusMode""'");
  } 
  arg3 = static_cast< vn::protocol::uart::StatusMode >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_communication_protocol_control" "', argument " "4"" of type '" "vn::protocol::uart::CountMode""'");
  } 
  arg4 = static_cast< vn::protocol::uart::CountMode >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_communication_protocol_control" "', argument " "5"" of type '" "vn::protocol::uart::StatusMode""'");
  } 
  arg5 = static_cast< vn::protocol::uart::StatusMode >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "VnSensor_write_communication_protocol_control" "', argument " "6"" of type '" "vn::protocol::uart::ChecksumMode""'");
  } 
  arg6 = static_cast< vn::protocol::uart::ChecksumMode >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "VnSensor_write_communication_protocol_control" "', argument " "7"" of type '" "vn::protocol::uart::ChecksumMode""'");
  } 
  arg7 = static_cast< vn::protocol::uart::ChecksumMode >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "VnSensor_write_communication_protocol_control" "', argument " "8"" of type '" "vn::protocol::uart::ErrorMode""'");
  } 
  arg8 = static_cast< vn::protocol::uart::ErrorMode >(val8);
  ecode9 = SWIG_AsVal_bool(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "VnSensor_write_communication_protocol_control" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  (arg1)->writeCommunicationProtocolControl(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_communication_protocol_control__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::protocol::uart::CountMode arg2 ;
  vn::protocol::uart::StatusMode arg3 ;
  vn::protocol::uart::CountMode arg4 ;
  vn::protocol::uart::StatusMode arg5 ;
  vn::protocol::uart::ChecksumMode arg6 ;
  vn::protocol::uart::ChecksumMode arg7 ;
  vn::protocol::uart::ErrorMode arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:VnSensor_write_communication_protocol_control",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_communication_protocol_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_communication_protocol_control" "', argument " "2"" of type '" "vn::protocol::uart::CountMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::CountMode >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_communication_protocol_control" "', argument " "3"" of type '" "vn::protocol::uart::StatusMode""'");
  } 
  arg3 = static_cast< vn::protocol::uart::StatusMode >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_communication_protocol_control" "', argument " "4"" of type '" "vn::protocol::uart::CountMode""'");
  } 
  arg4 = static_cast< vn::protocol::uart::CountMode >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_communication_protocol_control" "', argument " "5"" of type '" "vn::protocol::uart::StatusMode""'");
  } 
  arg5 = static_cast< vn::protocol::uart::StatusMode >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "VnSensor_write_communication_protocol_control" "', argument " "6"" of type '" "vn::protocol::uart::ChecksumMode""'");
  } 
  arg6 = static_cast< vn::protocol::uart::ChecksumMode >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "VnSensor_write_communication_protocol_control" "', argument " "7"" of type '" "vn::protocol::uart::ChecksumMode""'");
  } 
  arg7 = static_cast< vn::protocol::uart::ChecksumMode >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "VnSensor_write_communication_protocol_control" "', argument " "8"" of type '" "vn::protocol::uart::ErrorMode""'");
  } 
  arg8 = static_cast< vn::protocol::uart::ErrorMode >(val8);
  (arg1)->writeCommunicationProtocolControl(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_communication_protocol_control(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_communication_protocol_control__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__CommunicationProtocolControlRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_communication_protocol_control__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_VnSensor_write_communication_protocol_control__SWIG_3(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_bool(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_VnSensor_write_communication_protocol_control__SWIG_2(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_communication_protocol_control'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeCommunicationProtocolControl(vn::sensors::CommunicationProtocolControlRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeCommunicationProtocolControl(vn::sensors::CommunicationProtocolControlRegister &)\n"
    "    vn::sensors::VnSensor::writeCommunicationProtocolControl(vn::protocol::uart::CountMode,vn::protocol::uart::StatusMode,vn::protocol::uart::CountMode,vn::protocol::uart::StatusMode,vn::protocol::uart::ChecksumMode,vn::protocol::uart::ChecksumMode,vn::protocol::uart::ErrorMode,bool)\n"
    "    vn::sensors::VnSensor::writeCommunicationProtocolControl(vn::protocol::uart::CountMode,vn::protocol::uart::StatusMode,vn::protocol::uart::CountMode,vn::protocol::uart::StatusMode,vn::protocol::uart::ChecksumMode,vn::protocol::uart::ChecksumMode,vn::protocol::uart::ErrorMode)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_synchronization_control(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::SynchronizationControlRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_synchronization_control",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_synchronization_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readSynchronizationControl();
  resultobj = SWIG_NewPointerObj((new vn::sensors::SynchronizationControlRegister(static_cast< const vn::sensors::SynchronizationControlRegister& >(result))), SWIGTYPE_p_vn__sensors__SynchronizationControlRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_synchronization_control__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::SynchronizationControlRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_synchronization_control",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_synchronization_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__SynchronizationControlRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_synchronization_control" "', argument " "2"" of type '" "vn::sensors::SynchronizationControlRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_synchronization_control" "', argument " "2"" of type '" "vn::sensors::SynchronizationControlRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::SynchronizationControlRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_synchronization_control" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeSynchronizationControl(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_synchronization_control__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::SynchronizationControlRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_synchronization_control",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_synchronization_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__SynchronizationControlRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_synchronization_control" "', argument " "2"" of type '" "vn::sensors::SynchronizationControlRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_synchronization_control" "', argument " "2"" of type '" "vn::sensors::SynchronizationControlRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::SynchronizationControlRegister * >(argp2);
  (arg1)->writeSynchronizationControl(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_synchronization_control__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::protocol::uart::SyncInMode arg2 ;
  vn::protocol::uart::SyncInEdge arg3 ;
  uint16_t *arg4 = 0 ;
  vn::protocol::uart::SyncOutMode arg5 ;
  vn::protocol::uart::SyncOutPolarity arg6 ;
  uint16_t *arg7 = 0 ;
  uint32_t *arg8 = 0 ;
  bool arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  uint16_t temp4 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  uint16_t temp7 ;
  unsigned short val7 ;
  int ecode7 = 0 ;
  uint32_t temp8 ;
  unsigned int val8 ;
  int ecode8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:VnSensor_write_synchronization_control",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_synchronization_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_synchronization_control" "', argument " "2"" of type '" "vn::protocol::uart::SyncInMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::SyncInMode >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_synchronization_control" "', argument " "3"" of type '" "vn::protocol::uart::SyncInEdge""'");
  } 
  arg3 = static_cast< vn::protocol::uart::SyncInEdge >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_synchronization_control" "', argument " "4"" of type '" "uint16_t""'");
  } 
  temp4 = static_cast< uint16_t >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_synchronization_control" "', argument " "5"" of type '" "vn::protocol::uart::SyncOutMode""'");
  } 
  arg5 = static_cast< vn::protocol::uart::SyncOutMode >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "VnSensor_write_synchronization_control" "', argument " "6"" of type '" "vn::protocol::uart::SyncOutPolarity""'");
  } 
  arg6 = static_cast< vn::protocol::uart::SyncOutPolarity >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_short(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "VnSensor_write_synchronization_control" "', argument " "7"" of type '" "uint16_t""'");
  } 
  temp7 = static_cast< uint16_t >(val7);
  arg7 = &temp7;
  ecode8 = SWIG_AsVal_unsigned_SS_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "VnSensor_write_synchronization_control" "', argument " "8"" of type '" "uint32_t""'");
  } 
  temp8 = static_cast< uint32_t >(val8);
  arg8 = &temp8;
  ecode9 = SWIG_AsVal_bool(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "VnSensor_write_synchronization_control" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  (arg1)->writeSynchronizationControl(arg2,arg3,(uint16_t const &)*arg4,arg5,arg6,(uint16_t const &)*arg7,(uint32_t const &)*arg8,arg9);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_synchronization_control__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::protocol::uart::SyncInMode arg2 ;
  vn::protocol::uart::SyncInEdge arg3 ;
  uint16_t *arg4 = 0 ;
  vn::protocol::uart::SyncOutMode arg5 ;
  vn::protocol::uart::SyncOutPolarity arg6 ;
  uint16_t *arg7 = 0 ;
  uint32_t *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  uint16_t temp4 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  uint16_t temp7 ;
  unsigned short val7 ;
  int ecode7 = 0 ;
  uint32_t temp8 ;
  unsigned int val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:VnSensor_write_synchronization_control",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_synchronization_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_synchronization_control" "', argument " "2"" of type '" "vn::protocol::uart::SyncInMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::SyncInMode >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_synchronization_control" "', argument " "3"" of type '" "vn::protocol::uart::SyncInEdge""'");
  } 
  arg3 = static_cast< vn::protocol::uart::SyncInEdge >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_synchronization_control" "', argument " "4"" of type '" "uint16_t""'");
  } 
  temp4 = static_cast< uint16_t >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_synchronization_control" "', argument " "5"" of type '" "vn::protocol::uart::SyncOutMode""'");
  } 
  arg5 = static_cast< vn::protocol::uart::SyncOutMode >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "VnSensor_write_synchronization_control" "', argument " "6"" of type '" "vn::protocol::uart::SyncOutPolarity""'");
  } 
  arg6 = static_cast< vn::protocol::uart::SyncOutPolarity >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_short(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "VnSensor_write_synchronization_control" "', argument " "7"" of type '" "uint16_t""'");
  } 
  temp7 = static_cast< uint16_t >(val7);
  arg7 = &temp7;
  ecode8 = SWIG_AsVal_unsigned_SS_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "VnSensor_write_synchronization_control" "', argument " "8"" of type '" "uint32_t""'");
  } 
  temp8 = static_cast< uint32_t >(val8);
  arg8 = &temp8;
  (arg1)->writeSynchronizationControl(arg2,arg3,(uint16_t const &)*arg4,arg5,arg6,(uint16_t const &)*arg7,(uint32_t const &)*arg8);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_synchronization_control(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__SynchronizationControlRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_synchronization_control__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__SynchronizationControlRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_synchronization_control__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_unsigned_SS_short(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_unsigned_SS_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_VnSensor_write_synchronization_control__SWIG_3(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_unsigned_SS_short(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_unsigned_SS_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_bool(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_VnSensor_write_synchronization_control__SWIG_2(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_synchronization_control'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeSynchronizationControl(vn::sensors::SynchronizationControlRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeSynchronizationControl(vn::sensors::SynchronizationControlRegister &)\n"
    "    vn::sensors::VnSensor::writeSynchronizationControl(vn::protocol::uart::SyncInMode,vn::protocol::uart::SyncInEdge,uint16_t const &,vn::protocol::uart::SyncOutMode,vn::protocol::uart::SyncOutPolarity,uint16_t const &,uint32_t const &,bool)\n"
    "    vn::sensors::VnSensor::writeSynchronizationControl(vn::protocol::uart::SyncInMode,vn::protocol::uart::SyncInEdge,uint16_t const &,vn::protocol::uart::SyncOutMode,vn::protocol::uart::SyncOutPolarity,uint16_t const &,uint32_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_synchronization_status(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::SynchronizationStatusRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_synchronization_status",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_synchronization_status" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readSynchronizationStatus();
  resultobj = SWIG_NewPointerObj((new vn::sensors::SynchronizationStatusRegister(static_cast< const vn::sensors::SynchronizationStatusRegister& >(result))), SWIGTYPE_p_vn__sensors__SynchronizationStatusRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_synchronization_status__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::SynchronizationStatusRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_synchronization_status",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_synchronization_status" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__SynchronizationStatusRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_synchronization_status" "', argument " "2"" of type '" "vn::sensors::SynchronizationStatusRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_synchronization_status" "', argument " "2"" of type '" "vn::sensors::SynchronizationStatusRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::SynchronizationStatusRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_synchronization_status" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeSynchronizationStatus(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_synchronization_status__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::SynchronizationStatusRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_synchronization_status",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_synchronization_status" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__SynchronizationStatusRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_synchronization_status" "', argument " "2"" of type '" "vn::sensors::SynchronizationStatusRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_synchronization_status" "', argument " "2"" of type '" "vn::sensors::SynchronizationStatusRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::SynchronizationStatusRegister * >(argp2);
  (arg1)->writeSynchronizationStatus(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_synchronization_status__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint32_t *arg2 = 0 ;
  uint32_t *arg3 = 0 ;
  uint32_t *arg4 = 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  uint32_t temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  uint32_t temp4 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:VnSensor_write_synchronization_status",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_synchronization_status" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_synchronization_status" "', argument " "2"" of type '" "uint32_t""'");
  } 
  temp2 = static_cast< uint32_t >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_synchronization_status" "', argument " "3"" of type '" "uint32_t""'");
  } 
  temp3 = static_cast< uint32_t >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_synchronization_status" "', argument " "4"" of type '" "uint32_t""'");
  } 
  temp4 = static_cast< uint32_t >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_synchronization_status" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  (arg1)->writeSynchronizationStatus((uint32_t const &)*arg2,(uint32_t const &)*arg3,(uint32_t const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_synchronization_status__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint32_t *arg2 = 0 ;
  uint32_t *arg3 = 0 ;
  uint32_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  uint32_t temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  uint32_t temp4 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VnSensor_write_synchronization_status",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_synchronization_status" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_synchronization_status" "', argument " "2"" of type '" "uint32_t""'");
  } 
  temp2 = static_cast< uint32_t >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_synchronization_status" "', argument " "3"" of type '" "uint32_t""'");
  } 
  temp3 = static_cast< uint32_t >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_synchronization_status" "', argument " "4"" of type '" "uint32_t""'");
  } 
  temp4 = static_cast< uint32_t >(val4);
  arg4 = &temp4;
  (arg1)->writeSynchronizationStatus((uint32_t const &)*arg2,(uint32_t const &)*arg3,(uint32_t const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_synchronization_status(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__SynchronizationStatusRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_synchronization_status__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__SynchronizationStatusRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_synchronization_status__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_VnSensor_write_synchronization_status__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_VnSensor_write_synchronization_status__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_synchronization_status'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeSynchronizationStatus(vn::sensors::SynchronizationStatusRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeSynchronizationStatus(vn::sensors::SynchronizationStatusRegister &)\n"
    "    vn::sensors::VnSensor::writeSynchronizationStatus(uint32_t const &,uint32_t const &,uint32_t const &,bool)\n"
    "    vn::sensors::VnSensor::writeSynchronizationStatus(uint32_t const &,uint32_t const &,uint32_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_filter_basic_control(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::FilterBasicControlRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_filter_basic_control",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_filter_basic_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readFilterBasicControl();
  resultobj = SWIG_NewPointerObj((new vn::sensors::FilterBasicControlRegister(static_cast< const vn::sensors::FilterBasicControlRegister& >(result))), SWIGTYPE_p_vn__sensors__FilterBasicControlRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_filter_basic_control__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::FilterBasicControlRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_filter_basic_control",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_filter_basic_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__FilterBasicControlRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_filter_basic_control" "', argument " "2"" of type '" "vn::sensors::FilterBasicControlRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_filter_basic_control" "', argument " "2"" of type '" "vn::sensors::FilterBasicControlRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::FilterBasicControlRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_filter_basic_control" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeFilterBasicControl(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_filter_basic_control__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::FilterBasicControlRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_filter_basic_control",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_filter_basic_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__FilterBasicControlRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_filter_basic_control" "', argument " "2"" of type '" "vn::sensors::FilterBasicControlRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_filter_basic_control" "', argument " "2"" of type '" "vn::sensors::FilterBasicControlRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::FilterBasicControlRegister * >(argp2);
  (arg1)->writeFilterBasicControl(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_filter_basic_control__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::protocol::uart::MagneticMode arg2 ;
  vn::protocol::uart::ExternalSensorMode arg3 ;
  vn::protocol::uart::ExternalSensorMode arg4 ;
  vn::protocol::uart::ExternalSensorMode arg5 ;
  vn::math::vec3f *arg6 = 0 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:VnSensor_write_filter_basic_control",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_filter_basic_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_filter_basic_control" "', argument " "2"" of type '" "vn::protocol::uart::MagneticMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::MagneticMode >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_filter_basic_control" "', argument " "3"" of type '" "vn::protocol::uart::ExternalSensorMode""'");
  } 
  arg3 = static_cast< vn::protocol::uart::ExternalSensorMode >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_filter_basic_control" "', argument " "4"" of type '" "vn::protocol::uart::ExternalSensorMode""'");
  } 
  arg4 = static_cast< vn::protocol::uart::ExternalSensorMode >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_filter_basic_control" "', argument " "5"" of type '" "vn::protocol::uart::ExternalSensorMode""'");
  } 
  arg5 = static_cast< vn::protocol::uart::ExternalSensorMode >(val5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "VnSensor_write_filter_basic_control" "', argument " "6"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_filter_basic_control" "', argument " "6"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg6 = reinterpret_cast< vn::math::vec3f * >(argp6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "VnSensor_write_filter_basic_control" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  (arg1)->writeFilterBasicControl(arg2,arg3,arg4,arg5,(vn::math::vec3f const &)*arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_filter_basic_control__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::protocol::uart::MagneticMode arg2 ;
  vn::protocol::uart::ExternalSensorMode arg3 ;
  vn::protocol::uart::ExternalSensorMode arg4 ;
  vn::protocol::uart::ExternalSensorMode arg5 ;
  vn::math::vec3f *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:VnSensor_write_filter_basic_control",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_filter_basic_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_filter_basic_control" "', argument " "2"" of type '" "vn::protocol::uart::MagneticMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::MagneticMode >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_filter_basic_control" "', argument " "3"" of type '" "vn::protocol::uart::ExternalSensorMode""'");
  } 
  arg3 = static_cast< vn::protocol::uart::ExternalSensorMode >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_filter_basic_control" "', argument " "4"" of type '" "vn::protocol::uart::ExternalSensorMode""'");
  } 
  arg4 = static_cast< vn::protocol::uart::ExternalSensorMode >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_filter_basic_control" "', argument " "5"" of type '" "vn::protocol::uart::ExternalSensorMode""'");
  } 
  arg5 = static_cast< vn::protocol::uart::ExternalSensorMode >(val5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "VnSensor_write_filter_basic_control" "', argument " "6"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_filter_basic_control" "', argument " "6"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg6 = reinterpret_cast< vn::math::vec3f * >(argp6);
  (arg1)->writeFilterBasicControl(arg2,arg3,arg4,arg5,(vn::math::vec3f const &)*arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_filter_basic_control(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__FilterBasicControlRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_filter_basic_control__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__FilterBasicControlRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_filter_basic_control__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_VnSensor_write_filter_basic_control__SWIG_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_VnSensor_write_filter_basic_control__SWIG_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_filter_basic_control'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeFilterBasicControl(vn::sensors::FilterBasicControlRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeFilterBasicControl(vn::sensors::FilterBasicControlRegister &)\n"
    "    vn::sensors::VnSensor::writeFilterBasicControl(vn::protocol::uart::MagneticMode,vn::protocol::uart::ExternalSensorMode,vn::protocol::uart::ExternalSensorMode,vn::protocol::uart::ExternalSensorMode,vn::math::vec3f const &,bool)\n"
    "    vn::sensors::VnSensor::writeFilterBasicControl(vn::protocol::uart::MagneticMode,vn::protocol::uart::ExternalSensorMode,vn::protocol::uart::ExternalSensorMode,vn::protocol::uart::ExternalSensorMode,vn::math::vec3f const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_vpe_basic_control(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::VpeBasicControlRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_vpe_basic_control",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_vpe_basic_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readVpeBasicControl();
  resultobj = SWIG_NewPointerObj((new vn::sensors::VpeBasicControlRegister(static_cast< const vn::sensors::VpeBasicControlRegister& >(result))), SWIGTYPE_p_vn__sensors__VpeBasicControlRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_vpe_basic_control__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::VpeBasicControlRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_vpe_basic_control",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_vpe_basic_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VpeBasicControlRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_vpe_basic_control" "', argument " "2"" of type '" "vn::sensors::VpeBasicControlRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_basic_control" "', argument " "2"" of type '" "vn::sensors::VpeBasicControlRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VpeBasicControlRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_vpe_basic_control" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeVpeBasicControl(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_vpe_basic_control__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::VpeBasicControlRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_vpe_basic_control",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_vpe_basic_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VpeBasicControlRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_vpe_basic_control" "', argument " "2"" of type '" "vn::sensors::VpeBasicControlRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_basic_control" "', argument " "2"" of type '" "vn::sensors::VpeBasicControlRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VpeBasicControlRegister * >(argp2);
  (arg1)->writeVpeBasicControl(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_vpe_basic_control__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::protocol::uart::VpeEnable arg2 ;
  vn::protocol::uart::HeadingMode arg3 ;
  vn::protocol::uart::VpeMode arg4 ;
  vn::protocol::uart::VpeMode arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:VnSensor_write_vpe_basic_control",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_vpe_basic_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_vpe_basic_control" "', argument " "2"" of type '" "vn::protocol::uart::VpeEnable""'");
  } 
  arg2 = static_cast< vn::protocol::uart::VpeEnable >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_vpe_basic_control" "', argument " "3"" of type '" "vn::protocol::uart::HeadingMode""'");
  } 
  arg3 = static_cast< vn::protocol::uart::HeadingMode >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_vpe_basic_control" "', argument " "4"" of type '" "vn::protocol::uart::VpeMode""'");
  } 
  arg4 = static_cast< vn::protocol::uart::VpeMode >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_vpe_basic_control" "', argument " "5"" of type '" "vn::protocol::uart::VpeMode""'");
  } 
  arg5 = static_cast< vn::protocol::uart::VpeMode >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "VnSensor_write_vpe_basic_control" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  (arg1)->writeVpeBasicControl(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_vpe_basic_control__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::protocol::uart::VpeEnable arg2 ;
  vn::protocol::uart::HeadingMode arg3 ;
  vn::protocol::uart::VpeMode arg4 ;
  vn::protocol::uart::VpeMode arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:VnSensor_write_vpe_basic_control",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_vpe_basic_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_vpe_basic_control" "', argument " "2"" of type '" "vn::protocol::uart::VpeEnable""'");
  } 
  arg2 = static_cast< vn::protocol::uart::VpeEnable >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_vpe_basic_control" "', argument " "3"" of type '" "vn::protocol::uart::HeadingMode""'");
  } 
  arg3 = static_cast< vn::protocol::uart::HeadingMode >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_vpe_basic_control" "', argument " "4"" of type '" "vn::protocol::uart::VpeMode""'");
  } 
  arg4 = static_cast< vn::protocol::uart::VpeMode >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_vpe_basic_control" "', argument " "5"" of type '" "vn::protocol::uart::VpeMode""'");
  } 
  arg5 = static_cast< vn::protocol::uart::VpeMode >(val5);
  (arg1)->writeVpeBasicControl(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_vpe_basic_control(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VpeBasicControlRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_vpe_basic_control__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VpeBasicControlRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_vpe_basic_control__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_VnSensor_write_vpe_basic_control__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_VnSensor_write_vpe_basic_control__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_vpe_basic_control'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeVpeBasicControl(vn::sensors::VpeBasicControlRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeVpeBasicControl(vn::sensors::VpeBasicControlRegister &)\n"
    "    vn::sensors::VnSensor::writeVpeBasicControl(vn::protocol::uart::VpeEnable,vn::protocol::uart::HeadingMode,vn::protocol::uart::VpeMode,vn::protocol::uart::VpeMode,bool)\n"
    "    vn::sensors::VnSensor::writeVpeBasicControl(vn::protocol::uart::VpeEnable,vn::protocol::uart::HeadingMode,vn::protocol::uart::VpeMode,vn::protocol::uart::VpeMode)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_vpe_magnetometer_basic_tuning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::VpeMagnetometerBasicTuningRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_vpe_magnetometer_basic_tuning",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_vpe_magnetometer_basic_tuning" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readVpeMagnetometerBasicTuning();
  resultobj = SWIG_NewPointerObj((new vn::sensors::VpeMagnetometerBasicTuningRegister(static_cast< const vn::sensors::VpeMagnetometerBasicTuningRegister& >(result))), SWIGTYPE_p_vn__sensors__VpeMagnetometerBasicTuningRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_vpe_magnetometer_basic_tuning__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::VpeMagnetometerBasicTuningRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_vpe_magnetometer_basic_tuning",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_vpe_magnetometer_basic_tuning" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VpeMagnetometerBasicTuningRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_vpe_magnetometer_basic_tuning" "', argument " "2"" of type '" "vn::sensors::VpeMagnetometerBasicTuningRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_magnetometer_basic_tuning" "', argument " "2"" of type '" "vn::sensors::VpeMagnetometerBasicTuningRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VpeMagnetometerBasicTuningRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_vpe_magnetometer_basic_tuning" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeVpeMagnetometerBasicTuning(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_vpe_magnetometer_basic_tuning__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::VpeMagnetometerBasicTuningRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_vpe_magnetometer_basic_tuning",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_vpe_magnetometer_basic_tuning" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VpeMagnetometerBasicTuningRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_vpe_magnetometer_basic_tuning" "', argument " "2"" of type '" "vn::sensors::VpeMagnetometerBasicTuningRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_magnetometer_basic_tuning" "', argument " "2"" of type '" "vn::sensors::VpeMagnetometerBasicTuningRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VpeMagnetometerBasicTuningRegister * >(argp2);
  (arg1)->writeVpeMagnetometerBasicTuning(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_vpe_magnetometer_basic_tuning__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::vec3f *arg2 = 0 ;
  vn::math::vec3f *arg3 = 0 ;
  vn::math::vec3f *arg4 = 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:VnSensor_write_vpe_magnetometer_basic_tuning",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_vpe_magnetometer_basic_tuning" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_vpe_magnetometer_basic_tuning" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_magnetometer_basic_tuning" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VnSensor_write_vpe_magnetometer_basic_tuning" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_magnetometer_basic_tuning" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VnSensor_write_vpe_magnetometer_basic_tuning" "', argument " "4"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_magnetometer_basic_tuning" "', argument " "4"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_vpe_magnetometer_basic_tuning" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  (arg1)->writeVpeMagnetometerBasicTuning((vn::math::vec3f const &)*arg2,(vn::math::vec3f const &)*arg3,(vn::math::vec3f const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_vpe_magnetometer_basic_tuning__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::vec3f *arg2 = 0 ;
  vn::math::vec3f *arg3 = 0 ;
  vn::math::vec3f *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VnSensor_write_vpe_magnetometer_basic_tuning",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_vpe_magnetometer_basic_tuning" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_vpe_magnetometer_basic_tuning" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_magnetometer_basic_tuning" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VnSensor_write_vpe_magnetometer_basic_tuning" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_magnetometer_basic_tuning" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VnSensor_write_vpe_magnetometer_basic_tuning" "', argument " "4"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_magnetometer_basic_tuning" "', argument " "4"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  (arg1)->writeVpeMagnetometerBasicTuning((vn::math::vec3f const &)*arg2,(vn::math::vec3f const &)*arg3,(vn::math::vec3f const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_vpe_magnetometer_basic_tuning(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VpeMagnetometerBasicTuningRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_vpe_magnetometer_basic_tuning__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VpeMagnetometerBasicTuningRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_vpe_magnetometer_basic_tuning__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VnSensor_write_vpe_magnetometer_basic_tuning__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_VnSensor_write_vpe_magnetometer_basic_tuning__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_vpe_magnetometer_basic_tuning'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeVpeMagnetometerBasicTuning(vn::sensors::VpeMagnetometerBasicTuningRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeVpeMagnetometerBasicTuning(vn::sensors::VpeMagnetometerBasicTuningRegister &)\n"
    "    vn::sensors::VnSensor::writeVpeMagnetometerBasicTuning(vn::math::vec3f const &,vn::math::vec3f const &,vn::math::vec3f const &,bool)\n"
    "    vn::sensors::VnSensor::writeVpeMagnetometerBasicTuning(vn::math::vec3f const &,vn::math::vec3f const &,vn::math::vec3f const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_vpe_magnetometer_advanced_tuning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::VpeMagnetometerAdvancedTuningRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_vpe_magnetometer_advanced_tuning",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_vpe_magnetometer_advanced_tuning" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readVpeMagnetometerAdvancedTuning();
  resultobj = SWIG_NewPointerObj((new vn::sensors::VpeMagnetometerAdvancedTuningRegister(static_cast< const vn::sensors::VpeMagnetometerAdvancedTuningRegister& >(result))), SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_vpe_magnetometer_advanced_tuning__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::VpeMagnetometerAdvancedTuningRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_vpe_magnetometer_advanced_tuning",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_vpe_magnetometer_advanced_tuning" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_vpe_magnetometer_advanced_tuning" "', argument " "2"" of type '" "vn::sensors::VpeMagnetometerAdvancedTuningRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_magnetometer_advanced_tuning" "', argument " "2"" of type '" "vn::sensors::VpeMagnetometerAdvancedTuningRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VpeMagnetometerAdvancedTuningRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_vpe_magnetometer_advanced_tuning" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeVpeMagnetometerAdvancedTuning(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_vpe_magnetometer_advanced_tuning__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::VpeMagnetometerAdvancedTuningRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_vpe_magnetometer_advanced_tuning",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_vpe_magnetometer_advanced_tuning" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_vpe_magnetometer_advanced_tuning" "', argument " "2"" of type '" "vn::sensors::VpeMagnetometerAdvancedTuningRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_magnetometer_advanced_tuning" "', argument " "2"" of type '" "vn::sensors::VpeMagnetometerAdvancedTuningRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VpeMagnetometerAdvancedTuningRegister * >(argp2);
  (arg1)->writeVpeMagnetometerAdvancedTuning(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_vpe_magnetometer_advanced_tuning__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::vec3f *arg2 = 0 ;
  vn::math::vec3f *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  float temp6 ;
  float val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:VnSensor_write_vpe_magnetometer_advanced_tuning",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_vpe_magnetometer_advanced_tuning" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_vpe_magnetometer_advanced_tuning" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_magnetometer_advanced_tuning" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VnSensor_write_vpe_magnetometer_advanced_tuning" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_magnetometer_advanced_tuning" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_vpe_magnetometer_advanced_tuning" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_vpe_magnetometer_advanced_tuning" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "VnSensor_write_vpe_magnetometer_advanced_tuning" "', argument " "6"" of type '" "float""'");
  } 
  temp6 = static_cast< float >(val6);
  arg6 = &temp6;
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "VnSensor_write_vpe_magnetometer_advanced_tuning" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  (arg1)->writeVpeMagnetometerAdvancedTuning((vn::math::vec3f const &)*arg2,(vn::math::vec3f const &)*arg3,(float const &)*arg4,(float const &)*arg5,(float const &)*arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_vpe_magnetometer_advanced_tuning__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::vec3f *arg2 = 0 ;
  vn::math::vec3f *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  float temp6 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:VnSensor_write_vpe_magnetometer_advanced_tuning",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_vpe_magnetometer_advanced_tuning" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_vpe_magnetometer_advanced_tuning" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_magnetometer_advanced_tuning" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VnSensor_write_vpe_magnetometer_advanced_tuning" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_magnetometer_advanced_tuning" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_vpe_magnetometer_advanced_tuning" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_vpe_magnetometer_advanced_tuning" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "VnSensor_write_vpe_magnetometer_advanced_tuning" "', argument " "6"" of type '" "float""'");
  } 
  temp6 = static_cast< float >(val6);
  arg6 = &temp6;
  (arg1)->writeVpeMagnetometerAdvancedTuning((vn::math::vec3f const &)*arg2,(vn::math::vec3f const &)*arg3,(float const &)*arg4,(float const &)*arg5,(float const &)*arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_vpe_magnetometer_advanced_tuning(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_vpe_magnetometer_advanced_tuning__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_vpe_magnetometer_advanced_tuning__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_VnSensor_write_vpe_magnetometer_advanced_tuning__SWIG_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_VnSensor_write_vpe_magnetometer_advanced_tuning__SWIG_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_vpe_magnetometer_advanced_tuning'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeVpeMagnetometerAdvancedTuning(vn::sensors::VpeMagnetometerAdvancedTuningRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeVpeMagnetometerAdvancedTuning(vn::sensors::VpeMagnetometerAdvancedTuningRegister &)\n"
    "    vn::sensors::VnSensor::writeVpeMagnetometerAdvancedTuning(vn::math::vec3f const &,vn::math::vec3f const &,float const &,float const &,float const &,bool)\n"
    "    vn::sensors::VnSensor::writeVpeMagnetometerAdvancedTuning(vn::math::vec3f const &,vn::math::vec3f const &,float const &,float const &,float const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_vpe_accelerometer_basic_tuning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::VpeAccelerometerBasicTuningRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_vpe_accelerometer_basic_tuning",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_vpe_accelerometer_basic_tuning" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readVpeAccelerometerBasicTuning();
  resultobj = SWIG_NewPointerObj((new vn::sensors::VpeAccelerometerBasicTuningRegister(static_cast< const vn::sensors::VpeAccelerometerBasicTuningRegister& >(result))), SWIGTYPE_p_vn__sensors__VpeAccelerometerBasicTuningRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_vpe_accelerometer_basic_tuning__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::VpeAccelerometerBasicTuningRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_vpe_accelerometer_basic_tuning",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_vpe_accelerometer_basic_tuning" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VpeAccelerometerBasicTuningRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_vpe_accelerometer_basic_tuning" "', argument " "2"" of type '" "vn::sensors::VpeAccelerometerBasicTuningRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_accelerometer_basic_tuning" "', argument " "2"" of type '" "vn::sensors::VpeAccelerometerBasicTuningRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VpeAccelerometerBasicTuningRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_vpe_accelerometer_basic_tuning" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeVpeAccelerometerBasicTuning(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_vpe_accelerometer_basic_tuning__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::VpeAccelerometerBasicTuningRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_vpe_accelerometer_basic_tuning",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_vpe_accelerometer_basic_tuning" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VpeAccelerometerBasicTuningRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_vpe_accelerometer_basic_tuning" "', argument " "2"" of type '" "vn::sensors::VpeAccelerometerBasicTuningRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_accelerometer_basic_tuning" "', argument " "2"" of type '" "vn::sensors::VpeAccelerometerBasicTuningRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VpeAccelerometerBasicTuningRegister * >(argp2);
  (arg1)->writeVpeAccelerometerBasicTuning(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_vpe_accelerometer_basic_tuning__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::vec3f *arg2 = 0 ;
  vn::math::vec3f *arg3 = 0 ;
  vn::math::vec3f *arg4 = 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:VnSensor_write_vpe_accelerometer_basic_tuning",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_vpe_accelerometer_basic_tuning" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_vpe_accelerometer_basic_tuning" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_accelerometer_basic_tuning" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VnSensor_write_vpe_accelerometer_basic_tuning" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_accelerometer_basic_tuning" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VnSensor_write_vpe_accelerometer_basic_tuning" "', argument " "4"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_accelerometer_basic_tuning" "', argument " "4"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_vpe_accelerometer_basic_tuning" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  (arg1)->writeVpeAccelerometerBasicTuning((vn::math::vec3f const &)*arg2,(vn::math::vec3f const &)*arg3,(vn::math::vec3f const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_vpe_accelerometer_basic_tuning__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::vec3f *arg2 = 0 ;
  vn::math::vec3f *arg3 = 0 ;
  vn::math::vec3f *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VnSensor_write_vpe_accelerometer_basic_tuning",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_vpe_accelerometer_basic_tuning" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_vpe_accelerometer_basic_tuning" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_accelerometer_basic_tuning" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VnSensor_write_vpe_accelerometer_basic_tuning" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_accelerometer_basic_tuning" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VnSensor_write_vpe_accelerometer_basic_tuning" "', argument " "4"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_accelerometer_basic_tuning" "', argument " "4"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  (arg1)->writeVpeAccelerometerBasicTuning((vn::math::vec3f const &)*arg2,(vn::math::vec3f const &)*arg3,(vn::math::vec3f const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_vpe_accelerometer_basic_tuning(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VpeAccelerometerBasicTuningRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_vpe_accelerometer_basic_tuning__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VpeAccelerometerBasicTuningRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_vpe_accelerometer_basic_tuning__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VnSensor_write_vpe_accelerometer_basic_tuning__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_VnSensor_write_vpe_accelerometer_basic_tuning__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_vpe_accelerometer_basic_tuning'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeVpeAccelerometerBasicTuning(vn::sensors::VpeAccelerometerBasicTuningRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeVpeAccelerometerBasicTuning(vn::sensors::VpeAccelerometerBasicTuningRegister &)\n"
    "    vn::sensors::VnSensor::writeVpeAccelerometerBasicTuning(vn::math::vec3f const &,vn::math::vec3f const &,vn::math::vec3f const &,bool)\n"
    "    vn::sensors::VnSensor::writeVpeAccelerometerBasicTuning(vn::math::vec3f const &,vn::math::vec3f const &,vn::math::vec3f const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_vpe_accelerometer_advanced_tuning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::VpeAccelerometerAdvancedTuningRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_vpe_accelerometer_advanced_tuning",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_vpe_accelerometer_advanced_tuning" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readVpeAccelerometerAdvancedTuning();
  resultobj = SWIG_NewPointerObj((new vn::sensors::VpeAccelerometerAdvancedTuningRegister(static_cast< const vn::sensors::VpeAccelerometerAdvancedTuningRegister& >(result))), SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_vpe_accelerometer_advanced_tuning__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::VpeAccelerometerAdvancedTuningRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_vpe_accelerometer_advanced_tuning",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_vpe_accelerometer_advanced_tuning" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_vpe_accelerometer_advanced_tuning" "', argument " "2"" of type '" "vn::sensors::VpeAccelerometerAdvancedTuningRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_accelerometer_advanced_tuning" "', argument " "2"" of type '" "vn::sensors::VpeAccelerometerAdvancedTuningRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VpeAccelerometerAdvancedTuningRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_vpe_accelerometer_advanced_tuning" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeVpeAccelerometerAdvancedTuning(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_vpe_accelerometer_advanced_tuning__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::VpeAccelerometerAdvancedTuningRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_vpe_accelerometer_advanced_tuning",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_vpe_accelerometer_advanced_tuning" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_vpe_accelerometer_advanced_tuning" "', argument " "2"" of type '" "vn::sensors::VpeAccelerometerAdvancedTuningRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_accelerometer_advanced_tuning" "', argument " "2"" of type '" "vn::sensors::VpeAccelerometerAdvancedTuningRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VpeAccelerometerAdvancedTuningRegister * >(argp2);
  (arg1)->writeVpeAccelerometerAdvancedTuning(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_vpe_accelerometer_advanced_tuning__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::vec3f *arg2 = 0 ;
  vn::math::vec3f *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  float temp6 ;
  float val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:VnSensor_write_vpe_accelerometer_advanced_tuning",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_vpe_accelerometer_advanced_tuning" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_vpe_accelerometer_advanced_tuning" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_accelerometer_advanced_tuning" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VnSensor_write_vpe_accelerometer_advanced_tuning" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_accelerometer_advanced_tuning" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_vpe_accelerometer_advanced_tuning" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_vpe_accelerometer_advanced_tuning" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "VnSensor_write_vpe_accelerometer_advanced_tuning" "', argument " "6"" of type '" "float""'");
  } 
  temp6 = static_cast< float >(val6);
  arg6 = &temp6;
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "VnSensor_write_vpe_accelerometer_advanced_tuning" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  (arg1)->writeVpeAccelerometerAdvancedTuning((vn::math::vec3f const &)*arg2,(vn::math::vec3f const &)*arg3,(float const &)*arg4,(float const &)*arg5,(float const &)*arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_vpe_accelerometer_advanced_tuning__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::vec3f *arg2 = 0 ;
  vn::math::vec3f *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  float temp6 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:VnSensor_write_vpe_accelerometer_advanced_tuning",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_vpe_accelerometer_advanced_tuning" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_vpe_accelerometer_advanced_tuning" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_accelerometer_advanced_tuning" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VnSensor_write_vpe_accelerometer_advanced_tuning" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_vpe_accelerometer_advanced_tuning" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_vpe_accelerometer_advanced_tuning" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_vpe_accelerometer_advanced_tuning" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "VnSensor_write_vpe_accelerometer_advanced_tuning" "', argument " "6"" of type '" "float""'");
  } 
  temp6 = static_cast< float >(val6);
  arg6 = &temp6;
  (arg1)->writeVpeAccelerometerAdvancedTuning((vn::math::vec3f const &)*arg2,(vn::math::vec3f const &)*arg3,(float const &)*arg4,(float const &)*arg5,(float const &)*arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_vpe_accelerometer_advanced_tuning(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_vpe_accelerometer_advanced_tuning__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_vpe_accelerometer_advanced_tuning__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_VnSensor_write_vpe_accelerometer_advanced_tuning__SWIG_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_VnSensor_write_vpe_accelerometer_advanced_tuning__SWIG_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_vpe_accelerometer_advanced_tuning'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeVpeAccelerometerAdvancedTuning(vn::sensors::VpeAccelerometerAdvancedTuningRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeVpeAccelerometerAdvancedTuning(vn::sensors::VpeAccelerometerAdvancedTuningRegister &)\n"
    "    vn::sensors::VnSensor::writeVpeAccelerometerAdvancedTuning(vn::math::vec3f const &,vn::math::vec3f const &,float const &,float const &,float const &,bool)\n"
    "    vn::sensors::VnSensor::writeVpeAccelerometerAdvancedTuning(vn::math::vec3f const &,vn::math::vec3f const &,float const &,float const &,float const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_readVpeGyroBasicTuning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::VpeGyroBasicTuningRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_readVpeGyroBasicTuning",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_readVpeGyroBasicTuning" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readVpeGyroBasicTuning();
  resultobj = SWIG_NewPointerObj((new vn::sensors::VpeGyroBasicTuningRegister(static_cast< const vn::sensors::VpeGyroBasicTuningRegister& >(result))), SWIGTYPE_p_vn__sensors__VpeGyroBasicTuningRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_writeVpeGyroBasicTuning__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::VpeGyroBasicTuningRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_writeVpeGyroBasicTuning",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_writeVpeGyroBasicTuning" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VpeGyroBasicTuningRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_writeVpeGyroBasicTuning" "', argument " "2"" of type '" "vn::sensors::VpeGyroBasicTuningRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_writeVpeGyroBasicTuning" "', argument " "2"" of type '" "vn::sensors::VpeGyroBasicTuningRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VpeGyroBasicTuningRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_writeVpeGyroBasicTuning" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeVpeGyroBasicTuning(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_writeVpeGyroBasicTuning__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::VpeGyroBasicTuningRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_writeVpeGyroBasicTuning",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_writeVpeGyroBasicTuning" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VpeGyroBasicTuningRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_writeVpeGyroBasicTuning" "', argument " "2"" of type '" "vn::sensors::VpeGyroBasicTuningRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_writeVpeGyroBasicTuning" "', argument " "2"" of type '" "vn::sensors::VpeGyroBasicTuningRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VpeGyroBasicTuningRegister * >(argp2);
  (arg1)->writeVpeGyroBasicTuning(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_writeVpeGyroBasicTuning__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::vec3f *arg2 = 0 ;
  vn::math::vec3f *arg3 = 0 ;
  vn::math::vec3f *arg4 = 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:VnSensor_writeVpeGyroBasicTuning",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_writeVpeGyroBasicTuning" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_writeVpeGyroBasicTuning" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_writeVpeGyroBasicTuning" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VnSensor_writeVpeGyroBasicTuning" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_writeVpeGyroBasicTuning" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VnSensor_writeVpeGyroBasicTuning" "', argument " "4"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_writeVpeGyroBasicTuning" "', argument " "4"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_writeVpeGyroBasicTuning" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  (arg1)->writeVpeGyroBasicTuning((vn::math::vec3f const &)*arg2,(vn::math::vec3f const &)*arg3,(vn::math::vec3f const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_writeVpeGyroBasicTuning__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::vec3f *arg2 = 0 ;
  vn::math::vec3f *arg3 = 0 ;
  vn::math::vec3f *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VnSensor_writeVpeGyroBasicTuning",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_writeVpeGyroBasicTuning" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_writeVpeGyroBasicTuning" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_writeVpeGyroBasicTuning" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VnSensor_writeVpeGyroBasicTuning" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_writeVpeGyroBasicTuning" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VnSensor_writeVpeGyroBasicTuning" "', argument " "4"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_writeVpeGyroBasicTuning" "', argument " "4"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg4 = reinterpret_cast< vn::math::vec3f * >(argp4);
  (arg1)->writeVpeGyroBasicTuning((vn::math::vec3f const &)*arg2,(vn::math::vec3f const &)*arg3,(vn::math::vec3f const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_writeVpeGyroBasicTuning(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VpeGyroBasicTuningRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_writeVpeGyroBasicTuning__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VpeGyroBasicTuningRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_writeVpeGyroBasicTuning__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VnSensor_writeVpeGyroBasicTuning__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_VnSensor_writeVpeGyroBasicTuning__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_writeVpeGyroBasicTuning'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeVpeGyroBasicTuning(vn::sensors::VpeGyroBasicTuningRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeVpeGyroBasicTuning(vn::sensors::VpeGyroBasicTuningRegister &)\n"
    "    vn::sensors::VnSensor::writeVpeGyroBasicTuning(vn::math::vec3f const &,vn::math::vec3f const &,vn::math::vec3f const &,bool)\n"
    "    vn::sensors::VnSensor::writeVpeGyroBasicTuning(vn::math::vec3f const &,vn::math::vec3f const &,vn::math::vec3f const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_filter_startup_gyro_bias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_filter_startup_gyro_bias",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_filter_startup_gyro_bias" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readFilterStartupGyroBias();
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_filter_startup_gyro_bias__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::vec3f *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_filter_startup_gyro_bias",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_filter_startup_gyro_bias" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_filter_startup_gyro_bias" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_filter_startup_gyro_bias" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_filter_startup_gyro_bias" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeFilterStartupGyroBias((vn::math::vec3f const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_filter_startup_gyro_bias__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_filter_startup_gyro_bias",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_filter_startup_gyro_bias" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_filter_startup_gyro_bias" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_filter_startup_gyro_bias" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  (arg1)->writeFilterStartupGyroBias((vn::math::vec3f const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_filter_startup_gyro_bias(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_filter_startup_gyro_bias__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_filter_startup_gyro_bias__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_filter_startup_gyro_bias'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeFilterStartupGyroBias(vn::math::vec3f const &,bool)\n"
    "    vn::sensors::VnSensor::writeFilterStartupGyroBias(vn::math::vec3f const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_magnetometer_calibration_control(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::MagnetometerCalibrationControlRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_magnetometer_calibration_control",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_magnetometer_calibration_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readMagnetometerCalibrationControl();
  resultobj = SWIG_NewPointerObj((new vn::sensors::MagnetometerCalibrationControlRegister(static_cast< const vn::sensors::MagnetometerCalibrationControlRegister& >(result))), SWIGTYPE_p_vn__sensors__MagnetometerCalibrationControlRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_magnetometer_calibration_control__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::MagnetometerCalibrationControlRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_magnetometer_calibration_control",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_magnetometer_calibration_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__MagnetometerCalibrationControlRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_magnetometer_calibration_control" "', argument " "2"" of type '" "vn::sensors::MagnetometerCalibrationControlRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_magnetometer_calibration_control" "', argument " "2"" of type '" "vn::sensors::MagnetometerCalibrationControlRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::MagnetometerCalibrationControlRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_magnetometer_calibration_control" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeMagnetometerCalibrationControl(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_magnetometer_calibration_control__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::MagnetometerCalibrationControlRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_magnetometer_calibration_control",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_magnetometer_calibration_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__MagnetometerCalibrationControlRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_magnetometer_calibration_control" "', argument " "2"" of type '" "vn::sensors::MagnetometerCalibrationControlRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_magnetometer_calibration_control" "', argument " "2"" of type '" "vn::sensors::MagnetometerCalibrationControlRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::MagnetometerCalibrationControlRegister * >(argp2);
  (arg1)->writeMagnetometerCalibrationControl(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_magnetometer_calibration_control__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::protocol::uart::HsiMode arg2 ;
  vn::protocol::uart::HsiOutput arg3 ;
  uint8_t *arg4 = 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  uint8_t temp4 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:VnSensor_write_magnetometer_calibration_control",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_magnetometer_calibration_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_magnetometer_calibration_control" "', argument " "2"" of type '" "vn::protocol::uart::HsiMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::HsiMode >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_magnetometer_calibration_control" "', argument " "3"" of type '" "vn::protocol::uart::HsiOutput""'");
  } 
  arg3 = static_cast< vn::protocol::uart::HsiOutput >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_magnetometer_calibration_control" "', argument " "4"" of type '" "uint8_t""'");
  } 
  temp4 = static_cast< uint8_t >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_magnetometer_calibration_control" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  (arg1)->writeMagnetometerCalibrationControl(arg2,arg3,(uint8_t const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_magnetometer_calibration_control__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::protocol::uart::HsiMode arg2 ;
  vn::protocol::uart::HsiOutput arg3 ;
  uint8_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  uint8_t temp4 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VnSensor_write_magnetometer_calibration_control",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_magnetometer_calibration_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_magnetometer_calibration_control" "', argument " "2"" of type '" "vn::protocol::uart::HsiMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::HsiMode >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_magnetometer_calibration_control" "', argument " "3"" of type '" "vn::protocol::uart::HsiOutput""'");
  } 
  arg3 = static_cast< vn::protocol::uart::HsiOutput >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_magnetometer_calibration_control" "', argument " "4"" of type '" "uint8_t""'");
  } 
  temp4 = static_cast< uint8_t >(val4);
  arg4 = &temp4;
  (arg1)->writeMagnetometerCalibrationControl(arg2,arg3,(uint8_t const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_magnetometer_calibration_control(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__MagnetometerCalibrationControlRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_magnetometer_calibration_control__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__MagnetometerCalibrationControlRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_magnetometer_calibration_control__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_VnSensor_write_magnetometer_calibration_control__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_VnSensor_write_magnetometer_calibration_control__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_magnetometer_calibration_control'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeMagnetometerCalibrationControl(vn::sensors::MagnetometerCalibrationControlRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeMagnetometerCalibrationControl(vn::sensors::MagnetometerCalibrationControlRegister &)\n"
    "    vn::sensors::VnSensor::writeMagnetometerCalibrationControl(vn::protocol::uart::HsiMode,vn::protocol::uart::HsiOutput,uint8_t const &,bool)\n"
    "    vn::sensors::VnSensor::writeMagnetometerCalibrationControl(vn::protocol::uart::HsiMode,vn::protocol::uart::HsiOutput,uint8_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_calculated_magnetometer_calibration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::CalculatedMagnetometerCalibrationRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_calculated_magnetometer_calibration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_calculated_magnetometer_calibration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readCalculatedMagnetometerCalibration();
  resultobj = SWIG_NewPointerObj((new vn::sensors::CalculatedMagnetometerCalibrationRegister(static_cast< const vn::sensors::CalculatedMagnetometerCalibrationRegister& >(result))), SWIGTYPE_p_vn__sensors__CalculatedMagnetometerCalibrationRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_indoor_heading_mode_control(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_indoor_heading_mode_control",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_indoor_heading_mode_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (float)(arg1)->readIndoorHeadingModeControl();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_indoor_heading_mode_control__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  float *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_indoor_heading_mode_control",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_indoor_heading_mode_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_indoor_heading_mode_control" "', argument " "2"" of type '" "float""'");
  } 
  temp2 = static_cast< float >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_indoor_heading_mode_control" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeIndoorHeadingModeControl((float const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_indoor_heading_mode_control__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_indoor_heading_mode_control",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_indoor_heading_mode_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_indoor_heading_mode_control" "', argument " "2"" of type '" "float""'");
  } 
  temp2 = static_cast< float >(val2);
  arg2 = &temp2;
  (arg1)->writeIndoorHeadingModeControl((float const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_indoor_heading_mode_control(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VnSensor_write_indoor_heading_mode_control__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_indoor_heading_mode_control__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_indoor_heading_mode_control'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeIndoorHeadingModeControl(float const &,bool)\n"
    "    vn::sensors::VnSensor::writeIndoorHeadingModeControl(float const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_velocity_compensation_measurement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_velocity_compensation_measurement",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_velocity_compensation_measurement" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readVelocityCompensationMeasurement();
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_velocity_compensation_measurement__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::vec3f *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_velocity_compensation_measurement",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_velocity_compensation_measurement" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_velocity_compensation_measurement" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_velocity_compensation_measurement" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_velocity_compensation_measurement" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeVelocityCompensationMeasurement((vn::math::vec3f const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_velocity_compensation_measurement__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_velocity_compensation_measurement",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_velocity_compensation_measurement" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_velocity_compensation_measurement" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_velocity_compensation_measurement" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  (arg1)->writeVelocityCompensationMeasurement((vn::math::vec3f const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_velocity_compensation_measurement(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_velocity_compensation_measurement__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_velocity_compensation_measurement__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_velocity_compensation_measurement'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeVelocityCompensationMeasurement(vn::math::vec3f const &,bool)\n"
    "    vn::sensors::VnSensor::writeVelocityCompensationMeasurement(vn::math::vec3f const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_velocity_compensation_control(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::VelocityCompensationControlRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_velocity_compensation_control",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_velocity_compensation_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readVelocityCompensationControl();
  resultobj = SWIG_NewPointerObj((new vn::sensors::VelocityCompensationControlRegister(static_cast< const vn::sensors::VelocityCompensationControlRegister& >(result))), SWIGTYPE_p_vn__sensors__VelocityCompensationControlRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_velocity_compensation_control__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::VelocityCompensationControlRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_velocity_compensation_control",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_velocity_compensation_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VelocityCompensationControlRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_velocity_compensation_control" "', argument " "2"" of type '" "vn::sensors::VelocityCompensationControlRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_velocity_compensation_control" "', argument " "2"" of type '" "vn::sensors::VelocityCompensationControlRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VelocityCompensationControlRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_velocity_compensation_control" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeVelocityCompensationControl(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_velocity_compensation_control__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::VelocityCompensationControlRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_velocity_compensation_control",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_velocity_compensation_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__VelocityCompensationControlRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_velocity_compensation_control" "', argument " "2"" of type '" "vn::sensors::VelocityCompensationControlRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_velocity_compensation_control" "', argument " "2"" of type '" "vn::sensors::VelocityCompensationControlRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::VelocityCompensationControlRegister * >(argp2);
  (arg1)->writeVelocityCompensationControl(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_velocity_compensation_control__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::protocol::uart::VelocityCompensationMode arg2 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:VnSensor_write_velocity_compensation_control",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_velocity_compensation_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_velocity_compensation_control" "', argument " "2"" of type '" "vn::protocol::uart::VelocityCompensationMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::VelocityCompensationMode >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_velocity_compensation_control" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_velocity_compensation_control" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_velocity_compensation_control" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  (arg1)->writeVelocityCompensationControl(arg2,(float const &)*arg3,(float const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_velocity_compensation_control__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::protocol::uart::VelocityCompensationMode arg2 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VnSensor_write_velocity_compensation_control",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_velocity_compensation_control" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_velocity_compensation_control" "', argument " "2"" of type '" "vn::protocol::uart::VelocityCompensationMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::VelocityCompensationMode >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_velocity_compensation_control" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_velocity_compensation_control" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  (arg1)->writeVelocityCompensationControl(arg2,(float const &)*arg3,(float const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_velocity_compensation_control(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VelocityCompensationControlRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_velocity_compensation_control__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__VelocityCompensationControlRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_velocity_compensation_control__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_VnSensor_write_velocity_compensation_control__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_VnSensor_write_velocity_compensation_control__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_velocity_compensation_control'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeVelocityCompensationControl(vn::sensors::VelocityCompensationControlRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeVelocityCompensationControl(vn::sensors::VelocityCompensationControlRegister &)\n"
    "    vn::sensors::VnSensor::writeVelocityCompensationControl(vn::protocol::uart::VelocityCompensationMode,float const &,float const &,bool)\n"
    "    vn::sensors::VnSensor::writeVelocityCompensationControl(vn::protocol::uart::VelocityCompensationMode,float const &,float const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_velocity_compensation_status(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::VelocityCompensationStatusRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_velocity_compensation_status",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_velocity_compensation_status" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readVelocityCompensationStatus();
  resultobj = SWIG_NewPointerObj((new vn::sensors::VelocityCompensationStatusRegister(static_cast< const vn::sensors::VelocityCompensationStatusRegister& >(result))), SWIGTYPE_p_vn__sensors__VelocityCompensationStatusRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_imu_measurements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::ImuMeasurementsRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_imu_measurements",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_imu_measurements" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readImuMeasurements();
  resultobj = SWIG_NewPointerObj((new vn::sensors::ImuMeasurementsRegister(static_cast< const vn::sensors::ImuMeasurementsRegister& >(result))), SWIGTYPE_p_vn__sensors__ImuMeasurementsRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_gps_configuration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::GpsConfigurationRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_gps_configuration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_gps_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readGpsConfiguration();
  resultobj = SWIG_NewPointerObj((new vn::sensors::GpsConfigurationRegister(static_cast< const vn::sensors::GpsConfigurationRegister& >(result))), SWIGTYPE_p_vn__sensors__GpsConfigurationRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_gps_configuration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::GpsConfigurationRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_gps_configuration",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_gps_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__GpsConfigurationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_gps_configuration" "', argument " "2"" of type '" "vn::sensors::GpsConfigurationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_gps_configuration" "', argument " "2"" of type '" "vn::sensors::GpsConfigurationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::GpsConfigurationRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_gps_configuration" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeGpsConfiguration(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_gps_configuration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::GpsConfigurationRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_gps_configuration",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_gps_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__GpsConfigurationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_gps_configuration" "', argument " "2"" of type '" "vn::sensors::GpsConfigurationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_gps_configuration" "', argument " "2"" of type '" "vn::sensors::GpsConfigurationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::GpsConfigurationRegister * >(argp2);
  (arg1)->writeGpsConfiguration(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_gps_configuration__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::protocol::uart::GpsMode arg2 ;
  vn::protocol::uart::PpsSource arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VnSensor_write_gps_configuration",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_gps_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_gps_configuration" "', argument " "2"" of type '" "vn::protocol::uart::GpsMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::GpsMode >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_gps_configuration" "', argument " "3"" of type '" "vn::protocol::uart::PpsSource""'");
  } 
  arg3 = static_cast< vn::protocol::uart::PpsSource >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_gps_configuration" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->writeGpsConfiguration(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_gps_configuration__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::protocol::uart::GpsMode arg2 ;
  vn::protocol::uart::PpsSource arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_gps_configuration",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_gps_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_gps_configuration" "', argument " "2"" of type '" "vn::protocol::uart::GpsMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::GpsMode >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_gps_configuration" "', argument " "3"" of type '" "vn::protocol::uart::PpsSource""'");
  } 
  arg3 = static_cast< vn::protocol::uart::PpsSource >(val3);
  (arg1)->writeGpsConfiguration(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_gps_configuration(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__GpsConfigurationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_gps_configuration__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__GpsConfigurationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_gps_configuration__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_gps_configuration__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_VnSensor_write_gps_configuration__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_gps_configuration'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeGpsConfiguration(vn::sensors::GpsConfigurationRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeGpsConfiguration(vn::sensors::GpsConfigurationRegister &)\n"
    "    vn::sensors::VnSensor::writeGpsConfiguration(vn::protocol::uart::GpsMode,vn::protocol::uart::PpsSource,bool)\n"
    "    vn::sensors::VnSensor::writeGpsConfiguration(vn::protocol::uart::GpsMode,vn::protocol::uart::PpsSource)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_gps_antenna_offset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_gps_antenna_offset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_gps_antenna_offset" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readGpsAntennaOffset();
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_gps_antenna_offset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::vec3f *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_gps_antenna_offset",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_gps_antenna_offset" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_gps_antenna_offset" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_gps_antenna_offset" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_gps_antenna_offset" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeGpsAntennaOffset((vn::math::vec3f const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_gps_antenna_offset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_gps_antenna_offset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_gps_antenna_offset" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_gps_antenna_offset" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_gps_antenna_offset" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  (arg1)->writeGpsAntennaOffset((vn::math::vec3f const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_gps_antenna_offset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_gps_antenna_offset__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_gps_antenna_offset__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_gps_antenna_offset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeGpsAntennaOffset(vn::math::vec3f const &,bool)\n"
    "    vn::sensors::VnSensor::writeGpsAntennaOffset(vn::math::vec3f const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_gps_solution_lla(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::GpsSolutionLlaRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_gps_solution_lla",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_gps_solution_lla" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readGpsSolutionLla();
  resultobj = SWIG_NewPointerObj((new vn::sensors::GpsSolutionLlaRegister(static_cast< const vn::sensors::GpsSolutionLlaRegister& >(result))), SWIGTYPE_p_vn__sensors__GpsSolutionLlaRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_gps_solution_ecef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::GpsSolutionEcefRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_gps_solution_ecef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_gps_solution_ecef" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readGpsSolutionEcef();
  resultobj = SWIG_NewPointerObj((new vn::sensors::GpsSolutionEcefRegister(static_cast< const vn::sensors::GpsSolutionEcefRegister& >(result))), SWIGTYPE_p_vn__sensors__GpsSolutionEcefRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_ins_solution_lla(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::InsSolutionLlaRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_ins_solution_lla",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_ins_solution_lla" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readInsSolutionLla();
  resultobj = SWIG_NewPointerObj((new vn::sensors::InsSolutionLlaRegister(static_cast< const vn::sensors::InsSolutionLlaRegister& >(result))), SWIGTYPE_p_vn__sensors__InsSolutionLlaRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_ins_solution_ecef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::InsSolutionEcefRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_ins_solution_ecef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_ins_solution_ecef" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readInsSolutionEcef();
  resultobj = SWIG_NewPointerObj((new vn::sensors::InsSolutionEcefRegister(static_cast< const vn::sensors::InsSolutionEcefRegister& >(result))), SWIGTYPE_p_vn__sensors__InsSolutionEcefRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_ins_advanced_configuration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::InsAdvancedConfigurationRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_ins_advanced_configuration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_ins_advanced_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readInsAdvancedConfiguration();
  resultobj = SWIG_NewPointerObj((new vn::sensors::InsAdvancedConfigurationRegister(static_cast< const vn::sensors::InsAdvancedConfigurationRegister& >(result))), SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_ins_advanced_configuration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::InsAdvancedConfigurationRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_ins_advanced_configuration",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "2"" of type '" "vn::sensors::InsAdvancedConfigurationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "2"" of type '" "vn::sensors::InsAdvancedConfigurationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeInsAdvancedConfiguration(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_ins_advanced_configuration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::InsAdvancedConfigurationRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_ins_advanced_configuration",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "2"" of type '" "vn::sensors::InsAdvancedConfigurationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "2"" of type '" "vn::sensors::InsAdvancedConfigurationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::InsAdvancedConfigurationRegister * >(argp2);
  (arg1)->writeInsAdvancedConfiguration(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_ins_advanced_configuration__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint8_t *arg2 = 0 ;
  uint8_t *arg3 = 0 ;
  uint8_t *arg4 = 0 ;
  uint8_t *arg5 = 0 ;
  uint8_t *arg6 = 0 ;
  vn::protocol::uart::FoamInit arg7 ;
  uint8_t *arg8 = 0 ;
  uint8_t *arg9 = 0 ;
  float *arg10 = 0 ;
  float *arg11 = 0 ;
  float *arg12 = 0 ;
  float *arg13 = 0 ;
  float *arg14 = 0 ;
  float *arg15 = 0 ;
  float *arg16 = 0 ;
  bool arg17 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t temp2 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  uint8_t temp3 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  uint8_t temp4 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  uint8_t temp5 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  uint8_t temp6 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  uint8_t temp8 ;
  unsigned char val8 ;
  int ecode8 = 0 ;
  uint8_t temp9 ;
  unsigned char val9 ;
  int ecode9 = 0 ;
  float temp10 ;
  float val10 ;
  int ecode10 = 0 ;
  float temp11 ;
  float val11 ;
  int ecode11 = 0 ;
  float temp12 ;
  float val12 ;
  int ecode12 = 0 ;
  float temp13 ;
  float val13 ;
  int ecode13 = 0 ;
  float temp14 ;
  float val14 ;
  int ecode14 = 0 ;
  float temp15 ;
  float val15 ;
  int ecode15 = 0 ;
  float temp16 ;
  float val16 ;
  int ecode16 = 0 ;
  bool val17 ;
  int ecode17 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  PyObject * obj14 = 0 ;
  PyObject * obj15 = 0 ;
  PyObject * obj16 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOOO:VnSensor_write_ins_advanced_configuration",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15,&obj16)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "2"" of type '" "uint8_t""'");
  } 
  temp2 = static_cast< uint8_t >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "3"" of type '" "uint8_t""'");
  } 
  temp3 = static_cast< uint8_t >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "4"" of type '" "uint8_t""'");
  } 
  temp4 = static_cast< uint8_t >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "5"" of type '" "uint8_t""'");
  } 
  temp5 = static_cast< uint8_t >(val5);
  arg5 = &temp5;
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "6"" of type '" "uint8_t""'");
  } 
  temp6 = static_cast< uint8_t >(val6);
  arg6 = &temp6;
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "7"" of type '" "vn::protocol::uart::FoamInit""'");
  } 
  arg7 = static_cast< vn::protocol::uart::FoamInit >(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_char(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "8"" of type '" "uint8_t""'");
  } 
  temp8 = static_cast< uint8_t >(val8);
  arg8 = &temp8;
  ecode9 = SWIG_AsVal_unsigned_SS_char(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "9"" of type '" "uint8_t""'");
  } 
  temp9 = static_cast< uint8_t >(val9);
  arg9 = &temp9;
  ecode10 = SWIG_AsVal_float(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "10"" of type '" "float""'");
  } 
  temp10 = static_cast< float >(val10);
  arg10 = &temp10;
  ecode11 = SWIG_AsVal_float(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "11"" of type '" "float""'");
  } 
  temp11 = static_cast< float >(val11);
  arg11 = &temp11;
  ecode12 = SWIG_AsVal_float(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "12"" of type '" "float""'");
  } 
  temp12 = static_cast< float >(val12);
  arg12 = &temp12;
  ecode13 = SWIG_AsVal_float(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "13"" of type '" "float""'");
  } 
  temp13 = static_cast< float >(val13);
  arg13 = &temp13;
  ecode14 = SWIG_AsVal_float(obj13, &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "14"" of type '" "float""'");
  } 
  temp14 = static_cast< float >(val14);
  arg14 = &temp14;
  ecode15 = SWIG_AsVal_float(obj14, &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "15"" of type '" "float""'");
  } 
  temp15 = static_cast< float >(val15);
  arg15 = &temp15;
  ecode16 = SWIG_AsVal_float(obj15, &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "16"" of type '" "float""'");
  } 
  temp16 = static_cast< float >(val16);
  arg16 = &temp16;
  ecode17 = SWIG_AsVal_bool(obj16, &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "17"" of type '" "bool""'");
  } 
  arg17 = static_cast< bool >(val17);
  (arg1)->writeInsAdvancedConfiguration((uint8_t const &)*arg2,(uint8_t const &)*arg3,(uint8_t const &)*arg4,(uint8_t const &)*arg5,(uint8_t const &)*arg6,arg7,(uint8_t const &)*arg8,(uint8_t const &)*arg9,(float const &)*arg10,(float const &)*arg11,(float const &)*arg12,(float const &)*arg13,(float const &)*arg14,(float const &)*arg15,(float const &)*arg16,arg17);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_ins_advanced_configuration__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint8_t *arg2 = 0 ;
  uint8_t *arg3 = 0 ;
  uint8_t *arg4 = 0 ;
  uint8_t *arg5 = 0 ;
  uint8_t *arg6 = 0 ;
  vn::protocol::uart::FoamInit arg7 ;
  uint8_t *arg8 = 0 ;
  uint8_t *arg9 = 0 ;
  float *arg10 = 0 ;
  float *arg11 = 0 ;
  float *arg12 = 0 ;
  float *arg13 = 0 ;
  float *arg14 = 0 ;
  float *arg15 = 0 ;
  float *arg16 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t temp2 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  uint8_t temp3 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  uint8_t temp4 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  uint8_t temp5 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  uint8_t temp6 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  uint8_t temp8 ;
  unsigned char val8 ;
  int ecode8 = 0 ;
  uint8_t temp9 ;
  unsigned char val9 ;
  int ecode9 = 0 ;
  float temp10 ;
  float val10 ;
  int ecode10 = 0 ;
  float temp11 ;
  float val11 ;
  int ecode11 = 0 ;
  float temp12 ;
  float val12 ;
  int ecode12 = 0 ;
  float temp13 ;
  float val13 ;
  int ecode13 = 0 ;
  float temp14 ;
  float val14 ;
  int ecode14 = 0 ;
  float temp15 ;
  float val15 ;
  int ecode15 = 0 ;
  float temp16 ;
  float val16 ;
  int ecode16 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  PyObject * obj14 = 0 ;
  PyObject * obj15 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOO:VnSensor_write_ins_advanced_configuration",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "2"" of type '" "uint8_t""'");
  } 
  temp2 = static_cast< uint8_t >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "3"" of type '" "uint8_t""'");
  } 
  temp3 = static_cast< uint8_t >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "4"" of type '" "uint8_t""'");
  } 
  temp4 = static_cast< uint8_t >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "5"" of type '" "uint8_t""'");
  } 
  temp5 = static_cast< uint8_t >(val5);
  arg5 = &temp5;
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "6"" of type '" "uint8_t""'");
  } 
  temp6 = static_cast< uint8_t >(val6);
  arg6 = &temp6;
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "7"" of type '" "vn::protocol::uart::FoamInit""'");
  } 
  arg7 = static_cast< vn::protocol::uart::FoamInit >(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_char(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "8"" of type '" "uint8_t""'");
  } 
  temp8 = static_cast< uint8_t >(val8);
  arg8 = &temp8;
  ecode9 = SWIG_AsVal_unsigned_SS_char(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "9"" of type '" "uint8_t""'");
  } 
  temp9 = static_cast< uint8_t >(val9);
  arg9 = &temp9;
  ecode10 = SWIG_AsVal_float(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "10"" of type '" "float""'");
  } 
  temp10 = static_cast< float >(val10);
  arg10 = &temp10;
  ecode11 = SWIG_AsVal_float(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "11"" of type '" "float""'");
  } 
  temp11 = static_cast< float >(val11);
  arg11 = &temp11;
  ecode12 = SWIG_AsVal_float(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "12"" of type '" "float""'");
  } 
  temp12 = static_cast< float >(val12);
  arg12 = &temp12;
  ecode13 = SWIG_AsVal_float(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "13"" of type '" "float""'");
  } 
  temp13 = static_cast< float >(val13);
  arg13 = &temp13;
  ecode14 = SWIG_AsVal_float(obj13, &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "14"" of type '" "float""'");
  } 
  temp14 = static_cast< float >(val14);
  arg14 = &temp14;
  ecode15 = SWIG_AsVal_float(obj14, &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "15"" of type '" "float""'");
  } 
  temp15 = static_cast< float >(val15);
  arg15 = &temp15;
  ecode16 = SWIG_AsVal_float(obj15, &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "VnSensor_write_ins_advanced_configuration" "', argument " "16"" of type '" "float""'");
  } 
  temp16 = static_cast< float >(val16);
  arg16 = &temp16;
  (arg1)->writeInsAdvancedConfiguration((uint8_t const &)*arg2,(uint8_t const &)*arg3,(uint8_t const &)*arg4,(uint8_t const &)*arg5,(uint8_t const &)*arg6,arg7,(uint8_t const &)*arg8,(uint8_t const &)*arg9,(float const &)*arg10,(float const &)*arg11,(float const &)*arg12,(float const &)*arg13,(float const &)*arg14,(float const &)*arg15,(float const &)*arg16);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_ins_advanced_configuration(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[18] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 17) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_ins_advanced_configuration__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__InsAdvancedConfigurationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_ins_advanced_configuration__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 16) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_unsigned_SS_char(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_unsigned_SS_char(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_float(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_float(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_float(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            {
                              int res = SWIG_AsVal_float(argv[12], NULL);
                              _v = SWIG_CheckState(res);
                            }
                            if (_v) {
                              {
                                int res = SWIG_AsVal_float(argv[13], NULL);
                                _v = SWIG_CheckState(res);
                              }
                              if (_v) {
                                {
                                  int res = SWIG_AsVal_float(argv[14], NULL);
                                  _v = SWIG_CheckState(res);
                                }
                                if (_v) {
                                  {
                                    int res = SWIG_AsVal_float(argv[15], NULL);
                                    _v = SWIG_CheckState(res);
                                  }
                                  if (_v) {
                                    return _wrap_VnSensor_write_ins_advanced_configuration__SWIG_3(self, args);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 17) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_unsigned_SS_char(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_unsigned_SS_char(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_float(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_float(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_float(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            {
                              int res = SWIG_AsVal_float(argv[12], NULL);
                              _v = SWIG_CheckState(res);
                            }
                            if (_v) {
                              {
                                int res = SWIG_AsVal_float(argv[13], NULL);
                                _v = SWIG_CheckState(res);
                              }
                              if (_v) {
                                {
                                  int res = SWIG_AsVal_float(argv[14], NULL);
                                  _v = SWIG_CheckState(res);
                                }
                                if (_v) {
                                  {
                                    int res = SWIG_AsVal_float(argv[15], NULL);
                                    _v = SWIG_CheckState(res);
                                  }
                                  if (_v) {
                                    {
                                      int res = SWIG_AsVal_bool(argv[16], NULL);
                                      _v = SWIG_CheckState(res);
                                    }
                                    if (_v) {
                                      return _wrap_VnSensor_write_ins_advanced_configuration__SWIG_2(self, args);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_ins_advanced_configuration'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeInsAdvancedConfiguration(vn::sensors::InsAdvancedConfigurationRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeInsAdvancedConfiguration(vn::sensors::InsAdvancedConfigurationRegister &)\n"
    "    vn::sensors::VnSensor::writeInsAdvancedConfiguration(uint8_t const &,uint8_t const &,uint8_t const &,uint8_t const &,uint8_t const &,vn::protocol::uart::FoamInit,uint8_t const &,uint8_t const &,float const &,float const &,float const &,float const &,float const &,float const &,float const &,bool)\n"
    "    vn::sensors::VnSensor::writeInsAdvancedConfiguration(uint8_t const &,uint8_t const &,uint8_t const &,uint8_t const &,uint8_t const &,vn::protocol::uart::FoamInit,uint8_t const &,uint8_t const &,float const &,float const &,float const &,float const &,float const &,float const &,float const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_ins_state_lla(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::InsStateLlaRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_ins_state_lla",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_ins_state_lla" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readInsStateLla();
  resultobj = SWIG_NewPointerObj((new vn::sensors::InsStateLlaRegister(static_cast< const vn::sensors::InsStateLlaRegister& >(result))), SWIGTYPE_p_vn__sensors__InsStateLlaRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_ins_state_ecef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::InsStateEcefRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_ins_state_ecef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_ins_state_ecef" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readInsStateEcef();
  resultobj = SWIG_NewPointerObj((new vn::sensors::InsStateEcefRegister(static_cast< const vn::sensors::InsStateEcefRegister& >(result))), SWIGTYPE_p_vn__sensors__InsStateEcefRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_startup_filter_bias_estimate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::StartupFilterBiasEstimateRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_startup_filter_bias_estimate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_startup_filter_bias_estimate" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readStartupFilterBiasEstimate();
  resultobj = SWIG_NewPointerObj((new vn::sensors::StartupFilterBiasEstimateRegister(static_cast< const vn::sensors::StartupFilterBiasEstimateRegister& >(result))), SWIGTYPE_p_vn__sensors__StartupFilterBiasEstimateRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_startup_filter_bias_estimate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::StartupFilterBiasEstimateRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_startup_filter_bias_estimate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_startup_filter_bias_estimate" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__StartupFilterBiasEstimateRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_startup_filter_bias_estimate" "', argument " "2"" of type '" "vn::sensors::StartupFilterBiasEstimateRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_startup_filter_bias_estimate" "', argument " "2"" of type '" "vn::sensors::StartupFilterBiasEstimateRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::StartupFilterBiasEstimateRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_startup_filter_bias_estimate" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeStartupFilterBiasEstimate(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_startup_filter_bias_estimate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::StartupFilterBiasEstimateRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_startup_filter_bias_estimate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_startup_filter_bias_estimate" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__StartupFilterBiasEstimateRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_startup_filter_bias_estimate" "', argument " "2"" of type '" "vn::sensors::StartupFilterBiasEstimateRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_startup_filter_bias_estimate" "', argument " "2"" of type '" "vn::sensors::StartupFilterBiasEstimateRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::StartupFilterBiasEstimateRegister * >(argp2);
  (arg1)->writeStartupFilterBiasEstimate(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_startup_filter_bias_estimate__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::vec3f *arg2 = 0 ;
  vn::math::vec3f *arg3 = 0 ;
  float *arg4 = 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:VnSensor_write_startup_filter_bias_estimate",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_startup_filter_bias_estimate" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_startup_filter_bias_estimate" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_startup_filter_bias_estimate" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VnSensor_write_startup_filter_bias_estimate" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_startup_filter_bias_estimate" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_startup_filter_bias_estimate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_startup_filter_bias_estimate" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  (arg1)->writeStartupFilterBiasEstimate((vn::math::vec3f const &)*arg2,(vn::math::vec3f const &)*arg3,(float const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_startup_filter_bias_estimate__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::vec3f *arg2 = 0 ;
  vn::math::vec3f *arg3 = 0 ;
  float *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VnSensor_write_startup_filter_bias_estimate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_startup_filter_bias_estimate" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_startup_filter_bias_estimate" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_startup_filter_bias_estimate" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VnSensor_write_startup_filter_bias_estimate" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_startup_filter_bias_estimate" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_startup_filter_bias_estimate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  (arg1)->writeStartupFilterBiasEstimate((vn::math::vec3f const &)*arg2,(vn::math::vec3f const &)*arg3,(float const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_startup_filter_bias_estimate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__StartupFilterBiasEstimateRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_startup_filter_bias_estimate__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__StartupFilterBiasEstimateRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_startup_filter_bias_estimate__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_VnSensor_write_startup_filter_bias_estimate__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_VnSensor_write_startup_filter_bias_estimate__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_startup_filter_bias_estimate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeStartupFilterBiasEstimate(vn::sensors::StartupFilterBiasEstimateRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeStartupFilterBiasEstimate(vn::sensors::StartupFilterBiasEstimateRegister &)\n"
    "    vn::sensors::VnSensor::writeStartupFilterBiasEstimate(vn::math::vec3f const &,vn::math::vec3f const &,float const &,bool)\n"
    "    vn::sensors::VnSensor::writeStartupFilterBiasEstimate(vn::math::vec3f const &,vn::math::vec3f const &,float const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_delta_theta_and_delta_velocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::DeltaThetaAndDeltaVelocityRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_delta_theta_and_delta_velocity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_delta_theta_and_delta_velocity" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readDeltaThetaAndDeltaVelocity();
  resultobj = SWIG_NewPointerObj((new vn::sensors::DeltaThetaAndDeltaVelocityRegister(static_cast< const vn::sensors::DeltaThetaAndDeltaVelocityRegister& >(result))), SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_delta_theta_and_delta_velocity_configuration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_delta_theta_and_delta_velocity_configuration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_delta_theta_and_delta_velocity_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readDeltaThetaAndDeltaVelocityConfiguration();
  resultobj = SWIG_NewPointerObj((new vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister(static_cast< const vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister& >(result))), SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration" "', argument " "2"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration" "', argument " "2"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeDeltaThetaAndDeltaVelocityConfiguration(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration" "', argument " "2"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration" "', argument " "2"" of type '" "vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister * >(argp2);
  (arg1)->writeDeltaThetaAndDeltaVelocityConfiguration(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::protocol::uart::IntegrationFrame arg2 ;
  vn::protocol::uart::CompensationMode arg3 ;
  vn::protocol::uart::CompensationMode arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration" "', argument " "2"" of type '" "vn::protocol::uart::IntegrationFrame""'");
  } 
  arg2 = static_cast< vn::protocol::uart::IntegrationFrame >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration" "', argument " "3"" of type '" "vn::protocol::uart::CompensationMode""'");
  } 
  arg3 = static_cast< vn::protocol::uart::CompensationMode >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration" "', argument " "4"" of type '" "vn::protocol::uart::CompensationMode""'");
  } 
  arg4 = static_cast< vn::protocol::uart::CompensationMode >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  (arg1)->writeDeltaThetaAndDeltaVelocityConfiguration(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::protocol::uart::IntegrationFrame arg2 ;
  vn::protocol::uart::CompensationMode arg3 ;
  vn::protocol::uart::CompensationMode arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration" "', argument " "2"" of type '" "vn::protocol::uart::IntegrationFrame""'");
  } 
  arg2 = static_cast< vn::protocol::uart::IntegrationFrame >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration" "', argument " "3"" of type '" "vn::protocol::uart::CompensationMode""'");
  } 
  arg3 = static_cast< vn::protocol::uart::CompensationMode >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration" "', argument " "4"" of type '" "vn::protocol::uart::CompensationMode""'");
  } 
  arg4 = static_cast< vn::protocol::uart::CompensationMode >(val4);
  (arg1)->writeDeltaThetaAndDeltaVelocityConfiguration(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeDeltaThetaAndDeltaVelocityConfiguration(vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeDeltaThetaAndDeltaVelocityConfiguration(vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister &)\n"
    "    vn::sensors::VnSensor::writeDeltaThetaAndDeltaVelocityConfiguration(vn::protocol::uart::IntegrationFrame,vn::protocol::uart::CompensationMode,vn::protocol::uart::CompensationMode,bool)\n"
    "    vn::sensors::VnSensor::writeDeltaThetaAndDeltaVelocityConfiguration(vn::protocol::uart::IntegrationFrame,vn::protocol::uart::CompensationMode,vn::protocol::uart::CompensationMode)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_reference_vector_configuration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::ReferenceVectorConfigurationRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_reference_vector_configuration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_reference_vector_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readReferenceVectorConfiguration();
  resultobj = SWIG_NewPointerObj((new vn::sensors::ReferenceVectorConfigurationRegister(static_cast< const vn::sensors::ReferenceVectorConfigurationRegister& >(result))), SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_reference_vector_configuration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::ReferenceVectorConfigurationRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_reference_vector_configuration",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_reference_vector_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_reference_vector_configuration" "', argument " "2"" of type '" "vn::sensors::ReferenceVectorConfigurationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_reference_vector_configuration" "', argument " "2"" of type '" "vn::sensors::ReferenceVectorConfigurationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::ReferenceVectorConfigurationRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_reference_vector_configuration" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeReferenceVectorConfiguration(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_reference_vector_configuration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::ReferenceVectorConfigurationRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_reference_vector_configuration",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_reference_vector_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_reference_vector_configuration" "', argument " "2"" of type '" "vn::sensors::ReferenceVectorConfigurationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_reference_vector_configuration" "', argument " "2"" of type '" "vn::sensors::ReferenceVectorConfigurationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::ReferenceVectorConfigurationRegister * >(argp2);
  (arg1)->writeReferenceVectorConfiguration(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_reference_vector_configuration__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint8_t *arg2 = 0 ;
  uint8_t *arg3 = 0 ;
  uint32_t *arg4 = 0 ;
  float *arg5 = 0 ;
  vn::math::vec3d *arg6 = 0 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t temp2 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  uint8_t temp3 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  uint32_t temp4 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:VnSensor_write_reference_vector_configuration",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_reference_vector_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_reference_vector_configuration" "', argument " "2"" of type '" "uint8_t""'");
  } 
  temp2 = static_cast< uint8_t >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_reference_vector_configuration" "', argument " "3"" of type '" "uint8_t""'");
  } 
  temp3 = static_cast< uint8_t >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_reference_vector_configuration" "', argument " "4"" of type '" "uint32_t""'");
  } 
  temp4 = static_cast< uint32_t >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_reference_vector_configuration" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_vn__math__vecT_3_double_t,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "VnSensor_write_reference_vector_configuration" "', argument " "6"" of type '" "vn::math::vec3d const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_reference_vector_configuration" "', argument " "6"" of type '" "vn::math::vec3d const &""'"); 
  }
  arg6 = reinterpret_cast< vn::math::vec3d * >(argp6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "VnSensor_write_reference_vector_configuration" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  (arg1)->writeReferenceVectorConfiguration((uint8_t const &)*arg2,(uint8_t const &)*arg3,(uint32_t const &)*arg4,(float const &)*arg5,(vn::math::vec3d const &)*arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_reference_vector_configuration__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint8_t *arg2 = 0 ;
  uint8_t *arg3 = 0 ;
  uint32_t *arg4 = 0 ;
  float *arg5 = 0 ;
  vn::math::vec3d *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t temp2 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  uint8_t temp3 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  uint32_t temp4 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:VnSensor_write_reference_vector_configuration",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_reference_vector_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_reference_vector_configuration" "', argument " "2"" of type '" "uint8_t""'");
  } 
  temp2 = static_cast< uint8_t >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_reference_vector_configuration" "', argument " "3"" of type '" "uint8_t""'");
  } 
  temp3 = static_cast< uint8_t >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_reference_vector_configuration" "', argument " "4"" of type '" "uint32_t""'");
  } 
  temp4 = static_cast< uint32_t >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_reference_vector_configuration" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_vn__math__vecT_3_double_t,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "VnSensor_write_reference_vector_configuration" "', argument " "6"" of type '" "vn::math::vec3d const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_reference_vector_configuration" "', argument " "6"" of type '" "vn::math::vec3d const &""'"); 
  }
  arg6 = reinterpret_cast< vn::math::vec3d * >(argp6);
  (arg1)->writeReferenceVectorConfiguration((uint8_t const &)*arg2,(uint8_t const &)*arg3,(uint32_t const &)*arg4,(float const &)*arg5,(vn::math::vec3d const &)*arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_reference_vector_configuration(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_reference_vector_configuration__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__ReferenceVectorConfigurationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_reference_vector_configuration__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_vn__math__vecT_3_double_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_VnSensor_write_reference_vector_configuration__SWIG_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_vn__math__vecT_3_double_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_VnSensor_write_reference_vector_configuration__SWIG_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_reference_vector_configuration'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeReferenceVectorConfiguration(vn::sensors::ReferenceVectorConfigurationRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeReferenceVectorConfiguration(vn::sensors::ReferenceVectorConfigurationRegister &)\n"
    "    vn::sensors::VnSensor::writeReferenceVectorConfiguration(uint8_t const &,uint8_t const &,uint32_t const &,float const &,vn::math::vec3d const &,bool)\n"
    "    vn::sensors::VnSensor::writeReferenceVectorConfiguration(uint8_t const &,uint8_t const &,uint32_t const &,float const &,vn::math::vec3d const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_gyro_compensation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::GyroCompensationRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_gyro_compensation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_gyro_compensation" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readGyroCompensation();
  resultobj = SWIG_NewPointerObj((new vn::sensors::GyroCompensationRegister(static_cast< const vn::sensors::GyroCompensationRegister& >(result))), SWIGTYPE_p_vn__sensors__GyroCompensationRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_gyro_compensation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::GyroCompensationRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_gyro_compensation",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_gyro_compensation" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__GyroCompensationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_gyro_compensation" "', argument " "2"" of type '" "vn::sensors::GyroCompensationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_gyro_compensation" "', argument " "2"" of type '" "vn::sensors::GyroCompensationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::GyroCompensationRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_gyro_compensation" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeGyroCompensation(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_gyro_compensation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::GyroCompensationRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_gyro_compensation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_gyro_compensation" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__GyroCompensationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_gyro_compensation" "', argument " "2"" of type '" "vn::sensors::GyroCompensationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_gyro_compensation" "', argument " "2"" of type '" "vn::sensors::GyroCompensationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::GyroCompensationRegister * >(argp2);
  (arg1)->writeGyroCompensation(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_gyro_compensation__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::mat3f *arg2 = 0 ;
  vn::math::vec3f *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VnSensor_write_gyro_compensation",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_gyro_compensation" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__matT_3_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_gyro_compensation" "', argument " "2"" of type '" "vn::math::mat3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_gyro_compensation" "', argument " "2"" of type '" "vn::math::mat3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::mat3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VnSensor_write_gyro_compensation" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_gyro_compensation" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_gyro_compensation" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->writeGyroCompensation((vn::math::mat3f const &)*arg2,(vn::math::vec3f const &)*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_gyro_compensation__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::mat3f *arg2 = 0 ;
  vn::math::vec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_gyro_compensation",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_gyro_compensation" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__matT_3_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_gyro_compensation" "', argument " "2"" of type '" "vn::math::mat3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_gyro_compensation" "', argument " "2"" of type '" "vn::math::mat3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::mat3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VnSensor_write_gyro_compensation" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_gyro_compensation" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  (arg1)->writeGyroCompensation((vn::math::mat3f const &)*arg2,(vn::math::vec3f const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_gyro_compensation(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__GyroCompensationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_gyro_compensation__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__GyroCompensationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_gyro_compensation__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__matT_3_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VnSensor_write_gyro_compensation__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__matT_3_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_VnSensor_write_gyro_compensation__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_gyro_compensation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeGyroCompensation(vn::sensors::GyroCompensationRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeGyroCompensation(vn::sensors::GyroCompensationRegister &)\n"
    "    vn::sensors::VnSensor::writeGyroCompensation(vn::math::mat3f const &,vn::math::vec3f const &,bool)\n"
    "    vn::sensors::VnSensor::writeGyroCompensation(vn::math::mat3f const &,vn::math::vec3f const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_imu_filtering_configuration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::ImuFilteringConfigurationRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_imu_filtering_configuration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_imu_filtering_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readImuFilteringConfiguration();
  resultobj = SWIG_NewPointerObj((new vn::sensors::ImuFilteringConfigurationRegister(static_cast< const vn::sensors::ImuFilteringConfigurationRegister& >(result))), SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_imu_filtering_configuration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::ImuFilteringConfigurationRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_imu_filtering_configuration",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "2"" of type '" "vn::sensors::ImuFilteringConfigurationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "2"" of type '" "vn::sensors::ImuFilteringConfigurationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeImuFilteringConfiguration(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_imu_filtering_configuration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::ImuFilteringConfigurationRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_imu_filtering_configuration",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "2"" of type '" "vn::sensors::ImuFilteringConfigurationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "2"" of type '" "vn::sensors::ImuFilteringConfigurationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::ImuFilteringConfigurationRegister * >(argp2);
  (arg1)->writeImuFilteringConfiguration(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_imu_filtering_configuration__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint16_t *arg2 = 0 ;
  uint16_t *arg3 = 0 ;
  uint16_t *arg4 = 0 ;
  uint16_t *arg5 = 0 ;
  uint16_t *arg6 = 0 ;
  vn::protocol::uart::FilterMode arg7 ;
  vn::protocol::uart::FilterMode arg8 ;
  vn::protocol::uart::FilterMode arg9 ;
  vn::protocol::uart::FilterMode arg10 ;
  vn::protocol::uart::FilterMode arg11 ;
  bool arg12 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t temp2 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  uint16_t temp3 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  uint16_t temp4 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  uint16_t temp5 ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  uint16_t temp6 ;
  unsigned short val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  int val11 ;
  int ecode11 = 0 ;
  bool val12 ;
  int ecode12 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOO:VnSensor_write_imu_filtering_configuration",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "2"" of type '" "uint16_t""'");
  } 
  temp2 = static_cast< uint16_t >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "3"" of type '" "uint16_t""'");
  } 
  temp3 = static_cast< uint16_t >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "4"" of type '" "uint16_t""'");
  } 
  temp4 = static_cast< uint16_t >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_unsigned_SS_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "5"" of type '" "uint16_t""'");
  } 
  temp5 = static_cast< uint16_t >(val5);
  arg5 = &temp5;
  ecode6 = SWIG_AsVal_unsigned_SS_short(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "6"" of type '" "uint16_t""'");
  } 
  temp6 = static_cast< uint16_t >(val6);
  arg6 = &temp6;
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "7"" of type '" "vn::protocol::uart::FilterMode""'");
  } 
  arg7 = static_cast< vn::protocol::uart::FilterMode >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "8"" of type '" "vn::protocol::uart::FilterMode""'");
  } 
  arg8 = static_cast< vn::protocol::uart::FilterMode >(val8);
  ecode9 = SWIG_AsVal_int(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "9"" of type '" "vn::protocol::uart::FilterMode""'");
  } 
  arg9 = static_cast< vn::protocol::uart::FilterMode >(val9);
  ecode10 = SWIG_AsVal_int(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "10"" of type '" "vn::protocol::uart::FilterMode""'");
  } 
  arg10 = static_cast< vn::protocol::uart::FilterMode >(val10);
  ecode11 = SWIG_AsVal_int(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "11"" of type '" "vn::protocol::uart::FilterMode""'");
  } 
  arg11 = static_cast< vn::protocol::uart::FilterMode >(val11);
  ecode12 = SWIG_AsVal_bool(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "12"" of type '" "bool""'");
  } 
  arg12 = static_cast< bool >(val12);
  (arg1)->writeImuFilteringConfiguration((uint16_t const &)*arg2,(uint16_t const &)*arg3,(uint16_t const &)*arg4,(uint16_t const &)*arg5,(uint16_t const &)*arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_imu_filtering_configuration__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint16_t *arg2 = 0 ;
  uint16_t *arg3 = 0 ;
  uint16_t *arg4 = 0 ;
  uint16_t *arg5 = 0 ;
  uint16_t *arg6 = 0 ;
  vn::protocol::uart::FilterMode arg7 ;
  vn::protocol::uart::FilterMode arg8 ;
  vn::protocol::uart::FilterMode arg9 ;
  vn::protocol::uart::FilterMode arg10 ;
  vn::protocol::uart::FilterMode arg11 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t temp2 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  uint16_t temp3 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  uint16_t temp4 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  uint16_t temp5 ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  uint16_t temp6 ;
  unsigned short val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  int val11 ;
  int ecode11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:VnSensor_write_imu_filtering_configuration",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "2"" of type '" "uint16_t""'");
  } 
  temp2 = static_cast< uint16_t >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "3"" of type '" "uint16_t""'");
  } 
  temp3 = static_cast< uint16_t >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "4"" of type '" "uint16_t""'");
  } 
  temp4 = static_cast< uint16_t >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_unsigned_SS_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "5"" of type '" "uint16_t""'");
  } 
  temp5 = static_cast< uint16_t >(val5);
  arg5 = &temp5;
  ecode6 = SWIG_AsVal_unsigned_SS_short(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "6"" of type '" "uint16_t""'");
  } 
  temp6 = static_cast< uint16_t >(val6);
  arg6 = &temp6;
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "7"" of type '" "vn::protocol::uart::FilterMode""'");
  } 
  arg7 = static_cast< vn::protocol::uart::FilterMode >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "8"" of type '" "vn::protocol::uart::FilterMode""'");
  } 
  arg8 = static_cast< vn::protocol::uart::FilterMode >(val8);
  ecode9 = SWIG_AsVal_int(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "9"" of type '" "vn::protocol::uart::FilterMode""'");
  } 
  arg9 = static_cast< vn::protocol::uart::FilterMode >(val9);
  ecode10 = SWIG_AsVal_int(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "10"" of type '" "vn::protocol::uart::FilterMode""'");
  } 
  arg10 = static_cast< vn::protocol::uart::FilterMode >(val10);
  ecode11 = SWIG_AsVal_int(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "VnSensor_write_imu_filtering_configuration" "', argument " "11"" of type '" "vn::protocol::uart::FilterMode""'");
  } 
  arg11 = static_cast< vn::protocol::uart::FilterMode >(val11);
  (arg1)->writeImuFilteringConfiguration((uint16_t const &)*arg2,(uint16_t const &)*arg3,(uint16_t const &)*arg4,(uint16_t const &)*arg5,(uint16_t const &)*arg6,arg7,arg8,arg9,arg10,arg11);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_imu_filtering_configuration(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[13] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 12) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_imu_filtering_configuration__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__ImuFilteringConfigurationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_imu_filtering_configuration__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_short(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_int(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_int(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_int(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          return _wrap_VnSensor_write_imu_filtering_configuration__SWIG_3(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_short(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_int(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_int(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_int(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_bool(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            return _wrap_VnSensor_write_imu_filtering_configuration__SWIG_2(self, args);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_imu_filtering_configuration'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeImuFilteringConfiguration(vn::sensors::ImuFilteringConfigurationRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeImuFilteringConfiguration(vn::sensors::ImuFilteringConfigurationRegister &)\n"
    "    vn::sensors::VnSensor::writeImuFilteringConfiguration(uint16_t const &,uint16_t const &,uint16_t const &,uint16_t const &,uint16_t const &,vn::protocol::uart::FilterMode,vn::protocol::uart::FilterMode,vn::protocol::uart::FilterMode,vn::protocol::uart::FilterMode,vn::protocol::uart::FilterMode,bool)\n"
    "    vn::sensors::VnSensor::writeImuFilteringConfiguration(uint16_t const &,uint16_t const &,uint16_t const &,uint16_t const &,uint16_t const &,vn::protocol::uart::FilterMode,vn::protocol::uart::FilterMode,vn::protocol::uart::FilterMode,vn::protocol::uart::FilterMode,vn::protocol::uart::FilterMode)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_gps_compass_baseline(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::GpsCompassBaselineRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_gps_compass_baseline",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_gps_compass_baseline" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readGpsCompassBaseline();
  resultobj = SWIG_NewPointerObj((new vn::sensors::GpsCompassBaselineRegister(static_cast< const vn::sensors::GpsCompassBaselineRegister& >(result))), SWIGTYPE_p_vn__sensors__GpsCompassBaselineRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_gps_compass_baseline__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::GpsCompassBaselineRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_gps_compass_baseline",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_gps_compass_baseline" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__GpsCompassBaselineRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_gps_compass_baseline" "', argument " "2"" of type '" "vn::sensors::GpsCompassBaselineRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_gps_compass_baseline" "', argument " "2"" of type '" "vn::sensors::GpsCompassBaselineRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::GpsCompassBaselineRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_gps_compass_baseline" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeGpsCompassBaseline(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_gps_compass_baseline__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::GpsCompassBaselineRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_gps_compass_baseline",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_gps_compass_baseline" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__GpsCompassBaselineRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_gps_compass_baseline" "', argument " "2"" of type '" "vn::sensors::GpsCompassBaselineRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_gps_compass_baseline" "', argument " "2"" of type '" "vn::sensors::GpsCompassBaselineRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::GpsCompassBaselineRegister * >(argp2);
  (arg1)->writeGpsCompassBaseline(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_gps_compass_baseline__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::vec3f *arg2 = 0 ;
  vn::math::vec3f *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VnSensor_write_gps_compass_baseline",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_gps_compass_baseline" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_gps_compass_baseline" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_gps_compass_baseline" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VnSensor_write_gps_compass_baseline" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_gps_compass_baseline" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_gps_compass_baseline" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->writeGpsCompassBaseline((vn::math::vec3f const &)*arg2,(vn::math::vec3f const &)*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_gps_compass_baseline__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::math::vec3f *arg2 = 0 ;
  vn::math::vec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_gps_compass_baseline",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_gps_compass_baseline" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_gps_compass_baseline" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_gps_compass_baseline" "', argument " "2"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< vn::math::vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vn__math__vecT_3_float_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VnSensor_write_gps_compass_baseline" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_gps_compass_baseline" "', argument " "3"" of type '" "vn::math::vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< vn::math::vec3f * >(argp3);
  (arg1)->writeGpsCompassBaseline((vn::math::vec3f const &)*arg2,(vn::math::vec3f const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_gps_compass_baseline(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__GpsCompassBaselineRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_gps_compass_baseline__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__GpsCompassBaselineRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_gps_compass_baseline__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VnSensor_write_gps_compass_baseline__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vn__math__vecT_3_float_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_VnSensor_write_gps_compass_baseline__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_gps_compass_baseline'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeGpsCompassBaseline(vn::sensors::GpsCompassBaselineRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeGpsCompassBaseline(vn::sensors::GpsCompassBaselineRegister &)\n"
    "    vn::sensors::VnSensor::writeGpsCompassBaseline(vn::math::vec3f const &,vn::math::vec3f const &,bool)\n"
    "    vn::sensors::VnSensor::writeGpsCompassBaseline(vn::math::vec3f const &,vn::math::vec3f const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_gps_compass_estimated_baseline(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::GpsCompassEstimatedBaselineRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_gps_compass_estimated_baseline",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_gps_compass_estimated_baseline" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readGpsCompassEstimatedBaseline();
  resultobj = SWIG_NewPointerObj((new vn::sensors::GpsCompassEstimatedBaselineRegister(static_cast< const vn::sensors::GpsCompassEstimatedBaselineRegister& >(result))), SWIGTYPE_p_vn__sensors__GpsCompassEstimatedBaselineRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_imu_rate_configuration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::ImuRateConfigurationRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_imu_rate_configuration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_imu_rate_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readImuRateConfiguration();
  resultobj = SWIG_NewPointerObj((new vn::sensors::ImuRateConfigurationRegister(static_cast< const vn::sensors::ImuRateConfigurationRegister& >(result))), SWIGTYPE_p_vn__sensors__ImuRateConfigurationRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_imu_rate_configuration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::ImuRateConfigurationRegister *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VnSensor_write_imu_rate_configuration",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_imu_rate_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__ImuRateConfigurationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_imu_rate_configuration" "', argument " "2"" of type '" "vn::sensors::ImuRateConfigurationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_imu_rate_configuration" "', argument " "2"" of type '" "vn::sensors::ImuRateConfigurationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::ImuRateConfigurationRegister * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_imu_rate_configuration" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->writeImuRateConfiguration(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_imu_rate_configuration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::sensors::ImuRateConfigurationRegister *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_write_imu_rate_configuration",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_imu_rate_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__ImuRateConfigurationRegister,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VnSensor_write_imu_rate_configuration" "', argument " "2"" of type '" "vn::sensors::ImuRateConfigurationRegister &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VnSensor_write_imu_rate_configuration" "', argument " "2"" of type '" "vn::sensors::ImuRateConfigurationRegister &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::ImuRateConfigurationRegister * >(argp2);
  (arg1)->writeImuRateConfiguration(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_imu_rate_configuration__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint16_t *arg2 = 0 ;
  uint16_t *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t temp2 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  uint16_t temp3 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:VnSensor_write_imu_rate_configuration",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_imu_rate_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_imu_rate_configuration" "', argument " "2"" of type '" "uint16_t""'");
  } 
  temp2 = static_cast< uint16_t >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_imu_rate_configuration" "', argument " "3"" of type '" "uint16_t""'");
  } 
  temp3 = static_cast< uint16_t >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_imu_rate_configuration" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_imu_rate_configuration" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "VnSensor_write_imu_rate_configuration" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  (arg1)->writeImuRateConfiguration((uint16_t const &)*arg2,(uint16_t const &)*arg3,(float const &)*arg4,(float const &)*arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_imu_rate_configuration__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint16_t *arg2 = 0 ;
  uint16_t *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t temp2 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  uint16_t temp3 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:VnSensor_write_imu_rate_configuration",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_write_imu_rate_configuration" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_write_imu_rate_configuration" "', argument " "2"" of type '" "uint16_t""'");
  } 
  temp2 = static_cast< uint16_t >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VnSensor_write_imu_rate_configuration" "', argument " "3"" of type '" "uint16_t""'");
  } 
  temp3 = static_cast< uint16_t >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VnSensor_write_imu_rate_configuration" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VnSensor_write_imu_rate_configuration" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  (arg1)->writeImuRateConfiguration((uint16_t const &)*arg2,(uint16_t const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_write_imu_rate_configuration(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__ImuRateConfigurationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VnSensor_write_imu_rate_configuration__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__ImuRateConfigurationRegister, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VnSensor_write_imu_rate_configuration__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_VnSensor_write_imu_rate_configuration__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__VnSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_VnSensor_write_imu_rate_configuration__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VnSensor_write_imu_rate_configuration'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::VnSensor::writeImuRateConfiguration(vn::sensors::ImuRateConfigurationRegister &,bool)\n"
    "    vn::sensors::VnSensor::writeImuRateConfiguration(vn::sensors::ImuRateConfigurationRegister &)\n"
    "    vn::sensors::VnSensor::writeImuRateConfiguration(uint16_t const &,uint16_t const &,float const &,float const &,bool)\n"
    "    vn::sensors::VnSensor::writeImuRateConfiguration(uint16_t const &,uint16_t const &,float const &,float const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_yaw_pitch_roll_true_body_acceleration_and_angular_rates_register(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_yaw_pitch_roll_true_body_acceleration_and_angular_rates_register",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_yaw_pitch_roll_true_body_acceleration_and_angular_rates_register" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readYawPitchRollTrueBodyAccelerationAndAngularRates();
  resultobj = SWIG_NewPointerObj((new vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister(static_cast< const vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister& >(result))), SWIGTYPE_p_vn__sensors__YawPitchRollTrueBodyAccelerationAndAngularRatesRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_read_yaw_pitch_roll_true_inertial_acceleration_and_angular_rates_register(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_read_yaw_pitch_roll_true_inertial_acceleration_and_angular_rates_register",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_read_yaw_pitch_roll_true_inertial_acceleration_and_angular_rates_register" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (arg1)->readYawPitchRollTrueInertialAccelerationAndAngularRates();
  resultobj = SWIG_NewPointerObj((new vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister(static_cast< const vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister& >(result))), SWIGTYPE_p_vn__sensors__YawPitchRollTrueInertialAccelerationAndAngularRatesRegister, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_baudrate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_baudrate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_baudrate_get" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (uint32_t)vn_sensors_VnSensor_baudrate_get(arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_port_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_port_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_port_get" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (std::string *) &vn_sensors_VnSensor_port_get(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  delete result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_send_error_detection_mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  vn::protocol::uart::ErrorDetectionMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_send_error_detection_mode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_send_error_detection_mode_set" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_send_error_detection_mode_set" "', argument " "2"" of type '" "vn::protocol::uart::ErrorDetectionMode""'");
  } 
  arg2 = static_cast< vn::protocol::uart::ErrorDetectionMode >(val2);
  vn_sensors_VnSensor_send_error_detection_mode_set(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_send_error_detection_mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::ErrorDetectionMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_send_error_detection_mode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_send_error_detection_mode_get" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (vn::protocol::uart::ErrorDetectionMode)vn_sensors_VnSensor_send_error_detection_mode_get(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_is_connected_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_is_connected_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_is_connected_get" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (bool)vn_sensors_VnSensor_is_connected_get(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_response_timeout_ms_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_response_timeout_ms_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_response_timeout_ms_set" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_response_timeout_ms_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  vn_sensors_VnSensor_response_timeout_ms_set(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_response_timeout_ms_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_response_timeout_ms_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_response_timeout_ms_get" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (uint16_t)vn_sensors_VnSensor_response_timeout_ms_get(arg1);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_retransmit_delay_ms_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VnSensor_retransmit_delay_ms_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_retransmit_delay_ms_set" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VnSensor_retransmit_delay_ms_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  vn_sensors_VnSensor_retransmit_delay_ms_set(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VnSensor_retransmit_delay_ms_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::VnSensor *arg1 = (vn::sensors::VnSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VnSensor_retransmit_delay_ms_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VnSensor_retransmit_delay_ms_get" "', argument " "1"" of type '" "vn::sensors::VnSensor *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::VnSensor * >(argp1);
  result = (uint16_t)vn_sensors_VnSensor_retransmit_delay_ms_get(arg1);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VnSensor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__VnSensor, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_UInt32Vector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:UInt32Vector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector_iterator" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_uint32_t_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UInt32Vector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector___nonzero__" "', argument " "1"" of type '" "std::vector< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  result = (bool)std_vector_Sl_uint32_t_Sg____nonzero__((std::vector< unsigned int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UInt32Vector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector___bool__" "', argument " "1"" of type '" "std::vector< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  result = (bool)std_vector_Sl_uint32_t_Sg____bool__((std::vector< unsigned int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UInt32Vector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector___len__" "', argument " "1"" of type '" "std::vector< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  result = std_vector_Sl_uint32_t_Sg____len__((std::vector< unsigned int > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  std::vector< unsigned int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UInt32Vector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector___getslice__" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UInt32Vector___getslice__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UInt32Vector___getslice__" "', argument " "3"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned int >::difference_type >(val3);
  try {
    result = (std::vector< unsigned int,std::allocator< unsigned int > > *)std_vector_Sl_uint32_t_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  std::vector< unsigned int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UInt32Vector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector___setslice__" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UInt32Vector___setslice__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UInt32Vector___setslice__" "', argument " "3"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned int >::difference_type >(val3);
  try {
    std_vector_Sl_uint32_t_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  std::vector< unsigned int >::difference_type arg3 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:UInt32Vector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector___setslice__" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UInt32Vector___setslice__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UInt32Vector___setslice__" "', argument " "3"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned int >::difference_type >(val3);
  {
    std::vector< unsigned int,std::allocator< unsigned int > > *ptr = (std::vector< unsigned int,std::allocator< unsigned int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "UInt32Vector___setslice__" "', argument " "4"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UInt32Vector___setslice__" "', argument " "4"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_uint32_t_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< unsigned int,std::allocator< unsigned int > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_UInt32Vector___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_UInt32Vector___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UInt32Vector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< uint32_t >::__setslice__(std::vector< unsigned int >::difference_type,std::vector< unsigned int >::difference_type)\n"
    "    std::vector< uint32_t >::__setslice__(std::vector< unsigned int >::difference_type,std::vector< unsigned int >::difference_type,std::vector< unsigned int,std::allocator< unsigned int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UInt32Vector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  std::vector< unsigned int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UInt32Vector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector___delslice__" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UInt32Vector___delslice__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UInt32Vector___delslice__" "', argument " "3"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned int >::difference_type >(val3);
  try {
    std_vector_Sl_uint32_t_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UInt32Vector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector___delitem__" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UInt32Vector___delitem__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  try {
    std_vector_Sl_uint32_t_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UInt32Vector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector___getitem__" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UInt32Vector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< unsigned int,std::allocator< unsigned int > > *)std_vector_Sl_uint32_t_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UInt32Vector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector___setitem__" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UInt32Vector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< unsigned int,std::allocator< unsigned int > > *ptr = (std::vector< unsigned int,std::allocator< unsigned int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UInt32Vector___setitem__" "', argument " "3"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UInt32Vector___setitem__" "', argument " "3"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_uint32_t_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< unsigned int,std::allocator< unsigned int > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UInt32Vector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector___setitem__" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UInt32Vector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_uint32_t_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UInt32Vector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector___delitem__" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UInt32Vector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_uint32_t_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Vector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_UInt32Vector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UInt32Vector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< uint32_t >::__delitem__(std::vector< unsigned int >::difference_type)\n"
    "    std::vector< uint32_t >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UInt32Vector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< unsigned int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UInt32Vector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector___getitem__" "', argument " "1"" of type '" "std::vector< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UInt32Vector___getitem__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  try {
    result = (std::vector< unsigned int >::value_type *) &std_vector_Sl_uint32_t_Sg____getitem____SWIG_1((std::vector< unsigned int > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Vector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_UInt32Vector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UInt32Vector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< uint32_t >::__getitem__(PySliceObject *)\n"
    "    std::vector< uint32_t >::__getitem__(std::vector< unsigned int >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UInt32Vector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UInt32Vector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector___setitem__" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UInt32Vector___setitem__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UInt32Vector___setitem__" "', argument " "3"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned int >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_uint32_t_Sg____setitem____SWIG_2(arg1,arg2,(unsigned int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Vector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_UInt32Vector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_UInt32Vector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UInt32Vector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< uint32_t >::__setitem__(PySliceObject *,std::vector< unsigned int,std::allocator< unsigned int > > const &)\n"
    "    std::vector< uint32_t >::__setitem__(PySliceObject *)\n"
    "    std::vector< uint32_t >::__setitem__(std::vector< unsigned int >::difference_type,std::vector< unsigned int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned int >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UInt32Vector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector_pop" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  try {
    result = (std::vector< unsigned int >::value_type)std_vector_Sl_uint32_t_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< unsigned int >::value_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UInt32Vector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector_append" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UInt32Vector_append" "', argument " "2"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< unsigned int >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_uint32_t_Sg__append(arg1,(unsigned int const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UInt32Vector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_UInt32Vector")) SWIG_fail;
  result = (std::vector< uint32_t > *)new std::vector< uint32_t >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UInt32Vector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UInt32Vector",&obj0)) SWIG_fail;
  {
    std::vector< unsigned int,std::allocator< unsigned int > > *ptr = (std::vector< unsigned int,std::allocator< unsigned int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UInt32Vector" "', argument " "1"" of type '" "std::vector< uint32_t > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UInt32Vector" "', argument " "1"" of type '" "std::vector< uint32_t > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< uint32_t > *)new std::vector< uint32_t >((std::vector< uint32_t > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UInt32Vector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector_empty" "', argument " "1"" of type '" "std::vector< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  result = (bool)((std::vector< uint32_t > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UInt32Vector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector_size" "', argument " "1"" of type '" "std::vector< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  result = ((std::vector< uint32_t > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< uint32_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UInt32Vector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector_swap" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UInt32Vector_swap" "', argument " "2"" of type '" "std::vector< uint32_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UInt32Vector_swap" "', argument " "2"" of type '" "std::vector< uint32_t > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< uint32_t > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UInt32Vector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector_begin" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UInt32Vector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector_end" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< unsigned int >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UInt32Vector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector_rbegin" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< unsigned int >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UInt32Vector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector_rend" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UInt32Vector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector_clear" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< unsigned int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UInt32Vector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector_get_allocator" "', argument " "1"" of type '" "std::vector< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  result = ((std::vector< uint32_t > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< unsigned int >::allocator_type(static_cast< const std::vector< unsigned int >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_unsigned_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UInt32Vector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UInt32Vector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UInt32Vector" "', argument " "1"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< unsigned int >::size_type >(val1);
  result = (std::vector< uint32_t > *)new std::vector< uint32_t >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UInt32Vector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector_pop_back" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UInt32Vector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector_resize" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UInt32Vector_resize" "', argument " "2"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UInt32Vector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector_erase" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UInt32Vector_erase" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UInt32Vector_erase" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
    }
  }
  result = std_vector_Sl_uint32_t_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > arg2 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UInt32Vector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector_erase" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UInt32Vector_erase" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UInt32Vector_erase" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UInt32Vector_erase" "', argument " "3"" of type '" "std::vector< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UInt32Vector_erase" "', argument " "3"" of type '" "std::vector< unsigned int >::iterator""'");
    }
  }
  result = std_vector_Sl_uint32_t_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_UInt32Vector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_UInt32Vector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UInt32Vector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< uint32_t >::erase(std::vector< unsigned int >::iterator)\n"
    "    std::vector< uint32_t >::erase(std::vector< unsigned int >::iterator,std::vector< unsigned int >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_UInt32Vector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int >::size_type arg1 ;
  std::vector< unsigned int >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< unsigned int >::value_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_UInt32Vector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UInt32Vector" "', argument " "1"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< unsigned int >::size_type >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_UInt32Vector" "', argument " "2"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< unsigned int >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< uint32_t > *)new std::vector< uint32_t >(arg1,(std::vector< unsigned int >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UInt32Vector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_UInt32Vector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_UInt32Vector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UInt32Vector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_UInt32Vector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_UInt32Vector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< uint32_t >::vector()\n"
    "    std::vector< uint32_t >::vector(std::vector< uint32_t > const &)\n"
    "    std::vector< uint32_t >::vector(std::vector< unsigned int >::size_type)\n"
    "    std::vector< uint32_t >::vector(std::vector< unsigned int >::size_type,std::vector< unsigned int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< unsigned int >::value_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UInt32Vector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector_push_back" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UInt32Vector_push_back" "', argument " "2"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< unsigned int >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< unsigned int >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UInt32Vector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector_front" "', argument " "1"" of type '" "std::vector< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  result = (std::vector< unsigned int >::value_type *) &((std::vector< uint32_t > const *)arg1)->front();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UInt32Vector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector_back" "', argument " "1"" of type '" "std::vector< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  result = (std::vector< unsigned int >::value_type *) &((std::vector< uint32_t > const *)arg1)->back();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UInt32Vector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector_assign" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UInt32Vector_assign" "', argument " "2"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::size_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UInt32Vector_assign" "', argument " "3"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< unsigned int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UInt32Vector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector_resize" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UInt32Vector_resize" "', argument " "2"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::size_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UInt32Vector_resize" "', argument " "3"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< unsigned int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_UInt32Vector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_UInt32Vector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UInt32Vector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< uint32_t >::resize(std::vector< unsigned int >::size_type)\n"
    "    std::vector< uint32_t >::resize(std::vector< unsigned int >::size_type,std::vector< unsigned int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UInt32Vector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector_insert" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UInt32Vector_insert" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UInt32Vector_insert" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UInt32Vector_insert" "', argument " "3"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned int >::value_type >(val3);
  arg3 = &temp3;
  result = std_vector_Sl_uint32_t_Sg__insert__SWIG_0(arg1,arg2,(unsigned int const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > arg2 ;
  std::vector< unsigned int >::size_type arg3 ;
  std::vector< unsigned int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< unsigned int >::value_type temp4 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:UInt32Vector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector_insert" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UInt32Vector_insert" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UInt32Vector_insert" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UInt32Vector_insert" "', argument " "3"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned int >::size_type >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "UInt32Vector_insert" "', argument " "4"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp4 = static_cast< std::vector< unsigned int >::value_type >(val4);
  arg4 = &temp4;
  std_vector_Sl_uint32_t_Sg__insert__SWIG_1(arg1,arg2,arg3,(unsigned int const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_UInt32Vector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_UInt32Vector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UInt32Vector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< uint32_t >::insert(std::vector< unsigned int >::iterator,std::vector< unsigned int >::value_type const &)\n"
    "    std::vector< uint32_t >::insert(std::vector< unsigned int >::iterator,std::vector< unsigned int >::size_type,std::vector< unsigned int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UInt32Vector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector_reserve" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UInt32Vector_reserve" "', argument " "2"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UInt32Vector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UInt32Vector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UInt32Vector_capacity" "', argument " "1"" of type '" "std::vector< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  result = ((std::vector< uint32_t > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UInt32Vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UInt32Vector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UInt32Vector" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UInt32Vector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CompositeData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CompositeData")) SWIG_fail;
  result = (vn::sensors::CompositeData *)new vn::sensors::CompositeData();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__CompositeData, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CompositeData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::CompositeData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CompositeData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__sensors__CompositeData,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CompositeData" "', argument " "1"" of type '" "vn::sensors::CompositeData const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CompositeData" "', argument " "1"" of type '" "vn::sensors::CompositeData const &""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (vn::sensors::CompositeData *)new vn::sensors::CompositeData((vn::sensors::CompositeData const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__CompositeData, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CompositeData(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CompositeData__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_vn__sensors__CompositeData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CompositeData__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CompositeData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::CompositeData::CompositeData()\n"
    "    vn::sensors::CompositeData::CompositeData(vn::sensors::CompositeData const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_CompositeData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CompositeData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CompositeData" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData_parse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::CompositeData result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData_parse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__protocol__uart__Packet,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData_parse" "', argument " "1"" of type '" "vn::protocol::uart::Packet &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CompositeData_parse" "', argument " "1"" of type '" "vn::protocol::uart::Packet &""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  result = vn::sensors::CompositeData::parse(*arg1);
  resultobj = SWIG_NewPointerObj((new vn::sensors::CompositeData(static_cast< const vn::sensors::CompositeData& >(result))), SWIGTYPE_p_vn__sensors__CompositeData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData_parse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = 0 ;
  vn::sensors::CompositeData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CompositeData_parse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__protocol__uart__Packet,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData_parse" "', argument " "1"" of type '" "vn::protocol::uart::Packet &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CompositeData_parse" "', argument " "1"" of type '" "vn::protocol::uart::Packet &""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vn__sensors__CompositeData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CompositeData_parse" "', argument " "2"" of type '" "vn::sensors::CompositeData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CompositeData_parse" "', argument " "2"" of type '" "vn::sensors::CompositeData &""'"); 
  }
  arg2 = reinterpret_cast< vn::sensors::CompositeData * >(argp2);
  vn::sensors::CompositeData::parse(*arg1,*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData_parse__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::protocol::uart::Packet *arg1 = 0 ;
  std::vector< vn::sensors::CompositeData *,std::allocator< vn::sensors::CompositeData * > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CompositeData_parse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_vn__protocol__uart__Packet,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData_parse" "', argument " "1"" of type '" "vn::protocol::uart::Packet &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CompositeData_parse" "', argument " "1"" of type '" "vn::protocol::uart::Packet &""'"); 
  }
  arg1 = reinterpret_cast< vn::protocol::uart::Packet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_vn__sensors__CompositeData_p_std__allocatorT_vn__sensors__CompositeData_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CompositeData_parse" "', argument " "2"" of type '" "std::vector< vn::sensors::CompositeData *,std::allocator< vn::sensors::CompositeData * > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CompositeData_parse" "', argument " "2"" of type '" "std::vector< vn::sensors::CompositeData *,std::allocator< vn::sensors::CompositeData * > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< vn::sensors::CompositeData *,std::allocator< vn::sensors::CompositeData * > > * >(argp2);
  vn::sensors::CompositeData::parse(*arg1,*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData_parse(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__protocol__uart__Packet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CompositeData_parse__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__protocol__uart__Packet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vn__sensors__CompositeData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CompositeData_parse__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__protocol__uart__Packet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_vn__sensors__CompositeData_p_std__allocatorT_vn__sensors__CompositeData_p_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CompositeData_parse__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CompositeData_parse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::CompositeData::parse(vn::protocol::uart::Packet &)\n"
    "    vn::sensors::CompositeData::parse(vn::protocol::uart::Packet &,vn::sensors::CompositeData &)\n"
    "    vn::sensors::CompositeData::parse(vn::protocol::uart::Packet &,std::vector< vn::sensors::CompositeData *,std::allocator< vn::sensors::CompositeData * > > &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CompositeData_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData_reset" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  (arg1)->reset();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasAnyAttitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasAnyAttitude",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasAnyAttitude" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasAnyAttitude();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___anyAttitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::AttitudeF result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___anyAttitude",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___anyAttitude" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try
    {
      result = (arg1)->anyAttitude();
    }
    catch (vn::invalid_operation&)
    {
      //PyErr_SetString(PyExc_RuntimeError, const_cast<char*>(e.what()));
      //return NULL;
      Py_RETURN_NONE;
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::AttitudeF(static_cast< const vn::math::AttitudeF& >(result))), SWIGTYPE_p_vn__math__AttitudeF, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasYawPitchRoll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasYawPitchRoll",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasYawPitchRoll" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasYawPitchRoll();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___yawPitchRoll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___yawPitchRoll",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___yawPitchRoll" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->yawPitchRoll(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasQuaternion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasQuaternion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasQuaternion" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasQuaternion();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___quaternion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec4f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___quaternion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___quaternion" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->quaternion(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec4f(static_cast< const vn::math::vec4f& >(result))), SWIGTYPE_p_vn__math__vecT_4_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasDirectionCosineMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasDirectionCosineMatrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasDirectionCosineMatrix" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasDirectionCosineMatrix();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___directionCosineMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::mat3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___directionCosineMatrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___directionCosineMatrix" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->directionCosineMatrix(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::mat3f(static_cast< const vn::math::mat3f& >(result))), SWIGTYPE_p_vn__math__matT_3_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasAnyMagnetic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasAnyMagnetic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasAnyMagnetic" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasAnyMagnetic();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___anyMagnetic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___anyMagnetic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___anyMagnetic" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->anyMagnetic(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasMagnetic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasMagnetic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasMagnetic" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasMagnetic();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___magnetic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___magnetic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___magnetic" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->magnetic(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasMagneticUncompensated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasMagneticUncompensated",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasMagneticUncompensated" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasMagneticUncompensated();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___magneticUncompensated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___magneticUncompensated",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___magneticUncompensated" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->magneticUncompensated(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasMagneticNed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasMagneticNed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasMagneticNed" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasMagneticNed();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___magneticNed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___magneticNed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___magneticNed" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->magneticNed(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasMagneticEcef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasMagneticEcef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasMagneticEcef" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasMagneticEcef();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___magneticEcef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___magneticEcef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___magneticEcef" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->magneticEcef(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasAnyAcceleration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasAnyAcceleration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasAnyAcceleration" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasAnyAcceleration();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___anyAcceleration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___anyAcceleration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___anyAcceleration" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->anyAcceleration(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasAcceleration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasAcceleration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasAcceleration" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasAcceleration();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___acceleration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___acceleration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___acceleration" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->acceleration(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasAccelerationLinearBody(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasAccelerationLinearBody",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasAccelerationLinearBody" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasAccelerationLinearBody();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___accelerationLinearBody(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___accelerationLinearBody",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___accelerationLinearBody" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->accelerationLinearBody(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasAccelerationUncompensated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasAccelerationUncompensated",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasAccelerationUncompensated" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasAccelerationUncompensated();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___accelerationUncompensated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___accelerationUncompensated",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___accelerationUncompensated" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->accelerationUncompensated(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasAccelerationLinearNed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasAccelerationLinearNed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasAccelerationLinearNed" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasAccelerationLinearNed();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___accelerationLinearNed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___accelerationLinearNed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___accelerationLinearNed" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->accelerationLinearNed(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasAccelerationLinearEcef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasAccelerationLinearEcef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasAccelerationLinearEcef" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasAccelerationLinearEcef();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___accelerationLinearEcef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___accelerationLinearEcef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___accelerationLinearEcef" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->accelerationLinearEcef(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasAccelerationNed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasAccelerationNed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasAccelerationNed" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasAccelerationNed();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___accelerationNed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___accelerationNed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___accelerationNed" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->accelerationNed(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasAccelerationEcef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasAccelerationEcef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasAccelerationEcef" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasAccelerationEcef();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___accelerationEcef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___accelerationEcef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___accelerationEcef" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->accelerationEcef(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasAnyAngularRate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasAnyAngularRate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasAnyAngularRate" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasAnyAngularRate();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___anyAngularRate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___anyAngularRate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___anyAngularRate" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->anyAngularRate(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasAngularRate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasAngularRate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasAngularRate" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasAngularRate();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___angularRate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___angularRate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___angularRate" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->angularRate(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasAngularRateUncompensated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasAngularRateUncompensated",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasAngularRateUncompensated" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasAngularRateUncompensated();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___angularRateUncompensated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___angularRateUncompensated",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___angularRateUncompensated" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->angularRateUncompensated(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasAnyTemperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasAnyTemperature",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasAnyTemperature" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasAnyTemperature();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___anyTemperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___anyTemperature",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___anyTemperature" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (float)(arg1)->anyTemperature(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasTemperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasTemperature",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasTemperature" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasTemperature();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___temperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___temperature",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___temperature" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (float)(arg1)->temperature(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasAnyPressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasAnyPressure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasAnyPressure" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasAnyPressure();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___anyPressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___anyPressure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___anyPressure" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (float)(arg1)->anyPressure(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasPressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasPressure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasPressure" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasPressure();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___pressure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___pressure" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (float)(arg1)->pressure(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasAnyPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasAnyPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasAnyPosition" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasAnyPosition();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___anyPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::PositionD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___anyPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___anyPosition" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->anyPosition(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::PositionD(static_cast< const vn::math::PositionD& >(result))), SWIGTYPE_p_vn__math__PositionD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasPositionGpsLla(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasPositionGpsLla",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasPositionGpsLla" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasPositionGpsLla();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___positionGpsLla(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___positionGpsLla",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___positionGpsLla" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->positionGpsLla(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3d(static_cast< const vn::math::vec3d& >(result))), SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasPositionGpsEcef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasPositionGpsEcef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasPositionGpsEcef" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasPositionGpsEcef();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___positionGpsEcef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___positionGpsEcef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___positionGpsEcef" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->positionGpsEcef(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3d(static_cast< const vn::math::vec3d& >(result))), SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasPositionEstimatedLla(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasPositionEstimatedLla",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasPositionEstimatedLla" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasPositionEstimatedLla();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___positionEstimatedLla(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___positionEstimatedLla",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___positionEstimatedLla" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->positionEstimatedLla(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3d(static_cast< const vn::math::vec3d& >(result))), SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasPositionEstimatedEcef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasPositionEstimatedEcef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasPositionEstimatedEcef" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasPositionEstimatedEcef();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___positionEstimatedEcef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___positionEstimatedEcef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___positionEstimatedEcef" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->positionEstimatedEcef(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3d(static_cast< const vn::math::vec3d& >(result))), SWIGTYPE_p_vn__math__vecT_3_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasAnyVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasAnyVelocity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasAnyVelocity" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasAnyVelocity();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___anyVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___anyVelocity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___anyVelocity" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->anyVelocity(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasVelocityGpsNed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasVelocityGpsNed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasVelocityGpsNed" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasVelocityGpsNed();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___velocityGpsNed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___velocityGpsNed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___velocityGpsNed" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->velocityGpsNed(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasVelocityGpsEcef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasVelocityGpsEcef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasVelocityGpsEcef" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasVelocityGpsEcef();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___velocityGpsEcef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___velocityGpsEcef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___velocityGpsEcef" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->velocityGpsEcef(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasVelocityEstimatedNed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasVelocityEstimatedNed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasVelocityEstimatedNed" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasVelocityEstimatedNed();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___velocityEstimatedNed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___velocityEstimatedNed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___velocityEstimatedNed" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->velocityEstimatedNed(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasVelocityEstimatedEcef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasVelocityEstimatedEcef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasVelocityEstimatedEcef" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasVelocityEstimatedEcef();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___velocityEstimatedEcef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___velocityEstimatedEcef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___velocityEstimatedEcef" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->velocityEstimatedEcef(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasVelocityEstimatedBody(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasVelocityEstimatedBody",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasVelocityEstimatedBody" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasVelocityEstimatedBody();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___velocityEstimatedBody(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___velocityEstimatedBody",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___velocityEstimatedBody" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->velocityEstimatedBody(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasDeltaTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasDeltaTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasDeltaTime" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasDeltaTime();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___deltaTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___deltaTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___deltaTime" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (float)(arg1)->deltaTime(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasDeltaTheta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasDeltaTheta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasDeltaTheta" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasDeltaTheta();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___deltaTheta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___deltaTheta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___deltaTheta" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->deltaTheta(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasDeltaVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasDeltaVelocity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasDeltaVelocity" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasDeltaVelocity();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___deltaVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___deltaVelocity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___deltaVelocity" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->deltaVelocity(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasTimeStartup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasTimeStartup",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasTimeStartup" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasTimeStartup();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___timeStartup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___timeStartup",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___timeStartup" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (uint64_t)(arg1)->timeStartup(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasTimeGps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasTimeGps",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasTimeGps" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasTimeGps();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___timeGps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___timeGps",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___timeGps" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (uint64_t)(arg1)->timeGps(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasTow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasTow",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasTow" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasTow();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___tow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___tow",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___tow" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (double)(arg1)->tow(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasWeek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasWeek",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasWeek" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasWeek();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___week(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___week",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___week" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->week(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasNumSats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasNumSats",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasNumSats" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasNumSats();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___numSats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___numSats",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___numSats" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (uint8_t)(arg1)->numSats(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasTimeSyncIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasTimeSyncIn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasTimeSyncIn" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasTimeSyncIn();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___timeSyncIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___timeSyncIn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___timeSyncIn" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (uint64_t)(arg1)->timeSyncIn(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasVpeStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasVpeStatus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasVpeStatus" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasVpeStatus();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___vpeStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::VpeStatus result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___vpeStatus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___vpeStatus" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->vpeStatus(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::protocol::uart::VpeStatus(static_cast< const vn::protocol::uart::VpeStatus& >(result))), SWIGTYPE_p_vn__protocol__uart__VpeStatus, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasInsStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasInsStatus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasInsStatus" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasInsStatus();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___insStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::InsStatus result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___insStatus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___insStatus" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (vn::protocol::uart::InsStatus)(arg1)->insStatus(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasSyncInCnt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasSyncInCnt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasSyncInCnt" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasSyncInCnt();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___syncInCnt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___syncInCnt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___syncInCnt" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (uint32_t)(arg1)->syncInCnt(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasTimeGpsPps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasTimeGpsPps",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasTimeGpsPps" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasTimeGpsPps();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___timeGpsPps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___timeGpsPps",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___timeGpsPps" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (uint64_t)(arg1)->timeGpsPps(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasGpsTow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasGpsTow",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasGpsTow" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasGpsTow();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___gpsTow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___gpsTow",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___gpsTow" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (uint64_t)(arg1)->gpsTow(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasTimeUtc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasTimeUtc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasTimeUtc" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasTimeUtc();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___timeUtc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::TimeUtc result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___timeUtc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___timeUtc" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->timeUtc(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::protocol::uart::TimeUtc(static_cast< const vn::protocol::uart::TimeUtc& >(result))), SWIGTYPE_p_vn__protocol__uart__TimeUtc, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasSensSat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasSensSat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasSensSat" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasSensSat();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___sensSat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::SensSat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___sensSat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___sensSat" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (vn::protocol::uart::SensSat)(arg1)->sensSat(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasFix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasFix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasFix" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasFix();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___fix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::protocol::uart::GpsFix result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___fix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___fix" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (vn::protocol::uart::GpsFix)(arg1)->fix(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasAnyPositionUncertainty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasAnyPositionUncertainty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasAnyPositionUncertainty" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasAnyPositionUncertainty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___anyPositionUncertainty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___anyPositionUncertainty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___anyPositionUncertainty" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->anyPositionUncertainty(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasPositionUncertaintyGpsNed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasPositionUncertaintyGpsNed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasPositionUncertaintyGpsNed" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasPositionUncertaintyGpsNed();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___positionUncertaintyGpsNed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___positionUncertaintyGpsNed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___positionUncertaintyGpsNed" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->positionUncertaintyGpsNed(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasPositionUncertaintyGpsEcef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasPositionUncertaintyGpsEcef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasPositionUncertaintyGpsEcef" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasPositionUncertaintyGpsEcef();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___positionUncertaintyGpsEcef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___positionUncertaintyGpsEcef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___positionUncertaintyGpsEcef" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->positionUncertaintyGpsEcef(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasPositionUncertaintyEstimated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasPositionUncertaintyEstimated",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasPositionUncertaintyEstimated" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasPositionUncertaintyEstimated();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___positionUncertaintyEstimated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___positionUncertaintyEstimated",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___positionUncertaintyEstimated" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (float)(arg1)->positionUncertaintyEstimated(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasAnyVelocityUncertainty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasAnyVelocityUncertainty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasAnyVelocityUncertainty" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasAnyVelocityUncertainty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___anyVelocityUncertainty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___anyVelocityUncertainty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___anyVelocityUncertainty" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (float)(arg1)->anyVelocityUncertainty(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasVelocityUncertaintyGps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasVelocityUncertaintyGps",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasVelocityUncertaintyGps" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasVelocityUncertaintyGps();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___velocityUncertaintyGps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___velocityUncertaintyGps",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___velocityUncertaintyGps" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (float)(arg1)->velocityUncertaintyGps(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasVelocityUncertaintyEstimated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasVelocityUncertaintyEstimated",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasVelocityUncertaintyEstimated" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasVelocityUncertaintyEstimated();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___velocityUncertaintyEstimated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___velocityUncertaintyEstimated",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___velocityUncertaintyEstimated" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (float)(arg1)->velocityUncertaintyEstimated(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasTimeUncertainty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasTimeUncertainty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasTimeUncertainty" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasTimeUncertainty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___timeUncertainty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___timeUncertainty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___timeUncertainty" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (uint32_t)(arg1)->timeUncertainty(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___hasAttitudeUncertainty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___hasAttitudeUncertainty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___hasAttitudeUncertainty" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasAttitudeUncertainty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData___attitudeUncertainty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::math::vec3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData___attitudeUncertainty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData___attitudeUncertainty" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  {
    try {
      result = (arg1)->attitudeUncertainty(); 
    }	catch (vn::invalid_operation&) {
      Py_RETURN_NONE; 
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::math::vec3f(static_cast< const vn::math::vec3f& >(result))), SWIGTYPE_p_vn__math__vecT_3_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData_hasCourseOverGround(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData_hasCourseOverGround",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData_hasCourseOverGround" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasCourseOverGround();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData_courseOverGround(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData_courseOverGround",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData_courseOverGround" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (float)(arg1)->courseOverGround();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData_hasSpeedOverGround(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData_hasSpeedOverGround",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData_hasSpeedOverGround" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (bool)(arg1)->hasSpeedOverGround();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeData_speedOverGround(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::CompositeData *arg1 = (vn::sensors::CompositeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeData_speedOverGround",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__CompositeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeData_speedOverGround" "', argument " "1"" of type '" "vn::sensors::CompositeData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::CompositeData * >(argp1);
  result = (float)(arg1)->speedOverGround();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CompositeData_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__CompositeData, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_EzAsyncData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::EzAsyncData *arg1 = (vn::sensors::EzAsyncData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_EzAsyncData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__EzAsyncData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EzAsyncData" "', argument " "1"" of type '" "vn::sensors::EzAsyncData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::EzAsyncData * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EzAsyncData___sensor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::EzAsyncData *arg1 = (vn::sensors::EzAsyncData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::VnSensor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EzAsyncData___sensor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__EzAsyncData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EzAsyncData___sensor" "', argument " "1"" of type '" "vn::sensors::EzAsyncData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::EzAsyncData * >(argp1);
  result = (vn::sensors::VnSensor *)(arg1)->sensor();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__VnSensor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EzAsyncData_connect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  uint32_t arg2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::sensors::EzAsyncData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EzAsyncData_connect",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "EzAsyncData_connect" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EzAsyncData_connect" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try
    {
      result = (vn::sensors::EzAsyncData *)vn::sensors::EzAsyncData::connect(arg1,arg2);
    }
    catch (vn::not_found &e)
    {
      PyErr_SetString(PyExc_RuntimeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vn__sensors__EzAsyncData, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EzAsyncData_disconnect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::EzAsyncData *arg1 = (vn::sensors::EzAsyncData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EzAsyncData_disconnect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__EzAsyncData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EzAsyncData_disconnect" "', argument " "1"" of type '" "vn::sensors::EzAsyncData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::EzAsyncData * >(argp1);
  (arg1)->disconnect();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EzAsyncData___currentData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::EzAsyncData *arg1 = (vn::sensors::EzAsyncData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::CompositeData result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EzAsyncData___currentData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__EzAsyncData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EzAsyncData___currentData" "', argument " "1"" of type '" "vn::sensors::EzAsyncData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::EzAsyncData * >(argp1);
  result = (arg1)->currentData();
  resultobj = SWIG_NewPointerObj((new vn::sensors::CompositeData(static_cast< const vn::sensors::CompositeData& >(result))), SWIGTYPE_p_vn__sensors__CompositeData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EzAsyncData_next_data__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::EzAsyncData *arg1 = (vn::sensors::EzAsyncData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vn::sensors::CompositeData result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EzAsyncData_next_data",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__EzAsyncData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EzAsyncData_next_data" "', argument " "1"" of type '" "vn::sensors::EzAsyncData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::EzAsyncData * >(argp1);
  {
    try
    {
      result = (arg1)->getNextData();
    }
    catch (vn::timeout &e)
    {
      PyErr_SetString(PyExc_TimeoutError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::sensors::CompositeData(static_cast< const vn::sensors::CompositeData& >(result))), SWIGTYPE_p_vn__sensors__CompositeData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EzAsyncData_next_data__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vn::sensors::EzAsyncData *arg1 = (vn::sensors::EzAsyncData *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vn::sensors::CompositeData result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EzAsyncData_next_data",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vn__sensors__EzAsyncData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EzAsyncData_next_data" "', argument " "1"" of type '" "vn::sensors::EzAsyncData *""'"); 
  }
  arg1 = reinterpret_cast< vn::sensors::EzAsyncData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EzAsyncData_next_data" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      result = (arg1)->getNextData(arg2);
    }
    catch (vn::timeout &e)
    {
      PyErr_SetString(PyExc_TimeoutError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new vn::sensors::CompositeData(static_cast< const vn::sensors::CompositeData& >(result))), SWIGTYPE_p_vn__sensors__CompositeData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EzAsyncData_next_data(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__EzAsyncData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_EzAsyncData_next_data__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_vn__sensors__EzAsyncData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EzAsyncData_next_data__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EzAsyncData_next_data'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vn::sensors::EzAsyncData::getNextData()\n"
    "    vn::sensors::EzAsyncData::getNextData(int)\n");
  return 0;
}


SWIGINTERN PyObject *EzAsyncData_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vn__sensors__EzAsyncData, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"new_vec3f", _wrap_new_vec3f, METH_VARARGS, (char *)"\n"
		"vec3f()\n"
		"vec3f(float val)\n"
		"new_vec3f(float const & x_val, float const & y_val, float const & z_val) -> vec3f\n"
		""},
	 { (char *)"vec3f_zero", _wrap_vec3f_zero, METH_VARARGS, (char *)"vec3f_zero() -> vec3f"},
	 { (char *)"vec3f_one", _wrap_vec3f_one, METH_VARARGS, (char *)"vec3f_one() -> vec3f"},
	 { (char *)"vec3f_unitX", _wrap_vec3f_unitX, METH_VARARGS, (char *)"vec3f_unitX() -> vec3f"},
	 { (char *)"vec3f_unitY", _wrap_vec3f_unitY, METH_VARARGS, (char *)"vec3f_unitY() -> vec3f"},
	 { (char *)"vec3f_unitZ", _wrap_vec3f_unitZ, METH_VARARGS, (char *)"vec3f_unitZ() -> vec3f"},
	 { (char *)"vec3f___neg__", _wrap_vec3f___neg__, METH_VARARGS, (char *)"vec3f___neg__(vec3f self) -> vec3f"},
	 { (char *)"vec3f___iadd__", _wrap_vec3f___iadd__, METH_VARARGS, (char *)"vec3f___iadd__(vec3f self, vec3f rhs) -> vec3f"},
	 { (char *)"vec3f___isub__", _wrap_vec3f___isub__, METH_VARARGS, (char *)"vec3f___isub__(vec3f self, vec3f rhs) -> vec3f"},
	 { (char *)"vec3f___imul__", _wrap_vec3f___imul__, METH_VARARGS, (char *)"vec3f___imul__(vec3f self, float const & rhs) -> vec3f"},
	 { (char *)"vec3f___idiv__", _wrap_vec3f___idiv__, METH_VARARGS, (char *)"vec3f___idiv__(vec3f self, float const & rhs) -> vec3f"},
	 { (char *)"vec3f_dim", _wrap_vec3f_dim, METH_VARARGS, (char *)"vec3f_dim(vec3f self) -> size_t"},
	 { (char *)"vec3f_neg", _wrap_vec3f_neg, METH_VARARGS, (char *)"vec3f_neg(vec3f self) -> vec3f"},
	 { (char *)"vec3f_mag", _wrap_vec3f_mag, METH_VARARGS, (char *)"vec3f_mag(vec3f self) -> float"},
	 { (char *)"vec3f_add", _wrap_vec3f_add, METH_VARARGS, (char *)"vec3f_add(vec3f self, vec3f toAdd) -> vec3f"},
	 { (char *)"vec3f_sub", _wrap_vec3f_sub, METH_VARARGS, (char *)"vec3f_sub(vec3f self, vec3f to_sub) -> vec3f"},
	 { (char *)"vec3f_mult", _wrap_vec3f_mult, METH_VARARGS, (char *)"vec3f_mult(vec3f self, double const & scalar) -> vec3f"},
	 { (char *)"vec3f_div", _wrap_vec3f_div, METH_VARARGS, (char *)"vec3f_div(vec3f self, double const & scalar) -> vec3f"},
	 { (char *)"vec3f_norm", _wrap_vec3f_norm, METH_VARARGS, (char *)"vec3f_norm(vec3f self) -> vec3f"},
	 { (char *)"vec3f_dot", _wrap_vec3f_dot, METH_VARARGS, (char *)"vec3f_dot(vec3f self, vec3f rhs) -> float"},
	 { (char *)"vec3f_cross", _wrap_vec3f_cross, METH_VARARGS, (char *)"vec3f_cross(vec3f self, vec3f rhs) -> vec3f"},
	 { (char *)"vec3f___getX", _wrap_vec3f___getX, METH_VARARGS, (char *)"vec3f___getX(vec3f self) -> float"},
	 { (char *)"vec3f___setX", _wrap_vec3f___setX, METH_VARARGS, (char *)"vec3f___setX(vec3f self, float v)"},
	 { (char *)"vec3f___getY", _wrap_vec3f___getY, METH_VARARGS, (char *)"vec3f___getY(vec3f self) -> float"},
	 { (char *)"vec3f___setY", _wrap_vec3f___setY, METH_VARARGS, (char *)"vec3f___setY(vec3f self, float v)"},
	 { (char *)"vec3f___getZ", _wrap_vec3f___getZ, METH_VARARGS, (char *)"vec3f___getZ(vec3f self) -> float"},
	 { (char *)"vec3f___setZ", _wrap_vec3f___setZ, METH_VARARGS, (char *)"vec3f___setZ(vec3f self, float v)"},
	 { (char *)"vec3f___repr__", _wrap_vec3f___repr__, METH_VARARGS, (char *)"vec3f___repr__(vec3f self) -> char *"},
	 { (char *)"vec3f___str__", _wrap_vec3f___str__, METH_VARARGS, (char *)"vec3f___str__(vec3f self) -> char *"},
	 { (char *)"delete_vec3f", _wrap_delete_vec3f, METH_VARARGS, (char *)"delete_vec3f(vec3f self)"},
	 { (char *)"vec3f_swigregister", vec3f_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_vec3d", _wrap_new_vec3d, METH_VARARGS, (char *)"\n"
		"vec3d()\n"
		"vec3d(double val)\n"
		"new_vec3d(double const & x_val, double const & y_val, double const & z_val) -> vec3d\n"
		""},
	 { (char *)"vec3d_zero", _wrap_vec3d_zero, METH_VARARGS, (char *)"vec3d_zero() -> vec3d"},
	 { (char *)"vec3d_one", _wrap_vec3d_one, METH_VARARGS, (char *)"vec3d_one() -> vec3d"},
	 { (char *)"vec3d_unitX", _wrap_vec3d_unitX, METH_VARARGS, (char *)"vec3d_unitX() -> vec3d"},
	 { (char *)"vec3d_unitY", _wrap_vec3d_unitY, METH_VARARGS, (char *)"vec3d_unitY() -> vec3d"},
	 { (char *)"vec3d_unitZ", _wrap_vec3d_unitZ, METH_VARARGS, (char *)"vec3d_unitZ() -> vec3d"},
	 { (char *)"vec3d___neg__", _wrap_vec3d___neg__, METH_VARARGS, (char *)"vec3d___neg__(vec3d self) -> vec3d"},
	 { (char *)"vec3d___iadd__", _wrap_vec3d___iadd__, METH_VARARGS, (char *)"vec3d___iadd__(vec3d self, vec3d rhs) -> vec3d"},
	 { (char *)"vec3d___isub__", _wrap_vec3d___isub__, METH_VARARGS, (char *)"vec3d___isub__(vec3d self, vec3d rhs) -> vec3d"},
	 { (char *)"vec3d___imul__", _wrap_vec3d___imul__, METH_VARARGS, (char *)"vec3d___imul__(vec3d self, double const & rhs) -> vec3d"},
	 { (char *)"vec3d___idiv__", _wrap_vec3d___idiv__, METH_VARARGS, (char *)"vec3d___idiv__(vec3d self, double const & rhs) -> vec3d"},
	 { (char *)"vec3d_dim", _wrap_vec3d_dim, METH_VARARGS, (char *)"vec3d_dim(vec3d self) -> size_t"},
	 { (char *)"vec3d_neg", _wrap_vec3d_neg, METH_VARARGS, (char *)"vec3d_neg(vec3d self) -> vec3d"},
	 { (char *)"vec3d_mag", _wrap_vec3d_mag, METH_VARARGS, (char *)"vec3d_mag(vec3d self) -> double"},
	 { (char *)"vec3d_add", _wrap_vec3d_add, METH_VARARGS, (char *)"vec3d_add(vec3d self, vec3d toAdd) -> vec3d"},
	 { (char *)"vec3d_sub", _wrap_vec3d_sub, METH_VARARGS, (char *)"vec3d_sub(vec3d self, vec3d to_sub) -> vec3d"},
	 { (char *)"vec3d_mult", _wrap_vec3d_mult, METH_VARARGS, (char *)"vec3d_mult(vec3d self, double const & scalar) -> vec3d"},
	 { (char *)"vec3d_div", _wrap_vec3d_div, METH_VARARGS, (char *)"vec3d_div(vec3d self, double const & scalar) -> vec3d"},
	 { (char *)"vec3d_norm", _wrap_vec3d_norm, METH_VARARGS, (char *)"vec3d_norm(vec3d self) -> vec3d"},
	 { (char *)"vec3d_dot", _wrap_vec3d_dot, METH_VARARGS, (char *)"vec3d_dot(vec3d self, vec3d rhs) -> double"},
	 { (char *)"vec3d_cross", _wrap_vec3d_cross, METH_VARARGS, (char *)"vec3d_cross(vec3d self, vec3d rhs) -> vec3d"},
	 { (char *)"vec3d___getX", _wrap_vec3d___getX, METH_VARARGS, (char *)"vec3d___getX(vec3d self) -> float"},
	 { (char *)"vec3d___setX", _wrap_vec3d___setX, METH_VARARGS, (char *)"vec3d___setX(vec3d self, double v)"},
	 { (char *)"vec3d___getY", _wrap_vec3d___getY, METH_VARARGS, (char *)"vec3d___getY(vec3d self) -> float"},
	 { (char *)"vec3d___setY", _wrap_vec3d___setY, METH_VARARGS, (char *)"vec3d___setY(vec3d self, double v)"},
	 { (char *)"vec3d___getZ", _wrap_vec3d___getZ, METH_VARARGS, (char *)"vec3d___getZ(vec3d self) -> float"},
	 { (char *)"vec3d___setZ", _wrap_vec3d___setZ, METH_VARARGS, (char *)"vec3d___setZ(vec3d self, double v)"},
	 { (char *)"vec3d___repr__", _wrap_vec3d___repr__, METH_VARARGS, (char *)"vec3d___repr__(vec3d self) -> char *"},
	 { (char *)"vec3d___str__", _wrap_vec3d___str__, METH_VARARGS, (char *)"vec3d___str__(vec3d self) -> char *"},
	 { (char *)"delete_vec3d", _wrap_delete_vec3d, METH_VARARGS, (char *)"delete_vec3d(vec3d self)"},
	 { (char *)"vec3d_swigregister", vec3d_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_vec4f", _wrap_new_vec4f, METH_VARARGS, (char *)"\n"
		"vec4f()\n"
		"vec4f(float val)\n"
		"new_vec4f(float x_val, float y_val, float z_val, float w_val) -> vec4f\n"
		""},
	 { (char *)"vec4f_zero", _wrap_vec4f_zero, METH_VARARGS, (char *)"vec4f_zero() -> vec4f"},
	 { (char *)"vec4f_one", _wrap_vec4f_one, METH_VARARGS, (char *)"vec4f_one() -> vec4f"},
	 { (char *)"vec4f_unitX", _wrap_vec4f_unitX, METH_VARARGS, (char *)"vec4f_unitX() -> vec4f"},
	 { (char *)"vec4f_unitY", _wrap_vec4f_unitY, METH_VARARGS, (char *)"vec4f_unitY() -> vec4f"},
	 { (char *)"vec4f_unitZ", _wrap_vec4f_unitZ, METH_VARARGS, (char *)"vec4f_unitZ() -> vec4f"},
	 { (char *)"vec4f_unitW", _wrap_vec4f_unitW, METH_VARARGS, (char *)"vec4f_unitW() -> vec4f"},
	 { (char *)"vec4f___neg__", _wrap_vec4f___neg__, METH_VARARGS, (char *)"vec4f___neg__(vec4f self) -> vec4f"},
	 { (char *)"vec4f___iadd__", _wrap_vec4f___iadd__, METH_VARARGS, (char *)"vec4f___iadd__(vec4f self, vec4f rhs) -> vec4f"},
	 { (char *)"vec4f___isub__", _wrap_vec4f___isub__, METH_VARARGS, (char *)"vec4f___isub__(vec4f self, vec4f rhs) -> vec4f"},
	 { (char *)"vec4f___imul__", _wrap_vec4f___imul__, METH_VARARGS, (char *)"vec4f___imul__(vec4f self, float const & rhs) -> vec4f"},
	 { (char *)"vec4f___idiv__", _wrap_vec4f___idiv__, METH_VARARGS, (char *)"vec4f___idiv__(vec4f self, float const & rhs) -> vec4f"},
	 { (char *)"vec4f_dim", _wrap_vec4f_dim, METH_VARARGS, (char *)"vec4f_dim(vec4f self) -> size_t"},
	 { (char *)"vec4f_neg", _wrap_vec4f_neg, METH_VARARGS, (char *)"vec4f_neg(vec4f self) -> vec4f"},
	 { (char *)"vec4f_mag", _wrap_vec4f_mag, METH_VARARGS, (char *)"vec4f_mag(vec4f self) -> float"},
	 { (char *)"vec4f_add", _wrap_vec4f_add, METH_VARARGS, (char *)"vec4f_add(vec4f self, vec4f toAdd) -> vec4f"},
	 { (char *)"vec4f_sub", _wrap_vec4f_sub, METH_VARARGS, (char *)"vec4f_sub(vec4f self, vec4f to_sub) -> vec4f"},
	 { (char *)"vec4f_mult", _wrap_vec4f_mult, METH_VARARGS, (char *)"vec4f_mult(vec4f self, double const & scalar) -> vec4f"},
	 { (char *)"vec4f_div", _wrap_vec4f_div, METH_VARARGS, (char *)"vec4f_div(vec4f self, double const & scalar) -> vec4f"},
	 { (char *)"vec4f_norm", _wrap_vec4f_norm, METH_VARARGS, (char *)"vec4f_norm(vec4f self) -> vec4f"},
	 { (char *)"vec4f_dot", _wrap_vec4f_dot, METH_VARARGS, (char *)"vec4f_dot(vec4f self, vec4f rhs) -> float"},
	 { (char *)"vec4f___getX", _wrap_vec4f___getX, METH_VARARGS, (char *)"vec4f___getX(vec4f self) -> float"},
	 { (char *)"vec4f___setX", _wrap_vec4f___setX, METH_VARARGS, (char *)"vec4f___setX(vec4f self, float v)"},
	 { (char *)"vec4f___getY", _wrap_vec4f___getY, METH_VARARGS, (char *)"vec4f___getY(vec4f self) -> float"},
	 { (char *)"vec4f___setY", _wrap_vec4f___setY, METH_VARARGS, (char *)"vec4f___setY(vec4f self, float v)"},
	 { (char *)"vec4f___getZ", _wrap_vec4f___getZ, METH_VARARGS, (char *)"vec4f___getZ(vec4f self) -> float"},
	 { (char *)"vec4f___setZ", _wrap_vec4f___setZ, METH_VARARGS, (char *)"vec4f___setZ(vec4f self, float v)"},
	 { (char *)"vec4f___getW", _wrap_vec4f___getW, METH_VARARGS, (char *)"vec4f___getW(vec4f self) -> float"},
	 { (char *)"vec4f___setW", _wrap_vec4f___setW, METH_VARARGS, (char *)"vec4f___setW(vec4f self, float v)"},
	 { (char *)"vec4f___repr__", _wrap_vec4f___repr__, METH_VARARGS, (char *)"vec4f___repr__(vec4f self) -> char *"},
	 { (char *)"vec4f___str__", _wrap_vec4f___str__, METH_VARARGS, (char *)"vec4f___str__(vec4f self) -> char *"},
	 { (char *)"delete_vec4f", _wrap_delete_vec4f, METH_VARARGS, (char *)"delete_vec4f(vec4f self)"},
	 { (char *)"vec4f_swigregister", vec4f_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_mat3f", _wrap_new_mat3f, METH_VARARGS, (char *)"\n"
		"mat3f()\n"
		"mat3f(float val)\n"
		"mat3f(float e00v, float e01v, float e02v, float e10v, float e11v, float e12v, float e20v, float e21v, float e22v)\n"
		"new_mat3f(vec3f col0, vec3f col1, vec3f col2) -> mat3f\n"
		""},
	 { (char *)"mat3f_zero", _wrap_mat3f_zero, METH_VARARGS, (char *)"mat3f_zero() -> mat3f"},
	 { (char *)"mat3f_one", _wrap_mat3f_one, METH_VARARGS, (char *)"mat3f_one() -> mat3f"},
	 { (char *)"mat3f_identity", _wrap_mat3f_identity, METH_VARARGS, (char *)"mat3f_identity() -> mat3f"},
	 { (char *)"mat3f___call__", _wrap_mat3f___call__, METH_VARARGS, (char *)"\n"
		"__call__(size_t row, size_t col) -> float\n"
		"mat3f___call__(mat3f self, size_t row, size_t col) -> float const &\n"
		""},
	 { (char *)"mat3f___neg__", _wrap_mat3f___neg__, METH_VARARGS, (char *)"mat3f___neg__(mat3f self) -> mat3f"},
	 { (char *)"mat3f_dimRow", _wrap_mat3f_dimRow, METH_VARARGS, (char *)"mat3f_dimRow(mat3f self) -> size_t"},
	 { (char *)"mat3f_dimCol", _wrap_mat3f_dimCol, METH_VARARGS, (char *)"mat3f_dimCol(mat3f self) -> size_t"},
	 { (char *)"mat3f_dimCols", _wrap_mat3f_dimCols, METH_VARARGS, (char *)"mat3f_dimCols(mat3f self) -> size_t"},
	 { (char *)"mat3f_neg", _wrap_mat3f_neg, METH_VARARGS, (char *)"mat3f_neg(mat3f self) -> mat3f"},
	 { (char *)"mat3f_mult", _wrap_mat3f_mult, METH_VARARGS, (char *)"mat3f_mult(mat3f self, double const & scalar) -> mat3f"},
	 { (char *)"mat3f_div", _wrap_mat3f_div, METH_VARARGS, (char *)"mat3f_div(mat3f self, double const & scalar) -> mat3f"},
	 { (char *)"mat3f_add", _wrap_mat3f_add, METH_VARARGS, (char *)"mat3f_add(mat3f self, mat3f toAdd) -> mat3f"},
	 { (char *)"mat3f_sub", _wrap_mat3f_sub, METH_VARARGS, (char *)"mat3f_sub(mat3f self, mat3f toSub) -> mat3f"},
	 { (char *)"mat3f_transpose", _wrap_mat3f_transpose, METH_VARARGS, (char *)"mat3f_transpose(mat3f self) -> mat3f"},
	 { (char *)"mat3f___getE00", _wrap_mat3f___getE00, METH_VARARGS, (char *)"mat3f___getE00(mat3f self) -> float"},
	 { (char *)"mat3f___setE00", _wrap_mat3f___setE00, METH_VARARGS, (char *)"mat3f___setE00(mat3f self, float v)"},
	 { (char *)"mat3f___getE01", _wrap_mat3f___getE01, METH_VARARGS, (char *)"mat3f___getE01(mat3f self) -> float"},
	 { (char *)"mat3f___setE01", _wrap_mat3f___setE01, METH_VARARGS, (char *)"mat3f___setE01(mat3f self, float v)"},
	 { (char *)"mat3f___getE02", _wrap_mat3f___getE02, METH_VARARGS, (char *)"mat3f___getE02(mat3f self) -> float"},
	 { (char *)"mat3f___setE02", _wrap_mat3f___setE02, METH_VARARGS, (char *)"mat3f___setE02(mat3f self, float v)"},
	 { (char *)"mat3f___getE10", _wrap_mat3f___getE10, METH_VARARGS, (char *)"mat3f___getE10(mat3f self) -> float"},
	 { (char *)"mat3f___setE10", _wrap_mat3f___setE10, METH_VARARGS, (char *)"mat3f___setE10(mat3f self, float v)"},
	 { (char *)"mat3f___getE11", _wrap_mat3f___getE11, METH_VARARGS, (char *)"mat3f___getE11(mat3f self) -> float"},
	 { (char *)"mat3f___setE11", _wrap_mat3f___setE11, METH_VARARGS, (char *)"mat3f___setE11(mat3f self, float v)"},
	 { (char *)"mat3f___getE12", _wrap_mat3f___getE12, METH_VARARGS, (char *)"mat3f___getE12(mat3f self) -> float"},
	 { (char *)"mat3f___setE12", _wrap_mat3f___setE12, METH_VARARGS, (char *)"mat3f___setE12(mat3f self, float v)"},
	 { (char *)"mat3f___getE20", _wrap_mat3f___getE20, METH_VARARGS, (char *)"mat3f___getE20(mat3f self) -> float"},
	 { (char *)"mat3f___setE20", _wrap_mat3f___setE20, METH_VARARGS, (char *)"mat3f___setE20(mat3f self, float v)"},
	 { (char *)"mat3f___getE21", _wrap_mat3f___getE21, METH_VARARGS, (char *)"mat3f___getE21(mat3f self) -> float"},
	 { (char *)"mat3f___setE21", _wrap_mat3f___setE21, METH_VARARGS, (char *)"mat3f___setE21(mat3f self, float v)"},
	 { (char *)"mat3f___getE22", _wrap_mat3f___getE22, METH_VARARGS, (char *)"mat3f___getE22(mat3f self) -> float"},
	 { (char *)"mat3f___setE22", _wrap_mat3f___setE22, METH_VARARGS, (char *)"mat3f___setE22(mat3f self, float v)"},
	 { (char *)"delete_mat3f", _wrap_delete_mat3f, METH_VARARGS, (char *)"delete_mat3f(mat3f self)"},
	 { (char *)"mat3f_swigregister", mat3f_swigregister, METH_VARARGS, NULL},
	 { (char *)"Attitude_no_rotation", _wrap_Attitude_no_rotation, METH_VARARGS, (char *)"Attitude_no_rotation() -> Attitude"},
	 { (char *)"Attitude_from_quat", _wrap_Attitude_from_quat, METH_VARARGS, (char *)"Attitude_from_quat(vec4f quat) -> Attitude"},
	 { (char *)"Attitude_from_ypr_degs", _wrap_Attitude_from_ypr_degs, METH_VARARGS, (char *)"Attitude_from_ypr_degs(vec3f yprInDegs) -> Attitude"},
	 { (char *)"Attitude_from_ypr_rads", _wrap_Attitude_from_ypr_rads, METH_VARARGS, (char *)"Attitude_from_ypr_rads(vec3f yprInRads) -> Attitude"},
	 { (char *)"Attitude_from_dcm", _wrap_Attitude_from_dcm, METH_VARARGS, (char *)"Attitude_from_dcm(mat3f dcm) -> Attitude"},
	 { (char *)"new_Attitude", _wrap_new_Attitude, METH_VARARGS, (char *)"new_Attitude() -> Attitude"},
	 { (char *)"Attitude___yprInDegs", _wrap_Attitude___yprInDegs, METH_VARARGS, (char *)"Attitude___yprInDegs(Attitude self) -> vec3f"},
	 { (char *)"Attitude___yprInRads", _wrap_Attitude___yprInRads, METH_VARARGS, (char *)"Attitude___yprInRads(Attitude self) -> vec3f"},
	 { (char *)"Attitude___quat", _wrap_Attitude___quat, METH_VARARGS, (char *)"Attitude___quat(Attitude self) -> vec4f"},
	 { (char *)"Attitude___dcm", _wrap_Attitude___dcm, METH_VARARGS, (char *)"Attitude___dcm(Attitude self) -> mat3f"},
	 { (char *)"delete_Attitude", _wrap_delete_Attitude, METH_VARARGS, (char *)"delete_Attitude(Attitude self)"},
	 { (char *)"Attitude_swigregister", Attitude_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Position", _wrap_new_Position, METH_VARARGS, (char *)"new_Position() -> Position"},
	 { (char *)"Position_from_lla", _wrap_Position_from_lla, METH_VARARGS, (char *)"Position_from_lla(vec3d lla) -> Position"},
	 { (char *)"Position_from_ecef", _wrap_Position_from_ecef, METH_VARARGS, (char *)"Position_from_ecef(vec3d ecef) -> Position"},
	 { (char *)"delete_Position", _wrap_delete_Position, METH_VARARGS, (char *)"delete_Position(Position self)"},
	 { (char *)"Position_swigregister", Position_swigregister, METH_VARARGS, NULL},
	 { (char *)"__rad2deg_f", _wrap___rad2deg_f, METH_VARARGS, (char *)"__rad2deg_f(float angleInRads) -> float"},
	 { (char *)"__rad2deg_d", _wrap___rad2deg_d, METH_VARARGS, (char *)"__rad2deg_d(double angleInRads) -> double"},
	 { (char *)"__deg2rad_f", _wrap___deg2rad_f, METH_VARARGS, (char *)"__deg2rad_f(float angleInDegs) -> float"},
	 { (char *)"__deg2rad_d", _wrap___deg2rad_d, METH_VARARGS, (char *)"__deg2rad_d(double angleInDegs) -> double"},
	 { (char *)"celsius2fahren", _wrap_celsius2fahren, METH_VARARGS, (char *)"\n"
		"celsius2fahren(float tempInCelsius) -> float\n"
		"celsius2fahren(double tempInCelsius) -> double\n"
		""},
	 { (char *)"fahren2celsius", _wrap_fahren2celsius, METH_VARARGS, (char *)"\n"
		"fahren2celsius(float tempInFahren) -> float\n"
		"fahren2celsius(double tempInFahren) -> double\n"
		""},
	 { (char *)"celsius2kelvin", _wrap_celsius2kelvin, METH_VARARGS, (char *)"\n"
		"celsius2kelvin(float tempInCelsius) -> float\n"
		"celsius2kelvin(double tempInCelsius) -> double\n"
		""},
	 { (char *)"kelvin2celsius", _wrap_kelvin2celsius, METH_VARARGS, (char *)"\n"
		"kelvin2celsius(float tempInKelvin) -> float\n"
		"kelvin2celsius(double tempInKelvin) -> double\n"
		""},
	 { (char *)"fahren2kelvin", _wrap_fahren2kelvin, METH_VARARGS, (char *)"\n"
		"fahren2kelvin(float tempInFahren) -> float\n"
		"fahren2kelvin(double tempInFahren) -> double\n"
		""},
	 { (char *)"kelvin2fahren", _wrap_kelvin2fahren, METH_VARARGS, (char *)"\n"
		"kelvin2fahren(float tempInKelvin) -> float\n"
		"kelvin2fahren(double tempInKelvin) -> double\n"
		""},
	 { (char *)"ypr_degs2quat", _wrap_ypr_degs2quat, METH_VARARGS, (char *)"ypr_degs2quat(vec3f yprInDegs) -> vec4f"},
	 { (char *)"ypr_rads2quat", _wrap_ypr_rads2quat, METH_VARARGS, (char *)"ypr_rads2quat(vec3f yprInRads) -> vec4f"},
	 { (char *)"ypr_degs2dcm", _wrap_ypr_degs2dcm, METH_VARARGS, (char *)"ypr_degs2dcm(vec3f yprInDegs) -> mat3f"},
	 { (char *)"ypr_rads2dcm", _wrap_ypr_rads2dcm, METH_VARARGS, (char *)"ypr_rads2dcm(vec3f yprInRads) -> mat3f"},
	 { (char *)"quat2ypr_degs", _wrap_quat2ypr_degs, METH_VARARGS, (char *)"quat2ypr_degs(vec4f quat) -> vec3f"},
	 { (char *)"quat2ypr_rads", _wrap_quat2ypr_rads, METH_VARARGS, (char *)"quat2ypr_rads(vec4f quat) -> vec3f"},
	 { (char *)"quat2dcm", _wrap_quat2dcm, METH_VARARGS, (char *)"quat2dcm(vec4f quat) -> mat3f"},
	 { (char *)"dcm2ypr_degs", _wrap_dcm2ypr_degs, METH_VARARGS, (char *)"dcm2ypr_degs(mat3f dcm) -> vec3f"},
	 { (char *)"dcm2ypr_rads", _wrap_dcm2ypr_rads, METH_VARARGS, (char *)"dcm2ypr_rads(mat3f dcm) -> vec3f"},
	 { (char *)"dcm2quat", _wrap_dcm2quat, METH_VARARGS, (char *)"dcm2quat(mat3f dcm) -> vec4f"},
	 { (char *)"velocity_ned_xy2course_over_ground", _wrap_velocity_ned_xy2course_over_ground, METH_VARARGS, (char *)"velocity_ned_xy2course_over_ground(float velNedX, float velNedY) -> float"},
	 { (char *)"velocity_ned2course_over_ground", _wrap_velocity_ned2course_over_ground, METH_VARARGS, (char *)"velocity_ned2course_over_ground(vec3f velNed) -> float"},
	 { (char *)"velocity_ned_xy2speed_over_ground", _wrap_velocity_ned_xy2speed_over_ground, METH_VARARGS, (char *)"velocity_ned_xy2speed_over_ground(float velNedX, float velNedY) -> float"},
	 { (char *)"velocity_ned2speed_over_ground", _wrap_velocity_ned2speed_over_ground, METH_VARARGS, (char *)"velocity_ned2speed_over_ground(vec3f velNed) -> float"},
	 { (char *)"quat2omega_phi_kappa_rads", _wrap_quat2omega_phi_kappa_rads, METH_VARARGS, (char *)"quat2omega_phi_kappa_rads(vec4f quat) -> vec3f"},
	 { (char *)"dcm2omega_phi_kappa_rads", _wrap_dcm2omega_phi_kappa_rads, METH_VARARGS, (char *)"dcm2omega_phi_kappa_rads(mat3f dcm) -> vec3f"},
	 { (char *)"ypr_degs2omega_phi_kappa_rads", _wrap_ypr_degs2omega_phi_kappa_rads, METH_VARARGS, (char *)"ypr_degs2omega_phi_kappa_rads(vec3f yprDegs) -> vec3f"},
	 { (char *)"ypr_rads2omega_phi_kappa_rads", _wrap_ypr_rads2omega_phi_kappa_rads, METH_VARARGS, (char *)"ypr_rads2omega_phi_kappa_rads(vec3f yprRads) -> vec3f"},
	 { (char *)"__rad2deg_v3f", _wrap___rad2deg_v3f, METH_VARARGS, (char *)"__rad2deg_v3f(vec3f anglesInRads) -> vec3f"},
	 { (char *)"__rad2deg_v3d", _wrap___rad2deg_v3d, METH_VARARGS, (char *)"__rad2deg_v3d(vec3f anglesInRads) -> vec3f"},
	 { (char *)"__deg2rad_v3f", _wrap___deg2rad_v3f, METH_VARARGS, (char *)"__deg2rad_v3f(vec3f anglesInDegs) -> vec3f"},
	 { (char *)"__deg2rad_v3d", _wrap___deg2rad_v3d, METH_VARARGS, (char *)"__deg2rad_v3d(vec3f anglesInDegs) -> vec3f"},
	 { (char *)"VpeStatus_attitudeQuality_set", _wrap_VpeStatus_attitudeQuality_set, METH_VARARGS, (char *)"VpeStatus_attitudeQuality_set(VpeStatus self, uint8_t attitudeQuality)"},
	 { (char *)"VpeStatus_attitudeQuality_get", _wrap_VpeStatus_attitudeQuality_get, METH_VARARGS, (char *)"VpeStatus_attitudeQuality_get(VpeStatus self) -> uint8_t"},
	 { (char *)"VpeStatus_gyroSaturation_set", _wrap_VpeStatus_gyroSaturation_set, METH_VARARGS, (char *)"VpeStatus_gyroSaturation_set(VpeStatus self, bool gyroSaturation)"},
	 { (char *)"VpeStatus_gyroSaturation_get", _wrap_VpeStatus_gyroSaturation_get, METH_VARARGS, (char *)"VpeStatus_gyroSaturation_get(VpeStatus self) -> bool"},
	 { (char *)"VpeStatus_gyroSaturationRecovery_set", _wrap_VpeStatus_gyroSaturationRecovery_set, METH_VARARGS, (char *)"VpeStatus_gyroSaturationRecovery_set(VpeStatus self, bool gyroSaturationRecovery)"},
	 { (char *)"VpeStatus_gyroSaturationRecovery_get", _wrap_VpeStatus_gyroSaturationRecovery_get, METH_VARARGS, (char *)"VpeStatus_gyroSaturationRecovery_get(VpeStatus self) -> bool"},
	 { (char *)"VpeStatus_magDisturbance_set", _wrap_VpeStatus_magDisturbance_set, METH_VARARGS, (char *)"VpeStatus_magDisturbance_set(VpeStatus self, uint8_t magDisturbance)"},
	 { (char *)"VpeStatus_magDisturbance_get", _wrap_VpeStatus_magDisturbance_get, METH_VARARGS, (char *)"VpeStatus_magDisturbance_get(VpeStatus self) -> uint8_t"},
	 { (char *)"VpeStatus_magSaturation_set", _wrap_VpeStatus_magSaturation_set, METH_VARARGS, (char *)"VpeStatus_magSaturation_set(VpeStatus self, bool magSaturation)"},
	 { (char *)"VpeStatus_magSaturation_get", _wrap_VpeStatus_magSaturation_get, METH_VARARGS, (char *)"VpeStatus_magSaturation_get(VpeStatus self) -> bool"},
	 { (char *)"VpeStatus_accDisturbance_set", _wrap_VpeStatus_accDisturbance_set, METH_VARARGS, (char *)"VpeStatus_accDisturbance_set(VpeStatus self, uint8_t accDisturbance)"},
	 { (char *)"VpeStatus_accDisturbance_get", _wrap_VpeStatus_accDisturbance_get, METH_VARARGS, (char *)"VpeStatus_accDisturbance_get(VpeStatus self) -> uint8_t"},
	 { (char *)"VpeStatus_accSaturation_set", _wrap_VpeStatus_accSaturation_set, METH_VARARGS, (char *)"VpeStatus_accSaturation_set(VpeStatus self, bool accSaturation)"},
	 { (char *)"VpeStatus_accSaturation_get", _wrap_VpeStatus_accSaturation_get, METH_VARARGS, (char *)"VpeStatus_accSaturation_get(VpeStatus self) -> bool"},
	 { (char *)"VpeStatus_knownMagDisturbance_set", _wrap_VpeStatus_knownMagDisturbance_set, METH_VARARGS, (char *)"VpeStatus_knownMagDisturbance_set(VpeStatus self, bool knownMagDisturbance)"},
	 { (char *)"VpeStatus_knownMagDisturbance_get", _wrap_VpeStatus_knownMagDisturbance_get, METH_VARARGS, (char *)"VpeStatus_knownMagDisturbance_get(VpeStatus self) -> bool"},
	 { (char *)"VpeStatus_knownAccelDisturbance_set", _wrap_VpeStatus_knownAccelDisturbance_set, METH_VARARGS, (char *)"VpeStatus_knownAccelDisturbance_set(VpeStatus self, bool knownAccelDisturbance)"},
	 { (char *)"VpeStatus_knownAccelDisturbance_get", _wrap_VpeStatus_knownAccelDisturbance_get, METH_VARARGS, (char *)"VpeStatus_knownAccelDisturbance_get(VpeStatus self) -> bool"},
	 { (char *)"new_VpeStatus", _wrap_new_VpeStatus, METH_VARARGS, (char *)"\n"
		"VpeStatus()\n"
		"new_VpeStatus(uint16_t raw) -> VpeStatus\n"
		""},
	 { (char *)"delete_VpeStatus", _wrap_delete_VpeStatus, METH_VARARGS, (char *)"delete_VpeStatus(VpeStatus self)"},
	 { (char *)"VpeStatus_swigregister", VpeStatus_swigregister, METH_VARARGS, NULL},
	 { (char *)"TimeUtc_year_set", _wrap_TimeUtc_year_set, METH_VARARGS, (char *)"TimeUtc_year_set(TimeUtc self, int8_t year)"},
	 { (char *)"TimeUtc_year_get", _wrap_TimeUtc_year_get, METH_VARARGS, (char *)"TimeUtc_year_get(TimeUtc self) -> int8_t"},
	 { (char *)"TimeUtc_month_set", _wrap_TimeUtc_month_set, METH_VARARGS, (char *)"TimeUtc_month_set(TimeUtc self, uint8_t month)"},
	 { (char *)"TimeUtc_month_get", _wrap_TimeUtc_month_get, METH_VARARGS, (char *)"TimeUtc_month_get(TimeUtc self) -> uint8_t"},
	 { (char *)"TimeUtc_day_set", _wrap_TimeUtc_day_set, METH_VARARGS, (char *)"TimeUtc_day_set(TimeUtc self, uint8_t day)"},
	 { (char *)"TimeUtc_day_get", _wrap_TimeUtc_day_get, METH_VARARGS, (char *)"TimeUtc_day_get(TimeUtc self) -> uint8_t"},
	 { (char *)"TimeUtc_hour_set", _wrap_TimeUtc_hour_set, METH_VARARGS, (char *)"TimeUtc_hour_set(TimeUtc self, uint8_t hour)"},
	 { (char *)"TimeUtc_hour_get", _wrap_TimeUtc_hour_get, METH_VARARGS, (char *)"TimeUtc_hour_get(TimeUtc self) -> uint8_t"},
	 { (char *)"TimeUtc_min_set", _wrap_TimeUtc_min_set, METH_VARARGS, (char *)"TimeUtc_min_set(TimeUtc self, uint8_t min)"},
	 { (char *)"TimeUtc_min_get", _wrap_TimeUtc_min_get, METH_VARARGS, (char *)"TimeUtc_min_get(TimeUtc self) -> uint8_t"},
	 { (char *)"TimeUtc_sec_set", _wrap_TimeUtc_sec_set, METH_VARARGS, (char *)"TimeUtc_sec_set(TimeUtc self, uint8_t sec)"},
	 { (char *)"TimeUtc_sec_get", _wrap_TimeUtc_sec_get, METH_VARARGS, (char *)"TimeUtc_sec_get(TimeUtc self) -> uint8_t"},
	 { (char *)"TimeUtc_ms_set", _wrap_TimeUtc_ms_set, METH_VARARGS, (char *)"TimeUtc_ms_set(TimeUtc self, uint8_t ms)"},
	 { (char *)"TimeUtc_ms_get", _wrap_TimeUtc_ms_get, METH_VARARGS, (char *)"TimeUtc_ms_get(TimeUtc self) -> uint8_t"},
	 { (char *)"new_TimeUtc", _wrap_new_TimeUtc, METH_VARARGS, (char *)"new_TimeUtc() -> TimeUtc"},
	 { (char *)"delete_TimeUtc", _wrap_delete_TimeUtc, METH_VARARGS, (char *)"delete_TimeUtc(TimeUtc self)"},
	 { (char *)"TimeUtc_swigregister", TimeUtc_swigregister, METH_VARARGS, NULL},
	 { (char *)"__or__", _wrap___or__, METH_VARARGS, (char *)"\n"
		"__or__(COMMONGROUP lhs, COMMONGROUP rhs) -> COMMONGROUP\n"
		"__or__(TIMEGROUP lhs, TIMEGROUP rhs) -> TIMEGROUP\n"
		"__or__(IMUGROUP lhs, IMUGROUP rhs) -> IMUGROUP\n"
		"__or__(GPSGROUP lhs, GPSGROUP rhs) -> GPSGROUP\n"
		"__or__(ATTITUDEGROUP lhs, ATTITUDEGROUP rhs) -> ATTITUDEGROUP\n"
		"__or__(INSGROUP lhs, INSGROUP rhs) -> INSGROUP\n"
		""},
	 { (char *)"to_string", _wrap_to_string, METH_VARARGS, (char *)"\n"
		"to_string(ASYNCMODE val) -> std::string\n"
		"to_string(COMMONGROUP val) -> std::string\n"
		"to_string(TIMEGROUP val) -> std::string\n"
		"to_string(IMUGROUP val) -> std::string\n"
		"to_string(GPSGROUP val) -> std::string\n"
		"to_string(ATTITUDEGROUP val) -> std::string\n"
		"to_string(INSGROUP val) -> std::string\n"
		""},
	 { (char *)"__lshift__", _wrap___lshift__, METH_VARARGS, (char *)"\n"
		"__lshift__(std::ostream & out, ASYNCMODE e) -> std::ostream\n"
		"__lshift__(std::ostream & out, COMMONGROUP e) -> std::ostream\n"
		"__lshift__(std::ostream & out, TIMEGROUP e) -> std::ostream\n"
		"__lshift__(std::ostream & out, IMUGROUP e) -> std::ostream\n"
		"__lshift__(std::ostream & out, GPSGROUP e) -> std::ostream\n"
		"__lshift__(std::ostream & out, ATTITUDEGROUP e) -> std::ostream\n"
		"__lshift__(std::ostream & out, INSGROUP e) -> std::ostream &\n"
		""},
	 { (char *)"Packet_BinaryGroupLengths_get", _wrap_Packet_BinaryGroupLengths_get, METH_VARARGS, NULL},
	 { (char *)"new_Packet", _wrap_new_Packet, METH_VARARGS, (char *)"\n"
		"Packet()\n"
		"Packet(char const * packet, size_t length)\n"
		"Packet(std::string packet)\n"
		"new_Packet(Packet toCopy) -> Packet\n"
		""},
	 { (char *)"delete_Packet", _wrap_delete_Packet, METH_VARARGS, (char *)"delete_Packet(Packet self)"},
	 { (char *)"Packet___datastr", _wrap_Packet___datastr, METH_VARARGS, (char *)"Packet___datastr(Packet self) -> std::string"},
	 { (char *)"Packet___type", _wrap_Packet___type, METH_VARARGS, (char *)"Packet___type(Packet self) -> vn::protocol::uart::Packet::Type"},
	 { (char *)"Packet___isValid", _wrap_Packet___isValid, METH_VARARGS, (char *)"Packet___isValid(Packet self) -> bool"},
	 { (char *)"Packet___isError", _wrap_Packet___isError, METH_VARARGS, (char *)"Packet___isError(Packet self) -> bool"},
	 { (char *)"Packet___isResponse", _wrap_Packet___isResponse, METH_VARARGS, (char *)"Packet___isResponse(Packet self) -> bool"},
	 { (char *)"Packet___isAsciiAsync", _wrap_Packet___isAsciiAsync, METH_VARARGS, (char *)"Packet___isAsciiAsync(Packet self) -> bool"},
	 { (char *)"Packet_determine_ascii_async_type", _wrap_Packet_determine_ascii_async_type, METH_VARARGS, (char *)"Packet_determine_ascii_async_type(Packet self) -> vn::protocol::uart::AsciiAsync"},
	 { (char *)"Packet_isCompatible", _wrap_Packet_isCompatible, METH_VARARGS, (char *)"Packet_isCompatible(Packet self, COMMONGROUP commonGroup, TIMEGROUP timeGroup, IMUGROUP imuGroup, GPSGROUP gpsGroup, ATTITUDEGROUP attitudeGroup, INSGROUP insGroup) -> bool"},
	 { (char *)"Packet_computeBinaryPacketLength", _wrap_Packet_computeBinaryPacketLength, METH_VARARGS, (char *)"Packet_computeBinaryPacketLength(char const * startOfPossibleBinaryPacket) -> size_t"},
	 { (char *)"Packet_computeNumOfBytesForBinaryGroupPayload", _wrap_Packet_computeNumOfBytesForBinaryGroupPayload, METH_VARARGS, (char *)"Packet_computeNumOfBytesForBinaryGroupPayload(BINARYGROUP group, uint16_t groupField) -> size_t"},
	 { (char *)"Packet_parse_error", _wrap_Packet_parse_error, METH_VARARGS, (char *)"Packet_parse_error(Packet self) -> SENSORERROR"},
	 { (char *)"Packet_groups", _wrap_Packet_groups, METH_VARARGS, (char *)"Packet_groups(Packet self) -> uint8_t"},
	 { (char *)"Packet_groupField", _wrap_Packet_groupField, METH_VARARGS, (char *)"Packet_groupField(Packet self, size_t index) -> uint16_t"},
	 { (char *)"Packet_extractUint8", _wrap_Packet_extractUint8, METH_VARARGS, (char *)"Packet_extractUint8(Packet self) -> uint8_t"},
	 { (char *)"Packet_extractInt8", _wrap_Packet_extractInt8, METH_VARARGS, (char *)"Packet_extractInt8(Packet self) -> int8_t"},
	 { (char *)"Packet_extractUint16", _wrap_Packet_extractUint16, METH_VARARGS, (char *)"Packet_extractUint16(Packet self) -> uint16_t"},
	 { (char *)"Packet_extractUint32", _wrap_Packet_extractUint32, METH_VARARGS, (char *)"Packet_extractUint32(Packet self) -> uint32_t"},
	 { (char *)"Packet_extractUint64", _wrap_Packet_extractUint64, METH_VARARGS, (char *)"Packet_extractUint64(Packet self) -> uint64_t"},
	 { (char *)"Packet_extractFloat", _wrap_Packet_extractFloat, METH_VARARGS, (char *)"Packet_extractFloat(Packet self) -> float"},
	 { (char *)"Packet_extractVec3f", _wrap_Packet_extractVec3f, METH_VARARGS, (char *)"Packet_extractVec3f(Packet self) -> vec3f"},
	 { (char *)"Packet_extractVec3d", _wrap_Packet_extractVec3d, METH_VARARGS, (char *)"Packet_extractVec3d(Packet self) -> vec3d"},
	 { (char *)"Packet_extractVec4f", _wrap_Packet_extractVec4f, METH_VARARGS, (char *)"Packet_extractVec4f(Packet self) -> vec4f"},
	 { (char *)"Packet_extractMat3f", _wrap_Packet_extractMat3f, METH_VARARGS, (char *)"Packet_extractMat3f(Packet self) -> mat3f"},
	 { (char *)"Packet_finalizeCommand", _wrap_Packet_finalizeCommand, METH_VARARGS, (char *)"Packet_finalizeCommand(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * packet, size_t length) -> size_t"},
	 { (char *)"Packet_genReadBinaryOutput1", _wrap_Packet_genReadBinaryOutput1, METH_VARARGS, (char *)"Packet_genReadBinaryOutput1(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadBinaryOutput2", _wrap_Packet_genReadBinaryOutput2, METH_VARARGS, (char *)"Packet_genReadBinaryOutput2(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadBinaryOutput3", _wrap_Packet_genReadBinaryOutput3, METH_VARARGS, (char *)"Packet_genReadBinaryOutput3(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteBinaryOutput1", _wrap_Packet_genWriteBinaryOutput1, METH_VARARGS, (char *)"Packet_genWriteBinaryOutput1(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint16_t asyncMode, uint16_t rateDivisor, uint16_t commonField, uint16_t timeField, uint16_t imuField, uint16_t gpsField, uint16_t attitudeField, uint16_t insField) -> size_t"},
	 { (char *)"Packet_genWriteBinaryOutput2", _wrap_Packet_genWriteBinaryOutput2, METH_VARARGS, (char *)"Packet_genWriteBinaryOutput2(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint16_t asyncMode, uint16_t rateDivisor, uint16_t commonField, uint16_t timeField, uint16_t imuField, uint16_t gpsField, uint16_t attitudeField, uint16_t insField) -> size_t"},
	 { (char *)"Packet_genWriteBinaryOutput3", _wrap_Packet_genWriteBinaryOutput3, METH_VARARGS, (char *)"Packet_genWriteBinaryOutput3(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint16_t asyncMode, uint16_t rateDivisor, uint16_t commonField, uint16_t timeField, uint16_t imuField, uint16_t gpsField, uint16_t attitudeField, uint16_t insField) -> size_t"},
	 { (char *)"Packet_genWriteSettings", _wrap_Packet_genWriteSettings, METH_VARARGS, (char *)"Packet_genWriteSettings(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genTare", _wrap_Packet_genTare, METH_VARARGS, (char *)"Packet_genTare(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genKnownMagneticDisturbance", _wrap_Packet_genKnownMagneticDisturbance, METH_VARARGS, (char *)"Packet_genKnownMagneticDisturbance(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, bool isMagneticDisturbancePresent) -> size_t"},
	 { (char *)"Packet_genKnownAccelerationDisturbance", _wrap_Packet_genKnownAccelerationDisturbance, METH_VARARGS, (char *)"Packet_genKnownAccelerationDisturbance(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, bool isAccelerationDisturbancePresent) -> size_t"},
	 { (char *)"Packet_genSetGyroBias", _wrap_Packet_genSetGyroBias, METH_VARARGS, (char *)"Packet_genSetGyroBias(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genRestoreFactorySettings", _wrap_Packet_genRestoreFactorySettings, METH_VARARGS, (char *)"Packet_genRestoreFactorySettings(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReset", _wrap_Packet_genReset, METH_VARARGS, (char *)"Packet_genReset(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadUserTag", _wrap_Packet_genReadUserTag, METH_VARARGS, (char *)"Packet_genReadUserTag(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteUserTag", _wrap_Packet_genWriteUserTag, METH_VARARGS, (char *)"Packet_genWriteUserTag(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, std::string tag) -> size_t"},
	 { (char *)"Packet_genReadModelNumber", _wrap_Packet_genReadModelNumber, METH_VARARGS, (char *)"Packet_genReadModelNumber(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadHardwareRevision", _wrap_Packet_genReadHardwareRevision, METH_VARARGS, (char *)"Packet_genReadHardwareRevision(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadSerialNumber", _wrap_Packet_genReadSerialNumber, METH_VARARGS, (char *)"Packet_genReadSerialNumber(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadFirmwareVersion", _wrap_Packet_genReadFirmwareVersion, METH_VARARGS, (char *)"Packet_genReadFirmwareVersion(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadSerialBaudRate", _wrap_Packet_genReadSerialBaudRate, METH_VARARGS, (char *)"\n"
		"genReadSerialBaudRate(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t port) -> size_t\n"
		"Packet_genReadSerialBaudRate(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t\n"
		""},
	 { (char *)"Packet_genWriteSerialBaudRate", _wrap_Packet_genWriteSerialBaudRate, METH_VARARGS, (char *)"\n"
		"genWriteSerialBaudRate(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint32_t baudrate, uint8_t port) -> size_t\n"
		"Packet_genWriteSerialBaudRate(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint32_t baudrate) -> size_t\n"
		""},
	 { (char *)"Packet_genReadAsyncDataOutputType", _wrap_Packet_genReadAsyncDataOutputType, METH_VARARGS, (char *)"\n"
		"genReadAsyncDataOutputType(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t port) -> size_t\n"
		"Packet_genReadAsyncDataOutputType(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t\n"
		""},
	 { (char *)"Packet_genWriteAsyncDataOutputType", _wrap_Packet_genWriteAsyncDataOutputType, METH_VARARGS, (char *)"\n"
		"genWriteAsyncDataOutputType(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint32_t ador, uint8_t port) -> size_t\n"
		"Packet_genWriteAsyncDataOutputType(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint32_t ador) -> size_t\n"
		""},
	 { (char *)"Packet_genReadAsyncDataOutputFrequency", _wrap_Packet_genReadAsyncDataOutputFrequency, METH_VARARGS, (char *)"\n"
		"genReadAsyncDataOutputFrequency(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t port) -> size_t\n"
		"Packet_genReadAsyncDataOutputFrequency(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t\n"
		""},
	 { (char *)"Packet_genWriteAsyncDataOutputFrequency", _wrap_Packet_genWriteAsyncDataOutputFrequency, METH_VARARGS, (char *)"\n"
		"genWriteAsyncDataOutputFrequency(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint32_t adof, uint8_t port) -> size_t\n"
		"Packet_genWriteAsyncDataOutputFrequency(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint32_t adof) -> size_t\n"
		""},
	 { (char *)"Packet_genReadYawPitchRoll", _wrap_Packet_genReadYawPitchRoll, METH_VARARGS, (char *)"Packet_genReadYawPitchRoll(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadAttitudeQuaternion", _wrap_Packet_genReadAttitudeQuaternion, METH_VARARGS, (char *)"Packet_genReadAttitudeQuaternion(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadQuaternionMagneticAccelerationAndAngularRates", _wrap_Packet_genReadQuaternionMagneticAccelerationAndAngularRates, METH_VARARGS, (char *)"Packet_genReadQuaternionMagneticAccelerationAndAngularRates(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadMagneticMeasurements", _wrap_Packet_genReadMagneticMeasurements, METH_VARARGS, (char *)"Packet_genReadMagneticMeasurements(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadAccelerationMeasurements", _wrap_Packet_genReadAccelerationMeasurements, METH_VARARGS, (char *)"Packet_genReadAccelerationMeasurements(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadAngularRateMeasurements", _wrap_Packet_genReadAngularRateMeasurements, METH_VARARGS, (char *)"Packet_genReadAngularRateMeasurements(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadMagneticAccelerationAndAngularRates", _wrap_Packet_genReadMagneticAccelerationAndAngularRates, METH_VARARGS, (char *)"Packet_genReadMagneticAccelerationAndAngularRates(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadMagneticAndGravityReferenceVectors", _wrap_Packet_genReadMagneticAndGravityReferenceVectors, METH_VARARGS, (char *)"Packet_genReadMagneticAndGravityReferenceVectors(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteMagneticAndGravityReferenceVectors", _wrap_Packet_genWriteMagneticAndGravityReferenceVectors, METH_VARARGS, (char *)"Packet_genWriteMagneticAndGravityReferenceVectors(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f magRef, vec3f accRef) -> size_t"},
	 { (char *)"Packet_genReadFilterMeasurementsVarianceParameters", _wrap_Packet_genReadFilterMeasurementsVarianceParameters, METH_VARARGS, (char *)"Packet_genReadFilterMeasurementsVarianceParameters(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteFilterMeasurementsVarianceParameters", _wrap_Packet_genWriteFilterMeasurementsVarianceParameters, METH_VARARGS, (char *)"Packet_genWriteFilterMeasurementsVarianceParameters(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, float angularWalkVariance, vec3f angularRateVariance, vec3f magneticVariance, vec3f accelerationVariance) -> size_t"},
	 { (char *)"Packet_genReadMagnetometerCompensation", _wrap_Packet_genReadMagnetometerCompensation, METH_VARARGS, (char *)"Packet_genReadMagnetometerCompensation(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteMagnetometerCompensation", _wrap_Packet_genWriteMagnetometerCompensation, METH_VARARGS, (char *)"Packet_genWriteMagnetometerCompensation(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, mat3f c, vec3f b) -> size_t"},
	 { (char *)"Packet_genReadFilterActiveTuningParameters", _wrap_Packet_genReadFilterActiveTuningParameters, METH_VARARGS, (char *)"Packet_genReadFilterActiveTuningParameters(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteFilterActiveTuningParameters", _wrap_Packet_genWriteFilterActiveTuningParameters, METH_VARARGS, (char *)"Packet_genWriteFilterActiveTuningParameters(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, float magneticDisturbanceGain, float accelerationDisturbanceGain, float magneticDisturbanceMemory, float accelerationDisturbanceMemory) -> size_t"},
	 { (char *)"Packet_genReadAccelerationCompensation", _wrap_Packet_genReadAccelerationCompensation, METH_VARARGS, (char *)"Packet_genReadAccelerationCompensation(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteAccelerationCompensation", _wrap_Packet_genWriteAccelerationCompensation, METH_VARARGS, (char *)"Packet_genWriteAccelerationCompensation(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, mat3f c, vec3f b) -> size_t"},
	 { (char *)"Packet_genReadReferenceFrameRotation", _wrap_Packet_genReadReferenceFrameRotation, METH_VARARGS, (char *)"Packet_genReadReferenceFrameRotation(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteReferenceFrameRotation", _wrap_Packet_genWriteReferenceFrameRotation, METH_VARARGS, (char *)"Packet_genWriteReferenceFrameRotation(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, mat3f c) -> size_t"},
	 { (char *)"Packet_genReadYawPitchRollMagneticAccelerationAndAngularRates", _wrap_Packet_genReadYawPitchRollMagneticAccelerationAndAngularRates, METH_VARARGS, (char *)"Packet_genReadYawPitchRollMagneticAccelerationAndAngularRates(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadCommunicationProtocolControl", _wrap_Packet_genReadCommunicationProtocolControl, METH_VARARGS, (char *)"Packet_genReadCommunicationProtocolControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteCommunicationProtocolControl", _wrap_Packet_genWriteCommunicationProtocolControl, METH_VARARGS, (char *)"Packet_genWriteCommunicationProtocolControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t serialCount, uint8_t serialStatus, uint8_t spiCount, uint8_t spiStatus, uint8_t serialChecksum, uint8_t spiChecksum, uint8_t errorMode) -> size_t"},
	 { (char *)"Packet_genReadSynchronizationControl", _wrap_Packet_genReadSynchronizationControl, METH_VARARGS, (char *)"Packet_genReadSynchronizationControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteSynchronizationControl", _wrap_Packet_genWriteSynchronizationControl, METH_VARARGS, (char *)"Packet_genWriteSynchronizationControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t syncInMode, uint8_t syncInEdge, uint16_t syncInSkipFactor, uint8_t syncOutMode, uint8_t syncOutPolarity, uint16_t syncOutSkipFactor, uint32_t syncOutPulseWidth) -> size_t"},
	 { (char *)"Packet_genReadSynchronizationStatus", _wrap_Packet_genReadSynchronizationStatus, METH_VARARGS, (char *)"Packet_genReadSynchronizationStatus(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteSynchronizationStatus", _wrap_Packet_genWriteSynchronizationStatus, METH_VARARGS, (char *)"Packet_genWriteSynchronizationStatus(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint32_t syncInCount, uint32_t syncInTime, uint32_t syncOutCount) -> size_t"},
	 { (char *)"Packet_genReadFilterBasicControl", _wrap_Packet_genReadFilterBasicControl, METH_VARARGS, (char *)"Packet_genReadFilterBasicControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteFilterBasicControl", _wrap_Packet_genWriteFilterBasicControl, METH_VARARGS, (char *)"Packet_genWriteFilterBasicControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t magMode, uint8_t extMagMode, uint8_t extAccMode, uint8_t extGyroMode, vec3f gyroLimit) -> size_t"},
	 { (char *)"Packet_genReadVpeBasicControl", _wrap_Packet_genReadVpeBasicControl, METH_VARARGS, (char *)"Packet_genReadVpeBasicControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteVpeBasicControl", _wrap_Packet_genWriteVpeBasicControl, METH_VARARGS, (char *)"Packet_genWriteVpeBasicControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t enable, uint8_t headingMode, uint8_t filteringMode, uint8_t tuningMode) -> size_t"},
	 { (char *)"Packet_genReadVpeMagnetometerBasicTuning", _wrap_Packet_genReadVpeMagnetometerBasicTuning, METH_VARARGS, (char *)"Packet_genReadVpeMagnetometerBasicTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteVpeMagnetometerBasicTuning", _wrap_Packet_genWriteVpeMagnetometerBasicTuning, METH_VARARGS, (char *)"Packet_genWriteVpeMagnetometerBasicTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f baseTuning, vec3f adaptiveTuning, vec3f adaptiveFiltering) -> size_t"},
	 { (char *)"Packet_genReadVpeMagnetometerAdvancedTuning", _wrap_Packet_genReadVpeMagnetometerAdvancedTuning, METH_VARARGS, (char *)"Packet_genReadVpeMagnetometerAdvancedTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteVpeMagnetometerAdvancedTuning", _wrap_Packet_genWriteVpeMagnetometerAdvancedTuning, METH_VARARGS, (char *)"Packet_genWriteVpeMagnetometerAdvancedTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f minFiltering, vec3f maxFiltering, float maxAdaptRate, float disturbanceWindow, float maxTuning) -> size_t"},
	 { (char *)"Packet_genReadVpeAccelerometerBasicTuning", _wrap_Packet_genReadVpeAccelerometerBasicTuning, METH_VARARGS, (char *)"Packet_genReadVpeAccelerometerBasicTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteVpeAccelerometerBasicTuning", _wrap_Packet_genWriteVpeAccelerometerBasicTuning, METH_VARARGS, (char *)"Packet_genWriteVpeAccelerometerBasicTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f baseTuning, vec3f adaptiveTuning, vec3f adaptiveFiltering) -> size_t"},
	 { (char *)"Packet_genReadVpeAccelerometerAdvancedTuning", _wrap_Packet_genReadVpeAccelerometerAdvancedTuning, METH_VARARGS, (char *)"Packet_genReadVpeAccelerometerAdvancedTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteVpeAccelerometerAdvancedTuning", _wrap_Packet_genWriteVpeAccelerometerAdvancedTuning, METH_VARARGS, (char *)"Packet_genWriteVpeAccelerometerAdvancedTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f minFiltering, vec3f maxFiltering, float maxAdaptRate, float disturbanceWindow, float maxTuning) -> size_t"},
	 { (char *)"Packet_genReadVpeGyroBasicTuning", _wrap_Packet_genReadVpeGyroBasicTuning, METH_VARARGS, (char *)"Packet_genReadVpeGyroBasicTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteVpeGyroBasicTuning", _wrap_Packet_genWriteVpeGyroBasicTuning, METH_VARARGS, (char *)"Packet_genWriteVpeGyroBasicTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f angularWalkVariance, vec3f baseTuning, vec3f adaptiveTuning) -> size_t"},
	 { (char *)"Packet_genReadFilterStartupGyroBias", _wrap_Packet_genReadFilterStartupGyroBias, METH_VARARGS, (char *)"Packet_genReadFilterStartupGyroBias(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteFilterStartupGyroBias", _wrap_Packet_genWriteFilterStartupGyroBias, METH_VARARGS, (char *)"Packet_genWriteFilterStartupGyroBias(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f bias) -> size_t"},
	 { (char *)"Packet_genReadMagnetometerCalibrationControl", _wrap_Packet_genReadMagnetometerCalibrationControl, METH_VARARGS, (char *)"Packet_genReadMagnetometerCalibrationControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteMagnetometerCalibrationControl", _wrap_Packet_genWriteMagnetometerCalibrationControl, METH_VARARGS, (char *)"Packet_genWriteMagnetometerCalibrationControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t hsiMode, uint8_t hsiOutput, uint8_t convergeRate) -> size_t"},
	 { (char *)"Packet_genReadCalculatedMagnetometerCalibration", _wrap_Packet_genReadCalculatedMagnetometerCalibration, METH_VARARGS, (char *)"Packet_genReadCalculatedMagnetometerCalibration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadIndoorHeadingModeControl", _wrap_Packet_genReadIndoorHeadingModeControl, METH_VARARGS, (char *)"Packet_genReadIndoorHeadingModeControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteIndoorHeadingModeControl", _wrap_Packet_genWriteIndoorHeadingModeControl, METH_VARARGS, (char *)"Packet_genWriteIndoorHeadingModeControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, float maxRateError) -> size_t"},
	 { (char *)"Packet_genReadVelocityCompensationMeasurement", _wrap_Packet_genReadVelocityCompensationMeasurement, METH_VARARGS, (char *)"Packet_genReadVelocityCompensationMeasurement(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteVelocityCompensationMeasurement", _wrap_Packet_genWriteVelocityCompensationMeasurement, METH_VARARGS, (char *)"Packet_genWriteVelocityCompensationMeasurement(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f velocity) -> size_t"},
	 { (char *)"Packet_genReadVelocityCompensationControl", _wrap_Packet_genReadVelocityCompensationControl, METH_VARARGS, (char *)"Packet_genReadVelocityCompensationControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteVelocityCompensationControl", _wrap_Packet_genWriteVelocityCompensationControl, METH_VARARGS, (char *)"Packet_genWriteVelocityCompensationControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t mode, float velocityTuning, float rateTuning) -> size_t"},
	 { (char *)"Packet_genReadVelocityCompensationStatus", _wrap_Packet_genReadVelocityCompensationStatus, METH_VARARGS, (char *)"Packet_genReadVelocityCompensationStatus(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadImuMeasurements", _wrap_Packet_genReadImuMeasurements, METH_VARARGS, (char *)"Packet_genReadImuMeasurements(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadGpsConfiguration", _wrap_Packet_genReadGpsConfiguration, METH_VARARGS, (char *)"Packet_genReadGpsConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteGpsConfiguration", _wrap_Packet_genWriteGpsConfiguration, METH_VARARGS, (char *)"Packet_genWriteGpsConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t mode, uint8_t ppsSource) -> size_t"},
	 { (char *)"Packet_genReadGpsAntennaOffset", _wrap_Packet_genReadGpsAntennaOffset, METH_VARARGS, (char *)"Packet_genReadGpsAntennaOffset(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteGpsAntennaOffset", _wrap_Packet_genWriteGpsAntennaOffset, METH_VARARGS, (char *)"Packet_genWriteGpsAntennaOffset(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f position) -> size_t"},
	 { (char *)"Packet_genReadGpsSolutionLla", _wrap_Packet_genReadGpsSolutionLla, METH_VARARGS, (char *)"Packet_genReadGpsSolutionLla(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadGpsSolutionEcef", _wrap_Packet_genReadGpsSolutionEcef, METH_VARARGS, (char *)"Packet_genReadGpsSolutionEcef(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadInsSolutionLla", _wrap_Packet_genReadInsSolutionLla, METH_VARARGS, (char *)"Packet_genReadInsSolutionLla(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadInsSolutionEcef", _wrap_Packet_genReadInsSolutionEcef, METH_VARARGS, (char *)"Packet_genReadInsSolutionEcef(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadInsBasicConfiguration", _wrap_Packet_genReadInsBasicConfiguration, METH_VARARGS, (char *)"Packet_genReadInsBasicConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteInsBasicConfiguration", _wrap_Packet_genWriteInsBasicConfiguration, METH_VARARGS, (char *)"Packet_genWriteInsBasicConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t scenario, uint8_t ahrsAiding, uint8_t estBaseline) -> size_t"},
	 { (char *)"Packet_genReadInsAdvancedConfiguration", _wrap_Packet_genReadInsAdvancedConfiguration, METH_VARARGS, (char *)"Packet_genReadInsAdvancedConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteInsAdvancedConfiguration", _wrap_Packet_genWriteInsAdvancedConfiguration, METH_VARARGS, (char *)"Packet_genWriteInsAdvancedConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t useMag, uint8_t usePres, uint8_t posAtt, uint8_t velAtt, uint8_t velBias, uint8_t useFoam, uint8_t gpsCovType, uint8_t velCount, float velInit, float moveOrigin, float gpsTimeout, float deltaLimitPos, float deltaLimitVel, float minPosUncertainty, float minVelUncertainty) -> size_t"},
	 { (char *)"Packet_genReadInsStateLla", _wrap_Packet_genReadInsStateLla, METH_VARARGS, (char *)"Packet_genReadInsStateLla(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadInsStateEcef", _wrap_Packet_genReadInsStateEcef, METH_VARARGS, (char *)"Packet_genReadInsStateEcef(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadStartupFilterBiasEstimate", _wrap_Packet_genReadStartupFilterBiasEstimate, METH_VARARGS, (char *)"Packet_genReadStartupFilterBiasEstimate(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteStartupFilterBiasEstimate", _wrap_Packet_genWriteStartupFilterBiasEstimate, METH_VARARGS, (char *)"Packet_genWriteStartupFilterBiasEstimate(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f gyroBias, vec3f accelBias, float pressureBias) -> size_t"},
	 { (char *)"Packet_genReadDeltaThetaAndDeltaVelocity", _wrap_Packet_genReadDeltaThetaAndDeltaVelocity, METH_VARARGS, (char *)"Packet_genReadDeltaThetaAndDeltaVelocity(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadDeltaThetaAndDeltaVelocityConfiguration", _wrap_Packet_genReadDeltaThetaAndDeltaVelocityConfiguration, METH_VARARGS, (char *)"Packet_genReadDeltaThetaAndDeltaVelocityConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteDeltaThetaAndDeltaVelocityConfiguration", _wrap_Packet_genWriteDeltaThetaAndDeltaVelocityConfiguration, METH_VARARGS, (char *)"Packet_genWriteDeltaThetaAndDeltaVelocityConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t integrationFrame, uint8_t gyroCompensation, uint8_t accelCompensation) -> size_t"},
	 { (char *)"Packet_genReadReferenceVectorConfiguration", _wrap_Packet_genReadReferenceVectorConfiguration, METH_VARARGS, (char *)"Packet_genReadReferenceVectorConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteReferenceVectorConfiguration", _wrap_Packet_genWriteReferenceVectorConfiguration, METH_VARARGS, (char *)"Packet_genWriteReferenceVectorConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t useMagModel, uint8_t useGravityModel, uint32_t recalcThreshold, float year, vec3d position) -> size_t"},
	 { (char *)"Packet_genReadGyroCompensation", _wrap_Packet_genReadGyroCompensation, METH_VARARGS, (char *)"Packet_genReadGyroCompensation(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteGyroCompensation", _wrap_Packet_genWriteGyroCompensation, METH_VARARGS, (char *)"Packet_genWriteGyroCompensation(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, mat3f c, vec3f b) -> size_t"},
	 { (char *)"Packet_genReadImuFilteringConfiguration", _wrap_Packet_genReadImuFilteringConfiguration, METH_VARARGS, (char *)"Packet_genReadImuFilteringConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteImuFilteringConfiguration", _wrap_Packet_genWriteImuFilteringConfiguration, METH_VARARGS, (char *)"Packet_genWriteImuFilteringConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint16_t magWindowSize, uint16_t accelWindowSize, uint16_t gyroWindowSize, uint16_t tempWindowSize, uint16_t presWindowSize, uint8_t magFilterMode, uint8_t accelFilterMode, uint8_t gyroFilterMode, uint8_t tempFilterMode, uint8_t presFilterMode) -> size_t"},
	 { (char *)"Packet_genReadGpsCompassBaseline", _wrap_Packet_genReadGpsCompassBaseline, METH_VARARGS, (char *)"Packet_genReadGpsCompassBaseline(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteGpsCompassBaseline", _wrap_Packet_genWriteGpsCompassBaseline, METH_VARARGS, (char *)"Packet_genWriteGpsCompassBaseline(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f position, vec3f uncertainty) -> size_t"},
	 { (char *)"Packet_genReadGpsCompassEstimatedBaseline", _wrap_Packet_genReadGpsCompassEstimatedBaseline, METH_VARARGS, (char *)"Packet_genReadGpsCompassEstimatedBaseline(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadImuRateConfiguration", _wrap_Packet_genReadImuRateConfiguration, METH_VARARGS, (char *)"Packet_genReadImuRateConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genWriteImuRateConfiguration", _wrap_Packet_genWriteImuRateConfiguration, METH_VARARGS, (char *)"Packet_genWriteImuRateConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint16_t imuRate, uint16_t navDivisor, float filterTargetRate, float filterMinRate) -> size_t"},
	 { (char *)"Packet_genReadYawPitchRollTrueBodyAccelerationAndAngularRates", _wrap_Packet_genReadYawPitchRollTrueBodyAccelerationAndAngularRates, METH_VARARGS, (char *)"Packet_genReadYawPitchRollTrueBodyAccelerationAndAngularRates(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_genReadYawPitchRollTrueInertialAccelerationAndAngularRates", _wrap_Packet_genReadYawPitchRollTrueInertialAccelerationAndAngularRates, METH_VARARGS, (char *)"Packet_genReadYawPitchRollTrueInertialAccelerationAndAngularRates(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"},
	 { (char *)"Packet_parseVNYPR", _wrap_Packet_parseVNYPR, METH_VARARGS, (char *)"Packet_parseVNYPR(Packet self, vec3f yawPitchRoll)"},
	 { (char *)"Packet_parseVNQTN", _wrap_Packet_parseVNQTN, METH_VARARGS, (char *)"Packet_parseVNQTN(Packet self, vec4f quaternion)"},
	 { (char *)"Packet_parseVNQMR", _wrap_Packet_parseVNQMR, METH_VARARGS, (char *)"Packet_parseVNQMR(Packet self, vec4f quaternion, vec3f magnetic, vec3f acceleration, vec3f angularRate)"},
	 { (char *)"Packet_parseVNMAG", _wrap_Packet_parseVNMAG, METH_VARARGS, (char *)"Packet_parseVNMAG(Packet self, vec3f magnetic)"},
	 { (char *)"Packet_parseVNACC", _wrap_Packet_parseVNACC, METH_VARARGS, (char *)"Packet_parseVNACC(Packet self, vec3f acceleration)"},
	 { (char *)"Packet_parseVNGYR", _wrap_Packet_parseVNGYR, METH_VARARGS, (char *)"Packet_parseVNGYR(Packet self, vec3f angularRate)"},
	 { (char *)"Packet_parseVNMAR", _wrap_Packet_parseVNMAR, METH_VARARGS, (char *)"Packet_parseVNMAR(Packet self, vec3f magnetic, vec3f acceleration, vec3f angularRate)"},
	 { (char *)"Packet_parseVNYMR", _wrap_Packet_parseVNYMR, METH_VARARGS, (char *)"Packet_parseVNYMR(Packet self, vec3f yawPitchRoll, vec3f magnetic, vec3f acceleration, vec3f angularRate)"},
	 { (char *)"Packet_parseVNYBA", _wrap_Packet_parseVNYBA, METH_VARARGS, (char *)"Packet_parseVNYBA(Packet self, vec3f yawPitchRoll, vec3f accelerationBody, vec3f angularRate)"},
	 { (char *)"Packet_parseVNYIA", _wrap_Packet_parseVNYIA, METH_VARARGS, (char *)"Packet_parseVNYIA(Packet self, vec3f yawPitchRoll, vec3f accelerationInertial, vec3f angularRate)"},
	 { (char *)"Packet_parseVNIMU", _wrap_Packet_parseVNIMU, METH_VARARGS, (char *)"Packet_parseVNIMU(Packet self, vec3f magneticUncompensated, vec3f accelerationUncompensated, vec3f angularRateUncompensated, float * temperature, float * pressure)"},
	 { (char *)"Packet_parseVNGPS", _wrap_Packet_parseVNGPS, METH_VARARGS, (char *)"Packet_parseVNGPS(Packet self, double * time, uint16_t * week, uint8_t * gpsFix, uint8_t * numSats, vec3d lla, vec3f nedVel, vec3f nedAcc, float * speedAcc, float * timeAcc)"},
	 { (char *)"Packet_parseVNINS", _wrap_Packet_parseVNINS, METH_VARARGS, (char *)"Packet_parseVNINS(Packet self, double * time, uint16_t * week, uint16_t * status, vec3f yawPitchRoll, vec3d lla, vec3f nedVel, float * attUncertainty, float * posUncertainty, float * velUncertainty)"},
	 { (char *)"Packet_parseVNINE", _wrap_Packet_parseVNINE, METH_VARARGS, (char *)"Packet_parseVNINE(Packet self, double * time, uint16_t * week, uint16_t * status, vec3f ypr, vec3d position, vec3f velocity, float * attUncertainty, float * posUncertainty, float * velUncertainty)"},
	 { (char *)"Packet_parseVNISL", _wrap_Packet_parseVNISL, METH_VARARGS, (char *)"Packet_parseVNISL(Packet self, vec3f ypr, vec3d lla, vec3f velocity, vec3f acceleration, vec3f angularRate)"},
	 { (char *)"Packet_parseVNISE", _wrap_Packet_parseVNISE, METH_VARARGS, (char *)"Packet_parseVNISE(Packet self, vec3f ypr, vec3d position, vec3f velocity, vec3f acceleration, vec3f angularRate)"},
	 { (char *)"Packet_parseVNGPE", _wrap_Packet_parseVNGPE, METH_VARARGS, (char *)"Packet_parseVNGPE(Packet self, double * tow, uint16_t * week, uint8_t * gpsFix, uint8_t * numSats, vec3d position, vec3f velocity, vec3f posAcc, float * speedAcc, float * timeAcc)"},
	 { (char *)"Packet_parseVNDTV", _wrap_Packet_parseVNDTV, METH_VARARGS, (char *)"Packet_parseVNDTV(Packet self, float * deltaTime, vec3f deltaTheta, vec3f deltaVelocity)"},
	 { (char *)"Packet_parseBinaryOutput", _wrap_Packet_parseBinaryOutput, METH_VARARGS, (char *)"Packet_parseBinaryOutput(Packet self, uint16_t * asyncMode, uint16_t * rateDivisor, uint16_t * outputGroup, uint16_t * commonField, uint16_t * timeField, uint16_t * imuField, uint16_t * gpsField, uint16_t * attitudeField, uint16_t * insField)"},
	 { (char *)"Packet_parseUserTag", _wrap_Packet_parseUserTag, METH_VARARGS, (char *)"Packet_parseUserTag(Packet self, char * tag)"},
	 { (char *)"Packet_parseModelNumber", _wrap_Packet_parseModelNumber, METH_VARARGS, (char *)"Packet_parseModelNumber(Packet self, char * productName)"},
	 { (char *)"Packet_parseHardwareRevision", _wrap_Packet_parseHardwareRevision, METH_VARARGS, (char *)"Packet_parseHardwareRevision(Packet self, uint32_t * revision)"},
	 { (char *)"Packet_parseSerialNumber", _wrap_Packet_parseSerialNumber, METH_VARARGS, (char *)"Packet_parseSerialNumber(Packet self, uint32_t * serialNum)"},
	 { (char *)"Packet_parseFirmwareVersion", _wrap_Packet_parseFirmwareVersion, METH_VARARGS, (char *)"Packet_parseFirmwareVersion(Packet self, char * firmwareVersion)"},
	 { (char *)"Packet_parseSerialBaudRate", _wrap_Packet_parseSerialBaudRate, METH_VARARGS, (char *)"Packet_parseSerialBaudRate(Packet self, uint32_t * baudrate)"},
	 { (char *)"Packet_parseAsyncDataOutputType", _wrap_Packet_parseAsyncDataOutputType, METH_VARARGS, (char *)"Packet_parseAsyncDataOutputType(Packet self, uint32_t * ador)"},
	 { (char *)"Packet_parseAsyncDataOutputFrequency", _wrap_Packet_parseAsyncDataOutputFrequency, METH_VARARGS, (char *)"Packet_parseAsyncDataOutputFrequency(Packet self, uint32_t * adof)"},
	 { (char *)"Packet_parseYawPitchRoll", _wrap_Packet_parseYawPitchRoll, METH_VARARGS, (char *)"Packet_parseYawPitchRoll(Packet self, vec3f yawPitchRoll)"},
	 { (char *)"Packet_parseAttitudeQuaternion", _wrap_Packet_parseAttitudeQuaternion, METH_VARARGS, (char *)"Packet_parseAttitudeQuaternion(Packet self, vec4f quat)"},
	 { (char *)"Packet_parseQuaternionMagneticAccelerationAndAngularRates", _wrap_Packet_parseQuaternionMagneticAccelerationAndAngularRates, METH_VARARGS, (char *)"Packet_parseQuaternionMagneticAccelerationAndAngularRates(Packet self, vec4f quat, vec3f mag, vec3f accel, vec3f gyro)"},
	 { (char *)"Packet_parseMagneticMeasurements", _wrap_Packet_parseMagneticMeasurements, METH_VARARGS, (char *)"Packet_parseMagneticMeasurements(Packet self, vec3f mag)"},
	 { (char *)"Packet_parseAccelerationMeasurements", _wrap_Packet_parseAccelerationMeasurements, METH_VARARGS, (char *)"Packet_parseAccelerationMeasurements(Packet self, vec3f accel)"},
	 { (char *)"Packet_parseAngularRateMeasurements", _wrap_Packet_parseAngularRateMeasurements, METH_VARARGS, (char *)"Packet_parseAngularRateMeasurements(Packet self, vec3f gyro)"},
	 { (char *)"Packet_parseMagneticAccelerationAndAngularRates", _wrap_Packet_parseMagneticAccelerationAndAngularRates, METH_VARARGS, (char *)"Packet_parseMagneticAccelerationAndAngularRates(Packet self, vec3f mag, vec3f accel, vec3f gyro)"},
	 { (char *)"Packet_parseMagneticAndGravityReferenceVectors", _wrap_Packet_parseMagneticAndGravityReferenceVectors, METH_VARARGS, (char *)"Packet_parseMagneticAndGravityReferenceVectors(Packet self, vec3f magRef, vec3f accRef)"},
	 { (char *)"Packet_parseFilterMeasurementsVarianceParameters", _wrap_Packet_parseFilterMeasurementsVarianceParameters, METH_VARARGS, (char *)"Packet_parseFilterMeasurementsVarianceParameters(Packet self, float * angularWalkVariance, vec3f angularRateVariance, vec3f magneticVariance, vec3f accelerationVariance)"},
	 { (char *)"Packet_parseMagnetometerCompensation", _wrap_Packet_parseMagnetometerCompensation, METH_VARARGS, (char *)"Packet_parseMagnetometerCompensation(Packet self, mat3f c, vec3f b)"},
	 { (char *)"Packet_parseFilterActiveTuningParameters", _wrap_Packet_parseFilterActiveTuningParameters, METH_VARARGS, (char *)"Packet_parseFilterActiveTuningParameters(Packet self, float * magneticDisturbanceGain, float * accelerationDisturbanceGain, float * magneticDisturbanceMemory, float * accelerationDisturbanceMemory)"},
	 { (char *)"Packet_parseAccelerationCompensation", _wrap_Packet_parseAccelerationCompensation, METH_VARARGS, (char *)"Packet_parseAccelerationCompensation(Packet self, mat3f c, vec3f b)"},
	 { (char *)"Packet_parseReferenceFrameRotation", _wrap_Packet_parseReferenceFrameRotation, METH_VARARGS, (char *)"Packet_parseReferenceFrameRotation(Packet self, mat3f c)"},
	 { (char *)"Packet_parseYawPitchRollMagneticAccelerationAndAngularRates", _wrap_Packet_parseYawPitchRollMagneticAccelerationAndAngularRates, METH_VARARGS, (char *)"Packet_parseYawPitchRollMagneticAccelerationAndAngularRates(Packet self, vec3f yawPitchRoll, vec3f mag, vec3f accel, vec3f gyro)"},
	 { (char *)"Packet_parseCommunicationProtocolControl", _wrap_Packet_parseCommunicationProtocolControl, METH_VARARGS, (char *)"Packet_parseCommunicationProtocolControl(Packet self, uint8_t * serialCount, uint8_t * serialStatus, uint8_t * spiCount, uint8_t * spiStatus, uint8_t * serialChecksum, uint8_t * spiChecksum, uint8_t * errorMode)"},
	 { (char *)"Packet_parseSynchronizationControl", _wrap_Packet_parseSynchronizationControl, METH_VARARGS, (char *)"Packet_parseSynchronizationControl(Packet self, uint8_t * syncInMode, uint8_t * syncInEdge, uint16_t * syncInSkipFactor, uint8_t * syncOutMode, uint8_t * syncOutPolarity, uint16_t * syncOutSkipFactor, uint32_t * syncOutPulseWidth)"},
	 { (char *)"Packet_parseSynchronizationStatus", _wrap_Packet_parseSynchronizationStatus, METH_VARARGS, (char *)"Packet_parseSynchronizationStatus(Packet self, uint32_t * syncInCount, uint32_t * syncInTime, uint32_t * syncOutCount)"},
	 { (char *)"Packet_parseFilterBasicControl", _wrap_Packet_parseFilterBasicControl, METH_VARARGS, (char *)"Packet_parseFilterBasicControl(Packet self, uint8_t * magMode, uint8_t * extMagMode, uint8_t * extAccMode, uint8_t * extGyroMode, vec3f gyroLimit)"},
	 { (char *)"Packet_parseVpeBasicControl", _wrap_Packet_parseVpeBasicControl, METH_VARARGS, (char *)"Packet_parseVpeBasicControl(Packet self, uint8_t * enable, uint8_t * headingMode, uint8_t * filteringMode, uint8_t * tuningMode)"},
	 { (char *)"Packet_parseVpeMagnetometerBasicTuning", _wrap_Packet_parseVpeMagnetometerBasicTuning, METH_VARARGS, (char *)"Packet_parseVpeMagnetometerBasicTuning(Packet self, vec3f baseTuning, vec3f adaptiveTuning, vec3f adaptiveFiltering)"},
	 { (char *)"Packet_parseVpeMagnetometerAdvancedTuning", _wrap_Packet_parseVpeMagnetometerAdvancedTuning, METH_VARARGS, (char *)"Packet_parseVpeMagnetometerAdvancedTuning(Packet self, vec3f minFiltering, vec3f maxFiltering, float * maxAdaptRate, float * disturbanceWindow, float * maxTuning)"},
	 { (char *)"Packet_parseVpeAccelerometerBasicTuning", _wrap_Packet_parseVpeAccelerometerBasicTuning, METH_VARARGS, (char *)"Packet_parseVpeAccelerometerBasicTuning(Packet self, vec3f baseTuning, vec3f adaptiveTuning, vec3f adaptiveFiltering)"},
	 { (char *)"Packet_parseVpeAccelerometerAdvancedTuning", _wrap_Packet_parseVpeAccelerometerAdvancedTuning, METH_VARARGS, (char *)"Packet_parseVpeAccelerometerAdvancedTuning(Packet self, vec3f minFiltering, vec3f maxFiltering, float * maxAdaptRate, float * disturbanceWindow, float * maxTuning)"},
	 { (char *)"Packet_parseVpeGyroBasicTuning", _wrap_Packet_parseVpeGyroBasicTuning, METH_VARARGS, (char *)"Packet_parseVpeGyroBasicTuning(Packet self, vec3f angularWalkVariance, vec3f baseTuning, vec3f adaptiveTuning)"},
	 { (char *)"Packet_parseFilterStartupGyroBias", _wrap_Packet_parseFilterStartupGyroBias, METH_VARARGS, (char *)"Packet_parseFilterStartupGyroBias(Packet self, vec3f bias)"},
	 { (char *)"Packet_parseMagnetometerCalibrationControl", _wrap_Packet_parseMagnetometerCalibrationControl, METH_VARARGS, (char *)"Packet_parseMagnetometerCalibrationControl(Packet self, uint8_t * hsiMode, uint8_t * hsiOutput, uint8_t * convergeRate)"},
	 { (char *)"Packet_parseCalculatedMagnetometerCalibration", _wrap_Packet_parseCalculatedMagnetometerCalibration, METH_VARARGS, (char *)"Packet_parseCalculatedMagnetometerCalibration(Packet self, mat3f c, vec3f b)"},
	 { (char *)"Packet_parseIndoorHeadingModeControl", _wrap_Packet_parseIndoorHeadingModeControl, METH_VARARGS, (char *)"Packet_parseIndoorHeadingModeControl(Packet self, float * maxRateError)"},
	 { (char *)"Packet_parseVelocityCompensationMeasurement", _wrap_Packet_parseVelocityCompensationMeasurement, METH_VARARGS, (char *)"Packet_parseVelocityCompensationMeasurement(Packet self, vec3f velocity)"},
	 { (char *)"Packet_parseVelocityCompensationControl", _wrap_Packet_parseVelocityCompensationControl, METH_VARARGS, (char *)"Packet_parseVelocityCompensationControl(Packet self, uint8_t * mode, float * velocityTuning, float * rateTuning)"},
	 { (char *)"Packet_parseVelocityCompensationStatus", _wrap_Packet_parseVelocityCompensationStatus, METH_VARARGS, (char *)"Packet_parseVelocityCompensationStatus(Packet self, float * x, float * xDot, vec3f accelOffset, vec3f omega)"},
	 { (char *)"Packet_parseImuMeasurements", _wrap_Packet_parseImuMeasurements, METH_VARARGS, (char *)"Packet_parseImuMeasurements(Packet self, vec3f mag, vec3f accel, vec3f gyro, float * temp, float * pressure)"},
	 { (char *)"Packet_parseGpsConfiguration", _wrap_Packet_parseGpsConfiguration, METH_VARARGS, (char *)"Packet_parseGpsConfiguration(Packet self, uint8_t * mode, uint8_t * ppsSource)"},
	 { (char *)"Packet_parseGpsAntennaOffset", _wrap_Packet_parseGpsAntennaOffset, METH_VARARGS, (char *)"Packet_parseGpsAntennaOffset(Packet self, vec3f position)"},
	 { (char *)"Packet_parseGpsSolutionLla", _wrap_Packet_parseGpsSolutionLla, METH_VARARGS, (char *)"Packet_parseGpsSolutionLla(Packet self, double * time, uint16_t * week, uint8_t * gpsFix, uint8_t * numSats, vec3d lla, vec3f nedVel, vec3f nedAcc, float * speedAcc, float * timeAcc)"},
	 { (char *)"Packet_parseGpsSolutionEcef", _wrap_Packet_parseGpsSolutionEcef, METH_VARARGS, (char *)"Packet_parseGpsSolutionEcef(Packet self, double * tow, uint16_t * week, uint8_t * gpsFix, uint8_t * numSats, vec3d position, vec3f velocity, vec3f posAcc, float * speedAcc, float * timeAcc)"},
	 { (char *)"Packet_parseInsSolutionLla", _wrap_Packet_parseInsSolutionLla, METH_VARARGS, (char *)"Packet_parseInsSolutionLla(Packet self, double * time, uint16_t * week, uint16_t * status, vec3f yawPitchRoll, vec3d position, vec3f nedVel, float * attUncertainty, float * posUncertainty, float * velUncertainty)"},
	 { (char *)"Packet_parseInsSolutionEcef", _wrap_Packet_parseInsSolutionEcef, METH_VARARGS, (char *)"Packet_parseInsSolutionEcef(Packet self, double * time, uint16_t * week, uint16_t * status, vec3f yawPitchRoll, vec3d position, vec3f velocity, float * attUncertainty, float * posUncertainty, float * velUncertainty)"},
	 { (char *)"Packet_parseInsBasicConfiguration", _wrap_Packet_parseInsBasicConfiguration, METH_VARARGS, (char *)"\n"
		"parseInsBasicConfiguration(uint8_t * scenario, uint8_t * ahrsAiding)\n"
		"Packet_parseInsBasicConfiguration(Packet self, uint8_t * scenario, uint8_t * ahrsAiding, uint8_t * estBaseline)\n"
		""},
	 { (char *)"Packet_parseInsAdvancedConfiguration", _wrap_Packet_parseInsAdvancedConfiguration, METH_VARARGS, (char *)"Packet_parseInsAdvancedConfiguration(Packet self, uint8_t * useMag, uint8_t * usePres, uint8_t * posAtt, uint8_t * velAtt, uint8_t * velBias, uint8_t * useFoam, uint8_t * gpsCovType, uint8_t * velCount, float * velInit, float * moveOrigin, float * gpsTimeout, float * deltaLimitPos, float * deltaLimitVel, float * minPosUncertainty, float * minVelUncertainty)"},
	 { (char *)"Packet_parseInsStateLla", _wrap_Packet_parseInsStateLla, METH_VARARGS, (char *)"Packet_parseInsStateLla(Packet self, vec3f yawPitchRoll, vec3d position, vec3f velocity, vec3f accel, vec3f angularRate)"},
	 { (char *)"Packet_parseInsStateEcef", _wrap_Packet_parseInsStateEcef, METH_VARARGS, (char *)"Packet_parseInsStateEcef(Packet self, vec3f yawPitchRoll, vec3d position, vec3f velocity, vec3f accel, vec3f angularRate)"},
	 { (char *)"Packet_parseStartupFilterBiasEstimate", _wrap_Packet_parseStartupFilterBiasEstimate, METH_VARARGS, (char *)"Packet_parseStartupFilterBiasEstimate(Packet self, vec3f gyroBias, vec3f accelBias, float * pressureBias)"},
	 { (char *)"Packet_parseDeltaThetaAndDeltaVelocity", _wrap_Packet_parseDeltaThetaAndDeltaVelocity, METH_VARARGS, (char *)"Packet_parseDeltaThetaAndDeltaVelocity(Packet self, float * deltaTime, vec3f deltaTheta, vec3f deltaVelocity)"},
	 { (char *)"Packet_parseDeltaThetaAndDeltaVelocityConfiguration", _wrap_Packet_parseDeltaThetaAndDeltaVelocityConfiguration, METH_VARARGS, (char *)"Packet_parseDeltaThetaAndDeltaVelocityConfiguration(Packet self, uint8_t * integrationFrame, uint8_t * gyroCompensation, uint8_t * accelCompensation)"},
	 { (char *)"Packet_parseReferenceVectorConfiguration", _wrap_Packet_parseReferenceVectorConfiguration, METH_VARARGS, (char *)"Packet_parseReferenceVectorConfiguration(Packet self, uint8_t * useMagModel, uint8_t * useGravityModel, uint32_t * recalcThreshold, float * year, vec3d position)"},
	 { (char *)"Packet_parseGyroCompensation", _wrap_Packet_parseGyroCompensation, METH_VARARGS, (char *)"Packet_parseGyroCompensation(Packet self, mat3f c, vec3f b)"},
	 { (char *)"Packet_parseImuFilteringConfiguration", _wrap_Packet_parseImuFilteringConfiguration, METH_VARARGS, (char *)"Packet_parseImuFilteringConfiguration(Packet self, uint16_t * magWindowSize, uint16_t * accelWindowSize, uint16_t * gyroWindowSize, uint16_t * tempWindowSize, uint16_t * presWindowSize, uint8_t * magFilterMode, uint8_t * accelFilterMode, uint8_t * gyroFilterMode, uint8_t * tempFilterMode, uint8_t * presFilterMode)"},
	 { (char *)"Packet_parseGpsCompassBaseline", _wrap_Packet_parseGpsCompassBaseline, METH_VARARGS, (char *)"Packet_parseGpsCompassBaseline(Packet self, vec3f position, vec3f uncertainty)"},
	 { (char *)"Packet_parseGpsCompassEstimatedBaseline", _wrap_Packet_parseGpsCompassEstimatedBaseline, METH_VARARGS, (char *)"Packet_parseGpsCompassEstimatedBaseline(Packet self, uint8_t * estBaselineUsed, uint16_t * numMeas, vec3f position, vec3f uncertainty)"},
	 { (char *)"Packet_parseImuRateConfiguration", _wrap_Packet_parseImuRateConfiguration, METH_VARARGS, (char *)"Packet_parseImuRateConfiguration(Packet self, uint16_t * imuRate, uint16_t * navDivisor, float * filterTargetRate, float * filterMinRate)"},
	 { (char *)"Packet_parseYawPitchRollTrueBodyAccelerationAndAngularRates", _wrap_Packet_parseYawPitchRollTrueBodyAccelerationAndAngularRates, METH_VARARGS, (char *)"Packet_parseYawPitchRollTrueBodyAccelerationAndAngularRates(Packet self, vec3f yawPitchRoll, vec3f bodyAccel, vec3f gyro)"},
	 { (char *)"Packet_parseYawPitchRollTrueInertialAccelerationAndAngularRates", _wrap_Packet_parseYawPitchRollTrueInertialAccelerationAndAngularRates, METH_VARARGS, (char *)"Packet_parseYawPitchRollTrueInertialAccelerationAndAngularRates(Packet self, vec3f yawPitchRoll, vec3f inertialAccel, vec3f gyro)"},
	 { (char *)"Packet_swigregister", Packet_swigregister, METH_VARARGS, NULL},
	 { (char *)"BinaryOutputRegister_async_mode_set", _wrap_BinaryOutputRegister_async_mode_set, METH_VARARGS, (char *)"BinaryOutputRegister_async_mode_set(BinaryOutputRegister self, ASYNCMODE asyncMode)"},
	 { (char *)"BinaryOutputRegister_async_mode_get", _wrap_BinaryOutputRegister_async_mode_get, METH_VARARGS, (char *)"BinaryOutputRegister_async_mode_get(BinaryOutputRegister self) -> ASYNCMODE"},
	 { (char *)"BinaryOutputRegister_rate_divisor_set", _wrap_BinaryOutputRegister_rate_divisor_set, METH_VARARGS, (char *)"BinaryOutputRegister_rate_divisor_set(BinaryOutputRegister self, uint16_t rateDivisor)"},
	 { (char *)"BinaryOutputRegister_rate_divisor_get", _wrap_BinaryOutputRegister_rate_divisor_get, METH_VARARGS, (char *)"BinaryOutputRegister_rate_divisor_get(BinaryOutputRegister self) -> uint16_t"},
	 { (char *)"BinaryOutputRegister_common_field_set", _wrap_BinaryOutputRegister_common_field_set, METH_VARARGS, (char *)"BinaryOutputRegister_common_field_set(BinaryOutputRegister self, COMMONGROUP commonField)"},
	 { (char *)"BinaryOutputRegister_common_field_get", _wrap_BinaryOutputRegister_common_field_get, METH_VARARGS, (char *)"BinaryOutputRegister_common_field_get(BinaryOutputRegister self) -> COMMONGROUP"},
	 { (char *)"BinaryOutputRegister_time_field_set", _wrap_BinaryOutputRegister_time_field_set, METH_VARARGS, (char *)"BinaryOutputRegister_time_field_set(BinaryOutputRegister self, TIMEGROUP timeField)"},
	 { (char *)"BinaryOutputRegister_time_field_get", _wrap_BinaryOutputRegister_time_field_get, METH_VARARGS, (char *)"BinaryOutputRegister_time_field_get(BinaryOutputRegister self) -> TIMEGROUP"},
	 { (char *)"BinaryOutputRegister_imu_field_set", _wrap_BinaryOutputRegister_imu_field_set, METH_VARARGS, (char *)"BinaryOutputRegister_imu_field_set(BinaryOutputRegister self, IMUGROUP imuField)"},
	 { (char *)"BinaryOutputRegister_imu_field_get", _wrap_BinaryOutputRegister_imu_field_get, METH_VARARGS, (char *)"BinaryOutputRegister_imu_field_get(BinaryOutputRegister self) -> IMUGROUP"},
	 { (char *)"BinaryOutputRegister_gps_field_set", _wrap_BinaryOutputRegister_gps_field_set, METH_VARARGS, (char *)"BinaryOutputRegister_gps_field_set(BinaryOutputRegister self, GPSGROUP gpsField)"},
	 { (char *)"BinaryOutputRegister_gps_field_get", _wrap_BinaryOutputRegister_gps_field_get, METH_VARARGS, (char *)"BinaryOutputRegister_gps_field_get(BinaryOutputRegister self) -> GPSGROUP"},
	 { (char *)"BinaryOutputRegister_attitude_field_set", _wrap_BinaryOutputRegister_attitude_field_set, METH_VARARGS, (char *)"BinaryOutputRegister_attitude_field_set(BinaryOutputRegister self, ATTITUDEGROUP attitudeField)"},
	 { (char *)"BinaryOutputRegister_attitude_field_get", _wrap_BinaryOutputRegister_attitude_field_get, METH_VARARGS, (char *)"BinaryOutputRegister_attitude_field_get(BinaryOutputRegister self) -> ATTITUDEGROUP"},
	 { (char *)"BinaryOutputRegister_ins_field_set", _wrap_BinaryOutputRegister_ins_field_set, METH_VARARGS, (char *)"BinaryOutputRegister_ins_field_set(BinaryOutputRegister self, INSGROUP insField)"},
	 { (char *)"BinaryOutputRegister_ins_field_get", _wrap_BinaryOutputRegister_ins_field_get, METH_VARARGS, (char *)"BinaryOutputRegister_ins_field_get(BinaryOutputRegister self) -> INSGROUP"},
	 { (char *)"new_BinaryOutputRegister", _wrap_new_BinaryOutputRegister, METH_VARARGS, (char *)"\n"
		"BinaryOutputRegister()\n"
		"BinaryOutputRegister(ASYNCMODE asyncModeIn, uint16_t rateDivisorIn, COMMONGROUP commonFieldIn, TIMEGROUP timeFieldIn, IMUGROUP imuFieldIn, GPSGROUP gpsFieldIn, ATTITUDEGROUP attitudeFieldIn, INSGROUP insFieldIn)\n"
		"new_BinaryOutputRegister(uint16_t asyncModeIn, uint16_t rateDivisorIn, uint16_t commonFieldIn, uint16_t timeFieldIn, uint16_t imuFieldIn, uint16_t gpsFieldIn, uint16_t attitudeFieldIn, uint16_t insFieldIn) -> BinaryOutputRegister\n"
		""},
	 { (char *)"delete_BinaryOutputRegister", _wrap_delete_BinaryOutputRegister, METH_VARARGS, (char *)"delete_BinaryOutputRegister(BinaryOutputRegister self)"},
	 { (char *)"BinaryOutputRegister_swigregister", BinaryOutputRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"QuaternionMagneticAccelerationAndAngularRatesRegister_quat_set", _wrap_QuaternionMagneticAccelerationAndAngularRatesRegister_quat_set, METH_VARARGS, (char *)"QuaternionMagneticAccelerationAndAngularRatesRegister_quat_set(QuaternionMagneticAccelerationAndAngularRatesRegister self, vec4f quat)"},
	 { (char *)"QuaternionMagneticAccelerationAndAngularRatesRegister_quat_get", _wrap_QuaternionMagneticAccelerationAndAngularRatesRegister_quat_get, METH_VARARGS, (char *)"QuaternionMagneticAccelerationAndAngularRatesRegister_quat_get(QuaternionMagneticAccelerationAndAngularRatesRegister self) -> vec4f"},
	 { (char *)"QuaternionMagneticAccelerationAndAngularRatesRegister_mag_set", _wrap_QuaternionMagneticAccelerationAndAngularRatesRegister_mag_set, METH_VARARGS, (char *)"QuaternionMagneticAccelerationAndAngularRatesRegister_mag_set(QuaternionMagneticAccelerationAndAngularRatesRegister self, vec3f mag)"},
	 { (char *)"QuaternionMagneticAccelerationAndAngularRatesRegister_mag_get", _wrap_QuaternionMagneticAccelerationAndAngularRatesRegister_mag_get, METH_VARARGS, (char *)"QuaternionMagneticAccelerationAndAngularRatesRegister_mag_get(QuaternionMagneticAccelerationAndAngularRatesRegister self) -> vec3f"},
	 { (char *)"QuaternionMagneticAccelerationAndAngularRatesRegister_accel_set", _wrap_QuaternionMagneticAccelerationAndAngularRatesRegister_accel_set, METH_VARARGS, (char *)"QuaternionMagneticAccelerationAndAngularRatesRegister_accel_set(QuaternionMagneticAccelerationAndAngularRatesRegister self, vec3f accel)"},
	 { (char *)"QuaternionMagneticAccelerationAndAngularRatesRegister_accel_get", _wrap_QuaternionMagneticAccelerationAndAngularRatesRegister_accel_get, METH_VARARGS, (char *)"QuaternionMagneticAccelerationAndAngularRatesRegister_accel_get(QuaternionMagneticAccelerationAndAngularRatesRegister self) -> vec3f"},
	 { (char *)"QuaternionMagneticAccelerationAndAngularRatesRegister_gyro_set", _wrap_QuaternionMagneticAccelerationAndAngularRatesRegister_gyro_set, METH_VARARGS, (char *)"QuaternionMagneticAccelerationAndAngularRatesRegister_gyro_set(QuaternionMagneticAccelerationAndAngularRatesRegister self, vec3f gyro)"},
	 { (char *)"QuaternionMagneticAccelerationAndAngularRatesRegister_gyro_get", _wrap_QuaternionMagneticAccelerationAndAngularRatesRegister_gyro_get, METH_VARARGS, (char *)"QuaternionMagneticAccelerationAndAngularRatesRegister_gyro_get(QuaternionMagneticAccelerationAndAngularRatesRegister self) -> vec3f"},
	 { (char *)"new_QuaternionMagneticAccelerationAndAngularRatesRegister", _wrap_new_QuaternionMagneticAccelerationAndAngularRatesRegister, METH_VARARGS, (char *)"\n"
		"QuaternionMagneticAccelerationAndAngularRatesRegister()\n"
		"new_QuaternionMagneticAccelerationAndAngularRatesRegister(vec4f quatIn, vec3f magIn, vec3f accelIn, vec3f gyroIn) -> QuaternionMagneticAccelerationAndAngularRatesRegister\n"
		""},
	 { (char *)"delete_QuaternionMagneticAccelerationAndAngularRatesRegister", _wrap_delete_QuaternionMagneticAccelerationAndAngularRatesRegister, METH_VARARGS, (char *)"delete_QuaternionMagneticAccelerationAndAngularRatesRegister(QuaternionMagneticAccelerationAndAngularRatesRegister self)"},
	 { (char *)"QuaternionMagneticAccelerationAndAngularRatesRegister_swigregister", QuaternionMagneticAccelerationAndAngularRatesRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"MagneticAccelerationAndAngularRatesRegister_mag_set", _wrap_MagneticAccelerationAndAngularRatesRegister_mag_set, METH_VARARGS, (char *)"MagneticAccelerationAndAngularRatesRegister_mag_set(MagneticAccelerationAndAngularRatesRegister self, vec3f mag)"},
	 { (char *)"MagneticAccelerationAndAngularRatesRegister_mag_get", _wrap_MagneticAccelerationAndAngularRatesRegister_mag_get, METH_VARARGS, (char *)"MagneticAccelerationAndAngularRatesRegister_mag_get(MagneticAccelerationAndAngularRatesRegister self) -> vec3f"},
	 { (char *)"MagneticAccelerationAndAngularRatesRegister_accel_set", _wrap_MagneticAccelerationAndAngularRatesRegister_accel_set, METH_VARARGS, (char *)"MagneticAccelerationAndAngularRatesRegister_accel_set(MagneticAccelerationAndAngularRatesRegister self, vec3f accel)"},
	 { (char *)"MagneticAccelerationAndAngularRatesRegister_accel_get", _wrap_MagneticAccelerationAndAngularRatesRegister_accel_get, METH_VARARGS, (char *)"MagneticAccelerationAndAngularRatesRegister_accel_get(MagneticAccelerationAndAngularRatesRegister self) -> vec3f"},
	 { (char *)"MagneticAccelerationAndAngularRatesRegister_gyro_set", _wrap_MagneticAccelerationAndAngularRatesRegister_gyro_set, METH_VARARGS, (char *)"MagneticAccelerationAndAngularRatesRegister_gyro_set(MagneticAccelerationAndAngularRatesRegister self, vec3f gyro)"},
	 { (char *)"MagneticAccelerationAndAngularRatesRegister_gyro_get", _wrap_MagneticAccelerationAndAngularRatesRegister_gyro_get, METH_VARARGS, (char *)"MagneticAccelerationAndAngularRatesRegister_gyro_get(MagneticAccelerationAndAngularRatesRegister self) -> vec3f"},
	 { (char *)"new_MagneticAccelerationAndAngularRatesRegister", _wrap_new_MagneticAccelerationAndAngularRatesRegister, METH_VARARGS, (char *)"\n"
		"MagneticAccelerationAndAngularRatesRegister()\n"
		"new_MagneticAccelerationAndAngularRatesRegister(vec3f magIn, vec3f accelIn, vec3f gyroIn) -> MagneticAccelerationAndAngularRatesRegister\n"
		""},
	 { (char *)"delete_MagneticAccelerationAndAngularRatesRegister", _wrap_delete_MagneticAccelerationAndAngularRatesRegister, METH_VARARGS, (char *)"delete_MagneticAccelerationAndAngularRatesRegister(MagneticAccelerationAndAngularRatesRegister self)"},
	 { (char *)"MagneticAccelerationAndAngularRatesRegister_swigregister", MagneticAccelerationAndAngularRatesRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"MagneticAndGravityReferenceVectorsRegister_mag_ref_set", _wrap_MagneticAndGravityReferenceVectorsRegister_mag_ref_set, METH_VARARGS, (char *)"MagneticAndGravityReferenceVectorsRegister_mag_ref_set(MagneticAndGravityReferenceVectorsRegister self, vec3f magRef)"},
	 { (char *)"MagneticAndGravityReferenceVectorsRegister_mag_ref_get", _wrap_MagneticAndGravityReferenceVectorsRegister_mag_ref_get, METH_VARARGS, (char *)"MagneticAndGravityReferenceVectorsRegister_mag_ref_get(MagneticAndGravityReferenceVectorsRegister self) -> vec3f"},
	 { (char *)"MagneticAndGravityReferenceVectorsRegister_acc_ref_set", _wrap_MagneticAndGravityReferenceVectorsRegister_acc_ref_set, METH_VARARGS, (char *)"MagneticAndGravityReferenceVectorsRegister_acc_ref_set(MagneticAndGravityReferenceVectorsRegister self, vec3f accRef)"},
	 { (char *)"MagneticAndGravityReferenceVectorsRegister_acc_ref_get", _wrap_MagneticAndGravityReferenceVectorsRegister_acc_ref_get, METH_VARARGS, (char *)"MagneticAndGravityReferenceVectorsRegister_acc_ref_get(MagneticAndGravityReferenceVectorsRegister self) -> vec3f"},
	 { (char *)"new_MagneticAndGravityReferenceVectorsRegister", _wrap_new_MagneticAndGravityReferenceVectorsRegister, METH_VARARGS, (char *)"\n"
		"MagneticAndGravityReferenceVectorsRegister()\n"
		"new_MagneticAndGravityReferenceVectorsRegister(vec3f magRefIn, vec3f accRefIn) -> MagneticAndGravityReferenceVectorsRegister\n"
		""},
	 { (char *)"delete_MagneticAndGravityReferenceVectorsRegister", _wrap_delete_MagneticAndGravityReferenceVectorsRegister, METH_VARARGS, (char *)"delete_MagneticAndGravityReferenceVectorsRegister(MagneticAndGravityReferenceVectorsRegister self)"},
	 { (char *)"MagneticAndGravityReferenceVectorsRegister_swigregister", MagneticAndGravityReferenceVectorsRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"FilterMeasurementsVarianceParametersRegister_angular_walk_variance_set", _wrap_FilterMeasurementsVarianceParametersRegister_angular_walk_variance_set, METH_VARARGS, (char *)"FilterMeasurementsVarianceParametersRegister_angular_walk_variance_set(FilterMeasurementsVarianceParametersRegister self, float angularWalkVariance)"},
	 { (char *)"FilterMeasurementsVarianceParametersRegister_angular_walk_variance_get", _wrap_FilterMeasurementsVarianceParametersRegister_angular_walk_variance_get, METH_VARARGS, (char *)"FilterMeasurementsVarianceParametersRegister_angular_walk_variance_get(FilterMeasurementsVarianceParametersRegister self) -> float"},
	 { (char *)"FilterMeasurementsVarianceParametersRegister_angular_rate_variance_set", _wrap_FilterMeasurementsVarianceParametersRegister_angular_rate_variance_set, METH_VARARGS, (char *)"FilterMeasurementsVarianceParametersRegister_angular_rate_variance_set(FilterMeasurementsVarianceParametersRegister self, vec3f angularRateVariance)"},
	 { (char *)"FilterMeasurementsVarianceParametersRegister_angular_rate_variance_get", _wrap_FilterMeasurementsVarianceParametersRegister_angular_rate_variance_get, METH_VARARGS, (char *)"FilterMeasurementsVarianceParametersRegister_angular_rate_variance_get(FilterMeasurementsVarianceParametersRegister self) -> vec3f"},
	 { (char *)"FilterMeasurementsVarianceParametersRegister_magnetic_variance_set", _wrap_FilterMeasurementsVarianceParametersRegister_magnetic_variance_set, METH_VARARGS, (char *)"FilterMeasurementsVarianceParametersRegister_magnetic_variance_set(FilterMeasurementsVarianceParametersRegister self, vec3f magneticVariance)"},
	 { (char *)"FilterMeasurementsVarianceParametersRegister_magnetic_variance_get", _wrap_FilterMeasurementsVarianceParametersRegister_magnetic_variance_get, METH_VARARGS, (char *)"FilterMeasurementsVarianceParametersRegister_magnetic_variance_get(FilterMeasurementsVarianceParametersRegister self) -> vec3f"},
	 { (char *)"FilterMeasurementsVarianceParametersRegister_acceleration_variance_set", _wrap_FilterMeasurementsVarianceParametersRegister_acceleration_variance_set, METH_VARARGS, (char *)"FilterMeasurementsVarianceParametersRegister_acceleration_variance_set(FilterMeasurementsVarianceParametersRegister self, vec3f accelerationVariance)"},
	 { (char *)"FilterMeasurementsVarianceParametersRegister_acceleration_variance_get", _wrap_FilterMeasurementsVarianceParametersRegister_acceleration_variance_get, METH_VARARGS, (char *)"FilterMeasurementsVarianceParametersRegister_acceleration_variance_get(FilterMeasurementsVarianceParametersRegister self) -> vec3f"},
	 { (char *)"new_FilterMeasurementsVarianceParametersRegister", _wrap_new_FilterMeasurementsVarianceParametersRegister, METH_VARARGS, (char *)"\n"
		"FilterMeasurementsVarianceParametersRegister()\n"
		"new_FilterMeasurementsVarianceParametersRegister(float angularWalkVarianceIn, vec3f angularRateVarianceIn, vec3f magneticVarianceIn, vec3f accelerationVarianceIn) -> FilterMeasurementsVarianceParametersRegister\n"
		""},
	 { (char *)"delete_FilterMeasurementsVarianceParametersRegister", _wrap_delete_FilterMeasurementsVarianceParametersRegister, METH_VARARGS, (char *)"delete_FilterMeasurementsVarianceParametersRegister(FilterMeasurementsVarianceParametersRegister self)"},
	 { (char *)"FilterMeasurementsVarianceParametersRegister_swigregister", FilterMeasurementsVarianceParametersRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"MagnetometerCompensationRegister_c_set", _wrap_MagnetometerCompensationRegister_c_set, METH_VARARGS, (char *)"MagnetometerCompensationRegister_c_set(MagnetometerCompensationRegister self, mat3f c)"},
	 { (char *)"MagnetometerCompensationRegister_c_get", _wrap_MagnetometerCompensationRegister_c_get, METH_VARARGS, (char *)"MagnetometerCompensationRegister_c_get(MagnetometerCompensationRegister self) -> mat3f"},
	 { (char *)"MagnetometerCompensationRegister_b_set", _wrap_MagnetometerCompensationRegister_b_set, METH_VARARGS, (char *)"MagnetometerCompensationRegister_b_set(MagnetometerCompensationRegister self, vec3f b)"},
	 { (char *)"MagnetometerCompensationRegister_b_get", _wrap_MagnetometerCompensationRegister_b_get, METH_VARARGS, (char *)"MagnetometerCompensationRegister_b_get(MagnetometerCompensationRegister self) -> vec3f"},
	 { (char *)"new_MagnetometerCompensationRegister", _wrap_new_MagnetometerCompensationRegister, METH_VARARGS, (char *)"\n"
		"MagnetometerCompensationRegister()\n"
		"new_MagnetometerCompensationRegister(mat3f cIn, vec3f bIn) -> MagnetometerCompensationRegister\n"
		""},
	 { (char *)"delete_MagnetometerCompensationRegister", _wrap_delete_MagnetometerCompensationRegister, METH_VARARGS, (char *)"delete_MagnetometerCompensationRegister(MagnetometerCompensationRegister self)"},
	 { (char *)"MagnetometerCompensationRegister_swigregister", MagnetometerCompensationRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"FilterActiveTuningParametersRegister_magnetic_disturbance_gain_set", _wrap_FilterActiveTuningParametersRegister_magnetic_disturbance_gain_set, METH_VARARGS, (char *)"FilterActiveTuningParametersRegister_magnetic_disturbance_gain_set(FilterActiveTuningParametersRegister self, float magneticDisturbanceGain)"},
	 { (char *)"FilterActiveTuningParametersRegister_magnetic_disturbance_gain_get", _wrap_FilterActiveTuningParametersRegister_magnetic_disturbance_gain_get, METH_VARARGS, (char *)"FilterActiveTuningParametersRegister_magnetic_disturbance_gain_get(FilterActiveTuningParametersRegister self) -> float"},
	 { (char *)"FilterActiveTuningParametersRegister_acceleration_disturbance_gain_set", _wrap_FilterActiveTuningParametersRegister_acceleration_disturbance_gain_set, METH_VARARGS, (char *)"FilterActiveTuningParametersRegister_acceleration_disturbance_gain_set(FilterActiveTuningParametersRegister self, float accelerationDisturbanceGain)"},
	 { (char *)"FilterActiveTuningParametersRegister_acceleration_disturbance_gain_get", _wrap_FilterActiveTuningParametersRegister_acceleration_disturbance_gain_get, METH_VARARGS, (char *)"FilterActiveTuningParametersRegister_acceleration_disturbance_gain_get(FilterActiveTuningParametersRegister self) -> float"},
	 { (char *)"FilterActiveTuningParametersRegister_magnetic_disturbance_memory_set", _wrap_FilterActiveTuningParametersRegister_magnetic_disturbance_memory_set, METH_VARARGS, (char *)"FilterActiveTuningParametersRegister_magnetic_disturbance_memory_set(FilterActiveTuningParametersRegister self, float magneticDisturbanceMemory)"},
	 { (char *)"FilterActiveTuningParametersRegister_magnetic_disturbance_memory_get", _wrap_FilterActiveTuningParametersRegister_magnetic_disturbance_memory_get, METH_VARARGS, (char *)"FilterActiveTuningParametersRegister_magnetic_disturbance_memory_get(FilterActiveTuningParametersRegister self) -> float"},
	 { (char *)"FilterActiveTuningParametersRegister_acceleration_disturbance_memory_set", _wrap_FilterActiveTuningParametersRegister_acceleration_disturbance_memory_set, METH_VARARGS, (char *)"FilterActiveTuningParametersRegister_acceleration_disturbance_memory_set(FilterActiveTuningParametersRegister self, float accelerationDisturbanceMemory)"},
	 { (char *)"FilterActiveTuningParametersRegister_acceleration_disturbance_memory_get", _wrap_FilterActiveTuningParametersRegister_acceleration_disturbance_memory_get, METH_VARARGS, (char *)"FilterActiveTuningParametersRegister_acceleration_disturbance_memory_get(FilterActiveTuningParametersRegister self) -> float"},
	 { (char *)"new_FilterActiveTuningParametersRegister", _wrap_new_FilterActiveTuningParametersRegister, METH_VARARGS, (char *)"\n"
		"FilterActiveTuningParametersRegister()\n"
		"new_FilterActiveTuningParametersRegister(float magneticDisturbanceGainIn, float accelerationDisturbanceGainIn, float magneticDisturbanceMemoryIn, float accelerationDisturbanceMemoryIn) -> FilterActiveTuningParametersRegister\n"
		""},
	 { (char *)"delete_FilterActiveTuningParametersRegister", _wrap_delete_FilterActiveTuningParametersRegister, METH_VARARGS, (char *)"delete_FilterActiveTuningParametersRegister(FilterActiveTuningParametersRegister self)"},
	 { (char *)"FilterActiveTuningParametersRegister_swigregister", FilterActiveTuningParametersRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"AccelerationCompensationRegister_c_set", _wrap_AccelerationCompensationRegister_c_set, METH_VARARGS, (char *)"AccelerationCompensationRegister_c_set(AccelerationCompensationRegister self, mat3f c)"},
	 { (char *)"AccelerationCompensationRegister_c_get", _wrap_AccelerationCompensationRegister_c_get, METH_VARARGS, (char *)"AccelerationCompensationRegister_c_get(AccelerationCompensationRegister self) -> mat3f"},
	 { (char *)"AccelerationCompensationRegister_b_set", _wrap_AccelerationCompensationRegister_b_set, METH_VARARGS, (char *)"AccelerationCompensationRegister_b_set(AccelerationCompensationRegister self, vec3f b)"},
	 { (char *)"AccelerationCompensationRegister_b_get", _wrap_AccelerationCompensationRegister_b_get, METH_VARARGS, (char *)"AccelerationCompensationRegister_b_get(AccelerationCompensationRegister self) -> vec3f"},
	 { (char *)"new_AccelerationCompensationRegister", _wrap_new_AccelerationCompensationRegister, METH_VARARGS, (char *)"\n"
		"AccelerationCompensationRegister()\n"
		"new_AccelerationCompensationRegister(mat3f cIn, vec3f bIn) -> AccelerationCompensationRegister\n"
		""},
	 { (char *)"delete_AccelerationCompensationRegister", _wrap_delete_AccelerationCompensationRegister, METH_VARARGS, (char *)"delete_AccelerationCompensationRegister(AccelerationCompensationRegister self)"},
	 { (char *)"AccelerationCompensationRegister_swigregister", AccelerationCompensationRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"YawPitchRollMagneticAccelerationAndAngularRatesRegister_yaw_pitch_roll_set", _wrap_YawPitchRollMagneticAccelerationAndAngularRatesRegister_yaw_pitch_roll_set, METH_VARARGS, (char *)"YawPitchRollMagneticAccelerationAndAngularRatesRegister_yaw_pitch_roll_set(YawPitchRollMagneticAccelerationAndAngularRatesRegister self, vec3f yawPitchRoll)"},
	 { (char *)"YawPitchRollMagneticAccelerationAndAngularRatesRegister_yaw_pitch_roll_get", _wrap_YawPitchRollMagneticAccelerationAndAngularRatesRegister_yaw_pitch_roll_get, METH_VARARGS, (char *)"YawPitchRollMagneticAccelerationAndAngularRatesRegister_yaw_pitch_roll_get(YawPitchRollMagneticAccelerationAndAngularRatesRegister self) -> vec3f"},
	 { (char *)"YawPitchRollMagneticAccelerationAndAngularRatesRegister_mag_set", _wrap_YawPitchRollMagneticAccelerationAndAngularRatesRegister_mag_set, METH_VARARGS, (char *)"YawPitchRollMagneticAccelerationAndAngularRatesRegister_mag_set(YawPitchRollMagneticAccelerationAndAngularRatesRegister self, vec3f mag)"},
	 { (char *)"YawPitchRollMagneticAccelerationAndAngularRatesRegister_mag_get", _wrap_YawPitchRollMagneticAccelerationAndAngularRatesRegister_mag_get, METH_VARARGS, (char *)"YawPitchRollMagneticAccelerationAndAngularRatesRegister_mag_get(YawPitchRollMagneticAccelerationAndAngularRatesRegister self) -> vec3f"},
	 { (char *)"YawPitchRollMagneticAccelerationAndAngularRatesRegister_accel_set", _wrap_YawPitchRollMagneticAccelerationAndAngularRatesRegister_accel_set, METH_VARARGS, (char *)"YawPitchRollMagneticAccelerationAndAngularRatesRegister_accel_set(YawPitchRollMagneticAccelerationAndAngularRatesRegister self, vec3f accel)"},
	 { (char *)"YawPitchRollMagneticAccelerationAndAngularRatesRegister_accel_get", _wrap_YawPitchRollMagneticAccelerationAndAngularRatesRegister_accel_get, METH_VARARGS, (char *)"YawPitchRollMagneticAccelerationAndAngularRatesRegister_accel_get(YawPitchRollMagneticAccelerationAndAngularRatesRegister self) -> vec3f"},
	 { (char *)"YawPitchRollMagneticAccelerationAndAngularRatesRegister_gyro_set", _wrap_YawPitchRollMagneticAccelerationAndAngularRatesRegister_gyro_set, METH_VARARGS, (char *)"YawPitchRollMagneticAccelerationAndAngularRatesRegister_gyro_set(YawPitchRollMagneticAccelerationAndAngularRatesRegister self, vec3f gyro)"},
	 { (char *)"YawPitchRollMagneticAccelerationAndAngularRatesRegister_gyro_get", _wrap_YawPitchRollMagneticAccelerationAndAngularRatesRegister_gyro_get, METH_VARARGS, (char *)"YawPitchRollMagneticAccelerationAndAngularRatesRegister_gyro_get(YawPitchRollMagneticAccelerationAndAngularRatesRegister self) -> vec3f"},
	 { (char *)"new_YawPitchRollMagneticAccelerationAndAngularRatesRegister", _wrap_new_YawPitchRollMagneticAccelerationAndAngularRatesRegister, METH_VARARGS, (char *)"\n"
		"YawPitchRollMagneticAccelerationAndAngularRatesRegister()\n"
		"new_YawPitchRollMagneticAccelerationAndAngularRatesRegister(vec3f yawPitchRollIn, vec3f magIn, vec3f accelIn, vec3f gyroIn) -> YawPitchRollMagneticAccelerationAndAngularRatesRegister\n"
		""},
	 { (char *)"delete_YawPitchRollMagneticAccelerationAndAngularRatesRegister", _wrap_delete_YawPitchRollMagneticAccelerationAndAngularRatesRegister, METH_VARARGS, (char *)"delete_YawPitchRollMagneticAccelerationAndAngularRatesRegister(YawPitchRollMagneticAccelerationAndAngularRatesRegister self)"},
	 { (char *)"YawPitchRollMagneticAccelerationAndAngularRatesRegister_swigregister", YawPitchRollMagneticAccelerationAndAngularRatesRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"CommunicationProtocolControlRegister_serial_status_set", _wrap_CommunicationProtocolControlRegister_serial_status_set, METH_VARARGS, (char *)"CommunicationProtocolControlRegister_serial_status_set(CommunicationProtocolControlRegister self, vn::protocol::uart::CountMode serialCount)"},
	 { (char *)"CommunicationProtocolControlRegister_serial_status_get", _wrap_CommunicationProtocolControlRegister_serial_status_get, METH_VARARGS, (char *)"CommunicationProtocolControlRegister_serial_status_get(CommunicationProtocolControlRegister self) -> vn::protocol::uart::CountMode"},
	 { (char *)"CommunicationProtocolControlRegister_serialStatus_set", _wrap_CommunicationProtocolControlRegister_serialStatus_set, METH_VARARGS, (char *)"CommunicationProtocolControlRegister_serialStatus_set(CommunicationProtocolControlRegister self, vn::protocol::uart::StatusMode serialStatus)"},
	 { (char *)"CommunicationProtocolControlRegister_serialStatus_get", _wrap_CommunicationProtocolControlRegister_serialStatus_get, METH_VARARGS, (char *)"CommunicationProtocolControlRegister_serialStatus_get(CommunicationProtocolControlRegister self) -> vn::protocol::uart::StatusMode"},
	 { (char *)"CommunicationProtocolControlRegister_spi_count_set", _wrap_CommunicationProtocolControlRegister_spi_count_set, METH_VARARGS, (char *)"CommunicationProtocolControlRegister_spi_count_set(CommunicationProtocolControlRegister self, vn::protocol::uart::CountMode spiCount)"},
	 { (char *)"CommunicationProtocolControlRegister_spi_count_get", _wrap_CommunicationProtocolControlRegister_spi_count_get, METH_VARARGS, (char *)"CommunicationProtocolControlRegister_spi_count_get(CommunicationProtocolControlRegister self) -> vn::protocol::uart::CountMode"},
	 { (char *)"CommunicationProtocolControlRegister_spi_status_set", _wrap_CommunicationProtocolControlRegister_spi_status_set, METH_VARARGS, (char *)"CommunicationProtocolControlRegister_spi_status_set(CommunicationProtocolControlRegister self, vn::protocol::uart::StatusMode spiStatus)"},
	 { (char *)"CommunicationProtocolControlRegister_spi_status_get", _wrap_CommunicationProtocolControlRegister_spi_status_get, METH_VARARGS, (char *)"CommunicationProtocolControlRegister_spi_status_get(CommunicationProtocolControlRegister self) -> vn::protocol::uart::StatusMode"},
	 { (char *)"CommunicationProtocolControlRegister_serial_checksum_set", _wrap_CommunicationProtocolControlRegister_serial_checksum_set, METH_VARARGS, (char *)"CommunicationProtocolControlRegister_serial_checksum_set(CommunicationProtocolControlRegister self, vn::protocol::uart::ChecksumMode serialChecksum)"},
	 { (char *)"CommunicationProtocolControlRegister_serial_checksum_get", _wrap_CommunicationProtocolControlRegister_serial_checksum_get, METH_VARARGS, (char *)"CommunicationProtocolControlRegister_serial_checksum_get(CommunicationProtocolControlRegister self) -> vn::protocol::uart::ChecksumMode"},
	 { (char *)"CommunicationProtocolControlRegister_spi_checksum_set", _wrap_CommunicationProtocolControlRegister_spi_checksum_set, METH_VARARGS, (char *)"CommunicationProtocolControlRegister_spi_checksum_set(CommunicationProtocolControlRegister self, vn::protocol::uart::ChecksumMode spiChecksum)"},
	 { (char *)"CommunicationProtocolControlRegister_spi_checksum_get", _wrap_CommunicationProtocolControlRegister_spi_checksum_get, METH_VARARGS, (char *)"CommunicationProtocolControlRegister_spi_checksum_get(CommunicationProtocolControlRegister self) -> vn::protocol::uart::ChecksumMode"},
	 { (char *)"CommunicationProtocolControlRegister_error_mode_set", _wrap_CommunicationProtocolControlRegister_error_mode_set, METH_VARARGS, (char *)"CommunicationProtocolControlRegister_error_mode_set(CommunicationProtocolControlRegister self, vn::protocol::uart::ErrorMode errorMode)"},
	 { (char *)"CommunicationProtocolControlRegister_error_mode_get", _wrap_CommunicationProtocolControlRegister_error_mode_get, METH_VARARGS, (char *)"CommunicationProtocolControlRegister_error_mode_get(CommunicationProtocolControlRegister self) -> vn::protocol::uart::ErrorMode"},
	 { (char *)"new_CommunicationProtocolControlRegister", _wrap_new_CommunicationProtocolControlRegister, METH_VARARGS, (char *)"\n"
		"CommunicationProtocolControlRegister()\n"
		"new_CommunicationProtocolControlRegister(vn::protocol::uart::CountMode serialCountIn, vn::protocol::uart::StatusMode serialStatusIn, vn::protocol::uart::CountMode spiCountIn, vn::protocol::uart::StatusMode spiStatusIn, vn::protocol::uart::ChecksumMode serialChecksumIn, vn::protocol::uart::ChecksumMode spiChecksumIn, vn::protocol::uart::ErrorMode errorModeIn) -> CommunicationProtocolControlRegister\n"
		""},
	 { (char *)"delete_CommunicationProtocolControlRegister", _wrap_delete_CommunicationProtocolControlRegister, METH_VARARGS, (char *)"delete_CommunicationProtocolControlRegister(CommunicationProtocolControlRegister self)"},
	 { (char *)"CommunicationProtocolControlRegister_swigregister", CommunicationProtocolControlRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"SynchronizationControlRegister_syncInMode_set", _wrap_SynchronizationControlRegister_syncInMode_set, METH_VARARGS, (char *)"SynchronizationControlRegister_syncInMode_set(SynchronizationControlRegister self, vn::protocol::uart::SyncInMode syncInMode)"},
	 { (char *)"SynchronizationControlRegister_syncInMode_get", _wrap_SynchronizationControlRegister_syncInMode_get, METH_VARARGS, (char *)"SynchronizationControlRegister_syncInMode_get(SynchronizationControlRegister self) -> vn::protocol::uart::SyncInMode"},
	 { (char *)"SynchronizationControlRegister_syncInEdge_set", _wrap_SynchronizationControlRegister_syncInEdge_set, METH_VARARGS, (char *)"SynchronizationControlRegister_syncInEdge_set(SynchronizationControlRegister self, vn::protocol::uart::SyncInEdge syncInEdge)"},
	 { (char *)"SynchronizationControlRegister_syncInEdge_get", _wrap_SynchronizationControlRegister_syncInEdge_get, METH_VARARGS, (char *)"SynchronizationControlRegister_syncInEdge_get(SynchronizationControlRegister self) -> vn::protocol::uart::SyncInEdge"},
	 { (char *)"SynchronizationControlRegister_syncInSkipFactor_set", _wrap_SynchronizationControlRegister_syncInSkipFactor_set, METH_VARARGS, (char *)"SynchronizationControlRegister_syncInSkipFactor_set(SynchronizationControlRegister self, uint16_t syncInSkipFactor)"},
	 { (char *)"SynchronizationControlRegister_syncInSkipFactor_get", _wrap_SynchronizationControlRegister_syncInSkipFactor_get, METH_VARARGS, (char *)"SynchronizationControlRegister_syncInSkipFactor_get(SynchronizationControlRegister self) -> uint16_t"},
	 { (char *)"SynchronizationControlRegister_syncOutMode_set", _wrap_SynchronizationControlRegister_syncOutMode_set, METH_VARARGS, (char *)"SynchronizationControlRegister_syncOutMode_set(SynchronizationControlRegister self, vn::protocol::uart::SyncOutMode syncOutMode)"},
	 { (char *)"SynchronizationControlRegister_syncOutMode_get", _wrap_SynchronizationControlRegister_syncOutMode_get, METH_VARARGS, (char *)"SynchronizationControlRegister_syncOutMode_get(SynchronizationControlRegister self) -> vn::protocol::uart::SyncOutMode"},
	 { (char *)"SynchronizationControlRegister_syncOutPolarity_set", _wrap_SynchronizationControlRegister_syncOutPolarity_set, METH_VARARGS, (char *)"SynchronizationControlRegister_syncOutPolarity_set(SynchronizationControlRegister self, vn::protocol::uart::SyncOutPolarity syncOutPolarity)"},
	 { (char *)"SynchronizationControlRegister_syncOutPolarity_get", _wrap_SynchronizationControlRegister_syncOutPolarity_get, METH_VARARGS, (char *)"SynchronizationControlRegister_syncOutPolarity_get(SynchronizationControlRegister self) -> vn::protocol::uart::SyncOutPolarity"},
	 { (char *)"SynchronizationControlRegister_syncOutSkipFactor_set", _wrap_SynchronizationControlRegister_syncOutSkipFactor_set, METH_VARARGS, (char *)"SynchronizationControlRegister_syncOutSkipFactor_set(SynchronizationControlRegister self, uint16_t syncOutSkipFactor)"},
	 { (char *)"SynchronizationControlRegister_syncOutSkipFactor_get", _wrap_SynchronizationControlRegister_syncOutSkipFactor_get, METH_VARARGS, (char *)"SynchronizationControlRegister_syncOutSkipFactor_get(SynchronizationControlRegister self) -> uint16_t"},
	 { (char *)"SynchronizationControlRegister_syncOutPulseWidth_set", _wrap_SynchronizationControlRegister_syncOutPulseWidth_set, METH_VARARGS, (char *)"SynchronizationControlRegister_syncOutPulseWidth_set(SynchronizationControlRegister self, uint32_t syncOutPulseWidth)"},
	 { (char *)"SynchronizationControlRegister_syncOutPulseWidth_get", _wrap_SynchronizationControlRegister_syncOutPulseWidth_get, METH_VARARGS, (char *)"SynchronizationControlRegister_syncOutPulseWidth_get(SynchronizationControlRegister self) -> uint32_t"},
	 { (char *)"new_SynchronizationControlRegister", _wrap_new_SynchronizationControlRegister, METH_VARARGS, (char *)"\n"
		"SynchronizationControlRegister()\n"
		"new_SynchronizationControlRegister(vn::protocol::uart::SyncInMode syncInModeIn, vn::protocol::uart::SyncInEdge syncInEdgeIn, uint16_t syncInSkipFactorIn, vn::protocol::uart::SyncOutMode syncOutModeIn, vn::protocol::uart::SyncOutPolarity syncOutPolarityIn, uint16_t syncOutSkipFactorIn, uint32_t syncOutPulseWidthIn) -> SynchronizationControlRegister\n"
		""},
	 { (char *)"delete_SynchronizationControlRegister", _wrap_delete_SynchronizationControlRegister, METH_VARARGS, (char *)"delete_SynchronizationControlRegister(SynchronizationControlRegister self)"},
	 { (char *)"SynchronizationControlRegister_swigregister", SynchronizationControlRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"SynchronizationStatusRegister_sync_in_count_set", _wrap_SynchronizationStatusRegister_sync_in_count_set, METH_VARARGS, (char *)"SynchronizationStatusRegister_sync_in_count_set(SynchronizationStatusRegister self, uint32_t syncInCount)"},
	 { (char *)"SynchronizationStatusRegister_sync_in_count_get", _wrap_SynchronizationStatusRegister_sync_in_count_get, METH_VARARGS, (char *)"SynchronizationStatusRegister_sync_in_count_get(SynchronizationStatusRegister self) -> uint32_t"},
	 { (char *)"SynchronizationStatusRegister_sync_in_time_set", _wrap_SynchronizationStatusRegister_sync_in_time_set, METH_VARARGS, (char *)"SynchronizationStatusRegister_sync_in_time_set(SynchronizationStatusRegister self, uint32_t syncInTime)"},
	 { (char *)"SynchronizationStatusRegister_sync_in_time_get", _wrap_SynchronizationStatusRegister_sync_in_time_get, METH_VARARGS, (char *)"SynchronizationStatusRegister_sync_in_time_get(SynchronizationStatusRegister self) -> uint32_t"},
	 { (char *)"SynchronizationStatusRegister_sync_out_count_set", _wrap_SynchronizationStatusRegister_sync_out_count_set, METH_VARARGS, (char *)"SynchronizationStatusRegister_sync_out_count_set(SynchronizationStatusRegister self, uint32_t syncOutCount)"},
	 { (char *)"SynchronizationStatusRegister_sync_out_count_get", _wrap_SynchronizationStatusRegister_sync_out_count_get, METH_VARARGS, (char *)"SynchronizationStatusRegister_sync_out_count_get(SynchronizationStatusRegister self) -> uint32_t"},
	 { (char *)"new_SynchronizationStatusRegister", _wrap_new_SynchronizationStatusRegister, METH_VARARGS, (char *)"\n"
		"SynchronizationStatusRegister()\n"
		"new_SynchronizationStatusRegister(uint32_t syncInCountIn, uint32_t syncInTimeIn, uint32_t syncOutCountIn) -> SynchronizationStatusRegister\n"
		""},
	 { (char *)"delete_SynchronizationStatusRegister", _wrap_delete_SynchronizationStatusRegister, METH_VARARGS, (char *)"delete_SynchronizationStatusRegister(SynchronizationStatusRegister self)"},
	 { (char *)"SynchronizationStatusRegister_swigregister", SynchronizationStatusRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"FilterBasicControlRegister_mag_mode_set", _wrap_FilterBasicControlRegister_mag_mode_set, METH_VARARGS, (char *)"FilterBasicControlRegister_mag_mode_set(FilterBasicControlRegister self, vn::protocol::uart::MagneticMode magMode)"},
	 { (char *)"FilterBasicControlRegister_mag_mode_get", _wrap_FilterBasicControlRegister_mag_mode_get, METH_VARARGS, (char *)"FilterBasicControlRegister_mag_mode_get(FilterBasicControlRegister self) -> vn::protocol::uart::MagneticMode"},
	 { (char *)"FilterBasicControlRegister_ext_mag_mode_set", _wrap_FilterBasicControlRegister_ext_mag_mode_set, METH_VARARGS, (char *)"FilterBasicControlRegister_ext_mag_mode_set(FilterBasicControlRegister self, vn::protocol::uart::ExternalSensorMode extMagMode)"},
	 { (char *)"FilterBasicControlRegister_ext_mag_mode_get", _wrap_FilterBasicControlRegister_ext_mag_mode_get, METH_VARARGS, (char *)"FilterBasicControlRegister_ext_mag_mode_get(FilterBasicControlRegister self) -> vn::protocol::uart::ExternalSensorMode"},
	 { (char *)"FilterBasicControlRegister_ext_acc_mode_set", _wrap_FilterBasicControlRegister_ext_acc_mode_set, METH_VARARGS, (char *)"FilterBasicControlRegister_ext_acc_mode_set(FilterBasicControlRegister self, vn::protocol::uart::ExternalSensorMode extAccMode)"},
	 { (char *)"FilterBasicControlRegister_ext_acc_mode_get", _wrap_FilterBasicControlRegister_ext_acc_mode_get, METH_VARARGS, (char *)"FilterBasicControlRegister_ext_acc_mode_get(FilterBasicControlRegister self) -> vn::protocol::uart::ExternalSensorMode"},
	 { (char *)"FilterBasicControlRegister_ext_gyro_mode_set", _wrap_FilterBasicControlRegister_ext_gyro_mode_set, METH_VARARGS, (char *)"FilterBasicControlRegister_ext_gyro_mode_set(FilterBasicControlRegister self, vn::protocol::uart::ExternalSensorMode extGyroMode)"},
	 { (char *)"FilterBasicControlRegister_ext_gyro_mode_get", _wrap_FilterBasicControlRegister_ext_gyro_mode_get, METH_VARARGS, (char *)"FilterBasicControlRegister_ext_gyro_mode_get(FilterBasicControlRegister self) -> vn::protocol::uart::ExternalSensorMode"},
	 { (char *)"FilterBasicControlRegister_gyro_limit_set", _wrap_FilterBasicControlRegister_gyro_limit_set, METH_VARARGS, (char *)"FilterBasicControlRegister_gyro_limit_set(FilterBasicControlRegister self, vec3f gyroLimit)"},
	 { (char *)"FilterBasicControlRegister_gyro_limit_get", _wrap_FilterBasicControlRegister_gyro_limit_get, METH_VARARGS, (char *)"FilterBasicControlRegister_gyro_limit_get(FilterBasicControlRegister self) -> vec3f"},
	 { (char *)"new_FilterBasicControlRegister", _wrap_new_FilterBasicControlRegister, METH_VARARGS, (char *)"\n"
		"FilterBasicControlRegister()\n"
		"new_FilterBasicControlRegister(vn::protocol::uart::MagneticMode magModeIn, vn::protocol::uart::ExternalSensorMode extMagModeIn, vn::protocol::uart::ExternalSensorMode extAccModeIn, vn::protocol::uart::ExternalSensorMode extGyroModeIn, vec3f gyroLimitIn) -> FilterBasicControlRegister\n"
		""},
	 { (char *)"delete_FilterBasicControlRegister", _wrap_delete_FilterBasicControlRegister, METH_VARARGS, (char *)"delete_FilterBasicControlRegister(FilterBasicControlRegister self)"},
	 { (char *)"FilterBasicControlRegister_swigregister", FilterBasicControlRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"VpeBasicControlRegister_enable_set", _wrap_VpeBasicControlRegister_enable_set, METH_VARARGS, (char *)"VpeBasicControlRegister_enable_set(VpeBasicControlRegister self, vn::protocol::uart::VpeEnable enable)"},
	 { (char *)"VpeBasicControlRegister_enable_get", _wrap_VpeBasicControlRegister_enable_get, METH_VARARGS, (char *)"VpeBasicControlRegister_enable_get(VpeBasicControlRegister self) -> vn::protocol::uart::VpeEnable"},
	 { (char *)"VpeBasicControlRegister_heading_mode_set", _wrap_VpeBasicControlRegister_heading_mode_set, METH_VARARGS, (char *)"VpeBasicControlRegister_heading_mode_set(VpeBasicControlRegister self, vn::protocol::uart::HeadingMode headingMode)"},
	 { (char *)"VpeBasicControlRegister_heading_mode_get", _wrap_VpeBasicControlRegister_heading_mode_get, METH_VARARGS, (char *)"VpeBasicControlRegister_heading_mode_get(VpeBasicControlRegister self) -> vn::protocol::uart::HeadingMode"},
	 { (char *)"VpeBasicControlRegister_filtering_mode_set", _wrap_VpeBasicControlRegister_filtering_mode_set, METH_VARARGS, (char *)"VpeBasicControlRegister_filtering_mode_set(VpeBasicControlRegister self, vn::protocol::uart::VpeMode filteringMode)"},
	 { (char *)"VpeBasicControlRegister_filtering_mode_get", _wrap_VpeBasicControlRegister_filtering_mode_get, METH_VARARGS, (char *)"VpeBasicControlRegister_filtering_mode_get(VpeBasicControlRegister self) -> vn::protocol::uart::VpeMode"},
	 { (char *)"VpeBasicControlRegister_tuning_mode_set", _wrap_VpeBasicControlRegister_tuning_mode_set, METH_VARARGS, (char *)"VpeBasicControlRegister_tuning_mode_set(VpeBasicControlRegister self, vn::protocol::uart::VpeMode tuningMode)"},
	 { (char *)"VpeBasicControlRegister_tuning_mode_get", _wrap_VpeBasicControlRegister_tuning_mode_get, METH_VARARGS, (char *)"VpeBasicControlRegister_tuning_mode_get(VpeBasicControlRegister self) -> vn::protocol::uart::VpeMode"},
	 { (char *)"new_VpeBasicControlRegister", _wrap_new_VpeBasicControlRegister, METH_VARARGS, (char *)"\n"
		"VpeBasicControlRegister()\n"
		"new_VpeBasicControlRegister(vn::protocol::uart::VpeEnable enableIn, vn::protocol::uart::HeadingMode headingModeIn, vn::protocol::uart::VpeMode filteringModeIn, vn::protocol::uart::VpeMode tuningModeIn) -> VpeBasicControlRegister\n"
		""},
	 { (char *)"delete_VpeBasicControlRegister", _wrap_delete_VpeBasicControlRegister, METH_VARARGS, (char *)"delete_VpeBasicControlRegister(VpeBasicControlRegister self)"},
	 { (char *)"VpeBasicControlRegister_swigregister", VpeBasicControlRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"VpeMagnetometerBasicTuningRegister_base_tuning_set", _wrap_VpeMagnetometerBasicTuningRegister_base_tuning_set, METH_VARARGS, (char *)"VpeMagnetometerBasicTuningRegister_base_tuning_set(VpeMagnetometerBasicTuningRegister self, vec3f baseTuning)"},
	 { (char *)"VpeMagnetometerBasicTuningRegister_base_tuning_get", _wrap_VpeMagnetometerBasicTuningRegister_base_tuning_get, METH_VARARGS, (char *)"VpeMagnetometerBasicTuningRegister_base_tuning_get(VpeMagnetometerBasicTuningRegister self) -> vec3f"},
	 { (char *)"VpeMagnetometerBasicTuningRegister_adaptive_tuning_set", _wrap_VpeMagnetometerBasicTuningRegister_adaptive_tuning_set, METH_VARARGS, (char *)"VpeMagnetometerBasicTuningRegister_adaptive_tuning_set(VpeMagnetometerBasicTuningRegister self, vec3f adaptiveTuning)"},
	 { (char *)"VpeMagnetometerBasicTuningRegister_adaptive_tuning_get", _wrap_VpeMagnetometerBasicTuningRegister_adaptive_tuning_get, METH_VARARGS, (char *)"VpeMagnetometerBasicTuningRegister_adaptive_tuning_get(VpeMagnetometerBasicTuningRegister self) -> vec3f"},
	 { (char *)"VpeMagnetometerBasicTuningRegister_adaptive_filtering_set", _wrap_VpeMagnetometerBasicTuningRegister_adaptive_filtering_set, METH_VARARGS, (char *)"VpeMagnetometerBasicTuningRegister_adaptive_filtering_set(VpeMagnetometerBasicTuningRegister self, vec3f adaptiveFiltering)"},
	 { (char *)"VpeMagnetometerBasicTuningRegister_adaptive_filtering_get", _wrap_VpeMagnetometerBasicTuningRegister_adaptive_filtering_get, METH_VARARGS, (char *)"VpeMagnetometerBasicTuningRegister_adaptive_filtering_get(VpeMagnetometerBasicTuningRegister self) -> vec3f"},
	 { (char *)"new_VpeMagnetometerBasicTuningRegister", _wrap_new_VpeMagnetometerBasicTuningRegister, METH_VARARGS, (char *)"\n"
		"VpeMagnetometerBasicTuningRegister()\n"
		"new_VpeMagnetometerBasicTuningRegister(vec3f baseTuningIn, vec3f adaptiveTuningIn, vec3f adaptiveFilteringIn) -> VpeMagnetometerBasicTuningRegister\n"
		""},
	 { (char *)"delete_VpeMagnetometerBasicTuningRegister", _wrap_delete_VpeMagnetometerBasicTuningRegister, METH_VARARGS, (char *)"delete_VpeMagnetometerBasicTuningRegister(VpeMagnetometerBasicTuningRegister self)"},
	 { (char *)"VpeMagnetometerBasicTuningRegister_swigregister", VpeMagnetometerBasicTuningRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"VpeMagnetometerAdvancedTuningRegister_min_filtering_set", _wrap_VpeMagnetometerAdvancedTuningRegister_min_filtering_set, METH_VARARGS, (char *)"VpeMagnetometerAdvancedTuningRegister_min_filtering_set(VpeMagnetometerAdvancedTuningRegister self, vec3f minFiltering)"},
	 { (char *)"VpeMagnetometerAdvancedTuningRegister_min_filtering_get", _wrap_VpeMagnetometerAdvancedTuningRegister_min_filtering_get, METH_VARARGS, (char *)"VpeMagnetometerAdvancedTuningRegister_min_filtering_get(VpeMagnetometerAdvancedTuningRegister self) -> vec3f"},
	 { (char *)"VpeMagnetometerAdvancedTuningRegister_max_filtering_set", _wrap_VpeMagnetometerAdvancedTuningRegister_max_filtering_set, METH_VARARGS, (char *)"VpeMagnetometerAdvancedTuningRegister_max_filtering_set(VpeMagnetometerAdvancedTuningRegister self, vec3f maxFiltering)"},
	 { (char *)"VpeMagnetometerAdvancedTuningRegister_max_filtering_get", _wrap_VpeMagnetometerAdvancedTuningRegister_max_filtering_get, METH_VARARGS, (char *)"VpeMagnetometerAdvancedTuningRegister_max_filtering_get(VpeMagnetometerAdvancedTuningRegister self) -> vec3f"},
	 { (char *)"VpeMagnetometerAdvancedTuningRegister_max_adapt_rate_set", _wrap_VpeMagnetometerAdvancedTuningRegister_max_adapt_rate_set, METH_VARARGS, (char *)"VpeMagnetometerAdvancedTuningRegister_max_adapt_rate_set(VpeMagnetometerAdvancedTuningRegister self, float maxAdaptRate)"},
	 { (char *)"VpeMagnetometerAdvancedTuningRegister_max_adapt_rate_get", _wrap_VpeMagnetometerAdvancedTuningRegister_max_adapt_rate_get, METH_VARARGS, (char *)"VpeMagnetometerAdvancedTuningRegister_max_adapt_rate_get(VpeMagnetometerAdvancedTuningRegister self) -> float"},
	 { (char *)"VpeMagnetometerAdvancedTuningRegister_disturbance_window_set", _wrap_VpeMagnetometerAdvancedTuningRegister_disturbance_window_set, METH_VARARGS, (char *)"VpeMagnetometerAdvancedTuningRegister_disturbance_window_set(VpeMagnetometerAdvancedTuningRegister self, float disturbanceWindow)"},
	 { (char *)"VpeMagnetometerAdvancedTuningRegister_disturbance_window_get", _wrap_VpeMagnetometerAdvancedTuningRegister_disturbance_window_get, METH_VARARGS, (char *)"VpeMagnetometerAdvancedTuningRegister_disturbance_window_get(VpeMagnetometerAdvancedTuningRegister self) -> float"},
	 { (char *)"VpeMagnetometerAdvancedTuningRegister_max_tuning_set", _wrap_VpeMagnetometerAdvancedTuningRegister_max_tuning_set, METH_VARARGS, (char *)"VpeMagnetometerAdvancedTuningRegister_max_tuning_set(VpeMagnetometerAdvancedTuningRegister self, float maxTuning)"},
	 { (char *)"VpeMagnetometerAdvancedTuningRegister_max_tuning_get", _wrap_VpeMagnetometerAdvancedTuningRegister_max_tuning_get, METH_VARARGS, (char *)"VpeMagnetometerAdvancedTuningRegister_max_tuning_get(VpeMagnetometerAdvancedTuningRegister self) -> float"},
	 { (char *)"new_VpeMagnetometerAdvancedTuningRegister", _wrap_new_VpeMagnetometerAdvancedTuningRegister, METH_VARARGS, (char *)"\n"
		"VpeMagnetometerAdvancedTuningRegister()\n"
		"new_VpeMagnetometerAdvancedTuningRegister(vec3f minFilteringIn, vec3f maxFilteringIn, float maxAdaptRateIn, float disturbanceWindowIn, float maxTuningIn) -> VpeMagnetometerAdvancedTuningRegister\n"
		""},
	 { (char *)"delete_VpeMagnetometerAdvancedTuningRegister", _wrap_delete_VpeMagnetometerAdvancedTuningRegister, METH_VARARGS, (char *)"delete_VpeMagnetometerAdvancedTuningRegister(VpeMagnetometerAdvancedTuningRegister self)"},
	 { (char *)"VpeMagnetometerAdvancedTuningRegister_swigregister", VpeMagnetometerAdvancedTuningRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"VpeAccelerometerBasicTuningRegister_base_tuning_set", _wrap_VpeAccelerometerBasicTuningRegister_base_tuning_set, METH_VARARGS, (char *)"VpeAccelerometerBasicTuningRegister_base_tuning_set(VpeAccelerometerBasicTuningRegister self, vec3f baseTuning)"},
	 { (char *)"VpeAccelerometerBasicTuningRegister_base_tuning_get", _wrap_VpeAccelerometerBasicTuningRegister_base_tuning_get, METH_VARARGS, (char *)"VpeAccelerometerBasicTuningRegister_base_tuning_get(VpeAccelerometerBasicTuningRegister self) -> vec3f"},
	 { (char *)"VpeAccelerometerBasicTuningRegister_adaptive_tuning_set", _wrap_VpeAccelerometerBasicTuningRegister_adaptive_tuning_set, METH_VARARGS, (char *)"VpeAccelerometerBasicTuningRegister_adaptive_tuning_set(VpeAccelerometerBasicTuningRegister self, vec3f adaptiveTuning)"},
	 { (char *)"VpeAccelerometerBasicTuningRegister_adaptive_tuning_get", _wrap_VpeAccelerometerBasicTuningRegister_adaptive_tuning_get, METH_VARARGS, (char *)"VpeAccelerometerBasicTuningRegister_adaptive_tuning_get(VpeAccelerometerBasicTuningRegister self) -> vec3f"},
	 { (char *)"VpeAccelerometerBasicTuningRegister_adaptive_filtering_set", _wrap_VpeAccelerometerBasicTuningRegister_adaptive_filtering_set, METH_VARARGS, (char *)"VpeAccelerometerBasicTuningRegister_adaptive_filtering_set(VpeAccelerometerBasicTuningRegister self, vec3f adaptiveFiltering)"},
	 { (char *)"VpeAccelerometerBasicTuningRegister_adaptive_filtering_get", _wrap_VpeAccelerometerBasicTuningRegister_adaptive_filtering_get, METH_VARARGS, (char *)"VpeAccelerometerBasicTuningRegister_adaptive_filtering_get(VpeAccelerometerBasicTuningRegister self) -> vec3f"},
	 { (char *)"new_VpeAccelerometerBasicTuningRegister", _wrap_new_VpeAccelerometerBasicTuningRegister, METH_VARARGS, (char *)"\n"
		"VpeAccelerometerBasicTuningRegister()\n"
		"new_VpeAccelerometerBasicTuningRegister(vec3f baseTuningIn, vec3f adaptiveTuningIn, vec3f adaptiveFilteringIn) -> VpeAccelerometerBasicTuningRegister\n"
		""},
	 { (char *)"delete_VpeAccelerometerBasicTuningRegister", _wrap_delete_VpeAccelerometerBasicTuningRegister, METH_VARARGS, (char *)"delete_VpeAccelerometerBasicTuningRegister(VpeAccelerometerBasicTuningRegister self)"},
	 { (char *)"VpeAccelerometerBasicTuningRegister_swigregister", VpeAccelerometerBasicTuningRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"VpeAccelerometerAdvancedTuningRegister_min_filtering_set", _wrap_VpeAccelerometerAdvancedTuningRegister_min_filtering_set, METH_VARARGS, (char *)"VpeAccelerometerAdvancedTuningRegister_min_filtering_set(VpeAccelerometerAdvancedTuningRegister self, vec3f minFiltering)"},
	 { (char *)"VpeAccelerometerAdvancedTuningRegister_min_filtering_get", _wrap_VpeAccelerometerAdvancedTuningRegister_min_filtering_get, METH_VARARGS, (char *)"VpeAccelerometerAdvancedTuningRegister_min_filtering_get(VpeAccelerometerAdvancedTuningRegister self) -> vec3f"},
	 { (char *)"VpeAccelerometerAdvancedTuningRegister_max_filtering_set", _wrap_VpeAccelerometerAdvancedTuningRegister_max_filtering_set, METH_VARARGS, (char *)"VpeAccelerometerAdvancedTuningRegister_max_filtering_set(VpeAccelerometerAdvancedTuningRegister self, vec3f maxFiltering)"},
	 { (char *)"VpeAccelerometerAdvancedTuningRegister_max_filtering_get", _wrap_VpeAccelerometerAdvancedTuningRegister_max_filtering_get, METH_VARARGS, (char *)"VpeAccelerometerAdvancedTuningRegister_max_filtering_get(VpeAccelerometerAdvancedTuningRegister self) -> vec3f"},
	 { (char *)"VpeAccelerometerAdvancedTuningRegister_max_adapt_rate_set", _wrap_VpeAccelerometerAdvancedTuningRegister_max_adapt_rate_set, METH_VARARGS, (char *)"VpeAccelerometerAdvancedTuningRegister_max_adapt_rate_set(VpeAccelerometerAdvancedTuningRegister self, float maxAdaptRate)"},
	 { (char *)"VpeAccelerometerAdvancedTuningRegister_max_adapt_rate_get", _wrap_VpeAccelerometerAdvancedTuningRegister_max_adapt_rate_get, METH_VARARGS, (char *)"VpeAccelerometerAdvancedTuningRegister_max_adapt_rate_get(VpeAccelerometerAdvancedTuningRegister self) -> float"},
	 { (char *)"VpeAccelerometerAdvancedTuningRegister_disturbance_window_set", _wrap_VpeAccelerometerAdvancedTuningRegister_disturbance_window_set, METH_VARARGS, (char *)"VpeAccelerometerAdvancedTuningRegister_disturbance_window_set(VpeAccelerometerAdvancedTuningRegister self, float disturbanceWindow)"},
	 { (char *)"VpeAccelerometerAdvancedTuningRegister_disturbance_window_get", _wrap_VpeAccelerometerAdvancedTuningRegister_disturbance_window_get, METH_VARARGS, (char *)"VpeAccelerometerAdvancedTuningRegister_disturbance_window_get(VpeAccelerometerAdvancedTuningRegister self) -> float"},
	 { (char *)"VpeAccelerometerAdvancedTuningRegister_max_tuning_set", _wrap_VpeAccelerometerAdvancedTuningRegister_max_tuning_set, METH_VARARGS, (char *)"VpeAccelerometerAdvancedTuningRegister_max_tuning_set(VpeAccelerometerAdvancedTuningRegister self, float maxTuning)"},
	 { (char *)"VpeAccelerometerAdvancedTuningRegister_max_tuning_get", _wrap_VpeAccelerometerAdvancedTuningRegister_max_tuning_get, METH_VARARGS, (char *)"VpeAccelerometerAdvancedTuningRegister_max_tuning_get(VpeAccelerometerAdvancedTuningRegister self) -> float"},
	 { (char *)"new_VpeAccelerometerAdvancedTuningRegister", _wrap_new_VpeAccelerometerAdvancedTuningRegister, METH_VARARGS, (char *)"\n"
		"VpeAccelerometerAdvancedTuningRegister()\n"
		"new_VpeAccelerometerAdvancedTuningRegister(vec3f minFilteringIn, vec3f maxFilteringIn, float maxAdaptRateIn, float disturbanceWindowIn, float maxTuningIn) -> VpeAccelerometerAdvancedTuningRegister\n"
		""},
	 { (char *)"delete_VpeAccelerometerAdvancedTuningRegister", _wrap_delete_VpeAccelerometerAdvancedTuningRegister, METH_VARARGS, (char *)"delete_VpeAccelerometerAdvancedTuningRegister(VpeAccelerometerAdvancedTuningRegister self)"},
	 { (char *)"VpeAccelerometerAdvancedTuningRegister_swigregister", VpeAccelerometerAdvancedTuningRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"VpeGyroBasicTuningRegister_angularWalkVariance_set", _wrap_VpeGyroBasicTuningRegister_angularWalkVariance_set, METH_VARARGS, (char *)"VpeGyroBasicTuningRegister_angularWalkVariance_set(VpeGyroBasicTuningRegister self, vec3f angularWalkVariance)"},
	 { (char *)"VpeGyroBasicTuningRegister_angularWalkVariance_get", _wrap_VpeGyroBasicTuningRegister_angularWalkVariance_get, METH_VARARGS, (char *)"VpeGyroBasicTuningRegister_angularWalkVariance_get(VpeGyroBasicTuningRegister self) -> vec3f"},
	 { (char *)"VpeGyroBasicTuningRegister_baseTuning_set", _wrap_VpeGyroBasicTuningRegister_baseTuning_set, METH_VARARGS, (char *)"VpeGyroBasicTuningRegister_baseTuning_set(VpeGyroBasicTuningRegister self, vec3f baseTuning)"},
	 { (char *)"VpeGyroBasicTuningRegister_baseTuning_get", _wrap_VpeGyroBasicTuningRegister_baseTuning_get, METH_VARARGS, (char *)"VpeGyroBasicTuningRegister_baseTuning_get(VpeGyroBasicTuningRegister self) -> vec3f"},
	 { (char *)"VpeGyroBasicTuningRegister_adaptiveTuning_set", _wrap_VpeGyroBasicTuningRegister_adaptiveTuning_set, METH_VARARGS, (char *)"VpeGyroBasicTuningRegister_adaptiveTuning_set(VpeGyroBasicTuningRegister self, vec3f adaptiveTuning)"},
	 { (char *)"VpeGyroBasicTuningRegister_adaptiveTuning_get", _wrap_VpeGyroBasicTuningRegister_adaptiveTuning_get, METH_VARARGS, (char *)"VpeGyroBasicTuningRegister_adaptiveTuning_get(VpeGyroBasicTuningRegister self) -> vec3f"},
	 { (char *)"new_VpeGyroBasicTuningRegister", _wrap_new_VpeGyroBasicTuningRegister, METH_VARARGS, (char *)"\n"
		"VpeGyroBasicTuningRegister()\n"
		"new_VpeGyroBasicTuningRegister(vec3f angularWalkVarianceIn, vec3f baseTuningIn, vec3f adaptiveTuningIn) -> VpeGyroBasicTuningRegister\n"
		""},
	 { (char *)"delete_VpeGyroBasicTuningRegister", _wrap_delete_VpeGyroBasicTuningRegister, METH_VARARGS, (char *)"delete_VpeGyroBasicTuningRegister(VpeGyroBasicTuningRegister self)"},
	 { (char *)"VpeGyroBasicTuningRegister_swigregister", VpeGyroBasicTuningRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"MagnetometerCalibrationControlRegister_hsi_mode_set", _wrap_MagnetometerCalibrationControlRegister_hsi_mode_set, METH_VARARGS, (char *)"MagnetometerCalibrationControlRegister_hsi_mode_set(MagnetometerCalibrationControlRegister self, vn::protocol::uart::HsiMode hsiMode)"},
	 { (char *)"MagnetometerCalibrationControlRegister_hsi_mode_get", _wrap_MagnetometerCalibrationControlRegister_hsi_mode_get, METH_VARARGS, (char *)"MagnetometerCalibrationControlRegister_hsi_mode_get(MagnetometerCalibrationControlRegister self) -> vn::protocol::uart::HsiMode"},
	 { (char *)"MagnetometerCalibrationControlRegister_hsi_output_set", _wrap_MagnetometerCalibrationControlRegister_hsi_output_set, METH_VARARGS, (char *)"MagnetometerCalibrationControlRegister_hsi_output_set(MagnetometerCalibrationControlRegister self, vn::protocol::uart::HsiOutput hsiOutput)"},
	 { (char *)"MagnetometerCalibrationControlRegister_hsi_output_get", _wrap_MagnetometerCalibrationControlRegister_hsi_output_get, METH_VARARGS, (char *)"MagnetometerCalibrationControlRegister_hsi_output_get(MagnetometerCalibrationControlRegister self) -> vn::protocol::uart::HsiOutput"},
	 { (char *)"MagnetometerCalibrationControlRegister_converge_rate_set", _wrap_MagnetometerCalibrationControlRegister_converge_rate_set, METH_VARARGS, (char *)"MagnetometerCalibrationControlRegister_converge_rate_set(MagnetometerCalibrationControlRegister self, uint8_t convergeRate)"},
	 { (char *)"MagnetometerCalibrationControlRegister_converge_rate_get", _wrap_MagnetometerCalibrationControlRegister_converge_rate_get, METH_VARARGS, (char *)"MagnetometerCalibrationControlRegister_converge_rate_get(MagnetometerCalibrationControlRegister self) -> uint8_t"},
	 { (char *)"new_MagnetometerCalibrationControlRegister", _wrap_new_MagnetometerCalibrationControlRegister, METH_VARARGS, (char *)"\n"
		"MagnetometerCalibrationControlRegister()\n"
		"new_MagnetometerCalibrationControlRegister(vn::protocol::uart::HsiMode hsiModeIn, vn::protocol::uart::HsiOutput hsiOutputIn, uint8_t convergeRateIn) -> MagnetometerCalibrationControlRegister\n"
		""},
	 { (char *)"delete_MagnetometerCalibrationControlRegister", _wrap_delete_MagnetometerCalibrationControlRegister, METH_VARARGS, (char *)"delete_MagnetometerCalibrationControlRegister(MagnetometerCalibrationControlRegister self)"},
	 { (char *)"MagnetometerCalibrationControlRegister_swigregister", MagnetometerCalibrationControlRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"CalculatedMagnetometerCalibrationRegister_c_set", _wrap_CalculatedMagnetometerCalibrationRegister_c_set, METH_VARARGS, (char *)"CalculatedMagnetometerCalibrationRegister_c_set(CalculatedMagnetometerCalibrationRegister self, mat3f c)"},
	 { (char *)"CalculatedMagnetometerCalibrationRegister_c_get", _wrap_CalculatedMagnetometerCalibrationRegister_c_get, METH_VARARGS, (char *)"CalculatedMagnetometerCalibrationRegister_c_get(CalculatedMagnetometerCalibrationRegister self) -> mat3f"},
	 { (char *)"CalculatedMagnetometerCalibrationRegister_b_set", _wrap_CalculatedMagnetometerCalibrationRegister_b_set, METH_VARARGS, (char *)"CalculatedMagnetometerCalibrationRegister_b_set(CalculatedMagnetometerCalibrationRegister self, vec3f b)"},
	 { (char *)"CalculatedMagnetometerCalibrationRegister_b_get", _wrap_CalculatedMagnetometerCalibrationRegister_b_get, METH_VARARGS, (char *)"CalculatedMagnetometerCalibrationRegister_b_get(CalculatedMagnetometerCalibrationRegister self) -> vec3f"},
	 { (char *)"new_CalculatedMagnetometerCalibrationRegister", _wrap_new_CalculatedMagnetometerCalibrationRegister, METH_VARARGS, (char *)"\n"
		"CalculatedMagnetometerCalibrationRegister()\n"
		"new_CalculatedMagnetometerCalibrationRegister(mat3f cIn, vec3f bIn) -> CalculatedMagnetometerCalibrationRegister\n"
		""},
	 { (char *)"delete_CalculatedMagnetometerCalibrationRegister", _wrap_delete_CalculatedMagnetometerCalibrationRegister, METH_VARARGS, (char *)"delete_CalculatedMagnetometerCalibrationRegister(CalculatedMagnetometerCalibrationRegister self)"},
	 { (char *)"CalculatedMagnetometerCalibrationRegister_swigregister", CalculatedMagnetometerCalibrationRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"VelocityCompensationControlRegister_mode_set", _wrap_VelocityCompensationControlRegister_mode_set, METH_VARARGS, (char *)"VelocityCompensationControlRegister_mode_set(VelocityCompensationControlRegister self, vn::protocol::uart::VelocityCompensationMode mode)"},
	 { (char *)"VelocityCompensationControlRegister_mode_get", _wrap_VelocityCompensationControlRegister_mode_get, METH_VARARGS, (char *)"VelocityCompensationControlRegister_mode_get(VelocityCompensationControlRegister self) -> vn::protocol::uart::VelocityCompensationMode"},
	 { (char *)"VelocityCompensationControlRegister_velocity_tuning_set", _wrap_VelocityCompensationControlRegister_velocity_tuning_set, METH_VARARGS, (char *)"VelocityCompensationControlRegister_velocity_tuning_set(VelocityCompensationControlRegister self, float velocityTuning)"},
	 { (char *)"VelocityCompensationControlRegister_velocity_tuning_get", _wrap_VelocityCompensationControlRegister_velocity_tuning_get, METH_VARARGS, (char *)"VelocityCompensationControlRegister_velocity_tuning_get(VelocityCompensationControlRegister self) -> float"},
	 { (char *)"VelocityCompensationControlRegister_rate_tuning_set", _wrap_VelocityCompensationControlRegister_rate_tuning_set, METH_VARARGS, (char *)"VelocityCompensationControlRegister_rate_tuning_set(VelocityCompensationControlRegister self, float rateTuning)"},
	 { (char *)"VelocityCompensationControlRegister_rate_tuning_get", _wrap_VelocityCompensationControlRegister_rate_tuning_get, METH_VARARGS, (char *)"VelocityCompensationControlRegister_rate_tuning_get(VelocityCompensationControlRegister self) -> float"},
	 { (char *)"new_VelocityCompensationControlRegister", _wrap_new_VelocityCompensationControlRegister, METH_VARARGS, (char *)"\n"
		"VelocityCompensationControlRegister()\n"
		"new_VelocityCompensationControlRegister(vn::protocol::uart::VelocityCompensationMode modeIn, float velocityTuningIn, float rateTuningIn) -> VelocityCompensationControlRegister\n"
		""},
	 { (char *)"delete_VelocityCompensationControlRegister", _wrap_delete_VelocityCompensationControlRegister, METH_VARARGS, (char *)"delete_VelocityCompensationControlRegister(VelocityCompensationControlRegister self)"},
	 { (char *)"VelocityCompensationControlRegister_swigregister", VelocityCompensationControlRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"VelocityCompensationStatusRegister_x_set", _wrap_VelocityCompensationStatusRegister_x_set, METH_VARARGS, (char *)"VelocityCompensationStatusRegister_x_set(VelocityCompensationStatusRegister self, float x)"},
	 { (char *)"VelocityCompensationStatusRegister_x_get", _wrap_VelocityCompensationStatusRegister_x_get, METH_VARARGS, (char *)"VelocityCompensationStatusRegister_x_get(VelocityCompensationStatusRegister self) -> float"},
	 { (char *)"VelocityCompensationStatusRegister_x_dot_set", _wrap_VelocityCompensationStatusRegister_x_dot_set, METH_VARARGS, (char *)"VelocityCompensationStatusRegister_x_dot_set(VelocityCompensationStatusRegister self, float xDot)"},
	 { (char *)"VelocityCompensationStatusRegister_x_dot_get", _wrap_VelocityCompensationStatusRegister_x_dot_get, METH_VARARGS, (char *)"VelocityCompensationStatusRegister_x_dot_get(VelocityCompensationStatusRegister self) -> float"},
	 { (char *)"VelocityCompensationStatusRegister_accel_offset_set", _wrap_VelocityCompensationStatusRegister_accel_offset_set, METH_VARARGS, (char *)"VelocityCompensationStatusRegister_accel_offset_set(VelocityCompensationStatusRegister self, vec3f accelOffset)"},
	 { (char *)"VelocityCompensationStatusRegister_accel_offset_get", _wrap_VelocityCompensationStatusRegister_accel_offset_get, METH_VARARGS, (char *)"VelocityCompensationStatusRegister_accel_offset_get(VelocityCompensationStatusRegister self) -> vec3f"},
	 { (char *)"VelocityCompensationStatusRegister_omega_set", _wrap_VelocityCompensationStatusRegister_omega_set, METH_VARARGS, (char *)"VelocityCompensationStatusRegister_omega_set(VelocityCompensationStatusRegister self, vec3f omega)"},
	 { (char *)"VelocityCompensationStatusRegister_omega_get", _wrap_VelocityCompensationStatusRegister_omega_get, METH_VARARGS, (char *)"VelocityCompensationStatusRegister_omega_get(VelocityCompensationStatusRegister self) -> vec3f"},
	 { (char *)"new_VelocityCompensationStatusRegister", _wrap_new_VelocityCompensationStatusRegister, METH_VARARGS, (char *)"\n"
		"VelocityCompensationStatusRegister()\n"
		"new_VelocityCompensationStatusRegister(float xIn, float xDotIn, vec3f accelOffsetIn, vec3f omegaIn) -> VelocityCompensationStatusRegister\n"
		""},
	 { (char *)"delete_VelocityCompensationStatusRegister", _wrap_delete_VelocityCompensationStatusRegister, METH_VARARGS, (char *)"delete_VelocityCompensationStatusRegister(VelocityCompensationStatusRegister self)"},
	 { (char *)"VelocityCompensationStatusRegister_swigregister", VelocityCompensationStatusRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"ImuMeasurementsRegister_mag_set", _wrap_ImuMeasurementsRegister_mag_set, METH_VARARGS, (char *)"ImuMeasurementsRegister_mag_set(ImuMeasurementsRegister self, vec3f mag)"},
	 { (char *)"ImuMeasurementsRegister_mag_get", _wrap_ImuMeasurementsRegister_mag_get, METH_VARARGS, (char *)"ImuMeasurementsRegister_mag_get(ImuMeasurementsRegister self) -> vec3f"},
	 { (char *)"ImuMeasurementsRegister_accel_set", _wrap_ImuMeasurementsRegister_accel_set, METH_VARARGS, (char *)"ImuMeasurementsRegister_accel_set(ImuMeasurementsRegister self, vec3f accel)"},
	 { (char *)"ImuMeasurementsRegister_accel_get", _wrap_ImuMeasurementsRegister_accel_get, METH_VARARGS, (char *)"ImuMeasurementsRegister_accel_get(ImuMeasurementsRegister self) -> vec3f"},
	 { (char *)"ImuMeasurementsRegister_gyro_set", _wrap_ImuMeasurementsRegister_gyro_set, METH_VARARGS, (char *)"ImuMeasurementsRegister_gyro_set(ImuMeasurementsRegister self, vec3f gyro)"},
	 { (char *)"ImuMeasurementsRegister_gyro_get", _wrap_ImuMeasurementsRegister_gyro_get, METH_VARARGS, (char *)"ImuMeasurementsRegister_gyro_get(ImuMeasurementsRegister self) -> vec3f"},
	 { (char *)"ImuMeasurementsRegister_temp_set", _wrap_ImuMeasurementsRegister_temp_set, METH_VARARGS, (char *)"ImuMeasurementsRegister_temp_set(ImuMeasurementsRegister self, float temp)"},
	 { (char *)"ImuMeasurementsRegister_temp_get", _wrap_ImuMeasurementsRegister_temp_get, METH_VARARGS, (char *)"ImuMeasurementsRegister_temp_get(ImuMeasurementsRegister self) -> float"},
	 { (char *)"ImuMeasurementsRegister_pressure_set", _wrap_ImuMeasurementsRegister_pressure_set, METH_VARARGS, (char *)"ImuMeasurementsRegister_pressure_set(ImuMeasurementsRegister self, float pressure)"},
	 { (char *)"ImuMeasurementsRegister_pressure_get", _wrap_ImuMeasurementsRegister_pressure_get, METH_VARARGS, (char *)"ImuMeasurementsRegister_pressure_get(ImuMeasurementsRegister self) -> float"},
	 { (char *)"new_ImuMeasurementsRegister", _wrap_new_ImuMeasurementsRegister, METH_VARARGS, (char *)"\n"
		"ImuMeasurementsRegister()\n"
		"new_ImuMeasurementsRegister(vec3f magIn, vec3f accelIn, vec3f gyroIn, float tempIn, float pressureIn) -> ImuMeasurementsRegister\n"
		""},
	 { (char *)"delete_ImuMeasurementsRegister", _wrap_delete_ImuMeasurementsRegister, METH_VARARGS, (char *)"delete_ImuMeasurementsRegister(ImuMeasurementsRegister self)"},
	 { (char *)"ImuMeasurementsRegister_swigregister", ImuMeasurementsRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"GpsConfigurationRegister_mode_set", _wrap_GpsConfigurationRegister_mode_set, METH_VARARGS, (char *)"GpsConfigurationRegister_mode_set(GpsConfigurationRegister self, vn::protocol::uart::GpsMode mode)"},
	 { (char *)"GpsConfigurationRegister_mode_get", _wrap_GpsConfigurationRegister_mode_get, METH_VARARGS, (char *)"GpsConfigurationRegister_mode_get(GpsConfigurationRegister self) -> vn::protocol::uart::GpsMode"},
	 { (char *)"GpsConfigurationRegister_pps_source_set", _wrap_GpsConfigurationRegister_pps_source_set, METH_VARARGS, (char *)"GpsConfigurationRegister_pps_source_set(GpsConfigurationRegister self, vn::protocol::uart::PpsSource ppsSource)"},
	 { (char *)"GpsConfigurationRegister_pps_source_get", _wrap_GpsConfigurationRegister_pps_source_get, METH_VARARGS, (char *)"GpsConfigurationRegister_pps_source_get(GpsConfigurationRegister self) -> vn::protocol::uart::PpsSource"},
	 { (char *)"new_GpsConfigurationRegister", _wrap_new_GpsConfigurationRegister, METH_VARARGS, (char *)"\n"
		"GpsConfigurationRegister()\n"
		"new_GpsConfigurationRegister(vn::protocol::uart::GpsMode modeIn, vn::protocol::uart::PpsSource ppsSourceIn) -> GpsConfigurationRegister\n"
		""},
	 { (char *)"delete_GpsConfigurationRegister", _wrap_delete_GpsConfigurationRegister, METH_VARARGS, (char *)"delete_GpsConfigurationRegister(GpsConfigurationRegister self)"},
	 { (char *)"GpsConfigurationRegister_swigregister", GpsConfigurationRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"GpsSolutionLlaRegister_time_set", _wrap_GpsSolutionLlaRegister_time_set, METH_VARARGS, (char *)"GpsSolutionLlaRegister_time_set(GpsSolutionLlaRegister self, double time)"},
	 { (char *)"GpsSolutionLlaRegister_time_get", _wrap_GpsSolutionLlaRegister_time_get, METH_VARARGS, (char *)"GpsSolutionLlaRegister_time_get(GpsSolutionLlaRegister self) -> double"},
	 { (char *)"GpsSolutionLlaRegister_week_set", _wrap_GpsSolutionLlaRegister_week_set, METH_VARARGS, (char *)"GpsSolutionLlaRegister_week_set(GpsSolutionLlaRegister self, uint16_t week)"},
	 { (char *)"GpsSolutionLlaRegister_week_get", _wrap_GpsSolutionLlaRegister_week_get, METH_VARARGS, (char *)"GpsSolutionLlaRegister_week_get(GpsSolutionLlaRegister self) -> uint16_t"},
	 { (char *)"GpsSolutionLlaRegister_gps_fix_set", _wrap_GpsSolutionLlaRegister_gps_fix_set, METH_VARARGS, (char *)"GpsSolutionLlaRegister_gps_fix_set(GpsSolutionLlaRegister self, vn::protocol::uart::GpsFix gpsFix)"},
	 { (char *)"GpsSolutionLlaRegister_gps_fix_get", _wrap_GpsSolutionLlaRegister_gps_fix_get, METH_VARARGS, (char *)"GpsSolutionLlaRegister_gps_fix_get(GpsSolutionLlaRegister self) -> vn::protocol::uart::GpsFix"},
	 { (char *)"GpsSolutionLlaRegister_num_sats_set", _wrap_GpsSolutionLlaRegister_num_sats_set, METH_VARARGS, (char *)"GpsSolutionLlaRegister_num_sats_set(GpsSolutionLlaRegister self, uint8_t numSats)"},
	 { (char *)"GpsSolutionLlaRegister_num_sats_get", _wrap_GpsSolutionLlaRegister_num_sats_get, METH_VARARGS, (char *)"GpsSolutionLlaRegister_num_sats_get(GpsSolutionLlaRegister self) -> uint8_t"},
	 { (char *)"GpsSolutionLlaRegister_lla_set", _wrap_GpsSolutionLlaRegister_lla_set, METH_VARARGS, (char *)"GpsSolutionLlaRegister_lla_set(GpsSolutionLlaRegister self, vec3d lla)"},
	 { (char *)"GpsSolutionLlaRegister_lla_get", _wrap_GpsSolutionLlaRegister_lla_get, METH_VARARGS, (char *)"GpsSolutionLlaRegister_lla_get(GpsSolutionLlaRegister self) -> vec3d"},
	 { (char *)"GpsSolutionLlaRegister_ned_vel_set", _wrap_GpsSolutionLlaRegister_ned_vel_set, METH_VARARGS, (char *)"GpsSolutionLlaRegister_ned_vel_set(GpsSolutionLlaRegister self, vec3f nedVel)"},
	 { (char *)"GpsSolutionLlaRegister_ned_vel_get", _wrap_GpsSolutionLlaRegister_ned_vel_get, METH_VARARGS, (char *)"GpsSolutionLlaRegister_ned_vel_get(GpsSolutionLlaRegister self) -> vec3f"},
	 { (char *)"GpsSolutionLlaRegister_ned_acc_set", _wrap_GpsSolutionLlaRegister_ned_acc_set, METH_VARARGS, (char *)"GpsSolutionLlaRegister_ned_acc_set(GpsSolutionLlaRegister self, vec3f nedAcc)"},
	 { (char *)"GpsSolutionLlaRegister_ned_acc_get", _wrap_GpsSolutionLlaRegister_ned_acc_get, METH_VARARGS, (char *)"GpsSolutionLlaRegister_ned_acc_get(GpsSolutionLlaRegister self) -> vec3f"},
	 { (char *)"GpsSolutionLlaRegister_speed_acc_set", _wrap_GpsSolutionLlaRegister_speed_acc_set, METH_VARARGS, (char *)"GpsSolutionLlaRegister_speed_acc_set(GpsSolutionLlaRegister self, float speedAcc)"},
	 { (char *)"GpsSolutionLlaRegister_speed_acc_get", _wrap_GpsSolutionLlaRegister_speed_acc_get, METH_VARARGS, (char *)"GpsSolutionLlaRegister_speed_acc_get(GpsSolutionLlaRegister self) -> float"},
	 { (char *)"GpsSolutionLlaRegister_time_acc_set", _wrap_GpsSolutionLlaRegister_time_acc_set, METH_VARARGS, (char *)"GpsSolutionLlaRegister_time_acc_set(GpsSolutionLlaRegister self, float timeAcc)"},
	 { (char *)"GpsSolutionLlaRegister_time_acc_get", _wrap_GpsSolutionLlaRegister_time_acc_get, METH_VARARGS, (char *)"GpsSolutionLlaRegister_time_acc_get(GpsSolutionLlaRegister self) -> float"},
	 { (char *)"new_GpsSolutionLlaRegister", _wrap_new_GpsSolutionLlaRegister, METH_VARARGS, (char *)"\n"
		"GpsSolutionLlaRegister()\n"
		"new_GpsSolutionLlaRegister(double timeIn, uint16_t weekIn, vn::protocol::uart::GpsFix gpsFixIn, uint8_t numSatsIn, vec3d llaIn, vec3f nedVelIn, vec3f nedAccIn, float speedAccIn, float timeAccIn) -> GpsSolutionLlaRegister\n"
		""},
	 { (char *)"delete_GpsSolutionLlaRegister", _wrap_delete_GpsSolutionLlaRegister, METH_VARARGS, (char *)"delete_GpsSolutionLlaRegister(GpsSolutionLlaRegister self)"},
	 { (char *)"GpsSolutionLlaRegister_swigregister", GpsSolutionLlaRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"GpsSolutionEcefRegister_tow_set", _wrap_GpsSolutionEcefRegister_tow_set, METH_VARARGS, (char *)"GpsSolutionEcefRegister_tow_set(GpsSolutionEcefRegister self, double tow)"},
	 { (char *)"GpsSolutionEcefRegister_tow_get", _wrap_GpsSolutionEcefRegister_tow_get, METH_VARARGS, (char *)"GpsSolutionEcefRegister_tow_get(GpsSolutionEcefRegister self) -> double"},
	 { (char *)"GpsSolutionEcefRegister_week_set", _wrap_GpsSolutionEcefRegister_week_set, METH_VARARGS, (char *)"GpsSolutionEcefRegister_week_set(GpsSolutionEcefRegister self, uint16_t week)"},
	 { (char *)"GpsSolutionEcefRegister_week_get", _wrap_GpsSolutionEcefRegister_week_get, METH_VARARGS, (char *)"GpsSolutionEcefRegister_week_get(GpsSolutionEcefRegister self) -> uint16_t"},
	 { (char *)"GpsSolutionEcefRegister_gps_fix_set", _wrap_GpsSolutionEcefRegister_gps_fix_set, METH_VARARGS, (char *)"GpsSolutionEcefRegister_gps_fix_set(GpsSolutionEcefRegister self, vn::protocol::uart::GpsFix gpsFix)"},
	 { (char *)"GpsSolutionEcefRegister_gps_fix_get", _wrap_GpsSolutionEcefRegister_gps_fix_get, METH_VARARGS, (char *)"GpsSolutionEcefRegister_gps_fix_get(GpsSolutionEcefRegister self) -> vn::protocol::uart::GpsFix"},
	 { (char *)"GpsSolutionEcefRegister_num_sats_set", _wrap_GpsSolutionEcefRegister_num_sats_set, METH_VARARGS, (char *)"GpsSolutionEcefRegister_num_sats_set(GpsSolutionEcefRegister self, uint8_t numSats)"},
	 { (char *)"GpsSolutionEcefRegister_num_sats_get", _wrap_GpsSolutionEcefRegister_num_sats_get, METH_VARARGS, (char *)"GpsSolutionEcefRegister_num_sats_get(GpsSolutionEcefRegister self) -> uint8_t"},
	 { (char *)"GpsSolutionEcefRegister_position_set", _wrap_GpsSolutionEcefRegister_position_set, METH_VARARGS, (char *)"GpsSolutionEcefRegister_position_set(GpsSolutionEcefRegister self, vec3d position)"},
	 { (char *)"GpsSolutionEcefRegister_position_get", _wrap_GpsSolutionEcefRegister_position_get, METH_VARARGS, (char *)"GpsSolutionEcefRegister_position_get(GpsSolutionEcefRegister self) -> vec3d"},
	 { (char *)"GpsSolutionEcefRegister_velocity_set", _wrap_GpsSolutionEcefRegister_velocity_set, METH_VARARGS, (char *)"GpsSolutionEcefRegister_velocity_set(GpsSolutionEcefRegister self, vec3f velocity)"},
	 { (char *)"GpsSolutionEcefRegister_velocity_get", _wrap_GpsSolutionEcefRegister_velocity_get, METH_VARARGS, (char *)"GpsSolutionEcefRegister_velocity_get(GpsSolutionEcefRegister self) -> vec3f"},
	 { (char *)"GpsSolutionEcefRegister_pos_acc_set", _wrap_GpsSolutionEcefRegister_pos_acc_set, METH_VARARGS, (char *)"GpsSolutionEcefRegister_pos_acc_set(GpsSolutionEcefRegister self, vec3f posAcc)"},
	 { (char *)"GpsSolutionEcefRegister_pos_acc_get", _wrap_GpsSolutionEcefRegister_pos_acc_get, METH_VARARGS, (char *)"GpsSolutionEcefRegister_pos_acc_get(GpsSolutionEcefRegister self) -> vec3f"},
	 { (char *)"GpsSolutionEcefRegister_speed_acc_set", _wrap_GpsSolutionEcefRegister_speed_acc_set, METH_VARARGS, (char *)"GpsSolutionEcefRegister_speed_acc_set(GpsSolutionEcefRegister self, float speedAcc)"},
	 { (char *)"GpsSolutionEcefRegister_speed_acc_get", _wrap_GpsSolutionEcefRegister_speed_acc_get, METH_VARARGS, (char *)"GpsSolutionEcefRegister_speed_acc_get(GpsSolutionEcefRegister self) -> float"},
	 { (char *)"GpsSolutionEcefRegister_time_acc_set", _wrap_GpsSolutionEcefRegister_time_acc_set, METH_VARARGS, (char *)"GpsSolutionEcefRegister_time_acc_set(GpsSolutionEcefRegister self, float timeAcc)"},
	 { (char *)"GpsSolutionEcefRegister_time_acc_get", _wrap_GpsSolutionEcefRegister_time_acc_get, METH_VARARGS, (char *)"GpsSolutionEcefRegister_time_acc_get(GpsSolutionEcefRegister self) -> float"},
	 { (char *)"new_GpsSolutionEcefRegister", _wrap_new_GpsSolutionEcefRegister, METH_VARARGS, (char *)"\n"
		"GpsSolutionEcefRegister()\n"
		"new_GpsSolutionEcefRegister(double towIn, uint16_t weekIn, vn::protocol::uart::GpsFix gpsFixIn, uint8_t numSatsIn, vec3d positionIn, vec3f velocityIn, vec3f posAccIn, float speedAccIn, float timeAccIn) -> GpsSolutionEcefRegister\n"
		""},
	 { (char *)"delete_GpsSolutionEcefRegister", _wrap_delete_GpsSolutionEcefRegister, METH_VARARGS, (char *)"delete_GpsSolutionEcefRegister(GpsSolutionEcefRegister self)"},
	 { (char *)"GpsSolutionEcefRegister_swigregister", GpsSolutionEcefRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"InsSolutionLlaRegister_time_set", _wrap_InsSolutionLlaRegister_time_set, METH_VARARGS, (char *)"InsSolutionLlaRegister_time_set(InsSolutionLlaRegister self, double time)"},
	 { (char *)"InsSolutionLlaRegister_time_get", _wrap_InsSolutionLlaRegister_time_get, METH_VARARGS, (char *)"InsSolutionLlaRegister_time_get(InsSolutionLlaRegister self) -> double"},
	 { (char *)"InsSolutionLlaRegister_week_set", _wrap_InsSolutionLlaRegister_week_set, METH_VARARGS, (char *)"InsSolutionLlaRegister_week_set(InsSolutionLlaRegister self, uint16_t week)"},
	 { (char *)"InsSolutionLlaRegister_week_get", _wrap_InsSolutionLlaRegister_week_get, METH_VARARGS, (char *)"InsSolutionLlaRegister_week_get(InsSolutionLlaRegister self) -> uint16_t"},
	 { (char *)"InsSolutionLlaRegister_status_set", _wrap_InsSolutionLlaRegister_status_set, METH_VARARGS, (char *)"InsSolutionLlaRegister_status_set(InsSolutionLlaRegister self, uint16_t status)"},
	 { (char *)"InsSolutionLlaRegister_status_get", _wrap_InsSolutionLlaRegister_status_get, METH_VARARGS, (char *)"InsSolutionLlaRegister_status_get(InsSolutionLlaRegister self) -> uint16_t"},
	 { (char *)"InsSolutionLlaRegister_yawPitchRoll_set", _wrap_InsSolutionLlaRegister_yawPitchRoll_set, METH_VARARGS, (char *)"InsSolutionLlaRegister_yawPitchRoll_set(InsSolutionLlaRegister self, vec3f yawPitchRoll)"},
	 { (char *)"InsSolutionLlaRegister_yawPitchRoll_get", _wrap_InsSolutionLlaRegister_yawPitchRoll_get, METH_VARARGS, (char *)"InsSolutionLlaRegister_yawPitchRoll_get(InsSolutionLlaRegister self) -> vec3f"},
	 { (char *)"InsSolutionLlaRegister_position_set", _wrap_InsSolutionLlaRegister_position_set, METH_VARARGS, (char *)"InsSolutionLlaRegister_position_set(InsSolutionLlaRegister self, vec3d position)"},
	 { (char *)"InsSolutionLlaRegister_position_get", _wrap_InsSolutionLlaRegister_position_get, METH_VARARGS, (char *)"InsSolutionLlaRegister_position_get(InsSolutionLlaRegister self) -> vec3d"},
	 { (char *)"InsSolutionLlaRegister_nedVel_set", _wrap_InsSolutionLlaRegister_nedVel_set, METH_VARARGS, (char *)"InsSolutionLlaRegister_nedVel_set(InsSolutionLlaRegister self, vec3f nedVel)"},
	 { (char *)"InsSolutionLlaRegister_nedVel_get", _wrap_InsSolutionLlaRegister_nedVel_get, METH_VARARGS, (char *)"InsSolutionLlaRegister_nedVel_get(InsSolutionLlaRegister self) -> vec3f"},
	 { (char *)"InsSolutionLlaRegister_attUncertainty_set", _wrap_InsSolutionLlaRegister_attUncertainty_set, METH_VARARGS, (char *)"InsSolutionLlaRegister_attUncertainty_set(InsSolutionLlaRegister self, float attUncertainty)"},
	 { (char *)"InsSolutionLlaRegister_attUncertainty_get", _wrap_InsSolutionLlaRegister_attUncertainty_get, METH_VARARGS, (char *)"InsSolutionLlaRegister_attUncertainty_get(InsSolutionLlaRegister self) -> float"},
	 { (char *)"InsSolutionLlaRegister_posUncertainty_set", _wrap_InsSolutionLlaRegister_posUncertainty_set, METH_VARARGS, (char *)"InsSolutionLlaRegister_posUncertainty_set(InsSolutionLlaRegister self, float posUncertainty)"},
	 { (char *)"InsSolutionLlaRegister_posUncertainty_get", _wrap_InsSolutionLlaRegister_posUncertainty_get, METH_VARARGS, (char *)"InsSolutionLlaRegister_posUncertainty_get(InsSolutionLlaRegister self) -> float"},
	 { (char *)"InsSolutionLlaRegister_velUncertainty_set", _wrap_InsSolutionLlaRegister_velUncertainty_set, METH_VARARGS, (char *)"InsSolutionLlaRegister_velUncertainty_set(InsSolutionLlaRegister self, float velUncertainty)"},
	 { (char *)"InsSolutionLlaRegister_velUncertainty_get", _wrap_InsSolutionLlaRegister_velUncertainty_get, METH_VARARGS, (char *)"InsSolutionLlaRegister_velUncertainty_get(InsSolutionLlaRegister self) -> float"},
	 { (char *)"new_InsSolutionLlaRegister", _wrap_new_InsSolutionLlaRegister, METH_VARARGS, (char *)"\n"
		"InsSolutionLlaRegister()\n"
		"new_InsSolutionLlaRegister(double timeIn, uint16_t weekIn, uint16_t statusIn, vec3f yawPitchRollIn, vec3d positionIn, vec3f nedVelIn, float attUncertaintyIn, float posUncertaintyIn, float velUncertaintyIn) -> InsSolutionLlaRegister\n"
		""},
	 { (char *)"delete_InsSolutionLlaRegister", _wrap_delete_InsSolutionLlaRegister, METH_VARARGS, (char *)"delete_InsSolutionLlaRegister(InsSolutionLlaRegister self)"},
	 { (char *)"InsSolutionLlaRegister_swigregister", InsSolutionLlaRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"InsSolutionEcefRegister_time_set", _wrap_InsSolutionEcefRegister_time_set, METH_VARARGS, (char *)"InsSolutionEcefRegister_time_set(InsSolutionEcefRegister self, double time)"},
	 { (char *)"InsSolutionEcefRegister_time_get", _wrap_InsSolutionEcefRegister_time_get, METH_VARARGS, (char *)"InsSolutionEcefRegister_time_get(InsSolutionEcefRegister self) -> double"},
	 { (char *)"InsSolutionEcefRegister_week_set", _wrap_InsSolutionEcefRegister_week_set, METH_VARARGS, (char *)"InsSolutionEcefRegister_week_set(InsSolutionEcefRegister self, uint16_t week)"},
	 { (char *)"InsSolutionEcefRegister_week_get", _wrap_InsSolutionEcefRegister_week_get, METH_VARARGS, (char *)"InsSolutionEcefRegister_week_get(InsSolutionEcefRegister self) -> uint16_t"},
	 { (char *)"InsSolutionEcefRegister_status_set", _wrap_InsSolutionEcefRegister_status_set, METH_VARARGS, (char *)"InsSolutionEcefRegister_status_set(InsSolutionEcefRegister self, uint16_t status)"},
	 { (char *)"InsSolutionEcefRegister_status_get", _wrap_InsSolutionEcefRegister_status_get, METH_VARARGS, (char *)"InsSolutionEcefRegister_status_get(InsSolutionEcefRegister self) -> uint16_t"},
	 { (char *)"InsSolutionEcefRegister_yawPitchRoll_set", _wrap_InsSolutionEcefRegister_yawPitchRoll_set, METH_VARARGS, (char *)"InsSolutionEcefRegister_yawPitchRoll_set(InsSolutionEcefRegister self, vec3f yawPitchRoll)"},
	 { (char *)"InsSolutionEcefRegister_yawPitchRoll_get", _wrap_InsSolutionEcefRegister_yawPitchRoll_get, METH_VARARGS, (char *)"InsSolutionEcefRegister_yawPitchRoll_get(InsSolutionEcefRegister self) -> vec3f"},
	 { (char *)"InsSolutionEcefRegister_position_set", _wrap_InsSolutionEcefRegister_position_set, METH_VARARGS, (char *)"InsSolutionEcefRegister_position_set(InsSolutionEcefRegister self, vec3d position)"},
	 { (char *)"InsSolutionEcefRegister_position_get", _wrap_InsSolutionEcefRegister_position_get, METH_VARARGS, (char *)"InsSolutionEcefRegister_position_get(InsSolutionEcefRegister self) -> vec3d"},
	 { (char *)"InsSolutionEcefRegister_velocity_set", _wrap_InsSolutionEcefRegister_velocity_set, METH_VARARGS, (char *)"InsSolutionEcefRegister_velocity_set(InsSolutionEcefRegister self, vec3f velocity)"},
	 { (char *)"InsSolutionEcefRegister_velocity_get", _wrap_InsSolutionEcefRegister_velocity_get, METH_VARARGS, (char *)"InsSolutionEcefRegister_velocity_get(InsSolutionEcefRegister self) -> vec3f"},
	 { (char *)"InsSolutionEcefRegister_attUncertainty_set", _wrap_InsSolutionEcefRegister_attUncertainty_set, METH_VARARGS, (char *)"InsSolutionEcefRegister_attUncertainty_set(InsSolutionEcefRegister self, float attUncertainty)"},
	 { (char *)"InsSolutionEcefRegister_attUncertainty_get", _wrap_InsSolutionEcefRegister_attUncertainty_get, METH_VARARGS, (char *)"InsSolutionEcefRegister_attUncertainty_get(InsSolutionEcefRegister self) -> float"},
	 { (char *)"InsSolutionEcefRegister_posUncertainty_set", _wrap_InsSolutionEcefRegister_posUncertainty_set, METH_VARARGS, (char *)"InsSolutionEcefRegister_posUncertainty_set(InsSolutionEcefRegister self, float posUncertainty)"},
	 { (char *)"InsSolutionEcefRegister_posUncertainty_get", _wrap_InsSolutionEcefRegister_posUncertainty_get, METH_VARARGS, (char *)"InsSolutionEcefRegister_posUncertainty_get(InsSolutionEcefRegister self) -> float"},
	 { (char *)"InsSolutionEcefRegister_velUncertainty_set", _wrap_InsSolutionEcefRegister_velUncertainty_set, METH_VARARGS, (char *)"InsSolutionEcefRegister_velUncertainty_set(InsSolutionEcefRegister self, float velUncertainty)"},
	 { (char *)"InsSolutionEcefRegister_velUncertainty_get", _wrap_InsSolutionEcefRegister_velUncertainty_get, METH_VARARGS, (char *)"InsSolutionEcefRegister_velUncertainty_get(InsSolutionEcefRegister self) -> float"},
	 { (char *)"new_InsSolutionEcefRegister", _wrap_new_InsSolutionEcefRegister, METH_VARARGS, (char *)"\n"
		"InsSolutionEcefRegister()\n"
		"new_InsSolutionEcefRegister(double timeIn, uint16_t weekIn, uint16_t statusIn, vec3f yawPitchRollIn, vec3d positionIn, vec3f velocityIn, float attUncertaintyIn, float posUncertaintyIn, float velUncertaintyIn) -> InsSolutionEcefRegister\n"
		""},
	 { (char *)"delete_InsSolutionEcefRegister", _wrap_delete_InsSolutionEcefRegister, METH_VARARGS, (char *)"delete_InsSolutionEcefRegister(InsSolutionEcefRegister self)"},
	 { (char *)"InsSolutionEcefRegister_swigregister", InsSolutionEcefRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"InsBasicConfigurationRegisterVn200_scenario_set", _wrap_InsBasicConfigurationRegisterVn200_scenario_set, METH_VARARGS, (char *)"InsBasicConfigurationRegisterVn200_scenario_set(InsBasicConfigurationRegisterVn200 self, vn::protocol::uart::Scenario scenario)"},
	 { (char *)"InsBasicConfigurationRegisterVn200_scenario_get", _wrap_InsBasicConfigurationRegisterVn200_scenario_get, METH_VARARGS, (char *)"InsBasicConfigurationRegisterVn200_scenario_get(InsBasicConfigurationRegisterVn200 self) -> vn::protocol::uart::Scenario"},
	 { (char *)"InsBasicConfigurationRegisterVn200_ahrs_aiding_set", _wrap_InsBasicConfigurationRegisterVn200_ahrs_aiding_set, METH_VARARGS, (char *)"InsBasicConfigurationRegisterVn200_ahrs_aiding_set(InsBasicConfigurationRegisterVn200 self, bool ahrsAiding)"},
	 { (char *)"InsBasicConfigurationRegisterVn200_ahrs_aiding_get", _wrap_InsBasicConfigurationRegisterVn200_ahrs_aiding_get, METH_VARARGS, (char *)"InsBasicConfigurationRegisterVn200_ahrs_aiding_get(InsBasicConfigurationRegisterVn200 self) -> bool"},
	 { (char *)"new_InsBasicConfigurationRegisterVn200", _wrap_new_InsBasicConfigurationRegisterVn200, METH_VARARGS, (char *)"\n"
		"InsBasicConfigurationRegisterVn200()\n"
		"new_InsBasicConfigurationRegisterVn200(vn::protocol::uart::Scenario scenarioIn, bool ahrsAidingIn) -> InsBasicConfigurationRegisterVn200\n"
		""},
	 { (char *)"delete_InsBasicConfigurationRegisterVn200", _wrap_delete_InsBasicConfigurationRegisterVn200, METH_VARARGS, (char *)"delete_InsBasicConfigurationRegisterVn200(InsBasicConfigurationRegisterVn200 self)"},
	 { (char *)"InsBasicConfigurationRegisterVn200_swigregister", InsBasicConfigurationRegisterVn200_swigregister, METH_VARARGS, NULL},
	 { (char *)"InsBasicConfigurationRegisterVn300_scenario_set", _wrap_InsBasicConfigurationRegisterVn300_scenario_set, METH_VARARGS, (char *)"InsBasicConfigurationRegisterVn300_scenario_set(InsBasicConfigurationRegisterVn300 self, vn::protocol::uart::Scenario scenario)"},
	 { (char *)"InsBasicConfigurationRegisterVn300_scenario_get", _wrap_InsBasicConfigurationRegisterVn300_scenario_get, METH_VARARGS, (char *)"InsBasicConfigurationRegisterVn300_scenario_get(InsBasicConfigurationRegisterVn300 self) -> vn::protocol::uart::Scenario"},
	 { (char *)"InsBasicConfigurationRegisterVn300_ahrs_aiding_set", _wrap_InsBasicConfigurationRegisterVn300_ahrs_aiding_set, METH_VARARGS, (char *)"InsBasicConfigurationRegisterVn300_ahrs_aiding_set(InsBasicConfigurationRegisterVn300 self, bool ahrsAiding)"},
	 { (char *)"InsBasicConfigurationRegisterVn300_ahrs_aiding_get", _wrap_InsBasicConfigurationRegisterVn300_ahrs_aiding_get, METH_VARARGS, (char *)"InsBasicConfigurationRegisterVn300_ahrs_aiding_get(InsBasicConfigurationRegisterVn300 self) -> bool"},
	 { (char *)"InsBasicConfigurationRegisterVn300_est_baseline_set", _wrap_InsBasicConfigurationRegisterVn300_est_baseline_set, METH_VARARGS, (char *)"InsBasicConfigurationRegisterVn300_est_baseline_set(InsBasicConfigurationRegisterVn300 self, bool estBaseline)"},
	 { (char *)"InsBasicConfigurationRegisterVn300_est_baseline_get", _wrap_InsBasicConfigurationRegisterVn300_est_baseline_get, METH_VARARGS, (char *)"InsBasicConfigurationRegisterVn300_est_baseline_get(InsBasicConfigurationRegisterVn300 self) -> bool"},
	 { (char *)"new_InsBasicConfigurationRegisterVn300", _wrap_new_InsBasicConfigurationRegisterVn300, METH_VARARGS, (char *)"\n"
		"InsBasicConfigurationRegisterVn300()\n"
		"new_InsBasicConfigurationRegisterVn300(vn::protocol::uart::Scenario scenarioIn, bool ahrsAidingIn, bool estBaselineIn) -> InsBasicConfigurationRegisterVn300\n"
		""},
	 { (char *)"delete_InsBasicConfigurationRegisterVn300", _wrap_delete_InsBasicConfigurationRegisterVn300, METH_VARARGS, (char *)"delete_InsBasicConfigurationRegisterVn300(InsBasicConfigurationRegisterVn300 self)"},
	 { (char *)"InsBasicConfigurationRegisterVn300_swigregister", InsBasicConfigurationRegisterVn300_swigregister, METH_VARARGS, NULL},
	 { (char *)"InsAdvancedConfigurationRegister_use_mag_set", _wrap_InsAdvancedConfigurationRegister_use_mag_set, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_use_mag_set(InsAdvancedConfigurationRegister self, bool useMag)"},
	 { (char *)"InsAdvancedConfigurationRegister_use_mag_get", _wrap_InsAdvancedConfigurationRegister_use_mag_get, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_use_mag_get(InsAdvancedConfigurationRegister self) -> bool"},
	 { (char *)"InsAdvancedConfigurationRegister_use_pres_set", _wrap_InsAdvancedConfigurationRegister_use_pres_set, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_use_pres_set(InsAdvancedConfigurationRegister self, bool usePres)"},
	 { (char *)"InsAdvancedConfigurationRegister_use_pres_get", _wrap_InsAdvancedConfigurationRegister_use_pres_get, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_use_pres_get(InsAdvancedConfigurationRegister self) -> bool"},
	 { (char *)"InsAdvancedConfigurationRegister_pos_att_set", _wrap_InsAdvancedConfigurationRegister_pos_att_set, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_pos_att_set(InsAdvancedConfigurationRegister self, bool posAtt)"},
	 { (char *)"InsAdvancedConfigurationRegister_pos_att_get", _wrap_InsAdvancedConfigurationRegister_pos_att_get, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_pos_att_get(InsAdvancedConfigurationRegister self) -> bool"},
	 { (char *)"InsAdvancedConfigurationRegister_vel_att_set", _wrap_InsAdvancedConfigurationRegister_vel_att_set, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_vel_att_set(InsAdvancedConfigurationRegister self, bool velAtt)"},
	 { (char *)"InsAdvancedConfigurationRegister_vel_att_get", _wrap_InsAdvancedConfigurationRegister_vel_att_get, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_vel_att_get(InsAdvancedConfigurationRegister self) -> bool"},
	 { (char *)"InsAdvancedConfigurationRegister_vel_bias_set", _wrap_InsAdvancedConfigurationRegister_vel_bias_set, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_vel_bias_set(InsAdvancedConfigurationRegister self, bool velBias)"},
	 { (char *)"InsAdvancedConfigurationRegister_vel_bias_get", _wrap_InsAdvancedConfigurationRegister_vel_bias_get, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_vel_bias_get(InsAdvancedConfigurationRegister self) -> bool"},
	 { (char *)"InsAdvancedConfigurationRegister_use_foam_set", _wrap_InsAdvancedConfigurationRegister_use_foam_set, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_use_foam_set(InsAdvancedConfigurationRegister self, vn::protocol::uart::FoamInit useFoam)"},
	 { (char *)"InsAdvancedConfigurationRegister_use_foam_get", _wrap_InsAdvancedConfigurationRegister_use_foam_get, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_use_foam_get(InsAdvancedConfigurationRegister self) -> vn::protocol::uart::FoamInit"},
	 { (char *)"InsAdvancedConfigurationRegister_gps_conv_type_set", _wrap_InsAdvancedConfigurationRegister_gps_conv_type_set, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_gps_conv_type_set(InsAdvancedConfigurationRegister self, uint8_t gpsCovType)"},
	 { (char *)"InsAdvancedConfigurationRegister_gps_conv_type_get", _wrap_InsAdvancedConfigurationRegister_gps_conv_type_get, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_gps_conv_type_get(InsAdvancedConfigurationRegister self) -> uint8_t"},
	 { (char *)"InsAdvancedConfigurationRegister_vel_count_set", _wrap_InsAdvancedConfigurationRegister_vel_count_set, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_vel_count_set(InsAdvancedConfigurationRegister self, uint8_t velCount)"},
	 { (char *)"InsAdvancedConfigurationRegister_vel_count_get", _wrap_InsAdvancedConfigurationRegister_vel_count_get, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_vel_count_get(InsAdvancedConfigurationRegister self) -> uint8_t"},
	 { (char *)"InsAdvancedConfigurationRegister_vel_init_set", _wrap_InsAdvancedConfigurationRegister_vel_init_set, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_vel_init_set(InsAdvancedConfigurationRegister self, float velInit)"},
	 { (char *)"InsAdvancedConfigurationRegister_vel_init_get", _wrap_InsAdvancedConfigurationRegister_vel_init_get, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_vel_init_get(InsAdvancedConfigurationRegister self) -> float"},
	 { (char *)"InsAdvancedConfigurationRegister_move_origin_set", _wrap_InsAdvancedConfigurationRegister_move_origin_set, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_move_origin_set(InsAdvancedConfigurationRegister self, float moveOrigin)"},
	 { (char *)"InsAdvancedConfigurationRegister_move_origin_get", _wrap_InsAdvancedConfigurationRegister_move_origin_get, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_move_origin_get(InsAdvancedConfigurationRegister self) -> float"},
	 { (char *)"InsAdvancedConfigurationRegister_gps_timeout_set", _wrap_InsAdvancedConfigurationRegister_gps_timeout_set, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_gps_timeout_set(InsAdvancedConfigurationRegister self, float gpsTimeout)"},
	 { (char *)"InsAdvancedConfigurationRegister_gps_timeout_get", _wrap_InsAdvancedConfigurationRegister_gps_timeout_get, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_gps_timeout_get(InsAdvancedConfigurationRegister self) -> float"},
	 { (char *)"InsAdvancedConfigurationRegister_delta_limit_pos_set", _wrap_InsAdvancedConfigurationRegister_delta_limit_pos_set, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_delta_limit_pos_set(InsAdvancedConfigurationRegister self, float deltaLimitPos)"},
	 { (char *)"InsAdvancedConfigurationRegister_delta_limit_pos_get", _wrap_InsAdvancedConfigurationRegister_delta_limit_pos_get, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_delta_limit_pos_get(InsAdvancedConfigurationRegister self) -> float"},
	 { (char *)"InsAdvancedConfigurationRegister_delta_limit_vel_set", _wrap_InsAdvancedConfigurationRegister_delta_limit_vel_set, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_delta_limit_vel_set(InsAdvancedConfigurationRegister self, float deltaLimitVel)"},
	 { (char *)"InsAdvancedConfigurationRegister_delta_limit_vel_get", _wrap_InsAdvancedConfigurationRegister_delta_limit_vel_get, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_delta_limit_vel_get(InsAdvancedConfigurationRegister self) -> float"},
	 { (char *)"InsAdvancedConfigurationRegister_min_pos_uncertainty_set", _wrap_InsAdvancedConfigurationRegister_min_pos_uncertainty_set, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_min_pos_uncertainty_set(InsAdvancedConfigurationRegister self, float minPosUncertainty)"},
	 { (char *)"InsAdvancedConfigurationRegister_min_pos_uncertainty_get", _wrap_InsAdvancedConfigurationRegister_min_pos_uncertainty_get, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_min_pos_uncertainty_get(InsAdvancedConfigurationRegister self) -> float"},
	 { (char *)"InsAdvancedConfigurationRegister_min_vel_uncertainty_set", _wrap_InsAdvancedConfigurationRegister_min_vel_uncertainty_set, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_min_vel_uncertainty_set(InsAdvancedConfigurationRegister self, float minVelUncertainty)"},
	 { (char *)"InsAdvancedConfigurationRegister_min_vel_uncertainty_get", _wrap_InsAdvancedConfigurationRegister_min_vel_uncertainty_get, METH_VARARGS, (char *)"InsAdvancedConfigurationRegister_min_vel_uncertainty_get(InsAdvancedConfigurationRegister self) -> float"},
	 { (char *)"new_InsAdvancedConfigurationRegister", _wrap_new_InsAdvancedConfigurationRegister, METH_VARARGS, (char *)"\n"
		"InsAdvancedConfigurationRegister()\n"
		"new_InsAdvancedConfigurationRegister(bool useMagIn, bool usePresIn, bool posAttIn, bool velAttIn, bool velBiasIn, vn::protocol::uart::FoamInit useFoamIn, uint8_t gpsCovTypeIn, uint8_t velCountIn, float velInitIn, float moveOriginIn, float gpsTimeoutIn, float deltaLimitPosIn, float deltaLimitVelIn, float minPosUncertaintyIn, float minVelUncertaintyIn) -> InsAdvancedConfigurationRegister\n"
		""},
	 { (char *)"delete_InsAdvancedConfigurationRegister", _wrap_delete_InsAdvancedConfigurationRegister, METH_VARARGS, (char *)"delete_InsAdvancedConfigurationRegister(InsAdvancedConfigurationRegister self)"},
	 { (char *)"InsAdvancedConfigurationRegister_swigregister", InsAdvancedConfigurationRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"InsStateLlaRegister_yaw_pitch_roll_set", _wrap_InsStateLlaRegister_yaw_pitch_roll_set, METH_VARARGS, (char *)"InsStateLlaRegister_yaw_pitch_roll_set(InsStateLlaRegister self, vec3f yawPitchRoll)"},
	 { (char *)"InsStateLlaRegister_yaw_pitch_roll_get", _wrap_InsStateLlaRegister_yaw_pitch_roll_get, METH_VARARGS, (char *)"InsStateLlaRegister_yaw_pitch_roll_get(InsStateLlaRegister self) -> vec3f"},
	 { (char *)"InsStateLlaRegister_position_set", _wrap_InsStateLlaRegister_position_set, METH_VARARGS, (char *)"InsStateLlaRegister_position_set(InsStateLlaRegister self, vec3d position)"},
	 { (char *)"InsStateLlaRegister_position_get", _wrap_InsStateLlaRegister_position_get, METH_VARARGS, (char *)"InsStateLlaRegister_position_get(InsStateLlaRegister self) -> vec3d"},
	 { (char *)"InsStateLlaRegister_velocity_set", _wrap_InsStateLlaRegister_velocity_set, METH_VARARGS, (char *)"InsStateLlaRegister_velocity_set(InsStateLlaRegister self, vec3f velocity)"},
	 { (char *)"InsStateLlaRegister_velocity_get", _wrap_InsStateLlaRegister_velocity_get, METH_VARARGS, (char *)"InsStateLlaRegister_velocity_get(InsStateLlaRegister self) -> vec3f"},
	 { (char *)"InsStateLlaRegister_accel_set", _wrap_InsStateLlaRegister_accel_set, METH_VARARGS, (char *)"InsStateLlaRegister_accel_set(InsStateLlaRegister self, vec3f accel)"},
	 { (char *)"InsStateLlaRegister_accel_get", _wrap_InsStateLlaRegister_accel_get, METH_VARARGS, (char *)"InsStateLlaRegister_accel_get(InsStateLlaRegister self) -> vec3f"},
	 { (char *)"InsStateLlaRegister_angular_rate_set", _wrap_InsStateLlaRegister_angular_rate_set, METH_VARARGS, (char *)"InsStateLlaRegister_angular_rate_set(InsStateLlaRegister self, vec3f angularRate)"},
	 { (char *)"InsStateLlaRegister_angular_rate_get", _wrap_InsStateLlaRegister_angular_rate_get, METH_VARARGS, (char *)"InsStateLlaRegister_angular_rate_get(InsStateLlaRegister self) -> vec3f"},
	 { (char *)"new_InsStateLlaRegister", _wrap_new_InsStateLlaRegister, METH_VARARGS, (char *)"\n"
		"InsStateLlaRegister()\n"
		"new_InsStateLlaRegister(vec3f yawPitchRollIn, vec3d positionIn, vec3f velocityIn, vec3f accelIn, vec3f angularRateIn) -> InsStateLlaRegister\n"
		""},
	 { (char *)"delete_InsStateLlaRegister", _wrap_delete_InsStateLlaRegister, METH_VARARGS, (char *)"delete_InsStateLlaRegister(InsStateLlaRegister self)"},
	 { (char *)"InsStateLlaRegister_swigregister", InsStateLlaRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"InsStateEcefRegister_yaw_pitch_roll_set", _wrap_InsStateEcefRegister_yaw_pitch_roll_set, METH_VARARGS, (char *)"InsStateEcefRegister_yaw_pitch_roll_set(InsStateEcefRegister self, vec3f yawPitchRoll)"},
	 { (char *)"InsStateEcefRegister_yaw_pitch_roll_get", _wrap_InsStateEcefRegister_yaw_pitch_roll_get, METH_VARARGS, (char *)"InsStateEcefRegister_yaw_pitch_roll_get(InsStateEcefRegister self) -> vec3f"},
	 { (char *)"InsStateEcefRegister_position_set", _wrap_InsStateEcefRegister_position_set, METH_VARARGS, (char *)"InsStateEcefRegister_position_set(InsStateEcefRegister self, vec3d position)"},
	 { (char *)"InsStateEcefRegister_position_get", _wrap_InsStateEcefRegister_position_get, METH_VARARGS, (char *)"InsStateEcefRegister_position_get(InsStateEcefRegister self) -> vec3d"},
	 { (char *)"InsStateEcefRegister_velocity_set", _wrap_InsStateEcefRegister_velocity_set, METH_VARARGS, (char *)"InsStateEcefRegister_velocity_set(InsStateEcefRegister self, vec3f velocity)"},
	 { (char *)"InsStateEcefRegister_velocity_get", _wrap_InsStateEcefRegister_velocity_get, METH_VARARGS, (char *)"InsStateEcefRegister_velocity_get(InsStateEcefRegister self) -> vec3f"},
	 { (char *)"InsStateEcefRegister_accel_set", _wrap_InsStateEcefRegister_accel_set, METH_VARARGS, (char *)"InsStateEcefRegister_accel_set(InsStateEcefRegister self, vec3f accel)"},
	 { (char *)"InsStateEcefRegister_accel_get", _wrap_InsStateEcefRegister_accel_get, METH_VARARGS, (char *)"InsStateEcefRegister_accel_get(InsStateEcefRegister self) -> vec3f"},
	 { (char *)"InsStateEcefRegister_angular_rate_set", _wrap_InsStateEcefRegister_angular_rate_set, METH_VARARGS, (char *)"InsStateEcefRegister_angular_rate_set(InsStateEcefRegister self, vec3f angularRate)"},
	 { (char *)"InsStateEcefRegister_angular_rate_get", _wrap_InsStateEcefRegister_angular_rate_get, METH_VARARGS, (char *)"InsStateEcefRegister_angular_rate_get(InsStateEcefRegister self) -> vec3f"},
	 { (char *)"new_InsStateEcefRegister", _wrap_new_InsStateEcefRegister, METH_VARARGS, (char *)"\n"
		"InsStateEcefRegister()\n"
		"new_InsStateEcefRegister(vec3f yawPitchRollIn, vec3d positionIn, vec3f velocityIn, vec3f accelIn, vec3f angularRateIn) -> InsStateEcefRegister\n"
		""},
	 { (char *)"delete_InsStateEcefRegister", _wrap_delete_InsStateEcefRegister, METH_VARARGS, (char *)"delete_InsStateEcefRegister(InsStateEcefRegister self)"},
	 { (char *)"InsStateEcefRegister_swigregister", InsStateEcefRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"StartupFilterBiasEstimateRegister_gyro_bias_set", _wrap_StartupFilterBiasEstimateRegister_gyro_bias_set, METH_VARARGS, (char *)"StartupFilterBiasEstimateRegister_gyro_bias_set(StartupFilterBiasEstimateRegister self, vec3f gyroBias)"},
	 { (char *)"StartupFilterBiasEstimateRegister_gyro_bias_get", _wrap_StartupFilterBiasEstimateRegister_gyro_bias_get, METH_VARARGS, (char *)"StartupFilterBiasEstimateRegister_gyro_bias_get(StartupFilterBiasEstimateRegister self) -> vec3f"},
	 { (char *)"StartupFilterBiasEstimateRegister_accel_bias_set", _wrap_StartupFilterBiasEstimateRegister_accel_bias_set, METH_VARARGS, (char *)"StartupFilterBiasEstimateRegister_accel_bias_set(StartupFilterBiasEstimateRegister self, vec3f accelBias)"},
	 { (char *)"StartupFilterBiasEstimateRegister_accel_bias_get", _wrap_StartupFilterBiasEstimateRegister_accel_bias_get, METH_VARARGS, (char *)"StartupFilterBiasEstimateRegister_accel_bias_get(StartupFilterBiasEstimateRegister self) -> vec3f"},
	 { (char *)"StartupFilterBiasEstimateRegister_pressure_bias_set", _wrap_StartupFilterBiasEstimateRegister_pressure_bias_set, METH_VARARGS, (char *)"StartupFilterBiasEstimateRegister_pressure_bias_set(StartupFilterBiasEstimateRegister self, float pressureBias)"},
	 { (char *)"StartupFilterBiasEstimateRegister_pressure_bias_get", _wrap_StartupFilterBiasEstimateRegister_pressure_bias_get, METH_VARARGS, (char *)"StartupFilterBiasEstimateRegister_pressure_bias_get(StartupFilterBiasEstimateRegister self) -> float"},
	 { (char *)"new_StartupFilterBiasEstimateRegister", _wrap_new_StartupFilterBiasEstimateRegister, METH_VARARGS, (char *)"\n"
		"StartupFilterBiasEstimateRegister()\n"
		"new_StartupFilterBiasEstimateRegister(vec3f gyroBiasIn, vec3f accelBiasIn, float pressureBiasIn) -> StartupFilterBiasEstimateRegister\n"
		""},
	 { (char *)"delete_StartupFilterBiasEstimateRegister", _wrap_delete_StartupFilterBiasEstimateRegister, METH_VARARGS, (char *)"delete_StartupFilterBiasEstimateRegister(StartupFilterBiasEstimateRegister self)"},
	 { (char *)"StartupFilterBiasEstimateRegister_swigregister", StartupFilterBiasEstimateRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"DeltaThetaAndDeltaVelocityRegister_delta_time_set", _wrap_DeltaThetaAndDeltaVelocityRegister_delta_time_set, METH_VARARGS, (char *)"DeltaThetaAndDeltaVelocityRegister_delta_time_set(DeltaThetaAndDeltaVelocityRegister self, float deltaTime)"},
	 { (char *)"DeltaThetaAndDeltaVelocityRegister_delta_time_get", _wrap_DeltaThetaAndDeltaVelocityRegister_delta_time_get, METH_VARARGS, (char *)"DeltaThetaAndDeltaVelocityRegister_delta_time_get(DeltaThetaAndDeltaVelocityRegister self) -> float"},
	 { (char *)"DeltaThetaAndDeltaVelocityRegister_delta_theta_set", _wrap_DeltaThetaAndDeltaVelocityRegister_delta_theta_set, METH_VARARGS, (char *)"DeltaThetaAndDeltaVelocityRegister_delta_theta_set(DeltaThetaAndDeltaVelocityRegister self, vec3f deltaTheta)"},
	 { (char *)"DeltaThetaAndDeltaVelocityRegister_delta_theta_get", _wrap_DeltaThetaAndDeltaVelocityRegister_delta_theta_get, METH_VARARGS, (char *)"DeltaThetaAndDeltaVelocityRegister_delta_theta_get(DeltaThetaAndDeltaVelocityRegister self) -> vec3f"},
	 { (char *)"DeltaThetaAndDeltaVelocityRegister_delta_velocity_set", _wrap_DeltaThetaAndDeltaVelocityRegister_delta_velocity_set, METH_VARARGS, (char *)"DeltaThetaAndDeltaVelocityRegister_delta_velocity_set(DeltaThetaAndDeltaVelocityRegister self, vec3f deltaVelocity)"},
	 { (char *)"DeltaThetaAndDeltaVelocityRegister_delta_velocity_get", _wrap_DeltaThetaAndDeltaVelocityRegister_delta_velocity_get, METH_VARARGS, (char *)"DeltaThetaAndDeltaVelocityRegister_delta_velocity_get(DeltaThetaAndDeltaVelocityRegister self) -> vec3f"},
	 { (char *)"new_DeltaThetaAndDeltaVelocityRegister", _wrap_new_DeltaThetaAndDeltaVelocityRegister, METH_VARARGS, (char *)"\n"
		"DeltaThetaAndDeltaVelocityRegister()\n"
		"new_DeltaThetaAndDeltaVelocityRegister(float deltaTimeIn, vec3f deltaThetaIn, vec3f deltaVelocityIn) -> DeltaThetaAndDeltaVelocityRegister\n"
		""},
	 { (char *)"delete_DeltaThetaAndDeltaVelocityRegister", _wrap_delete_DeltaThetaAndDeltaVelocityRegister, METH_VARARGS, (char *)"delete_DeltaThetaAndDeltaVelocityRegister(DeltaThetaAndDeltaVelocityRegister self)"},
	 { (char *)"DeltaThetaAndDeltaVelocityRegister_swigregister", DeltaThetaAndDeltaVelocityRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"DeltaThetaAndDeltaVelocityConfigurationRegister_integration_frame_set", _wrap_DeltaThetaAndDeltaVelocityConfigurationRegister_integration_frame_set, METH_VARARGS, (char *)"DeltaThetaAndDeltaVelocityConfigurationRegister_integration_frame_set(DeltaThetaAndDeltaVelocityConfigurationRegister self, vn::protocol::uart::IntegrationFrame integrationFrame)"},
	 { (char *)"DeltaThetaAndDeltaVelocityConfigurationRegister_integration_frame_get", _wrap_DeltaThetaAndDeltaVelocityConfigurationRegister_integration_frame_get, METH_VARARGS, (char *)"DeltaThetaAndDeltaVelocityConfigurationRegister_integration_frame_get(DeltaThetaAndDeltaVelocityConfigurationRegister self) -> vn::protocol::uart::IntegrationFrame"},
	 { (char *)"DeltaThetaAndDeltaVelocityConfigurationRegister_gyro_compensation_set", _wrap_DeltaThetaAndDeltaVelocityConfigurationRegister_gyro_compensation_set, METH_VARARGS, (char *)"DeltaThetaAndDeltaVelocityConfigurationRegister_gyro_compensation_set(DeltaThetaAndDeltaVelocityConfigurationRegister self, vn::protocol::uart::CompensationMode gyroCompensation)"},
	 { (char *)"DeltaThetaAndDeltaVelocityConfigurationRegister_gyro_compensation_get", _wrap_DeltaThetaAndDeltaVelocityConfigurationRegister_gyro_compensation_get, METH_VARARGS, (char *)"DeltaThetaAndDeltaVelocityConfigurationRegister_gyro_compensation_get(DeltaThetaAndDeltaVelocityConfigurationRegister self) -> vn::protocol::uart::CompensationMode"},
	 { (char *)"DeltaThetaAndDeltaVelocityConfigurationRegister_accel_compensation_set", _wrap_DeltaThetaAndDeltaVelocityConfigurationRegister_accel_compensation_set, METH_VARARGS, (char *)"DeltaThetaAndDeltaVelocityConfigurationRegister_accel_compensation_set(DeltaThetaAndDeltaVelocityConfigurationRegister self, vn::protocol::uart::CompensationMode accelCompensation)"},
	 { (char *)"DeltaThetaAndDeltaVelocityConfigurationRegister_accel_compensation_get", _wrap_DeltaThetaAndDeltaVelocityConfigurationRegister_accel_compensation_get, METH_VARARGS, (char *)"DeltaThetaAndDeltaVelocityConfigurationRegister_accel_compensation_get(DeltaThetaAndDeltaVelocityConfigurationRegister self) -> vn::protocol::uart::CompensationMode"},
	 { (char *)"new_DeltaThetaAndDeltaVelocityConfigurationRegister", _wrap_new_DeltaThetaAndDeltaVelocityConfigurationRegister, METH_VARARGS, (char *)"\n"
		"DeltaThetaAndDeltaVelocityConfigurationRegister()\n"
		"new_DeltaThetaAndDeltaVelocityConfigurationRegister(vn::protocol::uart::IntegrationFrame integrationFrameIn, vn::protocol::uart::CompensationMode gyroCompensationIn, vn::protocol::uart::CompensationMode accelCompensationIn) -> DeltaThetaAndDeltaVelocityConfigurationRegister\n"
		""},
	 { (char *)"delete_DeltaThetaAndDeltaVelocityConfigurationRegister", _wrap_delete_DeltaThetaAndDeltaVelocityConfigurationRegister, METH_VARARGS, (char *)"delete_DeltaThetaAndDeltaVelocityConfigurationRegister(DeltaThetaAndDeltaVelocityConfigurationRegister self)"},
	 { (char *)"DeltaThetaAndDeltaVelocityConfigurationRegister_swigregister", DeltaThetaAndDeltaVelocityConfigurationRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"ReferenceVectorConfigurationRegister_use_mag_model_set", _wrap_ReferenceVectorConfigurationRegister_use_mag_model_set, METH_VARARGS, (char *)"ReferenceVectorConfigurationRegister_use_mag_model_set(ReferenceVectorConfigurationRegister self, bool useMagModel)"},
	 { (char *)"ReferenceVectorConfigurationRegister_use_mag_model_get", _wrap_ReferenceVectorConfigurationRegister_use_mag_model_get, METH_VARARGS, (char *)"ReferenceVectorConfigurationRegister_use_mag_model_get(ReferenceVectorConfigurationRegister self) -> bool"},
	 { (char *)"ReferenceVectorConfigurationRegister_use_gravity_model_set", _wrap_ReferenceVectorConfigurationRegister_use_gravity_model_set, METH_VARARGS, (char *)"ReferenceVectorConfigurationRegister_use_gravity_model_set(ReferenceVectorConfigurationRegister self, bool useGravityModel)"},
	 { (char *)"ReferenceVectorConfigurationRegister_use_gravity_model_get", _wrap_ReferenceVectorConfigurationRegister_use_gravity_model_get, METH_VARARGS, (char *)"ReferenceVectorConfigurationRegister_use_gravity_model_get(ReferenceVectorConfigurationRegister self) -> bool"},
	 { (char *)"ReferenceVectorConfigurationRegister_recalc_threshold_set", _wrap_ReferenceVectorConfigurationRegister_recalc_threshold_set, METH_VARARGS, (char *)"ReferenceVectorConfigurationRegister_recalc_threshold_set(ReferenceVectorConfigurationRegister self, uint32_t recalcThreshold)"},
	 { (char *)"ReferenceVectorConfigurationRegister_recalc_threshold_get", _wrap_ReferenceVectorConfigurationRegister_recalc_threshold_get, METH_VARARGS, (char *)"ReferenceVectorConfigurationRegister_recalc_threshold_get(ReferenceVectorConfigurationRegister self) -> uint32_t"},
	 { (char *)"ReferenceVectorConfigurationRegister_year_set", _wrap_ReferenceVectorConfigurationRegister_year_set, METH_VARARGS, (char *)"ReferenceVectorConfigurationRegister_year_set(ReferenceVectorConfigurationRegister self, float year)"},
	 { (char *)"ReferenceVectorConfigurationRegister_year_get", _wrap_ReferenceVectorConfigurationRegister_year_get, METH_VARARGS, (char *)"ReferenceVectorConfigurationRegister_year_get(ReferenceVectorConfigurationRegister self) -> float"},
	 { (char *)"ReferenceVectorConfigurationRegister_position_set", _wrap_ReferenceVectorConfigurationRegister_position_set, METH_VARARGS, (char *)"ReferenceVectorConfigurationRegister_position_set(ReferenceVectorConfigurationRegister self, vec3d position)"},
	 { (char *)"ReferenceVectorConfigurationRegister_position_get", _wrap_ReferenceVectorConfigurationRegister_position_get, METH_VARARGS, (char *)"ReferenceVectorConfigurationRegister_position_get(ReferenceVectorConfigurationRegister self) -> vec3d"},
	 { (char *)"new_ReferenceVectorConfigurationRegister", _wrap_new_ReferenceVectorConfigurationRegister, METH_VARARGS, (char *)"\n"
		"ReferenceVectorConfigurationRegister()\n"
		"new_ReferenceVectorConfigurationRegister(bool useMagModelIn, bool useGravityModelIn, uint32_t recalcThresholdIn, float yearIn, vec3d positionIn) -> ReferenceVectorConfigurationRegister\n"
		""},
	 { (char *)"delete_ReferenceVectorConfigurationRegister", _wrap_delete_ReferenceVectorConfigurationRegister, METH_VARARGS, (char *)"delete_ReferenceVectorConfigurationRegister(ReferenceVectorConfigurationRegister self)"},
	 { (char *)"ReferenceVectorConfigurationRegister_swigregister", ReferenceVectorConfigurationRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"GyroCompensationRegister_c_set", _wrap_GyroCompensationRegister_c_set, METH_VARARGS, (char *)"GyroCompensationRegister_c_set(GyroCompensationRegister self, mat3f c)"},
	 { (char *)"GyroCompensationRegister_c_get", _wrap_GyroCompensationRegister_c_get, METH_VARARGS, (char *)"GyroCompensationRegister_c_get(GyroCompensationRegister self) -> mat3f"},
	 { (char *)"GyroCompensationRegister_b_set", _wrap_GyroCompensationRegister_b_set, METH_VARARGS, (char *)"GyroCompensationRegister_b_set(GyroCompensationRegister self, vec3f b)"},
	 { (char *)"GyroCompensationRegister_b_get", _wrap_GyroCompensationRegister_b_get, METH_VARARGS, (char *)"GyroCompensationRegister_b_get(GyroCompensationRegister self) -> vec3f"},
	 { (char *)"new_GyroCompensationRegister", _wrap_new_GyroCompensationRegister, METH_VARARGS, (char *)"\n"
		"GyroCompensationRegister()\n"
		"new_GyroCompensationRegister(mat3f cIn, vec3f bIn) -> GyroCompensationRegister\n"
		""},
	 { (char *)"delete_GyroCompensationRegister", _wrap_delete_GyroCompensationRegister, METH_VARARGS, (char *)"delete_GyroCompensationRegister(GyroCompensationRegister self)"},
	 { (char *)"GyroCompensationRegister_swigregister", GyroCompensationRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"ImuFilteringConfigurationRegister_mag_window_size_set", _wrap_ImuFilteringConfigurationRegister_mag_window_size_set, METH_VARARGS, (char *)"ImuFilteringConfigurationRegister_mag_window_size_set(ImuFilteringConfigurationRegister self, uint16_t magWindowSize)"},
	 { (char *)"ImuFilteringConfigurationRegister_mag_window_size_get", _wrap_ImuFilteringConfigurationRegister_mag_window_size_get, METH_VARARGS, (char *)"ImuFilteringConfigurationRegister_mag_window_size_get(ImuFilteringConfigurationRegister self) -> uint16_t"},
	 { (char *)"ImuFilteringConfigurationRegister_accel_window_size_set", _wrap_ImuFilteringConfigurationRegister_accel_window_size_set, METH_VARARGS, (char *)"ImuFilteringConfigurationRegister_accel_window_size_set(ImuFilteringConfigurationRegister self, uint16_t accelWindowSize)"},
	 { (char *)"ImuFilteringConfigurationRegister_accel_window_size_get", _wrap_ImuFilteringConfigurationRegister_accel_window_size_get, METH_VARARGS, (char *)"ImuFilteringConfigurationRegister_accel_window_size_get(ImuFilteringConfigurationRegister self) -> uint16_t"},
	 { (char *)"ImuFilteringConfigurationRegister_gyro_window_size_set", _wrap_ImuFilteringConfigurationRegister_gyro_window_size_set, METH_VARARGS, (char *)"ImuFilteringConfigurationRegister_gyro_window_size_set(ImuFilteringConfigurationRegister self, uint16_t gyroWindowSize)"},
	 { (char *)"ImuFilteringConfigurationRegister_gyro_window_size_get", _wrap_ImuFilteringConfigurationRegister_gyro_window_size_get, METH_VARARGS, (char *)"ImuFilteringConfigurationRegister_gyro_window_size_get(ImuFilteringConfigurationRegister self) -> uint16_t"},
	 { (char *)"ImuFilteringConfigurationRegister_temp_window_size_set", _wrap_ImuFilteringConfigurationRegister_temp_window_size_set, METH_VARARGS, (char *)"ImuFilteringConfigurationRegister_temp_window_size_set(ImuFilteringConfigurationRegister self, uint16_t tempWindowSize)"},
	 { (char *)"ImuFilteringConfigurationRegister_temp_window_size_get", _wrap_ImuFilteringConfigurationRegister_temp_window_size_get, METH_VARARGS, (char *)"ImuFilteringConfigurationRegister_temp_window_size_get(ImuFilteringConfigurationRegister self) -> uint16_t"},
	 { (char *)"ImuFilteringConfigurationRegister_pres_window_size_set", _wrap_ImuFilteringConfigurationRegister_pres_window_size_set, METH_VARARGS, (char *)"ImuFilteringConfigurationRegister_pres_window_size_set(ImuFilteringConfigurationRegister self, uint16_t presWindowSize)"},
	 { (char *)"ImuFilteringConfigurationRegister_pres_window_size_get", _wrap_ImuFilteringConfigurationRegister_pres_window_size_get, METH_VARARGS, (char *)"ImuFilteringConfigurationRegister_pres_window_size_get(ImuFilteringConfigurationRegister self) -> uint16_t"},
	 { (char *)"ImuFilteringConfigurationRegister_mag_filter_mode_set", _wrap_ImuFilteringConfigurationRegister_mag_filter_mode_set, METH_VARARGS, (char *)"ImuFilteringConfigurationRegister_mag_filter_mode_set(ImuFilteringConfigurationRegister self, vn::protocol::uart::FilterMode magFilterMode)"},
	 { (char *)"ImuFilteringConfigurationRegister_mag_filter_mode_get", _wrap_ImuFilteringConfigurationRegister_mag_filter_mode_get, METH_VARARGS, (char *)"ImuFilteringConfigurationRegister_mag_filter_mode_get(ImuFilteringConfigurationRegister self) -> vn::protocol::uart::FilterMode"},
	 { (char *)"ImuFilteringConfigurationRegister_accel_filter_mode_set", _wrap_ImuFilteringConfigurationRegister_accel_filter_mode_set, METH_VARARGS, (char *)"ImuFilteringConfigurationRegister_accel_filter_mode_set(ImuFilteringConfigurationRegister self, vn::protocol::uart::FilterMode accelFilterMode)"},
	 { (char *)"ImuFilteringConfigurationRegister_accel_filter_mode_get", _wrap_ImuFilteringConfigurationRegister_accel_filter_mode_get, METH_VARARGS, (char *)"ImuFilteringConfigurationRegister_accel_filter_mode_get(ImuFilteringConfigurationRegister self) -> vn::protocol::uart::FilterMode"},
	 { (char *)"ImuFilteringConfigurationRegister_gyro_filter_mode_set", _wrap_ImuFilteringConfigurationRegister_gyro_filter_mode_set, METH_VARARGS, (char *)"ImuFilteringConfigurationRegister_gyro_filter_mode_set(ImuFilteringConfigurationRegister self, vn::protocol::uart::FilterMode gyroFilterMode)"},
	 { (char *)"ImuFilteringConfigurationRegister_gyro_filter_mode_get", _wrap_ImuFilteringConfigurationRegister_gyro_filter_mode_get, METH_VARARGS, (char *)"ImuFilteringConfigurationRegister_gyro_filter_mode_get(ImuFilteringConfigurationRegister self) -> vn::protocol::uart::FilterMode"},
	 { (char *)"ImuFilteringConfigurationRegister_temp_filter_mode_set", _wrap_ImuFilteringConfigurationRegister_temp_filter_mode_set, METH_VARARGS, (char *)"ImuFilteringConfigurationRegister_temp_filter_mode_set(ImuFilteringConfigurationRegister self, vn::protocol::uart::FilterMode tempFilterMode)"},
	 { (char *)"ImuFilteringConfigurationRegister_temp_filter_mode_get", _wrap_ImuFilteringConfigurationRegister_temp_filter_mode_get, METH_VARARGS, (char *)"ImuFilteringConfigurationRegister_temp_filter_mode_get(ImuFilteringConfigurationRegister self) -> vn::protocol::uart::FilterMode"},
	 { (char *)"ImuFilteringConfigurationRegister_pres_filter_mode_set", _wrap_ImuFilteringConfigurationRegister_pres_filter_mode_set, METH_VARARGS, (char *)"ImuFilteringConfigurationRegister_pres_filter_mode_set(ImuFilteringConfigurationRegister self, vn::protocol::uart::FilterMode presFilterMode)"},
	 { (char *)"ImuFilteringConfigurationRegister_pres_filter_mode_get", _wrap_ImuFilteringConfigurationRegister_pres_filter_mode_get, METH_VARARGS, (char *)"ImuFilteringConfigurationRegister_pres_filter_mode_get(ImuFilteringConfigurationRegister self) -> vn::protocol::uart::FilterMode"},
	 { (char *)"new_ImuFilteringConfigurationRegister", _wrap_new_ImuFilteringConfigurationRegister, METH_VARARGS, (char *)"\n"
		"ImuFilteringConfigurationRegister()\n"
		"new_ImuFilteringConfigurationRegister(uint16_t magWindowSizeIn, uint16_t accelWindowSizeIn, uint16_t gyroWindowSizeIn, uint16_t tempWindowSizeIn, uint16_t presWindowSizeIn, vn::protocol::uart::FilterMode magFilterModeIn, vn::protocol::uart::FilterMode accelFilterModeIn, vn::protocol::uart::FilterMode gyroFilterModeIn, vn::protocol::uart::FilterMode tempFilterModeIn, vn::protocol::uart::FilterMode presFilterModeIn) -> ImuFilteringConfigurationRegister\n"
		""},
	 { (char *)"delete_ImuFilteringConfigurationRegister", _wrap_delete_ImuFilteringConfigurationRegister, METH_VARARGS, (char *)"delete_ImuFilteringConfigurationRegister(ImuFilteringConfigurationRegister self)"},
	 { (char *)"ImuFilteringConfigurationRegister_swigregister", ImuFilteringConfigurationRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"GpsCompassBaselineRegister_position_set", _wrap_GpsCompassBaselineRegister_position_set, METH_VARARGS, (char *)"GpsCompassBaselineRegister_position_set(GpsCompassBaselineRegister self, vec3f position)"},
	 { (char *)"GpsCompassBaselineRegister_position_get", _wrap_GpsCompassBaselineRegister_position_get, METH_VARARGS, (char *)"GpsCompassBaselineRegister_position_get(GpsCompassBaselineRegister self) -> vec3f"},
	 { (char *)"GpsCompassBaselineRegister_uncertainty_set", _wrap_GpsCompassBaselineRegister_uncertainty_set, METH_VARARGS, (char *)"GpsCompassBaselineRegister_uncertainty_set(GpsCompassBaselineRegister self, vec3f uncertainty)"},
	 { (char *)"GpsCompassBaselineRegister_uncertainty_get", _wrap_GpsCompassBaselineRegister_uncertainty_get, METH_VARARGS, (char *)"GpsCompassBaselineRegister_uncertainty_get(GpsCompassBaselineRegister self) -> vec3f"},
	 { (char *)"new_GpsCompassBaselineRegister", _wrap_new_GpsCompassBaselineRegister, METH_VARARGS, (char *)"\n"
		"GpsCompassBaselineRegister()\n"
		"new_GpsCompassBaselineRegister(vec3f positionIn, vec3f uncertaintyIn) -> GpsCompassBaselineRegister\n"
		""},
	 { (char *)"delete_GpsCompassBaselineRegister", _wrap_delete_GpsCompassBaselineRegister, METH_VARARGS, (char *)"delete_GpsCompassBaselineRegister(GpsCompassBaselineRegister self)"},
	 { (char *)"GpsCompassBaselineRegister_swigregister", GpsCompassBaselineRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"GpsCompassEstimatedBaselineRegister_est_baseline_used_set", _wrap_GpsCompassEstimatedBaselineRegister_est_baseline_used_set, METH_VARARGS, (char *)"GpsCompassEstimatedBaselineRegister_est_baseline_used_set(GpsCompassEstimatedBaselineRegister self, bool estBaselineUsed)"},
	 { (char *)"GpsCompassEstimatedBaselineRegister_est_baseline_used_get", _wrap_GpsCompassEstimatedBaselineRegister_est_baseline_used_get, METH_VARARGS, (char *)"GpsCompassEstimatedBaselineRegister_est_baseline_used_get(GpsCompassEstimatedBaselineRegister self) -> bool"},
	 { (char *)"GpsCompassEstimatedBaselineRegister_num_meas_set", _wrap_GpsCompassEstimatedBaselineRegister_num_meas_set, METH_VARARGS, (char *)"GpsCompassEstimatedBaselineRegister_num_meas_set(GpsCompassEstimatedBaselineRegister self, uint16_t numMeas)"},
	 { (char *)"GpsCompassEstimatedBaselineRegister_num_meas_get", _wrap_GpsCompassEstimatedBaselineRegister_num_meas_get, METH_VARARGS, (char *)"GpsCompassEstimatedBaselineRegister_num_meas_get(GpsCompassEstimatedBaselineRegister self) -> uint16_t"},
	 { (char *)"GpsCompassEstimatedBaselineRegister_position_set", _wrap_GpsCompassEstimatedBaselineRegister_position_set, METH_VARARGS, (char *)"GpsCompassEstimatedBaselineRegister_position_set(GpsCompassEstimatedBaselineRegister self, vec3f position)"},
	 { (char *)"GpsCompassEstimatedBaselineRegister_position_get", _wrap_GpsCompassEstimatedBaselineRegister_position_get, METH_VARARGS, (char *)"GpsCompassEstimatedBaselineRegister_position_get(GpsCompassEstimatedBaselineRegister self) -> vec3f"},
	 { (char *)"GpsCompassEstimatedBaselineRegister_uncertainty_set", _wrap_GpsCompassEstimatedBaselineRegister_uncertainty_set, METH_VARARGS, (char *)"GpsCompassEstimatedBaselineRegister_uncertainty_set(GpsCompassEstimatedBaselineRegister self, vec3f uncertainty)"},
	 { (char *)"GpsCompassEstimatedBaselineRegister_uncertainty_get", _wrap_GpsCompassEstimatedBaselineRegister_uncertainty_get, METH_VARARGS, (char *)"GpsCompassEstimatedBaselineRegister_uncertainty_get(GpsCompassEstimatedBaselineRegister self) -> vec3f"},
	 { (char *)"new_GpsCompassEstimatedBaselineRegister", _wrap_new_GpsCompassEstimatedBaselineRegister, METH_VARARGS, (char *)"\n"
		"GpsCompassEstimatedBaselineRegister()\n"
		"new_GpsCompassEstimatedBaselineRegister(bool estBaselineUsedIn, uint16_t numMeasIn, vec3f positionIn, vec3f uncertaintyIn) -> GpsCompassEstimatedBaselineRegister\n"
		""},
	 { (char *)"delete_GpsCompassEstimatedBaselineRegister", _wrap_delete_GpsCompassEstimatedBaselineRegister, METH_VARARGS, (char *)"delete_GpsCompassEstimatedBaselineRegister(GpsCompassEstimatedBaselineRegister self)"},
	 { (char *)"GpsCompassEstimatedBaselineRegister_swigregister", GpsCompassEstimatedBaselineRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"ImuRateConfigurationRegister_imu_rate_set", _wrap_ImuRateConfigurationRegister_imu_rate_set, METH_VARARGS, (char *)"ImuRateConfigurationRegister_imu_rate_set(ImuRateConfigurationRegister self, uint16_t imuRate)"},
	 { (char *)"ImuRateConfigurationRegister_imu_rate_get", _wrap_ImuRateConfigurationRegister_imu_rate_get, METH_VARARGS, (char *)"ImuRateConfigurationRegister_imu_rate_get(ImuRateConfigurationRegister self) -> uint16_t"},
	 { (char *)"ImuRateConfigurationRegister_nav_divisor_set", _wrap_ImuRateConfigurationRegister_nav_divisor_set, METH_VARARGS, (char *)"ImuRateConfigurationRegister_nav_divisor_set(ImuRateConfigurationRegister self, uint16_t navDivisor)"},
	 { (char *)"ImuRateConfigurationRegister_nav_divisor_get", _wrap_ImuRateConfigurationRegister_nav_divisor_get, METH_VARARGS, (char *)"ImuRateConfigurationRegister_nav_divisor_get(ImuRateConfigurationRegister self) -> uint16_t"},
	 { (char *)"ImuRateConfigurationRegister_filter_target_rate_set", _wrap_ImuRateConfigurationRegister_filter_target_rate_set, METH_VARARGS, (char *)"ImuRateConfigurationRegister_filter_target_rate_set(ImuRateConfigurationRegister self, float filterTargetRate)"},
	 { (char *)"ImuRateConfigurationRegister_filter_target_rate_get", _wrap_ImuRateConfigurationRegister_filter_target_rate_get, METH_VARARGS, (char *)"ImuRateConfigurationRegister_filter_target_rate_get(ImuRateConfigurationRegister self) -> float"},
	 { (char *)"ImuRateConfigurationRegister_filter_min_rate_set", _wrap_ImuRateConfigurationRegister_filter_min_rate_set, METH_VARARGS, (char *)"ImuRateConfigurationRegister_filter_min_rate_set(ImuRateConfigurationRegister self, float filterMinRate)"},
	 { (char *)"ImuRateConfigurationRegister_filter_min_rate_get", _wrap_ImuRateConfigurationRegister_filter_min_rate_get, METH_VARARGS, (char *)"ImuRateConfigurationRegister_filter_min_rate_get(ImuRateConfigurationRegister self) -> float"},
	 { (char *)"new_ImuRateConfigurationRegister", _wrap_new_ImuRateConfigurationRegister, METH_VARARGS, (char *)"\n"
		"ImuRateConfigurationRegister()\n"
		"new_ImuRateConfigurationRegister(uint16_t imuRateIn, uint16_t navDivisorIn, float filterTargetRateIn, float filterMinRateIn) -> ImuRateConfigurationRegister\n"
		""},
	 { (char *)"delete_ImuRateConfigurationRegister", _wrap_delete_ImuRateConfigurationRegister, METH_VARARGS, (char *)"delete_ImuRateConfigurationRegister(ImuRateConfigurationRegister self)"},
	 { (char *)"ImuRateConfigurationRegister_swigregister", ImuRateConfigurationRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_yaw_pitch_roll_set", _wrap_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_yaw_pitch_roll_set, METH_VARARGS, (char *)"YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_yaw_pitch_roll_set(YawPitchRollTrueBodyAccelerationAndAngularRatesRegister self, vec3f yawPitchRoll)"},
	 { (char *)"YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_yaw_pitch_roll_get", _wrap_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_yaw_pitch_roll_get, METH_VARARGS, (char *)"YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_yaw_pitch_roll_get(YawPitchRollTrueBodyAccelerationAndAngularRatesRegister self) -> vec3f"},
	 { (char *)"YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_body_accel_set", _wrap_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_body_accel_set, METH_VARARGS, (char *)"YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_body_accel_set(YawPitchRollTrueBodyAccelerationAndAngularRatesRegister self, vec3f bodyAccel)"},
	 { (char *)"YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_body_accel_get", _wrap_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_body_accel_get, METH_VARARGS, (char *)"YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_body_accel_get(YawPitchRollTrueBodyAccelerationAndAngularRatesRegister self) -> vec3f"},
	 { (char *)"YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_gyro_set", _wrap_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_gyro_set, METH_VARARGS, (char *)"YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_gyro_set(YawPitchRollTrueBodyAccelerationAndAngularRatesRegister self, vec3f gyro)"},
	 { (char *)"YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_gyro_get", _wrap_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_gyro_get, METH_VARARGS, (char *)"YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_gyro_get(YawPitchRollTrueBodyAccelerationAndAngularRatesRegister self) -> vec3f"},
	 { (char *)"new_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister", _wrap_new_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister, METH_VARARGS, (char *)"\n"
		"YawPitchRollTrueBodyAccelerationAndAngularRatesRegister()\n"
		"new_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister(vec3f yawPitchRollIn, vec3f bodyAccelIn, vec3f gyroIn) -> YawPitchRollTrueBodyAccelerationAndAngularRatesRegister\n"
		""},
	 { (char *)"delete_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister", _wrap_delete_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister, METH_VARARGS, (char *)"delete_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister(YawPitchRollTrueBodyAccelerationAndAngularRatesRegister self)"},
	 { (char *)"YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_swigregister", YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_yaw_pitch_roll_set", _wrap_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_yaw_pitch_roll_set, METH_VARARGS, (char *)"YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_yaw_pitch_roll_set(YawPitchRollTrueInertialAccelerationAndAngularRatesRegister self, vec3f yawPitchRoll)"},
	 { (char *)"YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_yaw_pitch_roll_get", _wrap_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_yaw_pitch_roll_get, METH_VARARGS, (char *)"YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_yaw_pitch_roll_get(YawPitchRollTrueInertialAccelerationAndAngularRatesRegister self) -> vec3f"},
	 { (char *)"YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_inertial_accel_set", _wrap_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_inertial_accel_set, METH_VARARGS, (char *)"YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_inertial_accel_set(YawPitchRollTrueInertialAccelerationAndAngularRatesRegister self, vec3f inertialAccel)"},
	 { (char *)"YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_inertial_accel_get", _wrap_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_inertial_accel_get, METH_VARARGS, (char *)"YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_inertial_accel_get(YawPitchRollTrueInertialAccelerationAndAngularRatesRegister self) -> vec3f"},
	 { (char *)"YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_gyro_set", _wrap_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_gyro_set, METH_VARARGS, (char *)"YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_gyro_set(YawPitchRollTrueInertialAccelerationAndAngularRatesRegister self, vec3f gyro)"},
	 { (char *)"YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_gyro_get", _wrap_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_gyro_get, METH_VARARGS, (char *)"YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_gyro_get(YawPitchRollTrueInertialAccelerationAndAngularRatesRegister self) -> vec3f"},
	 { (char *)"new_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister", _wrap_new_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister, METH_VARARGS, (char *)"\n"
		"YawPitchRollTrueInertialAccelerationAndAngularRatesRegister()\n"
		"new_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister(vec3f yawPitchRollIn, vec3f inertialAccelIn, vec3f gyroIn) -> YawPitchRollTrueInertialAccelerationAndAngularRatesRegister\n"
		""},
	 { (char *)"delete_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister", _wrap_delete_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister, METH_VARARGS, (char *)"delete_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister(YawPitchRollTrueInertialAccelerationAndAngularRatesRegister self)"},
	 { (char *)"YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_swigregister", YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"str", _wrap_str, METH_VARARGS, (char *)"\n"
		"str(QuaternionMagneticAccelerationAndAngularRatesRegister reg) -> std::string\n"
		"str(MagneticAccelerationAndAngularRatesRegister reg) -> std::string\n"
		"str(MagneticAndGravityReferenceVectorsRegister reg) -> std::string\n"
		"str(FilterMeasurementsVarianceParametersRegister reg) -> std::string\n"
		"str(MagnetometerCompensationRegister reg) -> std::string\n"
		"str(FilterActiveTuningParametersRegister reg) -> std::string\n"
		"str(AccelerationCompensationRegister reg) -> std::string\n"
		"str(YawPitchRollMagneticAccelerationAndAngularRatesRegister reg) -> std::string\n"
		"str(CommunicationProtocolControlRegister reg) -> std::string\n"
		"str(SynchronizationControlRegister reg) -> std::string\n"
		"str(SynchronizationStatusRegister reg) -> std::string\n"
		"str(FilterBasicControlRegister reg) -> std::string\n"
		"str(VpeBasicControlRegister reg) -> std::string\n"
		"str(VpeMagnetometerBasicTuningRegister reg) -> std::string\n"
		"str(VpeMagnetometerAdvancedTuningRegister reg) -> std::string\n"
		"str(VpeAccelerometerBasicTuningRegister reg) -> std::string\n"
		"str(VpeAccelerometerAdvancedTuningRegister reg) -> std::string\n"
		"str(VpeGyroBasicTuningRegister reg) -> std::string\n"
		"str(MagnetometerCalibrationControlRegister reg) -> std::string\n"
		"str(CalculatedMagnetometerCalibrationRegister reg) -> std::string\n"
		"str(VelocityCompensationControlRegister reg) -> std::string\n"
		"str(VelocityCompensationStatusRegister reg) -> std::string\n"
		"str(ImuMeasurementsRegister reg) -> std::string\n"
		"str(GpsConfigurationRegister reg) -> std::string\n"
		"str(GpsSolutionLlaRegister reg) -> std::string\n"
		"str(GpsSolutionEcefRegister reg) -> std::string\n"
		"str(InsSolutionLlaRegister reg) -> std::string\n"
		"str(InsSolutionEcefRegister reg) -> std::string\n"
		"str(InsBasicConfigurationRegisterVn200 reg) -> std::string\n"
		"str(InsBasicConfigurationRegisterVn300 reg) -> std::string\n"
		"str(InsAdvancedConfigurationRegister reg) -> std::string\n"
		"str(InsStateLlaRegister reg) -> std::string\n"
		"str(InsStateEcefRegister reg) -> std::string\n"
		"str(StartupFilterBiasEstimateRegister reg) -> std::string\n"
		"str(DeltaThetaAndDeltaVelocityRegister reg) -> std::string\n"
		"str(DeltaThetaAndDeltaVelocityConfigurationRegister reg) -> std::string\n"
		"str(ReferenceVectorConfigurationRegister reg) -> std::string\n"
		"str(GyroCompensationRegister reg) -> std::string\n"
		"str(ImuFilteringConfigurationRegister reg) -> std::string\n"
		"str(GpsCompassBaselineRegister reg) -> std::string\n"
		"str(GpsCompassEstimatedBaselineRegister reg) -> std::string\n"
		"str(ImuRateConfigurationRegister reg) -> std::string\n"
		"str(YawPitchRollTrueBodyAccelerationAndAngularRatesRegister reg) -> std::string\n"
		"str(YawPitchRollTrueInertialAccelerationAndAngularRatesRegister reg) -> std::string\n"
		""},
	 { (char *)"parse", _wrap_parse, METH_VARARGS, (char *)"\n"
		"parse(std::string const & arg1, vn::protocol::uart::AsciiAsync & val, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::AsciiAsync & val) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::SyncInMode & val, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::SyncInMode & val) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::SyncInEdge & val, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::SyncInEdge & val) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::SyncOutMode & val, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::SyncOutMode & val) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::SyncOutPolarity & val, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::SyncOutPolarity & val) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::CountMode & val, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::CountMode & val) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::StatusMode & val, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::StatusMode & val) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::ChecksumMode & val, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::ChecksumMode & val) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::ErrorMode & val, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::ErrorMode & val) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::FilterMode & val, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::FilterMode & val) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::IntegrationFrame & val, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::IntegrationFrame & val) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::CompensationMode & val, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::CompensationMode & val) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::GpsFix & val, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::GpsFix & val) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::GpsMode & val, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::GpsMode & val) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::PpsSource & val, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::PpsSource & val) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::VpeEnable & val, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::VpeEnable & val) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::HeadingMode & val, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::HeadingMode & val) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::VpeMode & val, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::VpeMode & val) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::Scenario & val, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::Scenario & val) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::HsiMode & val, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::HsiMode & val) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::HsiOutput & val, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::HsiOutput & val) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::VelocityCompensationMode & val, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::VelocityCompensationMode & val) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::MagneticMode & val, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::MagneticMode & val) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::ExternalSensorMode & val, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::ExternalSensorMode & val) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::FoamInit & val, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, vn::protocol::uart::FoamInit & val) -> bool\n"
		"parse(std::string const & arg1, MagneticAndGravityReferenceVectorsRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, MagneticAndGravityReferenceVectorsRegister reg) -> bool\n"
		"parse(std::string const & arg1, FilterMeasurementsVarianceParametersRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, FilterMeasurementsVarianceParametersRegister reg) -> bool\n"
		"parse(std::string const & arg1, MagnetometerCompensationRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, MagnetometerCompensationRegister reg) -> bool\n"
		"parse(std::string const & arg1, FilterActiveTuningParametersRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, FilterActiveTuningParametersRegister reg) -> bool\n"
		"parse(std::string const & arg1, AccelerationCompensationRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, AccelerationCompensationRegister reg) -> bool\n"
		"parse(std::string const & arg1, CommunicationProtocolControlRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, CommunicationProtocolControlRegister reg) -> bool\n"
		"parse(std::string const & arg1, SynchronizationControlRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, SynchronizationControlRegister reg) -> bool\n"
		"parse(std::string const & arg1, SynchronizationStatusRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, SynchronizationStatusRegister reg) -> bool\n"
		"parse(std::string const & arg1, FilterBasicControlRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, FilterBasicControlRegister reg) -> bool\n"
		"parse(std::string const & arg1, VpeBasicControlRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, VpeBasicControlRegister reg) -> bool\n"
		"parse(std::string const & arg1, VpeMagnetometerBasicTuningRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, VpeMagnetometerBasicTuningRegister reg) -> bool\n"
		"parse(std::string const & arg1, VpeMagnetometerAdvancedTuningRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, VpeMagnetometerAdvancedTuningRegister reg) -> bool\n"
		"parse(std::string const & arg1, VpeAccelerometerBasicTuningRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, VpeAccelerometerBasicTuningRegister reg) -> bool\n"
		"parse(std::string const & arg1, VpeAccelerometerAdvancedTuningRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, VpeAccelerometerAdvancedTuningRegister reg) -> bool\n"
		"parse(std::string const & arg1, VpeGyroBasicTuningRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, VpeGyroBasicTuningRegister reg) -> bool\n"
		"parse(std::string const & arg1, MagnetometerCalibrationControlRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, MagnetometerCalibrationControlRegister reg) -> bool\n"
		"parse(std::string const & arg1, VelocityCompensationControlRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, VelocityCompensationControlRegister reg) -> bool\n"
		"parse(std::string const & arg1, GpsConfigurationRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, GpsConfigurationRegister reg) -> bool\n"
		"parse(std::string const & arg1, InsBasicConfigurationRegisterVn200 reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, InsBasicConfigurationRegisterVn200 reg) -> bool\n"
		"parse(std::string const & arg1, InsBasicConfigurationRegisterVn300 reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, InsBasicConfigurationRegisterVn300 reg) -> bool\n"
		"parse(std::string const & arg1, InsAdvancedConfigurationRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, InsAdvancedConfigurationRegister reg) -> bool\n"
		"parse(std::string const & arg1, StartupFilterBiasEstimateRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, StartupFilterBiasEstimateRegister reg) -> bool\n"
		"parse(std::string const & arg1, DeltaThetaAndDeltaVelocityConfigurationRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, DeltaThetaAndDeltaVelocityConfigurationRegister reg) -> bool\n"
		"parse(std::string const & arg1, ReferenceVectorConfigurationRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, ReferenceVectorConfigurationRegister reg) -> bool\n"
		"parse(std::string const & arg1, GyroCompensationRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, GyroCompensationRegister reg) -> bool\n"
		"parse(std::string const & arg1, ImuFilteringConfigurationRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, ImuFilteringConfigurationRegister reg) -> bool\n"
		"parse(std::string const & arg1, GpsCompassBaselineRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, GpsCompassBaselineRegister reg) -> bool\n"
		"parse(std::string const & arg1, ImuRateConfigurationRegister reg, bool allowSloppy=True) -> bool\n"
		"parse(std::string const & arg1, ImuRateConfigurationRegister reg) -> bool\n"
		""},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, (char *)"delete_SwigPyIterator(SwigPyIterator self)"},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, (char *)"SwigPyIterator_value(SwigPyIterator self) -> PyObject *"},
	 { (char *)"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, (char *)"\n"
		"incr(size_t n=1) -> SwigPyIterator\n"
		"SwigPyIterator_incr(SwigPyIterator self) -> SwigPyIterator\n"
		""},
	 { (char *)"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, (char *)"\n"
		"decr(size_t n=1) -> SwigPyIterator\n"
		"SwigPyIterator_decr(SwigPyIterator self) -> SwigPyIterator\n"
		""},
	 { (char *)"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, (char *)"SwigPyIterator_distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"},
	 { (char *)"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, (char *)"SwigPyIterator_equal(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, (char *)"SwigPyIterator_copy(SwigPyIterator self) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, (char *)"SwigPyIterator_next(SwigPyIterator self) -> PyObject *"},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, (char *)"SwigPyIterator___next__(SwigPyIterator self) -> PyObject *"},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, (char *)"SwigPyIterator_previous(SwigPyIterator self) -> PyObject *"},
	 { (char *)"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, (char *)"SwigPyIterator_advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, (char *)"SwigPyIterator___eq__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, (char *)"SwigPyIterator___ne__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, (char *)"SwigPyIterator___iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, (char *)"SwigPyIterator___isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, (char *)"SwigPyIterator___add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, (char *)"\n"
		"__sub__(ptrdiff_t n) -> SwigPyIterator\n"
		"SwigPyIterator___sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t\n"
		""},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"VnSensor___supported_baudrates", _wrap_VnSensor___supported_baudrates, METH_VARARGS, (char *)"VnSensor___supported_baudrates() -> UInt32Vector"},
	 { (char *)"VnSensor_supportedAsyncDataOutputFrequencies", _wrap_VnSensor_supportedAsyncDataOutputFrequencies, METH_VARARGS, (char *)"VnSensor_supportedAsyncDataOutputFrequencies() -> UInt32Vector"},
	 { (char *)"new_VnSensor", _wrap_new_VnSensor, METH_VARARGS, (char *)"new_VnSensor() -> VnSensor"},
	 { (char *)"delete_VnSensor", _wrap_delete_VnSensor, METH_VARARGS, (char *)"delete_VnSensor(VnSensor self)"},
	 { (char *)"VnSensor_verify_sensor_connectivity", _wrap_VnSensor_verify_sensor_connectivity, METH_VARARGS, (char *)"VnSensor_verify_sensor_connectivity(VnSensor self) -> bool"},
	 { (char *)"VnSensor_connect", _wrap_VnSensor_connect, METH_VARARGS, (char *)"\n"
		"connect(std::string const & portName, uint32_t baudrate)\n"
		"VnSensor_connect(VnSensor self, vn::xplat::IPort * port)\n"
		""},
	 { (char *)"VnSensor_disconnect", _wrap_VnSensor_disconnect, METH_VARARGS, (char *)"VnSensor_disconnect(VnSensor self)"},
	 { (char *)"VnSensor_transaction", _wrap_VnSensor_transaction, METH_VARARGS, (char *)"VnSensor_transaction(VnSensor self, std::string toSend) -> std::string"},
	 { (char *)"VnSensor_tare", _wrap_VnSensor_tare, METH_VARARGS, (char *)"\n"
		"tare(bool waitForReply=True)\n"
		"VnSensor_tare(VnSensor self)\n"
		""},
	 { (char *)"VnSensor_set_gyro_bias", _wrap_VnSensor_set_gyro_bias, METH_VARARGS, (char *)"\n"
		"set_gyro_bias(bool waitForReply=True)\n"
		"VnSensor_set_gyro_bias(VnSensor self)\n"
		""},
	 { (char *)"VnSensor_magnetic_disturbance_present", _wrap_VnSensor_magnetic_disturbance_present, METH_VARARGS, (char *)"\n"
		"magnetic_disturbance_present(bool disturbancePresent, bool waitForReply=True)\n"
		"VnSensor_magnetic_disturbance_present(VnSensor self, bool disturbancePresent)\n"
		""},
	 { (char *)"VnSensor_acceleration_disturbance_present", _wrap_VnSensor_acceleration_disturbance_present, METH_VARARGS, (char *)"\n"
		"acceleration_disturbance_present(bool disturbancePresent, bool waitForReply=True)\n"
		"VnSensor_acceleration_disturbance_present(VnSensor self, bool disturbancePresent)\n"
		""},
	 { (char *)"VnSensor_write_settings", _wrap_VnSensor_write_settings, METH_VARARGS, (char *)"\n"
		"write_settings(bool waitForReply=True)\n"
		"VnSensor_write_settings(VnSensor self)\n"
		""},
	 { (char *)"VnSensor_restore_factory_settings", _wrap_VnSensor_restore_factory_settings, METH_VARARGS, (char *)"\n"
		"restore_factory_settings(bool waitForReply=True)\n"
		"VnSensor_restore_factory_settings(VnSensor self)\n"
		""},
	 { (char *)"VnSensor_reset", _wrap_VnSensor_reset, METH_VARARGS, (char *)"\n"
		"reset(bool waitForReply=True)\n"
		"VnSensor_reset(VnSensor self)\n"
		""},
	 { (char *)"VnSensor_change_baudrate", _wrap_VnSensor_change_baudrate, METH_VARARGS, (char *)"\n"
		"change_baudrate(uint32_t baudrate, bool changeSensorAlso=True, uint8_t activeSensorPort=0)\n"
		"change_baudrate(uint32_t baudrate, bool changeSensorAlso=True)\n"
		"VnSensor_change_baudrate(VnSensor self, uint32_t baudrate)\n"
		""},
	 { (char *)"VnSensor_determine_device_family", _wrap_VnSensor_determine_device_family, METH_VARARGS, (char *)"\n"
		"determine_device_family() -> vn::sensors::VnSensor::Family\n"
		"VnSensor_determine_device_family(std::string modelNumber) -> vn::sensors::VnSensor::Family\n"
		""},
	 { (char *)"VnSensor_registerRawDataReceivedHandler", _wrap_VnSensor_registerRawDataReceivedHandler, METH_VARARGS, (char *)"VnSensor_registerRawDataReceivedHandler(VnSensor self, void * userData, vn::sensors::VnSensor::RawDataReceivedHandler handler)"},
	 { (char *)"VnSensor_unregisterRawDataReceivedHandler", _wrap_VnSensor_unregisterRawDataReceivedHandler, METH_VARARGS, (char *)"VnSensor_unregisterRawDataReceivedHandler(VnSensor self)"},
	 { (char *)"VnSensor_registerPossiblePacketFoundHandler", _wrap_VnSensor_registerPossiblePacketFoundHandler, METH_VARARGS, (char *)"VnSensor_registerPossiblePacketFoundHandler(VnSensor self, void * userData, vn::sensors::VnSensor::PossiblePacketFoundHandler handler)"},
	 { (char *)"VnSensor_unregisterPossiblePacketFoundHandler", _wrap_VnSensor_unregisterPossiblePacketFoundHandler, METH_VARARGS, (char *)"VnSensor_unregisterPossiblePacketFoundHandler(VnSensor self)"},
	 { (char *)"VnSensor_registerAsyncPacketReceivedHandler", _wrap_VnSensor_registerAsyncPacketReceivedHandler, METH_VARARGS, (char *)"VnSensor_registerAsyncPacketReceivedHandler(VnSensor self, void * userData, vn::sensors::VnSensor::AsyncPacketReceivedHandler handler)"},
	 { (char *)"VnSensor_unregisterAsyncPacketReceivedHandler", _wrap_VnSensor_unregisterAsyncPacketReceivedHandler, METH_VARARGS, (char *)"VnSensor_unregisterAsyncPacketReceivedHandler(VnSensor self)"},
	 { (char *)"VnSensor_registerErrorPacketReceivedHandler", _wrap_VnSensor_registerErrorPacketReceivedHandler, METH_VARARGS, (char *)"VnSensor_registerErrorPacketReceivedHandler(VnSensor self, void * userData, vn::sensors::VnSensor::ErrorPacketReceivedHandler handler)"},
	 { (char *)"VnSensor_unregisterErrorPacketReceivedHandler", _wrap_VnSensor_unregisterErrorPacketReceivedHandler, METH_VARARGS, (char *)"VnSensor_unregisterErrorPacketReceivedHandler(VnSensor self)"},
	 { (char *)"VnSensor_registerUsbCableUnpluggedNotificationHandler", _wrap_VnSensor_registerUsbCableUnpluggedNotificationHandler, METH_VARARGS, (char *)"VnSensor_registerUsbCableUnpluggedNotificationHandler(VnSensor self, void * userData, void (*)(void *) handler)"},
	 { (char *)"VnSensor_unregisterUsbCableUnpluggedNotificationHandler", _wrap_VnSensor_unregisterUsbCableUnpluggedNotificationHandler, METH_VARARGS, (char *)"VnSensor_unregisterUsbCableUnpluggedNotificationHandler(VnSensor self)"},
	 { (char *)"VnSensor_read_binary_output_1", _wrap_VnSensor_read_binary_output_1, METH_VARARGS, (char *)"VnSensor_read_binary_output_1(VnSensor self) -> BinaryOutputRegister"},
	 { (char *)"VnSensor_write_binary_output_1", _wrap_VnSensor_write_binary_output_1, METH_VARARGS, (char *)"\n"
		"write_binary_output_1(BinaryOutputRegister fields, bool waitForReply=True)\n"
		"VnSensor_write_binary_output_1(VnSensor self, BinaryOutputRegister fields)\n"
		""},
	 { (char *)"VnSensor_read_binary_output_2", _wrap_VnSensor_read_binary_output_2, METH_VARARGS, (char *)"VnSensor_read_binary_output_2(VnSensor self) -> BinaryOutputRegister"},
	 { (char *)"VnSensor_write_binary_output_2", _wrap_VnSensor_write_binary_output_2, METH_VARARGS, (char *)"\n"
		"write_binary_output_2(BinaryOutputRegister fields, bool waitForReply=True)\n"
		"VnSensor_write_binary_output_2(VnSensor self, BinaryOutputRegister fields)\n"
		""},
	 { (char *)"VnSensor_read_binary_output_3", _wrap_VnSensor_read_binary_output_3, METH_VARARGS, (char *)"VnSensor_read_binary_output_3(VnSensor self) -> BinaryOutputRegister"},
	 { (char *)"VnSensor_write_binary_output_3", _wrap_VnSensor_write_binary_output_3, METH_VARARGS, (char *)"\n"
		"write_binary_output_3(BinaryOutputRegister fields, bool waitForReply=True)\n"
		"VnSensor_write_binary_output_3(VnSensor self, BinaryOutputRegister fields)\n"
		""},
	 { (char *)"VnSensor_read_ins_basic_configuration_vn200", _wrap_VnSensor_read_ins_basic_configuration_vn200, METH_VARARGS, (char *)"VnSensor_read_ins_basic_configuration_vn200(VnSensor self) -> InsBasicConfigurationRegisterVn200"},
	 { (char *)"VnSensor_write_ins_basic_configuration_vn200", _wrap_VnSensor_write_ins_basic_configuration_vn200, METH_VARARGS, (char *)"\n"
		"write_ins_basic_configuration_vn200(InsBasicConfigurationRegisterVn200 fields, bool waitForReply=True)\n"
		"write_ins_basic_configuration_vn200(InsBasicConfigurationRegisterVn200 fields)\n"
		"write_ins_basic_configuration_vn200(vn::protocol::uart::Scenario scenario, uint8_t const & ahrsAiding, bool waitForReply=True)\n"
		"VnSensor_write_ins_basic_configuration_vn200(VnSensor self, vn::protocol::uart::Scenario scenario, uint8_t const & ahrsAiding)\n"
		""},
	 { (char *)"VnSensor_read_ins_basic_configuration_vn300", _wrap_VnSensor_read_ins_basic_configuration_vn300, METH_VARARGS, (char *)"VnSensor_read_ins_basic_configuration_vn300(VnSensor self) -> InsBasicConfigurationRegisterVn300"},
	 { (char *)"VnSensor_write_ins_basic_configuration_vn300", _wrap_VnSensor_write_ins_basic_configuration_vn300, METH_VARARGS, (char *)"\n"
		"write_ins_basic_configuration_vn300(InsBasicConfigurationRegisterVn300 fields, bool waitForReply=True)\n"
		"write_ins_basic_configuration_vn300(InsBasicConfigurationRegisterVn300 fields)\n"
		"write_ins_basic_configuration_vn300(vn::protocol::uart::Scenario scenario, uint8_t const & ahrsAiding, uint8_t const & estBaseline, bool waitForReply=True)\n"
		"VnSensor_write_ins_basic_configuration_vn300(VnSensor self, vn::protocol::uart::Scenario scenario, uint8_t const & ahrsAiding, uint8_t const & estBaseline)\n"
		""},
	 { (char *)"VnSensor_read_user_tag", _wrap_VnSensor_read_user_tag, METH_VARARGS, (char *)"VnSensor_read_user_tag(VnSensor self) -> std::string"},
	 { (char *)"VnSensor_write_user_tag", _wrap_VnSensor_write_user_tag, METH_VARARGS, (char *)"\n"
		"write_user_tag(std::string const & tag, bool waitForReply=True)\n"
		"VnSensor_write_user_tag(VnSensor self, std::string const & tag)\n"
		""},
	 { (char *)"VnSensor_read_model_number", _wrap_VnSensor_read_model_number, METH_VARARGS, (char *)"VnSensor_read_model_number(VnSensor self) -> std::string"},
	 { (char *)"VnSensor_read_hardware_revision", _wrap_VnSensor_read_hardware_revision, METH_VARARGS, (char *)"VnSensor_read_hardware_revision(VnSensor self) -> uint32_t"},
	 { (char *)"VnSensor_read_serial_number", _wrap_VnSensor_read_serial_number, METH_VARARGS, (char *)"VnSensor_read_serial_number(VnSensor self) -> uint32_t"},
	 { (char *)"VnSensor_read_firmware_version", _wrap_VnSensor_read_firmware_version, METH_VARARGS, (char *)"VnSensor_read_firmware_version(VnSensor self) -> std::string"},
	 { (char *)"VnSensor_read_serial_baudrate", _wrap_VnSensor_read_serial_baudrate, METH_VARARGS, (char *)"\n"
		"read_serial_baudrate(uint8_t port) -> uint32_t\n"
		"VnSensor_read_serial_baudrate(VnSensor self) -> uint32_t\n"
		""},
	 { (char *)"VnSensor_write_serial_baudrate", _wrap_VnSensor_write_serial_baudrate, METH_VARARGS, (char *)"\n"
		"write_serial_baudrate(uint32_t const & baudrate, uint8_t port, bool waitForReply=True)\n"
		"write_serial_baudrate(uint32_t const & baudrate, uint8_t port)\n"
		"write_serial_baudrate(uint32_t const & baudrate, bool waitForReply=True)\n"
		"VnSensor_write_serial_baudrate(VnSensor self, uint32_t const & baudrate)\n"
		""},
	 { (char *)"VnSensor_read_async_data_output_type", _wrap_VnSensor_read_async_data_output_type, METH_VARARGS, (char *)"\n"
		"read_async_data_output_type(uint8_t port) -> vn::protocol::uart::AsciiAsync\n"
		"VnSensor_read_async_data_output_type(VnSensor self) -> vn::protocol::uart::AsciiAsync\n"
		""},
	 { (char *)"VnSensor_write_async_data_output_type", _wrap_VnSensor_write_async_data_output_type, METH_VARARGS, (char *)"\n"
		"write_async_data_output_type(vn::protocol::uart::AsciiAsync ador, uint8_t port, bool waitForReply=True)\n"
		"write_async_data_output_type(vn::protocol::uart::AsciiAsync ador, uint8_t port)\n"
		"write_async_data_output_type(vn::protocol::uart::AsciiAsync ador, bool waitForReply=True)\n"
		"VnSensor_write_async_data_output_type(VnSensor self, vn::protocol::uart::AsciiAsync ador)\n"
		""},
	 { (char *)"VnSensor_read_async_data_output_frequency", _wrap_VnSensor_read_async_data_output_frequency, METH_VARARGS, (char *)"\n"
		"read_async_data_output_frequency(uint8_t port) -> uint32_t\n"
		"VnSensor_read_async_data_output_frequency(VnSensor self) -> uint32_t\n"
		""},
	 { (char *)"VnSensor_write_async_data_output_frequency", _wrap_VnSensor_write_async_data_output_frequency, METH_VARARGS, (char *)"\n"
		"write_async_data_output_frequency(uint32_t const & adof, uint8_t port, bool waitForReply=True)\n"
		"write_async_data_output_frequency(uint32_t const & adof, uint8_t port)\n"
		"write_async_data_output_frequency(uint32_t const & adof, bool waitForReply=True)\n"
		"VnSensor_write_async_data_output_frequency(VnSensor self, uint32_t const & adof)\n"
		""},
	 { (char *)"VnSensor_read_yaw_pitch_roll", _wrap_VnSensor_read_yaw_pitch_roll, METH_VARARGS, (char *)"VnSensor_read_yaw_pitch_roll(VnSensor self) -> vec3f"},
	 { (char *)"VnSensor_read_attitude_quaternion", _wrap_VnSensor_read_attitude_quaternion, METH_VARARGS, (char *)"VnSensor_read_attitude_quaternion(VnSensor self) -> vec4f"},
	 { (char *)"VnSensor_read_quaternion_magnetic_acceleration_and_angular_rates", _wrap_VnSensor_read_quaternion_magnetic_acceleration_and_angular_rates, METH_VARARGS, (char *)"VnSensor_read_quaternion_magnetic_acceleration_and_angular_rates(VnSensor self) -> QuaternionMagneticAccelerationAndAngularRatesRegister"},
	 { (char *)"VnSensor_read_magnetic_measurements", _wrap_VnSensor_read_magnetic_measurements, METH_VARARGS, (char *)"VnSensor_read_magnetic_measurements(VnSensor self) -> vec3f"},
	 { (char *)"VnSensor_read_acceleration_measurements", _wrap_VnSensor_read_acceleration_measurements, METH_VARARGS, (char *)"VnSensor_read_acceleration_measurements(VnSensor self) -> vec3f"},
	 { (char *)"VnSensor_read_angular_rate_measurements", _wrap_VnSensor_read_angular_rate_measurements, METH_VARARGS, (char *)"VnSensor_read_angular_rate_measurements(VnSensor self) -> vec3f"},
	 { (char *)"VnSensor_read_magnetic_acceleration_and_angular_rates", _wrap_VnSensor_read_magnetic_acceleration_and_angular_rates, METH_VARARGS, (char *)"VnSensor_read_magnetic_acceleration_and_angular_rates(VnSensor self) -> MagneticAccelerationAndAngularRatesRegister"},
	 { (char *)"VnSensor_read_magnetic_and_gravity_reference_vectors", _wrap_VnSensor_read_magnetic_and_gravity_reference_vectors, METH_VARARGS, (char *)"VnSensor_read_magnetic_and_gravity_reference_vectors(VnSensor self) -> MagneticAndGravityReferenceVectorsRegister"},
	 { (char *)"VnSensor_write_magnetic_and_gravity_reference_vectors", _wrap_VnSensor_write_magnetic_and_gravity_reference_vectors, METH_VARARGS, (char *)"\n"
		"write_magnetic_and_gravity_reference_vectors(MagneticAndGravityReferenceVectorsRegister fields, bool waitForReply=True)\n"
		"write_magnetic_and_gravity_reference_vectors(MagneticAndGravityReferenceVectorsRegister fields)\n"
		"write_magnetic_and_gravity_reference_vectors(vec3f magRef, vec3f accRef, bool waitForReply=True)\n"
		"VnSensor_write_magnetic_and_gravity_reference_vectors(VnSensor self, vec3f magRef, vec3f accRef)\n"
		""},
	 { (char *)"VnSensor_read_filter_measurements_variance_parameters", _wrap_VnSensor_read_filter_measurements_variance_parameters, METH_VARARGS, (char *)"VnSensor_read_filter_measurements_variance_parameters(VnSensor self) -> FilterMeasurementsVarianceParametersRegister"},
	 { (char *)"VnSensor_write_filter_measurements_variance_parameters", _wrap_VnSensor_write_filter_measurements_variance_parameters, METH_VARARGS, (char *)"\n"
		"write_filter_measurements_variance_parameters(FilterMeasurementsVarianceParametersRegister fields, bool waitForReply=True)\n"
		"write_filter_measurements_variance_parameters(FilterMeasurementsVarianceParametersRegister fields)\n"
		"write_filter_measurements_variance_parameters(float const & angularWalkVariance, vec3f angularRateVariance, vec3f magneticVariance, vec3f accelerationVariance, bool waitForReply=True)\n"
		"VnSensor_write_filter_measurements_variance_parameters(VnSensor self, float const & angularWalkVariance, vec3f angularRateVariance, vec3f magneticVariance, vec3f accelerationVariance)\n"
		""},
	 { (char *)"VnSensor_read_magnetometer_compensation", _wrap_VnSensor_read_magnetometer_compensation, METH_VARARGS, (char *)"VnSensor_read_magnetometer_compensation(VnSensor self) -> MagnetometerCompensationRegister"},
	 { (char *)"VnSensor_write_magnetometer_compensation", _wrap_VnSensor_write_magnetometer_compensation, METH_VARARGS, (char *)"\n"
		"write_magnetometer_compensation(MagnetometerCompensationRegister fields, bool waitForReply=True)\n"
		"write_magnetometer_compensation(MagnetometerCompensationRegister fields)\n"
		"write_magnetometer_compensation(mat3f c, vec3f b, bool waitForReply=True)\n"
		"VnSensor_write_magnetometer_compensation(VnSensor self, mat3f c, vec3f b)\n"
		""},
	 { (char *)"VnSensor_read_filter_active_tuning_parameters", _wrap_VnSensor_read_filter_active_tuning_parameters, METH_VARARGS, (char *)"VnSensor_read_filter_active_tuning_parameters(VnSensor self) -> FilterActiveTuningParametersRegister"},
	 { (char *)"VnSensor_write_filter_active_tuning_parameters", _wrap_VnSensor_write_filter_active_tuning_parameters, METH_VARARGS, (char *)"\n"
		"write_filter_active_tuning_parameters(FilterActiveTuningParametersRegister fields, bool waitForReply=True)\n"
		"write_filter_active_tuning_parameters(FilterActiveTuningParametersRegister fields)\n"
		"write_filter_active_tuning_parameters(float const & magneticDisturbanceGain, float const & accelerationDisturbanceGain, float const & magneticDisturbanceMemory, float const & accelerationDisturbanceMemory, bool waitForReply=True)\n"
		"VnSensor_write_filter_active_tuning_parameters(VnSensor self, float const & magneticDisturbanceGain, float const & accelerationDisturbanceGain, float const & magneticDisturbanceMemory, float const & accelerationDisturbanceMemory)\n"
		""},
	 { (char *)"VnSensor_read_acceleration_compensation", _wrap_VnSensor_read_acceleration_compensation, METH_VARARGS, (char *)"VnSensor_read_acceleration_compensation(VnSensor self) -> AccelerationCompensationRegister"},
	 { (char *)"VnSensor_write_acceleration_compensation", _wrap_VnSensor_write_acceleration_compensation, METH_VARARGS, (char *)"\n"
		"write_acceleration_compensation(AccelerationCompensationRegister fields, bool waitForReply=True)\n"
		"write_acceleration_compensation(AccelerationCompensationRegister fields)\n"
		"write_acceleration_compensation(mat3f c, vec3f b, bool waitForReply=True)\n"
		"VnSensor_write_acceleration_compensation(VnSensor self, mat3f c, vec3f b)\n"
		""},
	 { (char *)"VnSensor_read_reference_frame_rotation", _wrap_VnSensor_read_reference_frame_rotation, METH_VARARGS, (char *)"VnSensor_read_reference_frame_rotation(VnSensor self) -> mat3f"},
	 { (char *)"VnSensor_write_reference_frame_rotation", _wrap_VnSensor_write_reference_frame_rotation, METH_VARARGS, (char *)"\n"
		"write_reference_frame_rotation(mat3f c, bool waitForReply=True)\n"
		"VnSensor_write_reference_frame_rotation(VnSensor self, mat3f c)\n"
		""},
	 { (char *)"VnSensor_read_yaw_pitch_roll_magnetic_acceleration_and_angular_rates", _wrap_VnSensor_read_yaw_pitch_roll_magnetic_acceleration_and_angular_rates, METH_VARARGS, (char *)"VnSensor_read_yaw_pitch_roll_magnetic_acceleration_and_angular_rates(VnSensor self) -> YawPitchRollMagneticAccelerationAndAngularRatesRegister"},
	 { (char *)"VnSensor_read_communication_protocol_control", _wrap_VnSensor_read_communication_protocol_control, METH_VARARGS, (char *)"VnSensor_read_communication_protocol_control(VnSensor self) -> CommunicationProtocolControlRegister"},
	 { (char *)"VnSensor_write_communication_protocol_control", _wrap_VnSensor_write_communication_protocol_control, METH_VARARGS, (char *)"\n"
		"write_communication_protocol_control(CommunicationProtocolControlRegister fields, bool waitForReply=True)\n"
		"write_communication_protocol_control(CommunicationProtocolControlRegister fields)\n"
		"write_communication_protocol_control(vn::protocol::uart::CountMode serialCount, vn::protocol::uart::StatusMode serialStatus, vn::protocol::uart::CountMode spiCount, vn::protocol::uart::StatusMode spiStatus, vn::protocol::uart::ChecksumMode serialChecksum, vn::protocol::uart::ChecksumMode spiChecksum, vn::protocol::uart::ErrorMode errorMode, bool waitForReply=True)\n"
		"VnSensor_write_communication_protocol_control(VnSensor self, vn::protocol::uart::CountMode serialCount, vn::protocol::uart::StatusMode serialStatus, vn::protocol::uart::CountMode spiCount, vn::protocol::uart::StatusMode spiStatus, vn::protocol::uart::ChecksumMode serialChecksum, vn::protocol::uart::ChecksumMode spiChecksum, vn::protocol::uart::ErrorMode errorMode)\n"
		""},
	 { (char *)"VnSensor_read_synchronization_control", _wrap_VnSensor_read_synchronization_control, METH_VARARGS, (char *)"VnSensor_read_synchronization_control(VnSensor self) -> SynchronizationControlRegister"},
	 { (char *)"VnSensor_write_synchronization_control", _wrap_VnSensor_write_synchronization_control, METH_VARARGS, (char *)"\n"
		"write_synchronization_control(SynchronizationControlRegister fields, bool waitForReply=True)\n"
		"write_synchronization_control(SynchronizationControlRegister fields)\n"
		"write_synchronization_control(vn::protocol::uart::SyncInMode syncInMode, vn::protocol::uart::SyncInEdge syncInEdge, uint16_t const & syncInSkipFactor, vn::protocol::uart::SyncOutMode syncOutMode, vn::protocol::uart::SyncOutPolarity syncOutPolarity, uint16_t const & syncOutSkipFactor, uint32_t const & syncOutPulseWidth, bool waitForReply=True)\n"
		"VnSensor_write_synchronization_control(VnSensor self, vn::protocol::uart::SyncInMode syncInMode, vn::protocol::uart::SyncInEdge syncInEdge, uint16_t const & syncInSkipFactor, vn::protocol::uart::SyncOutMode syncOutMode, vn::protocol::uart::SyncOutPolarity syncOutPolarity, uint16_t const & syncOutSkipFactor, uint32_t const & syncOutPulseWidth)\n"
		""},
	 { (char *)"VnSensor_read_synchronization_status", _wrap_VnSensor_read_synchronization_status, METH_VARARGS, (char *)"VnSensor_read_synchronization_status(VnSensor self) -> SynchronizationStatusRegister"},
	 { (char *)"VnSensor_write_synchronization_status", _wrap_VnSensor_write_synchronization_status, METH_VARARGS, (char *)"\n"
		"write_synchronization_status(SynchronizationStatusRegister fields, bool waitForReply=True)\n"
		"write_synchronization_status(SynchronizationStatusRegister fields)\n"
		"write_synchronization_status(uint32_t const & syncInCount, uint32_t const & syncInTime, uint32_t const & syncOutCount, bool waitForReply=True)\n"
		"VnSensor_write_synchronization_status(VnSensor self, uint32_t const & syncInCount, uint32_t const & syncInTime, uint32_t const & syncOutCount)\n"
		""},
	 { (char *)"VnSensor_read_filter_basic_control", _wrap_VnSensor_read_filter_basic_control, METH_VARARGS, (char *)"VnSensor_read_filter_basic_control(VnSensor self) -> FilterBasicControlRegister"},
	 { (char *)"VnSensor_write_filter_basic_control", _wrap_VnSensor_write_filter_basic_control, METH_VARARGS, (char *)"\n"
		"write_filter_basic_control(FilterBasicControlRegister fields, bool waitForReply=True)\n"
		"write_filter_basic_control(FilterBasicControlRegister fields)\n"
		"write_filter_basic_control(vn::protocol::uart::MagneticMode magMode, vn::protocol::uart::ExternalSensorMode extMagMode, vn::protocol::uart::ExternalSensorMode extAccMode, vn::protocol::uart::ExternalSensorMode extGyroMode, vec3f gyroLimit, bool waitForReply=True)\n"
		"VnSensor_write_filter_basic_control(VnSensor self, vn::protocol::uart::MagneticMode magMode, vn::protocol::uart::ExternalSensorMode extMagMode, vn::protocol::uart::ExternalSensorMode extAccMode, vn::protocol::uart::ExternalSensorMode extGyroMode, vec3f gyroLimit)\n"
		""},
	 { (char *)"VnSensor_read_vpe_basic_control", _wrap_VnSensor_read_vpe_basic_control, METH_VARARGS, (char *)"VnSensor_read_vpe_basic_control(VnSensor self) -> VpeBasicControlRegister"},
	 { (char *)"VnSensor_write_vpe_basic_control", _wrap_VnSensor_write_vpe_basic_control, METH_VARARGS, (char *)"\n"
		"write_vpe_basic_control(VpeBasicControlRegister fields, bool waitForReply=True)\n"
		"write_vpe_basic_control(VpeBasicControlRegister fields)\n"
		"write_vpe_basic_control(vn::protocol::uart::VpeEnable enable, vn::protocol::uart::HeadingMode headingMode, vn::protocol::uart::VpeMode filteringMode, vn::protocol::uart::VpeMode tuningMode, bool waitForReply=True)\n"
		"VnSensor_write_vpe_basic_control(VnSensor self, vn::protocol::uart::VpeEnable enable, vn::protocol::uart::HeadingMode headingMode, vn::protocol::uart::VpeMode filteringMode, vn::protocol::uart::VpeMode tuningMode)\n"
		""},
	 { (char *)"VnSensor_read_vpe_magnetometer_basic_tuning", _wrap_VnSensor_read_vpe_magnetometer_basic_tuning, METH_VARARGS, (char *)"VnSensor_read_vpe_magnetometer_basic_tuning(VnSensor self) -> VpeMagnetometerBasicTuningRegister"},
	 { (char *)"VnSensor_write_vpe_magnetometer_basic_tuning", _wrap_VnSensor_write_vpe_magnetometer_basic_tuning, METH_VARARGS, (char *)"\n"
		"write_vpe_magnetometer_basic_tuning(VpeMagnetometerBasicTuningRegister fields, bool waitForReply=True)\n"
		"write_vpe_magnetometer_basic_tuning(VpeMagnetometerBasicTuningRegister fields)\n"
		"write_vpe_magnetometer_basic_tuning(vec3f baseTuning, vec3f adaptiveTuning, vec3f adaptiveFiltering, bool waitForReply=True)\n"
		"VnSensor_write_vpe_magnetometer_basic_tuning(VnSensor self, vec3f baseTuning, vec3f adaptiveTuning, vec3f adaptiveFiltering)\n"
		""},
	 { (char *)"VnSensor_read_vpe_magnetometer_advanced_tuning", _wrap_VnSensor_read_vpe_magnetometer_advanced_tuning, METH_VARARGS, (char *)"VnSensor_read_vpe_magnetometer_advanced_tuning(VnSensor self) -> VpeMagnetometerAdvancedTuningRegister"},
	 { (char *)"VnSensor_write_vpe_magnetometer_advanced_tuning", _wrap_VnSensor_write_vpe_magnetometer_advanced_tuning, METH_VARARGS, (char *)"\n"
		"write_vpe_magnetometer_advanced_tuning(VpeMagnetometerAdvancedTuningRegister fields, bool waitForReply=True)\n"
		"write_vpe_magnetometer_advanced_tuning(VpeMagnetometerAdvancedTuningRegister fields)\n"
		"write_vpe_magnetometer_advanced_tuning(vec3f minFiltering, vec3f maxFiltering, float const & maxAdaptRate, float const & disturbanceWindow, float const & maxTuning, bool waitForReply=True)\n"
		"VnSensor_write_vpe_magnetometer_advanced_tuning(VnSensor self, vec3f minFiltering, vec3f maxFiltering, float const & maxAdaptRate, float const & disturbanceWindow, float const & maxTuning)\n"
		""},
	 { (char *)"VnSensor_read_vpe_accelerometer_basic_tuning", _wrap_VnSensor_read_vpe_accelerometer_basic_tuning, METH_VARARGS, (char *)"VnSensor_read_vpe_accelerometer_basic_tuning(VnSensor self) -> VpeAccelerometerBasicTuningRegister"},
	 { (char *)"VnSensor_write_vpe_accelerometer_basic_tuning", _wrap_VnSensor_write_vpe_accelerometer_basic_tuning, METH_VARARGS, (char *)"\n"
		"write_vpe_accelerometer_basic_tuning(VpeAccelerometerBasicTuningRegister fields, bool waitForReply=True)\n"
		"write_vpe_accelerometer_basic_tuning(VpeAccelerometerBasicTuningRegister fields)\n"
		"write_vpe_accelerometer_basic_tuning(vec3f baseTuning, vec3f adaptiveTuning, vec3f adaptiveFiltering, bool waitForReply=True)\n"
		"VnSensor_write_vpe_accelerometer_basic_tuning(VnSensor self, vec3f baseTuning, vec3f adaptiveTuning, vec3f adaptiveFiltering)\n"
		""},
	 { (char *)"VnSensor_read_vpe_accelerometer_advanced_tuning", _wrap_VnSensor_read_vpe_accelerometer_advanced_tuning, METH_VARARGS, (char *)"VnSensor_read_vpe_accelerometer_advanced_tuning(VnSensor self) -> VpeAccelerometerAdvancedTuningRegister"},
	 { (char *)"VnSensor_write_vpe_accelerometer_advanced_tuning", _wrap_VnSensor_write_vpe_accelerometer_advanced_tuning, METH_VARARGS, (char *)"\n"
		"write_vpe_accelerometer_advanced_tuning(VpeAccelerometerAdvancedTuningRegister fields, bool waitForReply=True)\n"
		"write_vpe_accelerometer_advanced_tuning(VpeAccelerometerAdvancedTuningRegister fields)\n"
		"write_vpe_accelerometer_advanced_tuning(vec3f minFiltering, vec3f maxFiltering, float const & maxAdaptRate, float const & disturbanceWindow, float const & maxTuning, bool waitForReply=True)\n"
		"VnSensor_write_vpe_accelerometer_advanced_tuning(VnSensor self, vec3f minFiltering, vec3f maxFiltering, float const & maxAdaptRate, float const & disturbanceWindow, float const & maxTuning)\n"
		""},
	 { (char *)"VnSensor_readVpeGyroBasicTuning", _wrap_VnSensor_readVpeGyroBasicTuning, METH_VARARGS, (char *)"VnSensor_readVpeGyroBasicTuning(VnSensor self) -> VpeGyroBasicTuningRegister"},
	 { (char *)"VnSensor_writeVpeGyroBasicTuning", _wrap_VnSensor_writeVpeGyroBasicTuning, METH_VARARGS, (char *)"\n"
		"writeVpeGyroBasicTuning(VpeGyroBasicTuningRegister fields, bool waitForReply=True)\n"
		"writeVpeGyroBasicTuning(VpeGyroBasicTuningRegister fields)\n"
		"writeVpeGyroBasicTuning(vec3f angularWalkVariance, vec3f baseTuning, vec3f adaptiveTuning, bool waitForReply=True)\n"
		"VnSensor_writeVpeGyroBasicTuning(VnSensor self, vec3f angularWalkVariance, vec3f baseTuning, vec3f adaptiveTuning)\n"
		""},
	 { (char *)"VnSensor_read_filter_startup_gyro_bias", _wrap_VnSensor_read_filter_startup_gyro_bias, METH_VARARGS, (char *)"VnSensor_read_filter_startup_gyro_bias(VnSensor self) -> vec3f"},
	 { (char *)"VnSensor_write_filter_startup_gyro_bias", _wrap_VnSensor_write_filter_startup_gyro_bias, METH_VARARGS, (char *)"\n"
		"write_filter_startup_gyro_bias(vec3f bias, bool waitForReply=True)\n"
		"VnSensor_write_filter_startup_gyro_bias(VnSensor self, vec3f bias)\n"
		""},
	 { (char *)"VnSensor_read_magnetometer_calibration_control", _wrap_VnSensor_read_magnetometer_calibration_control, METH_VARARGS, (char *)"VnSensor_read_magnetometer_calibration_control(VnSensor self) -> MagnetometerCalibrationControlRegister"},
	 { (char *)"VnSensor_write_magnetometer_calibration_control", _wrap_VnSensor_write_magnetometer_calibration_control, METH_VARARGS, (char *)"\n"
		"write_magnetometer_calibration_control(MagnetometerCalibrationControlRegister fields, bool waitForReply=True)\n"
		"write_magnetometer_calibration_control(MagnetometerCalibrationControlRegister fields)\n"
		"write_magnetometer_calibration_control(vn::protocol::uart::HsiMode hsiMode, vn::protocol::uart::HsiOutput hsiOutput, uint8_t const & convergeRate, bool waitForReply=True)\n"
		"VnSensor_write_magnetometer_calibration_control(VnSensor self, vn::protocol::uart::HsiMode hsiMode, vn::protocol::uart::HsiOutput hsiOutput, uint8_t const & convergeRate)\n"
		""},
	 { (char *)"VnSensor_read_calculated_magnetometer_calibration", _wrap_VnSensor_read_calculated_magnetometer_calibration, METH_VARARGS, (char *)"VnSensor_read_calculated_magnetometer_calibration(VnSensor self) -> CalculatedMagnetometerCalibrationRegister"},
	 { (char *)"VnSensor_read_indoor_heading_mode_control", _wrap_VnSensor_read_indoor_heading_mode_control, METH_VARARGS, (char *)"VnSensor_read_indoor_heading_mode_control(VnSensor self) -> float"},
	 { (char *)"VnSensor_write_indoor_heading_mode_control", _wrap_VnSensor_write_indoor_heading_mode_control, METH_VARARGS, (char *)"\n"
		"write_indoor_heading_mode_control(float const & maxRateError, bool waitForReply=True)\n"
		"VnSensor_write_indoor_heading_mode_control(VnSensor self, float const & maxRateError)\n"
		""},
	 { (char *)"VnSensor_read_velocity_compensation_measurement", _wrap_VnSensor_read_velocity_compensation_measurement, METH_VARARGS, (char *)"VnSensor_read_velocity_compensation_measurement(VnSensor self) -> vec3f"},
	 { (char *)"VnSensor_write_velocity_compensation_measurement", _wrap_VnSensor_write_velocity_compensation_measurement, METH_VARARGS, (char *)"\n"
		"write_velocity_compensation_measurement(vec3f velocity, bool waitForReply=True)\n"
		"VnSensor_write_velocity_compensation_measurement(VnSensor self, vec3f velocity)\n"
		""},
	 { (char *)"VnSensor_read_velocity_compensation_control", _wrap_VnSensor_read_velocity_compensation_control, METH_VARARGS, (char *)"VnSensor_read_velocity_compensation_control(VnSensor self) -> VelocityCompensationControlRegister"},
	 { (char *)"VnSensor_write_velocity_compensation_control", _wrap_VnSensor_write_velocity_compensation_control, METH_VARARGS, (char *)"\n"
		"write_velocity_compensation_control(VelocityCompensationControlRegister fields, bool waitForReply=True)\n"
		"write_velocity_compensation_control(VelocityCompensationControlRegister fields)\n"
		"write_velocity_compensation_control(vn::protocol::uart::VelocityCompensationMode mode, float const & velocityTuning, float const & rateTuning, bool waitForReply=True)\n"
		"VnSensor_write_velocity_compensation_control(VnSensor self, vn::protocol::uart::VelocityCompensationMode mode, float const & velocityTuning, float const & rateTuning)\n"
		""},
	 { (char *)"VnSensor_read_velocity_compensation_status", _wrap_VnSensor_read_velocity_compensation_status, METH_VARARGS, (char *)"VnSensor_read_velocity_compensation_status(VnSensor self) -> VelocityCompensationStatusRegister"},
	 { (char *)"VnSensor_read_imu_measurements", _wrap_VnSensor_read_imu_measurements, METH_VARARGS, (char *)"VnSensor_read_imu_measurements(VnSensor self) -> ImuMeasurementsRegister"},
	 { (char *)"VnSensor_read_gps_configuration", _wrap_VnSensor_read_gps_configuration, METH_VARARGS, (char *)"VnSensor_read_gps_configuration(VnSensor self) -> GpsConfigurationRegister"},
	 { (char *)"VnSensor_write_gps_configuration", _wrap_VnSensor_write_gps_configuration, METH_VARARGS, (char *)"\n"
		"write_gps_configuration(GpsConfigurationRegister fields, bool waitForReply=True)\n"
		"write_gps_configuration(GpsConfigurationRegister fields)\n"
		"write_gps_configuration(vn::protocol::uart::GpsMode mode, vn::protocol::uart::PpsSource ppsSource, bool waitForReply=True)\n"
		"VnSensor_write_gps_configuration(VnSensor self, vn::protocol::uart::GpsMode mode, vn::protocol::uart::PpsSource ppsSource)\n"
		""},
	 { (char *)"VnSensor_read_gps_antenna_offset", _wrap_VnSensor_read_gps_antenna_offset, METH_VARARGS, (char *)"VnSensor_read_gps_antenna_offset(VnSensor self) -> vec3f"},
	 { (char *)"VnSensor_write_gps_antenna_offset", _wrap_VnSensor_write_gps_antenna_offset, METH_VARARGS, (char *)"\n"
		"write_gps_antenna_offset(vec3f position, bool waitForReply=True)\n"
		"VnSensor_write_gps_antenna_offset(VnSensor self, vec3f position)\n"
		""},
	 { (char *)"VnSensor_read_gps_solution_lla", _wrap_VnSensor_read_gps_solution_lla, METH_VARARGS, (char *)"VnSensor_read_gps_solution_lla(VnSensor self) -> GpsSolutionLlaRegister"},
	 { (char *)"VnSensor_read_gps_solution_ecef", _wrap_VnSensor_read_gps_solution_ecef, METH_VARARGS, (char *)"VnSensor_read_gps_solution_ecef(VnSensor self) -> GpsSolutionEcefRegister"},
	 { (char *)"VnSensor_read_ins_solution_lla", _wrap_VnSensor_read_ins_solution_lla, METH_VARARGS, (char *)"VnSensor_read_ins_solution_lla(VnSensor self) -> InsSolutionLlaRegister"},
	 { (char *)"VnSensor_read_ins_solution_ecef", _wrap_VnSensor_read_ins_solution_ecef, METH_VARARGS, (char *)"VnSensor_read_ins_solution_ecef(VnSensor self) -> InsSolutionEcefRegister"},
	 { (char *)"VnSensor_read_ins_advanced_configuration", _wrap_VnSensor_read_ins_advanced_configuration, METH_VARARGS, (char *)"VnSensor_read_ins_advanced_configuration(VnSensor self) -> InsAdvancedConfigurationRegister"},
	 { (char *)"VnSensor_write_ins_advanced_configuration", _wrap_VnSensor_write_ins_advanced_configuration, METH_VARARGS, (char *)"\n"
		"write_ins_advanced_configuration(InsAdvancedConfigurationRegister fields, bool waitForReply=True)\n"
		"write_ins_advanced_configuration(InsAdvancedConfigurationRegister fields)\n"
		"write_ins_advanced_configuration(uint8_t const & useMag, uint8_t const & usePres, uint8_t const & posAtt, uint8_t const & velAtt, uint8_t const & velBias, vn::protocol::uart::FoamInit useFoam, uint8_t const & gpsCovType, uint8_t const & velCount, float const & velInit, float const & moveOrigin, float const & gpsTimeout, float const & deltaLimitPos, float const & deltaLimitVel, float const & minPosUncertainty, float const & minVelUncertainty, bool waitForReply=True)\n"
		"VnSensor_write_ins_advanced_configuration(VnSensor self, uint8_t const & useMag, uint8_t const & usePres, uint8_t const & posAtt, uint8_t const & velAtt, uint8_t const & velBias, vn::protocol::uart::FoamInit useFoam, uint8_t const & gpsCovType, uint8_t const & velCount, float const & velInit, float const & moveOrigin, float const & gpsTimeout, float const & deltaLimitPos, float const & deltaLimitVel, float const & minPosUncertainty, float const & minVelUncertainty)\n"
		""},
	 { (char *)"VnSensor_read_ins_state_lla", _wrap_VnSensor_read_ins_state_lla, METH_VARARGS, (char *)"VnSensor_read_ins_state_lla(VnSensor self) -> InsStateLlaRegister"},
	 { (char *)"VnSensor_read_ins_state_ecef", _wrap_VnSensor_read_ins_state_ecef, METH_VARARGS, (char *)"VnSensor_read_ins_state_ecef(VnSensor self) -> InsStateEcefRegister"},
	 { (char *)"VnSensor_read_startup_filter_bias_estimate", _wrap_VnSensor_read_startup_filter_bias_estimate, METH_VARARGS, (char *)"VnSensor_read_startup_filter_bias_estimate(VnSensor self) -> StartupFilterBiasEstimateRegister"},
	 { (char *)"VnSensor_write_startup_filter_bias_estimate", _wrap_VnSensor_write_startup_filter_bias_estimate, METH_VARARGS, (char *)"\n"
		"write_startup_filter_bias_estimate(StartupFilterBiasEstimateRegister fields, bool waitForReply=True)\n"
		"write_startup_filter_bias_estimate(StartupFilterBiasEstimateRegister fields)\n"
		"write_startup_filter_bias_estimate(vec3f gyroBias, vec3f accelBias, float const & pressureBias, bool waitForReply=True)\n"
		"VnSensor_write_startup_filter_bias_estimate(VnSensor self, vec3f gyroBias, vec3f accelBias, float const & pressureBias)\n"
		""},
	 { (char *)"VnSensor_read_delta_theta_and_delta_velocity", _wrap_VnSensor_read_delta_theta_and_delta_velocity, METH_VARARGS, (char *)"VnSensor_read_delta_theta_and_delta_velocity(VnSensor self) -> DeltaThetaAndDeltaVelocityRegister"},
	 { (char *)"VnSensor_read_delta_theta_and_delta_velocity_configuration", _wrap_VnSensor_read_delta_theta_and_delta_velocity_configuration, METH_VARARGS, (char *)"VnSensor_read_delta_theta_and_delta_velocity_configuration(VnSensor self) -> DeltaThetaAndDeltaVelocityConfigurationRegister"},
	 { (char *)"VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration", _wrap_VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration, METH_VARARGS, (char *)"\n"
		"writeDeltaThetaAndDeltaVelocityConfiguration(DeltaThetaAndDeltaVelocityConfigurationRegister fields, bool waitForReply=True)\n"
		"writeDeltaThetaAndDeltaVelocityConfiguration(DeltaThetaAndDeltaVelocityConfigurationRegister fields)\n"
		"writeDeltaThetaAndDeltaVelocityConfiguration(vn::protocol::uart::IntegrationFrame integrationFrame, vn::protocol::uart::CompensationMode gyroCompensation, vn::protocol::uart::CompensationMode accelCompensation, bool waitForReply=True)\n"
		"VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration(VnSensor self, vn::protocol::uart::IntegrationFrame integrationFrame, vn::protocol::uart::CompensationMode gyroCompensation, vn::protocol::uart::CompensationMode accelCompensation)\n"
		""},
	 { (char *)"VnSensor_read_reference_vector_configuration", _wrap_VnSensor_read_reference_vector_configuration, METH_VARARGS, (char *)"VnSensor_read_reference_vector_configuration(VnSensor self) -> ReferenceVectorConfigurationRegister"},
	 { (char *)"VnSensor_write_reference_vector_configuration", _wrap_VnSensor_write_reference_vector_configuration, METH_VARARGS, (char *)"\n"
		"write_reference_vector_configuration(ReferenceVectorConfigurationRegister fields, bool waitForReply=True)\n"
		"write_reference_vector_configuration(ReferenceVectorConfigurationRegister fields)\n"
		"write_reference_vector_configuration(uint8_t const & useMagModel, uint8_t const & useGravityModel, uint32_t const & recalcThreshold, float const & year, vec3d position, bool waitForReply=True)\n"
		"VnSensor_write_reference_vector_configuration(VnSensor self, uint8_t const & useMagModel, uint8_t const & useGravityModel, uint32_t const & recalcThreshold, float const & year, vec3d position)\n"
		""},
	 { (char *)"VnSensor_read_gyro_compensation", _wrap_VnSensor_read_gyro_compensation, METH_VARARGS, (char *)"VnSensor_read_gyro_compensation(VnSensor self) -> GyroCompensationRegister"},
	 { (char *)"VnSensor_write_gyro_compensation", _wrap_VnSensor_write_gyro_compensation, METH_VARARGS, (char *)"\n"
		"write_gyro_compensation(GyroCompensationRegister fields, bool waitForReply=True)\n"
		"write_gyro_compensation(GyroCompensationRegister fields)\n"
		"write_gyro_compensation(mat3f c, vec3f b, bool waitForReply=True)\n"
		"VnSensor_write_gyro_compensation(VnSensor self, mat3f c, vec3f b)\n"
		""},
	 { (char *)"VnSensor_read_imu_filtering_configuration", _wrap_VnSensor_read_imu_filtering_configuration, METH_VARARGS, (char *)"VnSensor_read_imu_filtering_configuration(VnSensor self) -> ImuFilteringConfigurationRegister"},
	 { (char *)"VnSensor_write_imu_filtering_configuration", _wrap_VnSensor_write_imu_filtering_configuration, METH_VARARGS, (char *)"\n"
		"write_imu_filtering_configuration(ImuFilteringConfigurationRegister fields, bool waitForReply=True)\n"
		"write_imu_filtering_configuration(ImuFilteringConfigurationRegister fields)\n"
		"write_imu_filtering_configuration(uint16_t const & magWindowSize, uint16_t const & accelWindowSize, uint16_t const & gyroWindowSize, uint16_t const & tempWindowSize, uint16_t const & presWindowSize, vn::protocol::uart::FilterMode magFilterMode, vn::protocol::uart::FilterMode accelFilterMode, vn::protocol::uart::FilterMode gyroFilterMode, vn::protocol::uart::FilterMode tempFilterMode, vn::protocol::uart::FilterMode presFilterMode, bool waitForReply=True)\n"
		"VnSensor_write_imu_filtering_configuration(VnSensor self, uint16_t const & magWindowSize, uint16_t const & accelWindowSize, uint16_t const & gyroWindowSize, uint16_t const & tempWindowSize, uint16_t const & presWindowSize, vn::protocol::uart::FilterMode magFilterMode, vn::protocol::uart::FilterMode accelFilterMode, vn::protocol::uart::FilterMode gyroFilterMode, vn::protocol::uart::FilterMode tempFilterMode, vn::protocol::uart::FilterMode presFilterMode)\n"
		""},
	 { (char *)"VnSensor_read_gps_compass_baseline", _wrap_VnSensor_read_gps_compass_baseline, METH_VARARGS, (char *)"VnSensor_read_gps_compass_baseline(VnSensor self) -> GpsCompassBaselineRegister"},
	 { (char *)"VnSensor_write_gps_compass_baseline", _wrap_VnSensor_write_gps_compass_baseline, METH_VARARGS, (char *)"\n"
		"write_gps_compass_baseline(GpsCompassBaselineRegister fields, bool waitForReply=True)\n"
		"write_gps_compass_baseline(GpsCompassBaselineRegister fields)\n"
		"write_gps_compass_baseline(vec3f position, vec3f uncertainty, bool waitForReply=True)\n"
		"VnSensor_write_gps_compass_baseline(VnSensor self, vec3f position, vec3f uncertainty)\n"
		""},
	 { (char *)"VnSensor_read_gps_compass_estimated_baseline", _wrap_VnSensor_read_gps_compass_estimated_baseline, METH_VARARGS, (char *)"VnSensor_read_gps_compass_estimated_baseline(VnSensor self) -> GpsCompassEstimatedBaselineRegister"},
	 { (char *)"VnSensor_read_imu_rate_configuration", _wrap_VnSensor_read_imu_rate_configuration, METH_VARARGS, (char *)"VnSensor_read_imu_rate_configuration(VnSensor self) -> ImuRateConfigurationRegister"},
	 { (char *)"VnSensor_write_imu_rate_configuration", _wrap_VnSensor_write_imu_rate_configuration, METH_VARARGS, (char *)"\n"
		"write_imu_rate_configuration(ImuRateConfigurationRegister fields, bool waitForReply=True)\n"
		"write_imu_rate_configuration(ImuRateConfigurationRegister fields)\n"
		"write_imu_rate_configuration(uint16_t const & imuRate, uint16_t const & navDivisor, float const & filterTargetRate, float const & filterMinRate, bool waitForReply=True)\n"
		"VnSensor_write_imu_rate_configuration(VnSensor self, uint16_t const & imuRate, uint16_t const & navDivisor, float const & filterTargetRate, float const & filterMinRate)\n"
		""},
	 { (char *)"VnSensor_read_yaw_pitch_roll_true_body_acceleration_and_angular_rates_register", _wrap_VnSensor_read_yaw_pitch_roll_true_body_acceleration_and_angular_rates_register, METH_VARARGS, (char *)"VnSensor_read_yaw_pitch_roll_true_body_acceleration_and_angular_rates_register(VnSensor self) -> YawPitchRollTrueBodyAccelerationAndAngularRatesRegister"},
	 { (char *)"VnSensor_read_yaw_pitch_roll_true_inertial_acceleration_and_angular_rates_register", _wrap_VnSensor_read_yaw_pitch_roll_true_inertial_acceleration_and_angular_rates_register, METH_VARARGS, (char *)"VnSensor_read_yaw_pitch_roll_true_inertial_acceleration_and_angular_rates_register(VnSensor self) -> YawPitchRollTrueInertialAccelerationAndAngularRatesRegister"},
	 { (char *)"VnSensor_baudrate_get", _wrap_VnSensor_baudrate_get, METH_VARARGS, (char *)"VnSensor_baudrate_get(VnSensor self) -> uint32_t"},
	 { (char *)"VnSensor_port_get", _wrap_VnSensor_port_get, METH_VARARGS, (char *)"VnSensor_port_get(VnSensor self) -> std::string const &"},
	 { (char *)"VnSensor_send_error_detection_mode_set", _wrap_VnSensor_send_error_detection_mode_set, METH_VARARGS, (char *)"VnSensor_send_error_detection_mode_set(VnSensor self, vn::protocol::uart::ErrorDetectionMode send_error_detection_mode)"},
	 { (char *)"VnSensor_send_error_detection_mode_get", _wrap_VnSensor_send_error_detection_mode_get, METH_VARARGS, (char *)"VnSensor_send_error_detection_mode_get(VnSensor self) -> vn::protocol::uart::ErrorDetectionMode"},
	 { (char *)"VnSensor_is_connected_get", _wrap_VnSensor_is_connected_get, METH_VARARGS, (char *)"VnSensor_is_connected_get(VnSensor self) -> bool"},
	 { (char *)"VnSensor_response_timeout_ms_set", _wrap_VnSensor_response_timeout_ms_set, METH_VARARGS, (char *)"VnSensor_response_timeout_ms_set(VnSensor self, uint16_t response_timeout_ms)"},
	 { (char *)"VnSensor_response_timeout_ms_get", _wrap_VnSensor_response_timeout_ms_get, METH_VARARGS, (char *)"VnSensor_response_timeout_ms_get(VnSensor self) -> uint16_t"},
	 { (char *)"VnSensor_retransmit_delay_ms_set", _wrap_VnSensor_retransmit_delay_ms_set, METH_VARARGS, (char *)"VnSensor_retransmit_delay_ms_set(VnSensor self, uint16_t retransmit_delay_ms)"},
	 { (char *)"VnSensor_retransmit_delay_ms_get", _wrap_VnSensor_retransmit_delay_ms_get, METH_VARARGS, (char *)"VnSensor_retransmit_delay_ms_get(VnSensor self) -> uint16_t"},
	 { (char *)"VnSensor_swigregister", VnSensor_swigregister, METH_VARARGS, NULL},
	 { (char *)"UInt32Vector_iterator", _wrap_UInt32Vector_iterator, METH_VARARGS, (char *)"UInt32Vector_iterator(UInt32Vector self) -> SwigPyIterator"},
	 { (char *)"UInt32Vector___nonzero__", _wrap_UInt32Vector___nonzero__, METH_VARARGS, (char *)"UInt32Vector___nonzero__(UInt32Vector self) -> bool"},
	 { (char *)"UInt32Vector___bool__", _wrap_UInt32Vector___bool__, METH_VARARGS, (char *)"UInt32Vector___bool__(UInt32Vector self) -> bool"},
	 { (char *)"UInt32Vector___len__", _wrap_UInt32Vector___len__, METH_VARARGS, (char *)"UInt32Vector___len__(UInt32Vector self) -> std::vector< unsigned int >::size_type"},
	 { (char *)"UInt32Vector___getslice__", _wrap_UInt32Vector___getslice__, METH_VARARGS, (char *)"UInt32Vector___getslice__(UInt32Vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j) -> UInt32Vector"},
	 { (char *)"UInt32Vector___setslice__", _wrap_UInt32Vector___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)\n"
		"UInt32Vector___setslice__(UInt32Vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j, UInt32Vector v)\n"
		""},
	 { (char *)"UInt32Vector___delslice__", _wrap_UInt32Vector___delslice__, METH_VARARGS, (char *)"UInt32Vector___delslice__(UInt32Vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)"},
	 { (char *)"UInt32Vector___delitem__", _wrap_UInt32Vector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(std::vector< unsigned int >::difference_type i)\n"
		"UInt32Vector___delitem__(UInt32Vector self, PySliceObject * slice)\n"
		""},
	 { (char *)"UInt32Vector___getitem__", _wrap_UInt32Vector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> UInt32Vector\n"
		"UInt32Vector___getitem__(UInt32Vector self, std::vector< unsigned int >::difference_type i) -> std::vector< unsigned int >::value_type const &\n"
		""},
	 { (char *)"UInt32Vector___setitem__", _wrap_UInt32Vector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, UInt32Vector v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"UInt32Vector___setitem__(UInt32Vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::value_type const & x)\n"
		""},
	 { (char *)"UInt32Vector_pop", _wrap_UInt32Vector_pop, METH_VARARGS, (char *)"UInt32Vector_pop(UInt32Vector self) -> std::vector< unsigned int >::value_type"},
	 { (char *)"UInt32Vector_append", _wrap_UInt32Vector_append, METH_VARARGS, (char *)"UInt32Vector_append(UInt32Vector self, std::vector< unsigned int >::value_type const & x)"},
	 { (char *)"UInt32Vector_empty", _wrap_UInt32Vector_empty, METH_VARARGS, (char *)"UInt32Vector_empty(UInt32Vector self) -> bool"},
	 { (char *)"UInt32Vector_size", _wrap_UInt32Vector_size, METH_VARARGS, (char *)"UInt32Vector_size(UInt32Vector self) -> std::vector< unsigned int >::size_type"},
	 { (char *)"UInt32Vector_swap", _wrap_UInt32Vector_swap, METH_VARARGS, (char *)"UInt32Vector_swap(UInt32Vector self, UInt32Vector v)"},
	 { (char *)"UInt32Vector_begin", _wrap_UInt32Vector_begin, METH_VARARGS, (char *)"UInt32Vector_begin(UInt32Vector self) -> std::vector< unsigned int >::iterator"},
	 { (char *)"UInt32Vector_end", _wrap_UInt32Vector_end, METH_VARARGS, (char *)"UInt32Vector_end(UInt32Vector self) -> std::vector< unsigned int >::iterator"},
	 { (char *)"UInt32Vector_rbegin", _wrap_UInt32Vector_rbegin, METH_VARARGS, (char *)"UInt32Vector_rbegin(UInt32Vector self) -> std::vector< unsigned int >::reverse_iterator"},
	 { (char *)"UInt32Vector_rend", _wrap_UInt32Vector_rend, METH_VARARGS, (char *)"UInt32Vector_rend(UInt32Vector self) -> std::vector< unsigned int >::reverse_iterator"},
	 { (char *)"UInt32Vector_clear", _wrap_UInt32Vector_clear, METH_VARARGS, (char *)"UInt32Vector_clear(UInt32Vector self)"},
	 { (char *)"UInt32Vector_get_allocator", _wrap_UInt32Vector_get_allocator, METH_VARARGS, (char *)"UInt32Vector_get_allocator(UInt32Vector self) -> std::vector< unsigned int >::allocator_type"},
	 { (char *)"UInt32Vector_pop_back", _wrap_UInt32Vector_pop_back, METH_VARARGS, (char *)"UInt32Vector_pop_back(UInt32Vector self)"},
	 { (char *)"UInt32Vector_erase", _wrap_UInt32Vector_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector< unsigned int >::iterator pos) -> std::vector< unsigned int >::iterator\n"
		"UInt32Vector_erase(UInt32Vector self, std::vector< unsigned int >::iterator first, std::vector< unsigned int >::iterator last) -> std::vector< unsigned int >::iterator\n"
		""},
	 { (char *)"new_UInt32Vector", _wrap_new_UInt32Vector, METH_VARARGS, (char *)"\n"
		"UInt32Vector()\n"
		"UInt32Vector(UInt32Vector arg2)\n"
		"UInt32Vector(std::vector< unsigned int >::size_type size)\n"
		"new_UInt32Vector(std::vector< unsigned int >::size_type size, std::vector< unsigned int >::value_type const & value) -> UInt32Vector\n"
		""},
	 { (char *)"UInt32Vector_push_back", _wrap_UInt32Vector_push_back, METH_VARARGS, (char *)"UInt32Vector_push_back(UInt32Vector self, std::vector< unsigned int >::value_type const & x)"},
	 { (char *)"UInt32Vector_front", _wrap_UInt32Vector_front, METH_VARARGS, (char *)"UInt32Vector_front(UInt32Vector self) -> std::vector< unsigned int >::value_type const &"},
	 { (char *)"UInt32Vector_back", _wrap_UInt32Vector_back, METH_VARARGS, (char *)"UInt32Vector_back(UInt32Vector self) -> std::vector< unsigned int >::value_type const &"},
	 { (char *)"UInt32Vector_assign", _wrap_UInt32Vector_assign, METH_VARARGS, (char *)"UInt32Vector_assign(UInt32Vector self, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)"},
	 { (char *)"UInt32Vector_resize", _wrap_UInt32Vector_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector< unsigned int >::size_type new_size)\n"
		"UInt32Vector_resize(UInt32Vector self, std::vector< unsigned int >::size_type new_size, std::vector< unsigned int >::value_type const & x)\n"
		""},
	 { (char *)"UInt32Vector_insert", _wrap_UInt32Vector_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::value_type const & x) -> std::vector< unsigned int >::iterator\n"
		"UInt32Vector_insert(UInt32Vector self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)\n"
		""},
	 { (char *)"UInt32Vector_reserve", _wrap_UInt32Vector_reserve, METH_VARARGS, (char *)"UInt32Vector_reserve(UInt32Vector self, std::vector< unsigned int >::size_type n)"},
	 { (char *)"UInt32Vector_capacity", _wrap_UInt32Vector_capacity, METH_VARARGS, (char *)"UInt32Vector_capacity(UInt32Vector self) -> std::vector< unsigned int >::size_type"},
	 { (char *)"delete_UInt32Vector", _wrap_delete_UInt32Vector, METH_VARARGS, (char *)"delete_UInt32Vector(UInt32Vector self)"},
	 { (char *)"UInt32Vector_swigregister", UInt32Vector_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CompositeData", _wrap_new_CompositeData, METH_VARARGS, (char *)"\n"
		"CompositeData()\n"
		"new_CompositeData(CompositeData cd) -> CompositeData\n"
		""},
	 { (char *)"delete_CompositeData", _wrap_delete_CompositeData, METH_VARARGS, (char *)"delete_CompositeData(CompositeData self)"},
	 { (char *)"CompositeData_parse", _wrap_CompositeData_parse, METH_VARARGS, (char *)"\n"
		"parse(Packet p) -> CompositeData\n"
		"parse(Packet p, CompositeData o)\n"
		"CompositeData_parse(Packet p, std::vector< vn::sensors::CompositeData *,std::allocator< vn::sensors::CompositeData * > > & o)\n"
		""},
	 { (char *)"CompositeData_reset", _wrap_CompositeData_reset, METH_VARARGS, (char *)"CompositeData_reset(CompositeData self)"},
	 { (char *)"CompositeData___hasAnyAttitude", _wrap_CompositeData___hasAnyAttitude, METH_VARARGS, (char *)"CompositeData___hasAnyAttitude(CompositeData self) -> bool"},
	 { (char *)"CompositeData___anyAttitude", _wrap_CompositeData___anyAttitude, METH_VARARGS, (char *)"CompositeData___anyAttitude(CompositeData self) -> Attitude"},
	 { (char *)"CompositeData___hasYawPitchRoll", _wrap_CompositeData___hasYawPitchRoll, METH_VARARGS, (char *)"CompositeData___hasYawPitchRoll(CompositeData self) -> bool"},
	 { (char *)"CompositeData___yawPitchRoll", _wrap_CompositeData___yawPitchRoll, METH_VARARGS, (char *)"CompositeData___yawPitchRoll(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasQuaternion", _wrap_CompositeData___hasQuaternion, METH_VARARGS, (char *)"CompositeData___hasQuaternion(CompositeData self) -> bool"},
	 { (char *)"CompositeData___quaternion", _wrap_CompositeData___quaternion, METH_VARARGS, (char *)"CompositeData___quaternion(CompositeData self) -> vec4f"},
	 { (char *)"CompositeData___hasDirectionCosineMatrix", _wrap_CompositeData___hasDirectionCosineMatrix, METH_VARARGS, (char *)"CompositeData___hasDirectionCosineMatrix(CompositeData self) -> bool"},
	 { (char *)"CompositeData___directionCosineMatrix", _wrap_CompositeData___directionCosineMatrix, METH_VARARGS, (char *)"CompositeData___directionCosineMatrix(CompositeData self) -> mat3f"},
	 { (char *)"CompositeData___hasAnyMagnetic", _wrap_CompositeData___hasAnyMagnetic, METH_VARARGS, (char *)"CompositeData___hasAnyMagnetic(CompositeData self) -> bool"},
	 { (char *)"CompositeData___anyMagnetic", _wrap_CompositeData___anyMagnetic, METH_VARARGS, (char *)"CompositeData___anyMagnetic(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasMagnetic", _wrap_CompositeData___hasMagnetic, METH_VARARGS, (char *)"CompositeData___hasMagnetic(CompositeData self) -> bool"},
	 { (char *)"CompositeData___magnetic", _wrap_CompositeData___magnetic, METH_VARARGS, (char *)"CompositeData___magnetic(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasMagneticUncompensated", _wrap_CompositeData___hasMagneticUncompensated, METH_VARARGS, (char *)"CompositeData___hasMagneticUncompensated(CompositeData self) -> bool"},
	 { (char *)"CompositeData___magneticUncompensated", _wrap_CompositeData___magneticUncompensated, METH_VARARGS, (char *)"CompositeData___magneticUncompensated(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasMagneticNed", _wrap_CompositeData___hasMagneticNed, METH_VARARGS, (char *)"CompositeData___hasMagneticNed(CompositeData self) -> bool"},
	 { (char *)"CompositeData___magneticNed", _wrap_CompositeData___magneticNed, METH_VARARGS, (char *)"CompositeData___magneticNed(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasMagneticEcef", _wrap_CompositeData___hasMagneticEcef, METH_VARARGS, (char *)"CompositeData___hasMagneticEcef(CompositeData self) -> bool"},
	 { (char *)"CompositeData___magneticEcef", _wrap_CompositeData___magneticEcef, METH_VARARGS, (char *)"CompositeData___magneticEcef(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasAnyAcceleration", _wrap_CompositeData___hasAnyAcceleration, METH_VARARGS, (char *)"CompositeData___hasAnyAcceleration(CompositeData self) -> bool"},
	 { (char *)"CompositeData___anyAcceleration", _wrap_CompositeData___anyAcceleration, METH_VARARGS, (char *)"CompositeData___anyAcceleration(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasAcceleration", _wrap_CompositeData___hasAcceleration, METH_VARARGS, (char *)"CompositeData___hasAcceleration(CompositeData self) -> bool"},
	 { (char *)"CompositeData___acceleration", _wrap_CompositeData___acceleration, METH_VARARGS, (char *)"CompositeData___acceleration(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasAccelerationLinearBody", _wrap_CompositeData___hasAccelerationLinearBody, METH_VARARGS, (char *)"CompositeData___hasAccelerationLinearBody(CompositeData self) -> bool"},
	 { (char *)"CompositeData___accelerationLinearBody", _wrap_CompositeData___accelerationLinearBody, METH_VARARGS, (char *)"CompositeData___accelerationLinearBody(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasAccelerationUncompensated", _wrap_CompositeData___hasAccelerationUncompensated, METH_VARARGS, (char *)"CompositeData___hasAccelerationUncompensated(CompositeData self) -> bool"},
	 { (char *)"CompositeData___accelerationUncompensated", _wrap_CompositeData___accelerationUncompensated, METH_VARARGS, (char *)"CompositeData___accelerationUncompensated(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasAccelerationLinearNed", _wrap_CompositeData___hasAccelerationLinearNed, METH_VARARGS, (char *)"CompositeData___hasAccelerationLinearNed(CompositeData self) -> bool"},
	 { (char *)"CompositeData___accelerationLinearNed", _wrap_CompositeData___accelerationLinearNed, METH_VARARGS, (char *)"CompositeData___accelerationLinearNed(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasAccelerationLinearEcef", _wrap_CompositeData___hasAccelerationLinearEcef, METH_VARARGS, (char *)"CompositeData___hasAccelerationLinearEcef(CompositeData self) -> bool"},
	 { (char *)"CompositeData___accelerationLinearEcef", _wrap_CompositeData___accelerationLinearEcef, METH_VARARGS, (char *)"CompositeData___accelerationLinearEcef(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasAccelerationNed", _wrap_CompositeData___hasAccelerationNed, METH_VARARGS, (char *)"CompositeData___hasAccelerationNed(CompositeData self) -> bool"},
	 { (char *)"CompositeData___accelerationNed", _wrap_CompositeData___accelerationNed, METH_VARARGS, (char *)"CompositeData___accelerationNed(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasAccelerationEcef", _wrap_CompositeData___hasAccelerationEcef, METH_VARARGS, (char *)"CompositeData___hasAccelerationEcef(CompositeData self) -> bool"},
	 { (char *)"CompositeData___accelerationEcef", _wrap_CompositeData___accelerationEcef, METH_VARARGS, (char *)"CompositeData___accelerationEcef(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasAnyAngularRate", _wrap_CompositeData___hasAnyAngularRate, METH_VARARGS, (char *)"CompositeData___hasAnyAngularRate(CompositeData self) -> bool"},
	 { (char *)"CompositeData___anyAngularRate", _wrap_CompositeData___anyAngularRate, METH_VARARGS, (char *)"CompositeData___anyAngularRate(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasAngularRate", _wrap_CompositeData___hasAngularRate, METH_VARARGS, (char *)"CompositeData___hasAngularRate(CompositeData self) -> bool"},
	 { (char *)"CompositeData___angularRate", _wrap_CompositeData___angularRate, METH_VARARGS, (char *)"CompositeData___angularRate(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasAngularRateUncompensated", _wrap_CompositeData___hasAngularRateUncompensated, METH_VARARGS, (char *)"CompositeData___hasAngularRateUncompensated(CompositeData self) -> bool"},
	 { (char *)"CompositeData___angularRateUncompensated", _wrap_CompositeData___angularRateUncompensated, METH_VARARGS, (char *)"CompositeData___angularRateUncompensated(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasAnyTemperature", _wrap_CompositeData___hasAnyTemperature, METH_VARARGS, (char *)"CompositeData___hasAnyTemperature(CompositeData self) -> bool"},
	 { (char *)"CompositeData___anyTemperature", _wrap_CompositeData___anyTemperature, METH_VARARGS, (char *)"CompositeData___anyTemperature(CompositeData self) -> float"},
	 { (char *)"CompositeData___hasTemperature", _wrap_CompositeData___hasTemperature, METH_VARARGS, (char *)"CompositeData___hasTemperature(CompositeData self) -> bool"},
	 { (char *)"CompositeData___temperature", _wrap_CompositeData___temperature, METH_VARARGS, (char *)"CompositeData___temperature(CompositeData self) -> float"},
	 { (char *)"CompositeData___hasAnyPressure", _wrap_CompositeData___hasAnyPressure, METH_VARARGS, (char *)"CompositeData___hasAnyPressure(CompositeData self) -> bool"},
	 { (char *)"CompositeData___anyPressure", _wrap_CompositeData___anyPressure, METH_VARARGS, (char *)"CompositeData___anyPressure(CompositeData self) -> float"},
	 { (char *)"CompositeData___hasPressure", _wrap_CompositeData___hasPressure, METH_VARARGS, (char *)"CompositeData___hasPressure(CompositeData self) -> bool"},
	 { (char *)"CompositeData___pressure", _wrap_CompositeData___pressure, METH_VARARGS, (char *)"CompositeData___pressure(CompositeData self) -> float"},
	 { (char *)"CompositeData___hasAnyPosition", _wrap_CompositeData___hasAnyPosition, METH_VARARGS, (char *)"CompositeData___hasAnyPosition(CompositeData self) -> bool"},
	 { (char *)"CompositeData___anyPosition", _wrap_CompositeData___anyPosition, METH_VARARGS, (char *)"CompositeData___anyPosition(CompositeData self) -> Position"},
	 { (char *)"CompositeData___hasPositionGpsLla", _wrap_CompositeData___hasPositionGpsLla, METH_VARARGS, (char *)"CompositeData___hasPositionGpsLla(CompositeData self) -> bool"},
	 { (char *)"CompositeData___positionGpsLla", _wrap_CompositeData___positionGpsLla, METH_VARARGS, (char *)"CompositeData___positionGpsLla(CompositeData self) -> vec3d"},
	 { (char *)"CompositeData___hasPositionGpsEcef", _wrap_CompositeData___hasPositionGpsEcef, METH_VARARGS, (char *)"CompositeData___hasPositionGpsEcef(CompositeData self) -> bool"},
	 { (char *)"CompositeData___positionGpsEcef", _wrap_CompositeData___positionGpsEcef, METH_VARARGS, (char *)"CompositeData___positionGpsEcef(CompositeData self) -> vec3d"},
	 { (char *)"CompositeData___hasPositionEstimatedLla", _wrap_CompositeData___hasPositionEstimatedLla, METH_VARARGS, (char *)"CompositeData___hasPositionEstimatedLla(CompositeData self) -> bool"},
	 { (char *)"CompositeData___positionEstimatedLla", _wrap_CompositeData___positionEstimatedLla, METH_VARARGS, (char *)"CompositeData___positionEstimatedLla(CompositeData self) -> vec3d"},
	 { (char *)"CompositeData___hasPositionEstimatedEcef", _wrap_CompositeData___hasPositionEstimatedEcef, METH_VARARGS, (char *)"CompositeData___hasPositionEstimatedEcef(CompositeData self) -> bool"},
	 { (char *)"CompositeData___positionEstimatedEcef", _wrap_CompositeData___positionEstimatedEcef, METH_VARARGS, (char *)"CompositeData___positionEstimatedEcef(CompositeData self) -> vec3d"},
	 { (char *)"CompositeData___hasAnyVelocity", _wrap_CompositeData___hasAnyVelocity, METH_VARARGS, (char *)"CompositeData___hasAnyVelocity(CompositeData self) -> bool"},
	 { (char *)"CompositeData___anyVelocity", _wrap_CompositeData___anyVelocity, METH_VARARGS, (char *)"CompositeData___anyVelocity(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasVelocityGpsNed", _wrap_CompositeData___hasVelocityGpsNed, METH_VARARGS, (char *)"CompositeData___hasVelocityGpsNed(CompositeData self) -> bool"},
	 { (char *)"CompositeData___velocityGpsNed", _wrap_CompositeData___velocityGpsNed, METH_VARARGS, (char *)"CompositeData___velocityGpsNed(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasVelocityGpsEcef", _wrap_CompositeData___hasVelocityGpsEcef, METH_VARARGS, (char *)"CompositeData___hasVelocityGpsEcef(CompositeData self) -> bool"},
	 { (char *)"CompositeData___velocityGpsEcef", _wrap_CompositeData___velocityGpsEcef, METH_VARARGS, (char *)"CompositeData___velocityGpsEcef(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasVelocityEstimatedNed", _wrap_CompositeData___hasVelocityEstimatedNed, METH_VARARGS, (char *)"CompositeData___hasVelocityEstimatedNed(CompositeData self) -> bool"},
	 { (char *)"CompositeData___velocityEstimatedNed", _wrap_CompositeData___velocityEstimatedNed, METH_VARARGS, (char *)"CompositeData___velocityEstimatedNed(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasVelocityEstimatedEcef", _wrap_CompositeData___hasVelocityEstimatedEcef, METH_VARARGS, (char *)"CompositeData___hasVelocityEstimatedEcef(CompositeData self) -> bool"},
	 { (char *)"CompositeData___velocityEstimatedEcef", _wrap_CompositeData___velocityEstimatedEcef, METH_VARARGS, (char *)"CompositeData___velocityEstimatedEcef(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasVelocityEstimatedBody", _wrap_CompositeData___hasVelocityEstimatedBody, METH_VARARGS, (char *)"CompositeData___hasVelocityEstimatedBody(CompositeData self) -> bool"},
	 { (char *)"CompositeData___velocityEstimatedBody", _wrap_CompositeData___velocityEstimatedBody, METH_VARARGS, (char *)"CompositeData___velocityEstimatedBody(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasDeltaTime", _wrap_CompositeData___hasDeltaTime, METH_VARARGS, (char *)"CompositeData___hasDeltaTime(CompositeData self) -> bool"},
	 { (char *)"CompositeData___deltaTime", _wrap_CompositeData___deltaTime, METH_VARARGS, (char *)"CompositeData___deltaTime(CompositeData self) -> float"},
	 { (char *)"CompositeData___hasDeltaTheta", _wrap_CompositeData___hasDeltaTheta, METH_VARARGS, (char *)"CompositeData___hasDeltaTheta(CompositeData self) -> bool"},
	 { (char *)"CompositeData___deltaTheta", _wrap_CompositeData___deltaTheta, METH_VARARGS, (char *)"CompositeData___deltaTheta(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasDeltaVelocity", _wrap_CompositeData___hasDeltaVelocity, METH_VARARGS, (char *)"CompositeData___hasDeltaVelocity(CompositeData self) -> bool"},
	 { (char *)"CompositeData___deltaVelocity", _wrap_CompositeData___deltaVelocity, METH_VARARGS, (char *)"CompositeData___deltaVelocity(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasTimeStartup", _wrap_CompositeData___hasTimeStartup, METH_VARARGS, (char *)"CompositeData___hasTimeStartup(CompositeData self) -> bool"},
	 { (char *)"CompositeData___timeStartup", _wrap_CompositeData___timeStartup, METH_VARARGS, (char *)"CompositeData___timeStartup(CompositeData self) -> uint64_t"},
	 { (char *)"CompositeData___hasTimeGps", _wrap_CompositeData___hasTimeGps, METH_VARARGS, (char *)"CompositeData___hasTimeGps(CompositeData self) -> bool"},
	 { (char *)"CompositeData___timeGps", _wrap_CompositeData___timeGps, METH_VARARGS, (char *)"CompositeData___timeGps(CompositeData self) -> uint64_t"},
	 { (char *)"CompositeData___hasTow", _wrap_CompositeData___hasTow, METH_VARARGS, (char *)"CompositeData___hasTow(CompositeData self) -> bool"},
	 { (char *)"CompositeData___tow", _wrap_CompositeData___tow, METH_VARARGS, (char *)"CompositeData___tow(CompositeData self) -> double"},
	 { (char *)"CompositeData___hasWeek", _wrap_CompositeData___hasWeek, METH_VARARGS, (char *)"CompositeData___hasWeek(CompositeData self) -> bool"},
	 { (char *)"CompositeData___week", _wrap_CompositeData___week, METH_VARARGS, (char *)"CompositeData___week(CompositeData self) -> uint16_t"},
	 { (char *)"CompositeData___hasNumSats", _wrap_CompositeData___hasNumSats, METH_VARARGS, (char *)"CompositeData___hasNumSats(CompositeData self) -> bool"},
	 { (char *)"CompositeData___numSats", _wrap_CompositeData___numSats, METH_VARARGS, (char *)"CompositeData___numSats(CompositeData self) -> uint8_t"},
	 { (char *)"CompositeData___hasTimeSyncIn", _wrap_CompositeData___hasTimeSyncIn, METH_VARARGS, (char *)"CompositeData___hasTimeSyncIn(CompositeData self) -> bool"},
	 { (char *)"CompositeData___timeSyncIn", _wrap_CompositeData___timeSyncIn, METH_VARARGS, (char *)"CompositeData___timeSyncIn(CompositeData self) -> uint64_t"},
	 { (char *)"CompositeData___hasVpeStatus", _wrap_CompositeData___hasVpeStatus, METH_VARARGS, (char *)"CompositeData___hasVpeStatus(CompositeData self) -> bool"},
	 { (char *)"CompositeData___vpeStatus", _wrap_CompositeData___vpeStatus, METH_VARARGS, (char *)"CompositeData___vpeStatus(CompositeData self) -> VpeStatus"},
	 { (char *)"CompositeData___hasInsStatus", _wrap_CompositeData___hasInsStatus, METH_VARARGS, (char *)"CompositeData___hasInsStatus(CompositeData self) -> bool"},
	 { (char *)"CompositeData___insStatus", _wrap_CompositeData___insStatus, METH_VARARGS, (char *)"CompositeData___insStatus(CompositeData self) -> vn::protocol::uart::InsStatus"},
	 { (char *)"CompositeData___hasSyncInCnt", _wrap_CompositeData___hasSyncInCnt, METH_VARARGS, (char *)"CompositeData___hasSyncInCnt(CompositeData self) -> bool"},
	 { (char *)"CompositeData___syncInCnt", _wrap_CompositeData___syncInCnt, METH_VARARGS, (char *)"CompositeData___syncInCnt(CompositeData self) -> uint32_t"},
	 { (char *)"CompositeData___hasTimeGpsPps", _wrap_CompositeData___hasTimeGpsPps, METH_VARARGS, (char *)"CompositeData___hasTimeGpsPps(CompositeData self) -> bool"},
	 { (char *)"CompositeData___timeGpsPps", _wrap_CompositeData___timeGpsPps, METH_VARARGS, (char *)"CompositeData___timeGpsPps(CompositeData self) -> uint64_t"},
	 { (char *)"CompositeData___hasGpsTow", _wrap_CompositeData___hasGpsTow, METH_VARARGS, (char *)"CompositeData___hasGpsTow(CompositeData self) -> bool"},
	 { (char *)"CompositeData___gpsTow", _wrap_CompositeData___gpsTow, METH_VARARGS, (char *)"CompositeData___gpsTow(CompositeData self) -> uint64_t"},
	 { (char *)"CompositeData___hasTimeUtc", _wrap_CompositeData___hasTimeUtc, METH_VARARGS, (char *)"CompositeData___hasTimeUtc(CompositeData self) -> bool"},
	 { (char *)"CompositeData___timeUtc", _wrap_CompositeData___timeUtc, METH_VARARGS, (char *)"CompositeData___timeUtc(CompositeData self) -> TimeUtc"},
	 { (char *)"CompositeData___hasSensSat", _wrap_CompositeData___hasSensSat, METH_VARARGS, (char *)"CompositeData___hasSensSat(CompositeData self) -> bool"},
	 { (char *)"CompositeData___sensSat", _wrap_CompositeData___sensSat, METH_VARARGS, (char *)"CompositeData___sensSat(CompositeData self) -> vn::protocol::uart::SensSat"},
	 { (char *)"CompositeData___hasFix", _wrap_CompositeData___hasFix, METH_VARARGS, (char *)"CompositeData___hasFix(CompositeData self) -> bool"},
	 { (char *)"CompositeData___fix", _wrap_CompositeData___fix, METH_VARARGS, (char *)"CompositeData___fix(CompositeData self) -> vn::protocol::uart::GpsFix"},
	 { (char *)"CompositeData___hasAnyPositionUncertainty", _wrap_CompositeData___hasAnyPositionUncertainty, METH_VARARGS, (char *)"CompositeData___hasAnyPositionUncertainty(CompositeData self) -> bool"},
	 { (char *)"CompositeData___anyPositionUncertainty", _wrap_CompositeData___anyPositionUncertainty, METH_VARARGS, (char *)"CompositeData___anyPositionUncertainty(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasPositionUncertaintyGpsNed", _wrap_CompositeData___hasPositionUncertaintyGpsNed, METH_VARARGS, (char *)"CompositeData___hasPositionUncertaintyGpsNed(CompositeData self) -> bool"},
	 { (char *)"CompositeData___positionUncertaintyGpsNed", _wrap_CompositeData___positionUncertaintyGpsNed, METH_VARARGS, (char *)"CompositeData___positionUncertaintyGpsNed(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasPositionUncertaintyGpsEcef", _wrap_CompositeData___hasPositionUncertaintyGpsEcef, METH_VARARGS, (char *)"CompositeData___hasPositionUncertaintyGpsEcef(CompositeData self) -> bool"},
	 { (char *)"CompositeData___positionUncertaintyGpsEcef", _wrap_CompositeData___positionUncertaintyGpsEcef, METH_VARARGS, (char *)"CompositeData___positionUncertaintyGpsEcef(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData___hasPositionUncertaintyEstimated", _wrap_CompositeData___hasPositionUncertaintyEstimated, METH_VARARGS, (char *)"CompositeData___hasPositionUncertaintyEstimated(CompositeData self) -> bool"},
	 { (char *)"CompositeData___positionUncertaintyEstimated", _wrap_CompositeData___positionUncertaintyEstimated, METH_VARARGS, (char *)"CompositeData___positionUncertaintyEstimated(CompositeData self) -> float"},
	 { (char *)"CompositeData___hasAnyVelocityUncertainty", _wrap_CompositeData___hasAnyVelocityUncertainty, METH_VARARGS, (char *)"CompositeData___hasAnyVelocityUncertainty(CompositeData self) -> bool"},
	 { (char *)"CompositeData___anyVelocityUncertainty", _wrap_CompositeData___anyVelocityUncertainty, METH_VARARGS, (char *)"CompositeData___anyVelocityUncertainty(CompositeData self) -> float"},
	 { (char *)"CompositeData___hasVelocityUncertaintyGps", _wrap_CompositeData___hasVelocityUncertaintyGps, METH_VARARGS, (char *)"CompositeData___hasVelocityUncertaintyGps(CompositeData self) -> bool"},
	 { (char *)"CompositeData___velocityUncertaintyGps", _wrap_CompositeData___velocityUncertaintyGps, METH_VARARGS, (char *)"CompositeData___velocityUncertaintyGps(CompositeData self) -> float"},
	 { (char *)"CompositeData___hasVelocityUncertaintyEstimated", _wrap_CompositeData___hasVelocityUncertaintyEstimated, METH_VARARGS, (char *)"CompositeData___hasVelocityUncertaintyEstimated(CompositeData self) -> bool"},
	 { (char *)"CompositeData___velocityUncertaintyEstimated", _wrap_CompositeData___velocityUncertaintyEstimated, METH_VARARGS, (char *)"CompositeData___velocityUncertaintyEstimated(CompositeData self) -> float"},
	 { (char *)"CompositeData___hasTimeUncertainty", _wrap_CompositeData___hasTimeUncertainty, METH_VARARGS, (char *)"CompositeData___hasTimeUncertainty(CompositeData self) -> bool"},
	 { (char *)"CompositeData___timeUncertainty", _wrap_CompositeData___timeUncertainty, METH_VARARGS, (char *)"CompositeData___timeUncertainty(CompositeData self) -> uint32_t"},
	 { (char *)"CompositeData___hasAttitudeUncertainty", _wrap_CompositeData___hasAttitudeUncertainty, METH_VARARGS, (char *)"CompositeData___hasAttitudeUncertainty(CompositeData self) -> bool"},
	 { (char *)"CompositeData___attitudeUncertainty", _wrap_CompositeData___attitudeUncertainty, METH_VARARGS, (char *)"CompositeData___attitudeUncertainty(CompositeData self) -> vec3f"},
	 { (char *)"CompositeData_hasCourseOverGround", _wrap_CompositeData_hasCourseOverGround, METH_VARARGS, (char *)"CompositeData_hasCourseOverGround(CompositeData self) -> bool"},
	 { (char *)"CompositeData_courseOverGround", _wrap_CompositeData_courseOverGround, METH_VARARGS, (char *)"CompositeData_courseOverGround(CompositeData self) -> float"},
	 { (char *)"CompositeData_hasSpeedOverGround", _wrap_CompositeData_hasSpeedOverGround, METH_VARARGS, (char *)"CompositeData_hasSpeedOverGround(CompositeData self) -> bool"},
	 { (char *)"CompositeData_speedOverGround", _wrap_CompositeData_speedOverGround, METH_VARARGS, (char *)"CompositeData_speedOverGround(CompositeData self) -> float"},
	 { (char *)"CompositeData_swigregister", CompositeData_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_EzAsyncData", _wrap_delete_EzAsyncData, METH_VARARGS, (char *)"delete_EzAsyncData(EzAsyncData self)"},
	 { (char *)"EzAsyncData___sensor", _wrap_EzAsyncData___sensor, METH_VARARGS, (char *)"EzAsyncData___sensor(EzAsyncData self) -> VnSensor"},
	 { (char *)"EzAsyncData_connect", _wrap_EzAsyncData_connect, METH_VARARGS, (char *)"EzAsyncData_connect(std::string portName, uint32_t baudrate) -> EzAsyncData"},
	 { (char *)"EzAsyncData_disconnect", _wrap_EzAsyncData_disconnect, METH_VARARGS, (char *)"EzAsyncData_disconnect(EzAsyncData self)"},
	 { (char *)"EzAsyncData___currentData", _wrap_EzAsyncData___currentData, METH_VARARGS, (char *)"EzAsyncData___currentData(EzAsyncData self) -> CompositeData"},
	 { (char *)"EzAsyncData_next_data", _wrap_EzAsyncData_next_data, METH_VARARGS, (char *)"\n"
		"next_data() -> CompositeData\n"
		"EzAsyncData_next_data(EzAsyncData self, int timeoutMs) -> CompositeData\n"
		""},
	 { (char *)"EzAsyncData_swigregister", EzAsyncData_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_ASYNCMODE = {"_p_ASYNCMODE", "ASYNCMODE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ATTITUDEGROUP = {"_p_ATTITUDEGROUP", "ATTITUDEGROUP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BINARYGROUP = {"_p_BINARYGROUP", "BINARYGROUP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_COMMONGROUP = {"_p_COMMONGROUP", "COMMONGROUP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GPSGROUP = {"_p_GPSGROUP", "GPSGROUP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IMUGROUP = {"_p_IMUGROUP", "IMUGROUP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_INSGROUP = {"_p_INSGROUP", "INSGROUP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SENSORERROR = {"_p_SENSORERROR", "SENSORERROR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TIMEGROUP = {"_p_TIMEGROUP", "TIMEGROUP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_sizeof_uint16_t__8__unsigned_char = {"_p_a_sizeof_uint16_t__8__unsigned_char", "unsigned char (*)[sizeof(uint16_t)*8]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void__void = {"_p_f_p_void__void", "void (*)(void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_p_q_const__char_size_t_size_t__void = {"_p_f_p_void_p_q_const__char_size_t_size_t__void", "void (*)(void *,char const *,size_t,size_t)|vn::sensors::VnSensor::RawDataReceivedHandler", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_r_vn__protocol__uart__Packet_size_t__void = {"_p_f_p_void_r_vn__protocol__uart__Packet_size_t__void", "void (*)(void *,vn::protocol::uart::Packet &,size_t)|vn::sensors::VnSensor::PossiblePacketFoundHandler|vn::sensors::VnSensor::AsyncPacketReceivedHandler|vn::sensors::VnSensor::ErrorPacketReceivedHandler", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_unsigned_int_t = {"_p_std__allocatorT_unsigned_int_t", "std::vector< unsigned int >::allocator_type *|std::allocator< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t = {"_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t", "std::vector< uint32_t,std::allocator< uint32_t > > *|std::vector< unsigned int,std::allocator< unsigned int > > *|std::vector< uint32_t > *|std::vector< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_vn__sensors__CompositeData_p_std__allocatorT_vn__sensors__CompositeData_p_t_t = {"_p_std__vectorT_vn__sensors__CompositeData_p_std__allocatorT_vn__sensors__CompositeData_p_t_t", "std::vector< vn::sensors::CompositeData *,std::allocator< vn::sensors::CompositeData * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__AttitudeF = {"_p_vn__math__AttitudeF", "vn::math::AttitudeF *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__PositionD = {"_p_vn__math__PositionD", "vn::math::PositionD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__matT_2_2_double_t = {"_p_vn__math__matT_2_2_double_t", "vn::math::mat22d *|vn::math::mat2d *|vn::math::mat< 2,2,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__matT_2_2_float_t = {"_p_vn__math__matT_2_2_float_t", "vn::math::mat< 2,2,float > *|vn::math::mat2f *|vn::math::mat22 *|vn::math::mat2 *|vn::math::mat22f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__matT_2_2_long_double_t = {"_p_vn__math__matT_2_2_long_double_t", "vn::math::mat22ld *|vn::math::mat2ld *|vn::math::mat< 2,2,long double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__matT_3_3_double_t = {"_p_vn__math__matT_3_3_double_t", "vn::math::mat33d *|vn::math::mat3d *|vn::math::mat< 3,3,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__matT_3_3_float_t = {"_p_vn__math__matT_3_3_float_t", "vn::math::mat< 3,3,float > *|vn::math::mat3f *|vn::math::mat33f *|vn::math::mat33 *|vn::math::mat3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__matT_3_3_long_double_t = {"_p_vn__math__matT_3_3_long_double_t", "vn::math::mat33ld *|vn::math::mat3ld *|vn::math::mat< 3,3,long double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__matT_4_3_float_t = {"_p_vn__math__matT_4_3_float_t", "vn::math::mat< 4,3,float > *|vn::math::mat44f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__matT_4_4_double_t = {"_p_vn__math__matT_4_4_double_t", "vn::math::mat44d *|vn::math::mat< 4,4,double > *|vn::math::mat4d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__matT_4_4_float_t = {"_p_vn__math__matT_4_4_float_t", "vn::math::mat4 *|vn::math::mat< 4,4,float > *|vn::math::mat44 *|vn::math::mat4f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__matT_4_4_long_double_t = {"_p_vn__math__matT_4_4_long_double_t", "vn::math::mat4ld *|vn::math::mat< 4,4,long double > *|vn::math::mat44ld *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__vecT_2_double_t = {"_p_vn__math__vecT_2_double_t", "vn::math::vec2d *|vn::math::vec< 2,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__vecT_2_float_t = {"_p_vn__math__vecT_2_float_t", "vn::math::vec< 2,float > *|vn::math::vec2f *|vn::math::vec2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__vecT_2_int_t = {"_p_vn__math__vecT_2_int_t", "vn::math::vec2i32 *|vn::math::ivec2 *|vn::math::vec< 2,int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__vecT_2_long_double_t = {"_p_vn__math__vecT_2_long_double_t", "vn::math::vec2ld *|vn::math::vec< 2,long double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__vecT_2_unsigned_int_t = {"_p_vn__math__vecT_2_unsigned_int_t", "vn::math::vec< 2,unsigned int > *|vn::math::vec2u32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__vecT_3_double_t = {"_p_vn__math__vecT_3_double_t", "vn::math::vec3d *|vn::math::vec< 3,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__vecT_3_float_t = {"_p_vn__math__vecT_3_float_t", "vn::math::vec< 3,float > *|vn::math::vec3 *|vn::math::vec3f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__vecT_3_int_t = {"_p_vn__math__vecT_3_int_t", "vn::math::vec3i32 *|vn::math::vec< 3,int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__vecT_3_long_double_t = {"_p_vn__math__vecT_3_long_double_t", "vn::math::vec3ld *|vn::math::vec< 3,long double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__vecT_3_unsigned_int_t = {"_p_vn__math__vecT_3_unsigned_int_t", "vn::math::vec3u32 *|vn::math::vec< 3,unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__vecT_4_double_t = {"_p_vn__math__vecT_4_double_t", "vn::math::vec4d *|vn::math::vec< 4,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__vecT_4_float_t = {"_p_vn__math__vecT_4_float_t", "vn::math::vec4f *|vn::math::vec< 4,float > *|vn::math::vec4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__vecT_4_int_t = {"_p_vn__math__vecT_4_int_t", "vn::math::vec4i32 *|vn::math::vec< 4,int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__vecT_4_long_double_t = {"_p_vn__math__vecT_4_long_double_t", "vn::math::vec< 4,long double > *|vn::math::vec4ld *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__math__vecT_4_unsigned_int_t = {"_p_vn__math__vecT_4_unsigned_int_t", "vn::math::vec4u32 *|vn::math::vec< 4,unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__AsciiAsync = {"_p_vn__protocol__uart__AsciiAsync", "enum vn::protocol::uart::AsciiAsync *|vn::protocol::uart::AsciiAsync *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__ChecksumMode = {"_p_vn__protocol__uart__ChecksumMode", "enum vn::protocol::uart::ChecksumMode *|vn::protocol::uart::ChecksumMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__CompensationMode = {"_p_vn__protocol__uart__CompensationMode", "enum vn::protocol::uart::CompensationMode *|vn::protocol::uart::CompensationMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__CountMode = {"_p_vn__protocol__uart__CountMode", "enum vn::protocol::uart::CountMode *|vn::protocol::uart::CountMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__ErrorMode = {"_p_vn__protocol__uart__ErrorMode", "enum vn::protocol::uart::ErrorMode *|vn::protocol::uart::ErrorMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__ExternalSensorMode = {"_p_vn__protocol__uart__ExternalSensorMode", "enum vn::protocol::uart::ExternalSensorMode *|vn::protocol::uart::ExternalSensorMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__FilterMode = {"_p_vn__protocol__uart__FilterMode", "enum vn::protocol::uart::FilterMode *|vn::protocol::uart::FilterMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__FoamInit = {"_p_vn__protocol__uart__FoamInit", "enum vn::protocol::uart::FoamInit *|vn::protocol::uart::FoamInit *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__GpsFix = {"_p_vn__protocol__uart__GpsFix", "enum vn::protocol::uart::GpsFix *|vn::protocol::uart::GpsFix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__GpsMode = {"_p_vn__protocol__uart__GpsMode", "enum vn::protocol::uart::GpsMode *|vn::protocol::uart::GpsMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__HeadingMode = {"_p_vn__protocol__uart__HeadingMode", "enum vn::protocol::uart::HeadingMode *|vn::protocol::uart::HeadingMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__HsiMode = {"_p_vn__protocol__uart__HsiMode", "enum vn::protocol::uart::HsiMode *|vn::protocol::uart::HsiMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__HsiOutput = {"_p_vn__protocol__uart__HsiOutput", "enum vn::protocol::uart::HsiOutput *|vn::protocol::uart::HsiOutput *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__IntegrationFrame = {"_p_vn__protocol__uart__IntegrationFrame", "enum vn::protocol::uart::IntegrationFrame *|vn::protocol::uart::IntegrationFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__MagneticMode = {"_p_vn__protocol__uart__MagneticMode", "enum vn::protocol::uart::MagneticMode *|vn::protocol::uart::MagneticMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__Packet = {"_p_vn__protocol__uart__Packet", "vn::protocol::uart::Packet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__PpsSource = {"_p_vn__protocol__uart__PpsSource", "enum vn::protocol::uart::PpsSource *|vn::protocol::uart::PpsSource *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__Scenario = {"_p_vn__protocol__uart__Scenario", "enum vn::protocol::uart::Scenario *|vn::protocol::uart::Scenario *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__StatusMode = {"_p_vn__protocol__uart__StatusMode", "enum vn::protocol::uart::StatusMode *|vn::protocol::uart::StatusMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__SyncInEdge = {"_p_vn__protocol__uart__SyncInEdge", "enum vn::protocol::uart::SyncInEdge *|vn::protocol::uart::SyncInEdge *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__SyncInMode = {"_p_vn__protocol__uart__SyncInMode", "enum vn::protocol::uart::SyncInMode *|vn::protocol::uart::SyncInMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__SyncOutMode = {"_p_vn__protocol__uart__SyncOutMode", "enum vn::protocol::uart::SyncOutMode *|vn::protocol::uart::SyncOutMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__SyncOutPolarity = {"_p_vn__protocol__uart__SyncOutPolarity", "enum vn::protocol::uart::SyncOutPolarity *|vn::protocol::uart::SyncOutPolarity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__TimeUtc = {"_p_vn__protocol__uart__TimeUtc", "vn::protocol::uart::TimeUtc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__VelocityCompensationMode = {"_p_vn__protocol__uart__VelocityCompensationMode", "vn::protocol::uart::VelocityCompensationMode *|enum vn::protocol::uart::VelocityCompensationMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__VpeEnable = {"_p_vn__protocol__uart__VpeEnable", "enum vn::protocol::uart::VpeEnable *|vn::protocol::uart::VpeEnable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__VpeMode = {"_p_vn__protocol__uart__VpeMode", "enum vn::protocol::uart::VpeMode *|vn::protocol::uart::VpeMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__protocol__uart__VpeStatus = {"_p_vn__protocol__uart__VpeStatus", "vn::protocol::uart::VpeStatus *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__AccelerationCompensationRegister = {"_p_vn__sensors__AccelerationCompensationRegister", "vn::sensors::AccelerationCompensationRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__BinaryOutputRegister = {"_p_vn__sensors__BinaryOutputRegister", "vn::sensors::BinaryOutputRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__CalculatedMagnetometerCalibrationRegister = {"_p_vn__sensors__CalculatedMagnetometerCalibrationRegister", "vn::sensors::CalculatedMagnetometerCalibrationRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__CommunicationProtocolControlRegister = {"_p_vn__sensors__CommunicationProtocolControlRegister", "vn::sensors::CommunicationProtocolControlRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__CompositeData = {"_p_vn__sensors__CompositeData", "vn::sensors::CompositeData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister = {"_p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister", "vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__DeltaThetaAndDeltaVelocityRegister = {"_p_vn__sensors__DeltaThetaAndDeltaVelocityRegister", "vn::sensors::DeltaThetaAndDeltaVelocityRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__EzAsyncData = {"_p_vn__sensors__EzAsyncData", "vn::sensors::EzAsyncData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__FilterActiveTuningParametersRegister = {"_p_vn__sensors__FilterActiveTuningParametersRegister", "vn::sensors::FilterActiveTuningParametersRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__FilterBasicControlRegister = {"_p_vn__sensors__FilterBasicControlRegister", "vn::sensors::FilterBasicControlRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__FilterMeasurementsVarianceParametersRegister = {"_p_vn__sensors__FilterMeasurementsVarianceParametersRegister", "vn::sensors::FilterMeasurementsVarianceParametersRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__GpsCompassBaselineRegister = {"_p_vn__sensors__GpsCompassBaselineRegister", "vn::sensors::GpsCompassBaselineRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__GpsCompassEstimatedBaselineRegister = {"_p_vn__sensors__GpsCompassEstimatedBaselineRegister", "vn::sensors::GpsCompassEstimatedBaselineRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__GpsConfigurationRegister = {"_p_vn__sensors__GpsConfigurationRegister", "vn::sensors::GpsConfigurationRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__GpsSolutionEcefRegister = {"_p_vn__sensors__GpsSolutionEcefRegister", "vn::sensors::GpsSolutionEcefRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__GpsSolutionLlaRegister = {"_p_vn__sensors__GpsSolutionLlaRegister", "vn::sensors::GpsSolutionLlaRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__GyroCompensationRegister = {"_p_vn__sensors__GyroCompensationRegister", "vn::sensors::GyroCompensationRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__ImuFilteringConfigurationRegister = {"_p_vn__sensors__ImuFilteringConfigurationRegister", "vn::sensors::ImuFilteringConfigurationRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__ImuMeasurementsRegister = {"_p_vn__sensors__ImuMeasurementsRegister", "vn::sensors::ImuMeasurementsRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__ImuRateConfigurationRegister = {"_p_vn__sensors__ImuRateConfigurationRegister", "vn::sensors::ImuRateConfigurationRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__InsAdvancedConfigurationRegister = {"_p_vn__sensors__InsAdvancedConfigurationRegister", "vn::sensors::InsAdvancedConfigurationRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__InsBasicConfigurationRegisterVn200 = {"_p_vn__sensors__InsBasicConfigurationRegisterVn200", "vn::sensors::InsBasicConfigurationRegisterVn200 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__InsBasicConfigurationRegisterVn300 = {"_p_vn__sensors__InsBasicConfigurationRegisterVn300", "vn::sensors::InsBasicConfigurationRegisterVn300 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__InsSolutionEcefRegister = {"_p_vn__sensors__InsSolutionEcefRegister", "vn::sensors::InsSolutionEcefRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__InsSolutionLlaRegister = {"_p_vn__sensors__InsSolutionLlaRegister", "vn::sensors::InsSolutionLlaRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__InsStateEcefRegister = {"_p_vn__sensors__InsStateEcefRegister", "vn::sensors::InsStateEcefRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__InsStateLlaRegister = {"_p_vn__sensors__InsStateLlaRegister", "vn::sensors::InsStateLlaRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__MagneticAccelerationAndAngularRatesRegister = {"_p_vn__sensors__MagneticAccelerationAndAngularRatesRegister", "vn::sensors::MagneticAccelerationAndAngularRatesRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__MagneticAndGravityReferenceVectorsRegister = {"_p_vn__sensors__MagneticAndGravityReferenceVectorsRegister", "vn::sensors::MagneticAndGravityReferenceVectorsRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__MagnetometerCalibrationControlRegister = {"_p_vn__sensors__MagnetometerCalibrationControlRegister", "vn::sensors::MagnetometerCalibrationControlRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__MagnetometerCompensationRegister = {"_p_vn__sensors__MagnetometerCompensationRegister", "vn::sensors::MagnetometerCompensationRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__QuaternionMagneticAccelerationAndAngularRatesRegister = {"_p_vn__sensors__QuaternionMagneticAccelerationAndAngularRatesRegister", "vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__ReferenceVectorConfigurationRegister = {"_p_vn__sensors__ReferenceVectorConfigurationRegister", "vn::sensors::ReferenceVectorConfigurationRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__StartupFilterBiasEstimateRegister = {"_p_vn__sensors__StartupFilterBiasEstimateRegister", "vn::sensors::StartupFilterBiasEstimateRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__SynchronizationControlRegister = {"_p_vn__sensors__SynchronizationControlRegister", "vn::sensors::SynchronizationControlRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__SynchronizationStatusRegister = {"_p_vn__sensors__SynchronizationStatusRegister", "vn::sensors::SynchronizationStatusRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__VelocityCompensationControlRegister = {"_p_vn__sensors__VelocityCompensationControlRegister", "vn::sensors::VelocityCompensationControlRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__VelocityCompensationStatusRegister = {"_p_vn__sensors__VelocityCompensationStatusRegister", "vn::sensors::VelocityCompensationStatusRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__VnSensor = {"_p_vn__sensors__VnSensor", "vn::sensors::VnSensor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__VpeAccelerometerAdvancedTuningRegister = {"_p_vn__sensors__VpeAccelerometerAdvancedTuningRegister", "vn::sensors::VpeAccelerometerAdvancedTuningRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__VpeAccelerometerBasicTuningRegister = {"_p_vn__sensors__VpeAccelerometerBasicTuningRegister", "vn::sensors::VpeAccelerometerBasicTuningRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__VpeBasicControlRegister = {"_p_vn__sensors__VpeBasicControlRegister", "vn::sensors::VpeBasicControlRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__VpeGyroBasicTuningRegister = {"_p_vn__sensors__VpeGyroBasicTuningRegister", "vn::sensors::VpeGyroBasicTuningRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__VpeMagnetometerAdvancedTuningRegister = {"_p_vn__sensors__VpeMagnetometerAdvancedTuningRegister", "vn::sensors::VpeMagnetometerAdvancedTuningRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__VpeMagnetometerBasicTuningRegister = {"_p_vn__sensors__VpeMagnetometerBasicTuningRegister", "vn::sensors::VpeMagnetometerBasicTuningRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__YawPitchRollMagneticAccelerationAndAngularRatesRegister = {"_p_vn__sensors__YawPitchRollMagneticAccelerationAndAngularRatesRegister", "vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__YawPitchRollTrueBodyAccelerationAndAngularRatesRegister = {"_p_vn__sensors__YawPitchRollTrueBodyAccelerationAndAngularRatesRegister", "vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__sensors__YawPitchRollTrueInertialAccelerationAndAngularRatesRegister = {"_p_vn__sensors__YawPitchRollTrueInertialAccelerationAndAngularRatesRegister", "vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vn__xplat__IPort = {"_p_vn__xplat__IPort", "vn::xplat::IPort *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ASYNCMODE,
  &_swigt__p_ATTITUDEGROUP,
  &_swigt__p_BINARYGROUP,
  &_swigt__p_COMMONGROUP,
  &_swigt__p_GPSGROUP,
  &_swigt__p_IMUGROUP,
  &_swigt__p_INSGROUP,
  &_swigt__p_SENSORERROR,
  &_swigt__p_TIMEGROUP,
  &_swigt__p_a_sizeof_uint16_t__8__unsigned_char,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_f_p_void__void,
  &_swigt__p_f_p_void_p_q_const__char_size_t_size_t__void,
  &_swigt__p_f_p_void_r_vn__protocol__uart__Packet_size_t__void,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_p_PyObject,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_unsigned_int_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__ostream,
  &_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  &_swigt__p_std__vectorT_vn__sensors__CompositeData_p_std__allocatorT_vn__sensors__CompositeData_p_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
  &_swigt__p_vn__math__AttitudeF,
  &_swigt__p_vn__math__PositionD,
  &_swigt__p_vn__math__matT_2_2_double_t,
  &_swigt__p_vn__math__matT_2_2_float_t,
  &_swigt__p_vn__math__matT_2_2_long_double_t,
  &_swigt__p_vn__math__matT_3_3_double_t,
  &_swigt__p_vn__math__matT_3_3_float_t,
  &_swigt__p_vn__math__matT_3_3_long_double_t,
  &_swigt__p_vn__math__matT_4_3_float_t,
  &_swigt__p_vn__math__matT_4_4_double_t,
  &_swigt__p_vn__math__matT_4_4_float_t,
  &_swigt__p_vn__math__matT_4_4_long_double_t,
  &_swigt__p_vn__math__vecT_2_double_t,
  &_swigt__p_vn__math__vecT_2_float_t,
  &_swigt__p_vn__math__vecT_2_int_t,
  &_swigt__p_vn__math__vecT_2_long_double_t,
  &_swigt__p_vn__math__vecT_2_unsigned_int_t,
  &_swigt__p_vn__math__vecT_3_double_t,
  &_swigt__p_vn__math__vecT_3_float_t,
  &_swigt__p_vn__math__vecT_3_int_t,
  &_swigt__p_vn__math__vecT_3_long_double_t,
  &_swigt__p_vn__math__vecT_3_unsigned_int_t,
  &_swigt__p_vn__math__vecT_4_double_t,
  &_swigt__p_vn__math__vecT_4_float_t,
  &_swigt__p_vn__math__vecT_4_int_t,
  &_swigt__p_vn__math__vecT_4_long_double_t,
  &_swigt__p_vn__math__vecT_4_unsigned_int_t,
  &_swigt__p_vn__protocol__uart__AsciiAsync,
  &_swigt__p_vn__protocol__uart__ChecksumMode,
  &_swigt__p_vn__protocol__uart__CompensationMode,
  &_swigt__p_vn__protocol__uart__CountMode,
  &_swigt__p_vn__protocol__uart__ErrorMode,
  &_swigt__p_vn__protocol__uart__ExternalSensorMode,
  &_swigt__p_vn__protocol__uart__FilterMode,
  &_swigt__p_vn__protocol__uart__FoamInit,
  &_swigt__p_vn__protocol__uart__GpsFix,
  &_swigt__p_vn__protocol__uart__GpsMode,
  &_swigt__p_vn__protocol__uart__HeadingMode,
  &_swigt__p_vn__protocol__uart__HsiMode,
  &_swigt__p_vn__protocol__uart__HsiOutput,
  &_swigt__p_vn__protocol__uart__IntegrationFrame,
  &_swigt__p_vn__protocol__uart__MagneticMode,
  &_swigt__p_vn__protocol__uart__Packet,
  &_swigt__p_vn__protocol__uart__PpsSource,
  &_swigt__p_vn__protocol__uart__Scenario,
  &_swigt__p_vn__protocol__uart__StatusMode,
  &_swigt__p_vn__protocol__uart__SyncInEdge,
  &_swigt__p_vn__protocol__uart__SyncInMode,
  &_swigt__p_vn__protocol__uart__SyncOutMode,
  &_swigt__p_vn__protocol__uart__SyncOutPolarity,
  &_swigt__p_vn__protocol__uart__TimeUtc,
  &_swigt__p_vn__protocol__uart__VelocityCompensationMode,
  &_swigt__p_vn__protocol__uart__VpeEnable,
  &_swigt__p_vn__protocol__uart__VpeMode,
  &_swigt__p_vn__protocol__uart__VpeStatus,
  &_swigt__p_vn__sensors__AccelerationCompensationRegister,
  &_swigt__p_vn__sensors__BinaryOutputRegister,
  &_swigt__p_vn__sensors__CalculatedMagnetometerCalibrationRegister,
  &_swigt__p_vn__sensors__CommunicationProtocolControlRegister,
  &_swigt__p_vn__sensors__CompositeData,
  &_swigt__p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister,
  &_swigt__p_vn__sensors__DeltaThetaAndDeltaVelocityRegister,
  &_swigt__p_vn__sensors__EzAsyncData,
  &_swigt__p_vn__sensors__FilterActiveTuningParametersRegister,
  &_swigt__p_vn__sensors__FilterBasicControlRegister,
  &_swigt__p_vn__sensors__FilterMeasurementsVarianceParametersRegister,
  &_swigt__p_vn__sensors__GpsCompassBaselineRegister,
  &_swigt__p_vn__sensors__GpsCompassEstimatedBaselineRegister,
  &_swigt__p_vn__sensors__GpsConfigurationRegister,
  &_swigt__p_vn__sensors__GpsSolutionEcefRegister,
  &_swigt__p_vn__sensors__GpsSolutionLlaRegister,
  &_swigt__p_vn__sensors__GyroCompensationRegister,
  &_swigt__p_vn__sensors__ImuFilteringConfigurationRegister,
  &_swigt__p_vn__sensors__ImuMeasurementsRegister,
  &_swigt__p_vn__sensors__ImuRateConfigurationRegister,
  &_swigt__p_vn__sensors__InsAdvancedConfigurationRegister,
  &_swigt__p_vn__sensors__InsBasicConfigurationRegisterVn200,
  &_swigt__p_vn__sensors__InsBasicConfigurationRegisterVn300,
  &_swigt__p_vn__sensors__InsSolutionEcefRegister,
  &_swigt__p_vn__sensors__InsSolutionLlaRegister,
  &_swigt__p_vn__sensors__InsStateEcefRegister,
  &_swigt__p_vn__sensors__InsStateLlaRegister,
  &_swigt__p_vn__sensors__MagneticAccelerationAndAngularRatesRegister,
  &_swigt__p_vn__sensors__MagneticAndGravityReferenceVectorsRegister,
  &_swigt__p_vn__sensors__MagnetometerCalibrationControlRegister,
  &_swigt__p_vn__sensors__MagnetometerCompensationRegister,
  &_swigt__p_vn__sensors__QuaternionMagneticAccelerationAndAngularRatesRegister,
  &_swigt__p_vn__sensors__ReferenceVectorConfigurationRegister,
  &_swigt__p_vn__sensors__StartupFilterBiasEstimateRegister,
  &_swigt__p_vn__sensors__SynchronizationControlRegister,
  &_swigt__p_vn__sensors__SynchronizationStatusRegister,
  &_swigt__p_vn__sensors__VelocityCompensationControlRegister,
  &_swigt__p_vn__sensors__VelocityCompensationStatusRegister,
  &_swigt__p_vn__sensors__VnSensor,
  &_swigt__p_vn__sensors__VpeAccelerometerAdvancedTuningRegister,
  &_swigt__p_vn__sensors__VpeAccelerometerBasicTuningRegister,
  &_swigt__p_vn__sensors__VpeBasicControlRegister,
  &_swigt__p_vn__sensors__VpeGyroBasicTuningRegister,
  &_swigt__p_vn__sensors__VpeMagnetometerAdvancedTuningRegister,
  &_swigt__p_vn__sensors__VpeMagnetometerBasicTuningRegister,
  &_swigt__p_vn__sensors__YawPitchRollMagneticAccelerationAndAngularRatesRegister,
  &_swigt__p_vn__sensors__YawPitchRollTrueBodyAccelerationAndAngularRatesRegister,
  &_swigt__p_vn__sensors__YawPitchRollTrueInertialAccelerationAndAngularRatesRegister,
  &_swigt__p_vn__xplat__IPort,
};

static swig_cast_info _swigc__p_ASYNCMODE[] = {  {&_swigt__p_ASYNCMODE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ATTITUDEGROUP[] = {  {&_swigt__p_ATTITUDEGROUP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BINARYGROUP[] = {  {&_swigt__p_BINARYGROUP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_COMMONGROUP[] = {  {&_swigt__p_COMMONGROUP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GPSGROUP[] = {  {&_swigt__p_GPSGROUP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMUGROUP[] = {  {&_swigt__p_IMUGROUP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_INSGROUP[] = {  {&_swigt__p_INSGROUP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SENSORERROR[] = {  {&_swigt__p_SENSORERROR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TIMEGROUP[] = {  {&_swigt__p_TIMEGROUP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_sizeof_uint16_t__8__unsigned_char[] = {  {&_swigt__p_a_sizeof_uint16_t__8__unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__void[] = {  {&_swigt__p_f_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_p_q_const__char_size_t_size_t__void[] = {  {&_swigt__p_f_p_void_p_q_const__char_size_t_size_t__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_r_vn__protocol__uart__Packet_size_t__void[] = {  {&_swigt__p_f_p_void_r_vn__protocol__uart__Packet_size_t__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_unsigned_int_t[] = {  {&_swigt__p_std__allocatorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_vn__sensors__CompositeData_p_std__allocatorT_vn__sensors__CompositeData_p_t_t[] = {  {&_swigt__p_std__vectorT_vn__sensors__CompositeData_p_std__allocatorT_vn__sensors__CompositeData_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__AttitudeF[] = {  {&_swigt__p_vn__math__AttitudeF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__PositionD[] = {  {&_swigt__p_vn__math__PositionD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__matT_2_2_double_t[] = {  {&_swigt__p_vn__math__matT_2_2_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__matT_2_2_float_t[] = {  {&_swigt__p_vn__math__matT_2_2_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__matT_2_2_long_double_t[] = {  {&_swigt__p_vn__math__matT_2_2_long_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__matT_3_3_double_t[] = {  {&_swigt__p_vn__math__matT_3_3_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__matT_3_3_float_t[] = {  {&_swigt__p_vn__math__matT_3_3_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__matT_3_3_long_double_t[] = {  {&_swigt__p_vn__math__matT_3_3_long_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__matT_4_3_float_t[] = {  {&_swigt__p_vn__math__matT_4_3_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__matT_4_4_double_t[] = {  {&_swigt__p_vn__math__matT_4_4_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__matT_4_4_float_t[] = {  {&_swigt__p_vn__math__matT_4_4_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__matT_4_4_long_double_t[] = {  {&_swigt__p_vn__math__matT_4_4_long_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__vecT_2_double_t[] = {  {&_swigt__p_vn__math__vecT_2_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__vecT_2_float_t[] = {  {&_swigt__p_vn__math__vecT_2_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__vecT_2_int_t[] = {  {&_swigt__p_vn__math__vecT_2_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__vecT_2_long_double_t[] = {  {&_swigt__p_vn__math__vecT_2_long_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__vecT_2_unsigned_int_t[] = {  {&_swigt__p_vn__math__vecT_2_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__vecT_3_double_t[] = {  {&_swigt__p_vn__math__vecT_3_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__vecT_3_float_t[] = {  {&_swigt__p_vn__math__vecT_3_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__vecT_3_int_t[] = {  {&_swigt__p_vn__math__vecT_3_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__vecT_3_long_double_t[] = {  {&_swigt__p_vn__math__vecT_3_long_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__vecT_3_unsigned_int_t[] = {  {&_swigt__p_vn__math__vecT_3_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__vecT_4_double_t[] = {  {&_swigt__p_vn__math__vecT_4_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__vecT_4_float_t[] = {  {&_swigt__p_vn__math__vecT_4_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__vecT_4_int_t[] = {  {&_swigt__p_vn__math__vecT_4_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__vecT_4_long_double_t[] = {  {&_swigt__p_vn__math__vecT_4_long_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__math__vecT_4_unsigned_int_t[] = {  {&_swigt__p_vn__math__vecT_4_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__AsciiAsync[] = {  {&_swigt__p_vn__protocol__uart__AsciiAsync, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__ChecksumMode[] = {  {&_swigt__p_vn__protocol__uart__ChecksumMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__CompensationMode[] = {  {&_swigt__p_vn__protocol__uart__CompensationMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__CountMode[] = {  {&_swigt__p_vn__protocol__uart__CountMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__ErrorMode[] = {  {&_swigt__p_vn__protocol__uart__ErrorMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__ExternalSensorMode[] = {  {&_swigt__p_vn__protocol__uart__ExternalSensorMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__FilterMode[] = {  {&_swigt__p_vn__protocol__uart__FilterMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__FoamInit[] = {  {&_swigt__p_vn__protocol__uart__FoamInit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__GpsFix[] = {  {&_swigt__p_vn__protocol__uart__GpsFix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__GpsMode[] = {  {&_swigt__p_vn__protocol__uart__GpsMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__HeadingMode[] = {  {&_swigt__p_vn__protocol__uart__HeadingMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__HsiMode[] = {  {&_swigt__p_vn__protocol__uart__HsiMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__HsiOutput[] = {  {&_swigt__p_vn__protocol__uart__HsiOutput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__IntegrationFrame[] = {  {&_swigt__p_vn__protocol__uart__IntegrationFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__MagneticMode[] = {  {&_swigt__p_vn__protocol__uart__MagneticMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__Packet[] = {  {&_swigt__p_vn__protocol__uart__Packet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__PpsSource[] = {  {&_swigt__p_vn__protocol__uart__PpsSource, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__Scenario[] = {  {&_swigt__p_vn__protocol__uart__Scenario, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__StatusMode[] = {  {&_swigt__p_vn__protocol__uart__StatusMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__SyncInEdge[] = {  {&_swigt__p_vn__protocol__uart__SyncInEdge, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__SyncInMode[] = {  {&_swigt__p_vn__protocol__uart__SyncInMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__SyncOutMode[] = {  {&_swigt__p_vn__protocol__uart__SyncOutMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__SyncOutPolarity[] = {  {&_swigt__p_vn__protocol__uart__SyncOutPolarity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__TimeUtc[] = {  {&_swigt__p_vn__protocol__uart__TimeUtc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__VelocityCompensationMode[] = {  {&_swigt__p_vn__protocol__uart__VelocityCompensationMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__VpeEnable[] = {  {&_swigt__p_vn__protocol__uart__VpeEnable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__VpeMode[] = {  {&_swigt__p_vn__protocol__uart__VpeMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__protocol__uart__VpeStatus[] = {  {&_swigt__p_vn__protocol__uart__VpeStatus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__AccelerationCompensationRegister[] = {  {&_swigt__p_vn__sensors__AccelerationCompensationRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__BinaryOutputRegister[] = {  {&_swigt__p_vn__sensors__BinaryOutputRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__CalculatedMagnetometerCalibrationRegister[] = {  {&_swigt__p_vn__sensors__CalculatedMagnetometerCalibrationRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__CommunicationProtocolControlRegister[] = {  {&_swigt__p_vn__sensors__CommunicationProtocolControlRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__CompositeData[] = {  {&_swigt__p_vn__sensors__CompositeData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister[] = {  {&_swigt__p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__DeltaThetaAndDeltaVelocityRegister[] = {  {&_swigt__p_vn__sensors__DeltaThetaAndDeltaVelocityRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__EzAsyncData[] = {  {&_swigt__p_vn__sensors__EzAsyncData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__FilterActiveTuningParametersRegister[] = {  {&_swigt__p_vn__sensors__FilterActiveTuningParametersRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__FilterBasicControlRegister[] = {  {&_swigt__p_vn__sensors__FilterBasicControlRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__FilterMeasurementsVarianceParametersRegister[] = {  {&_swigt__p_vn__sensors__FilterMeasurementsVarianceParametersRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__GpsCompassBaselineRegister[] = {  {&_swigt__p_vn__sensors__GpsCompassBaselineRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__GpsCompassEstimatedBaselineRegister[] = {  {&_swigt__p_vn__sensors__GpsCompassEstimatedBaselineRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__GpsConfigurationRegister[] = {  {&_swigt__p_vn__sensors__GpsConfigurationRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__GpsSolutionEcefRegister[] = {  {&_swigt__p_vn__sensors__GpsSolutionEcefRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__GpsSolutionLlaRegister[] = {  {&_swigt__p_vn__sensors__GpsSolutionLlaRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__GyroCompensationRegister[] = {  {&_swigt__p_vn__sensors__GyroCompensationRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__ImuFilteringConfigurationRegister[] = {  {&_swigt__p_vn__sensors__ImuFilteringConfigurationRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__ImuMeasurementsRegister[] = {  {&_swigt__p_vn__sensors__ImuMeasurementsRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__ImuRateConfigurationRegister[] = {  {&_swigt__p_vn__sensors__ImuRateConfigurationRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__InsAdvancedConfigurationRegister[] = {  {&_swigt__p_vn__sensors__InsAdvancedConfigurationRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__InsBasicConfigurationRegisterVn200[] = {  {&_swigt__p_vn__sensors__InsBasicConfigurationRegisterVn200, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__InsBasicConfigurationRegisterVn300[] = {  {&_swigt__p_vn__sensors__InsBasicConfigurationRegisterVn300, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__InsSolutionEcefRegister[] = {  {&_swigt__p_vn__sensors__InsSolutionEcefRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__InsSolutionLlaRegister[] = {  {&_swigt__p_vn__sensors__InsSolutionLlaRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__InsStateEcefRegister[] = {  {&_swigt__p_vn__sensors__InsStateEcefRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__InsStateLlaRegister[] = {  {&_swigt__p_vn__sensors__InsStateLlaRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__MagneticAccelerationAndAngularRatesRegister[] = {  {&_swigt__p_vn__sensors__MagneticAccelerationAndAngularRatesRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__MagneticAndGravityReferenceVectorsRegister[] = {  {&_swigt__p_vn__sensors__MagneticAndGravityReferenceVectorsRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__MagnetometerCalibrationControlRegister[] = {  {&_swigt__p_vn__sensors__MagnetometerCalibrationControlRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__MagnetometerCompensationRegister[] = {  {&_swigt__p_vn__sensors__MagnetometerCompensationRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__QuaternionMagneticAccelerationAndAngularRatesRegister[] = {  {&_swigt__p_vn__sensors__QuaternionMagneticAccelerationAndAngularRatesRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__ReferenceVectorConfigurationRegister[] = {  {&_swigt__p_vn__sensors__ReferenceVectorConfigurationRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__StartupFilterBiasEstimateRegister[] = {  {&_swigt__p_vn__sensors__StartupFilterBiasEstimateRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__SynchronizationControlRegister[] = {  {&_swigt__p_vn__sensors__SynchronizationControlRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__SynchronizationStatusRegister[] = {  {&_swigt__p_vn__sensors__SynchronizationStatusRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__VelocityCompensationControlRegister[] = {  {&_swigt__p_vn__sensors__VelocityCompensationControlRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__VelocityCompensationStatusRegister[] = {  {&_swigt__p_vn__sensors__VelocityCompensationStatusRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__VnSensor[] = {  {&_swigt__p_vn__sensors__VnSensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__VpeAccelerometerAdvancedTuningRegister[] = {  {&_swigt__p_vn__sensors__VpeAccelerometerAdvancedTuningRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__VpeAccelerometerBasicTuningRegister[] = {  {&_swigt__p_vn__sensors__VpeAccelerometerBasicTuningRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__VpeBasicControlRegister[] = {  {&_swigt__p_vn__sensors__VpeBasicControlRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__VpeGyroBasicTuningRegister[] = {  {&_swigt__p_vn__sensors__VpeGyroBasicTuningRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__VpeMagnetometerAdvancedTuningRegister[] = {  {&_swigt__p_vn__sensors__VpeMagnetometerAdvancedTuningRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__VpeMagnetometerBasicTuningRegister[] = {  {&_swigt__p_vn__sensors__VpeMagnetometerBasicTuningRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__YawPitchRollMagneticAccelerationAndAngularRatesRegister[] = {  {&_swigt__p_vn__sensors__YawPitchRollMagneticAccelerationAndAngularRatesRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__YawPitchRollTrueBodyAccelerationAndAngularRatesRegister[] = {  {&_swigt__p_vn__sensors__YawPitchRollTrueBodyAccelerationAndAngularRatesRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__sensors__YawPitchRollTrueInertialAccelerationAndAngularRatesRegister[] = {  {&_swigt__p_vn__sensors__YawPitchRollTrueInertialAccelerationAndAngularRatesRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vn__xplat__IPort[] = {  {&_swigt__p_vn__xplat__IPort, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ASYNCMODE,
  _swigc__p_ATTITUDEGROUP,
  _swigc__p_BINARYGROUP,
  _swigc__p_COMMONGROUP,
  _swigc__p_GPSGROUP,
  _swigc__p_IMUGROUP,
  _swigc__p_INSGROUP,
  _swigc__p_SENSORERROR,
  _swigc__p_TIMEGROUP,
  _swigc__p_a_sizeof_uint16_t__8__unsigned_char,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_f_p_void__void,
  _swigc__p_f_p_void_p_q_const__char_size_t_size_t__void,
  _swigc__p_f_p_void_r_vn__protocol__uart__Packet_size_t__void,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_p_PyObject,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_unsigned_int_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__ostream,
  _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  _swigc__p_std__vectorT_vn__sensors__CompositeData_p_std__allocatorT_vn__sensors__CompositeData_p_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
  _swigc__p_vn__math__AttitudeF,
  _swigc__p_vn__math__PositionD,
  _swigc__p_vn__math__matT_2_2_double_t,
  _swigc__p_vn__math__matT_2_2_float_t,
  _swigc__p_vn__math__matT_2_2_long_double_t,
  _swigc__p_vn__math__matT_3_3_double_t,
  _swigc__p_vn__math__matT_3_3_float_t,
  _swigc__p_vn__math__matT_3_3_long_double_t,
  _swigc__p_vn__math__matT_4_3_float_t,
  _swigc__p_vn__math__matT_4_4_double_t,
  _swigc__p_vn__math__matT_4_4_float_t,
  _swigc__p_vn__math__matT_4_4_long_double_t,
  _swigc__p_vn__math__vecT_2_double_t,
  _swigc__p_vn__math__vecT_2_float_t,
  _swigc__p_vn__math__vecT_2_int_t,
  _swigc__p_vn__math__vecT_2_long_double_t,
  _swigc__p_vn__math__vecT_2_unsigned_int_t,
  _swigc__p_vn__math__vecT_3_double_t,
  _swigc__p_vn__math__vecT_3_float_t,
  _swigc__p_vn__math__vecT_3_int_t,
  _swigc__p_vn__math__vecT_3_long_double_t,
  _swigc__p_vn__math__vecT_3_unsigned_int_t,
  _swigc__p_vn__math__vecT_4_double_t,
  _swigc__p_vn__math__vecT_4_float_t,
  _swigc__p_vn__math__vecT_4_int_t,
  _swigc__p_vn__math__vecT_4_long_double_t,
  _swigc__p_vn__math__vecT_4_unsigned_int_t,
  _swigc__p_vn__protocol__uart__AsciiAsync,
  _swigc__p_vn__protocol__uart__ChecksumMode,
  _swigc__p_vn__protocol__uart__CompensationMode,
  _swigc__p_vn__protocol__uart__CountMode,
  _swigc__p_vn__protocol__uart__ErrorMode,
  _swigc__p_vn__protocol__uart__ExternalSensorMode,
  _swigc__p_vn__protocol__uart__FilterMode,
  _swigc__p_vn__protocol__uart__FoamInit,
  _swigc__p_vn__protocol__uart__GpsFix,
  _swigc__p_vn__protocol__uart__GpsMode,
  _swigc__p_vn__protocol__uart__HeadingMode,
  _swigc__p_vn__protocol__uart__HsiMode,
  _swigc__p_vn__protocol__uart__HsiOutput,
  _swigc__p_vn__protocol__uart__IntegrationFrame,
  _swigc__p_vn__protocol__uart__MagneticMode,
  _swigc__p_vn__protocol__uart__Packet,
  _swigc__p_vn__protocol__uart__PpsSource,
  _swigc__p_vn__protocol__uart__Scenario,
  _swigc__p_vn__protocol__uart__StatusMode,
  _swigc__p_vn__protocol__uart__SyncInEdge,
  _swigc__p_vn__protocol__uart__SyncInMode,
  _swigc__p_vn__protocol__uart__SyncOutMode,
  _swigc__p_vn__protocol__uart__SyncOutPolarity,
  _swigc__p_vn__protocol__uart__TimeUtc,
  _swigc__p_vn__protocol__uart__VelocityCompensationMode,
  _swigc__p_vn__protocol__uart__VpeEnable,
  _swigc__p_vn__protocol__uart__VpeMode,
  _swigc__p_vn__protocol__uart__VpeStatus,
  _swigc__p_vn__sensors__AccelerationCompensationRegister,
  _swigc__p_vn__sensors__BinaryOutputRegister,
  _swigc__p_vn__sensors__CalculatedMagnetometerCalibrationRegister,
  _swigc__p_vn__sensors__CommunicationProtocolControlRegister,
  _swigc__p_vn__sensors__CompositeData,
  _swigc__p_vn__sensors__DeltaThetaAndDeltaVelocityConfigurationRegister,
  _swigc__p_vn__sensors__DeltaThetaAndDeltaVelocityRegister,
  _swigc__p_vn__sensors__EzAsyncData,
  _swigc__p_vn__sensors__FilterActiveTuningParametersRegister,
  _swigc__p_vn__sensors__FilterBasicControlRegister,
  _swigc__p_vn__sensors__FilterMeasurementsVarianceParametersRegister,
  _swigc__p_vn__sensors__GpsCompassBaselineRegister,
  _swigc__p_vn__sensors__GpsCompassEstimatedBaselineRegister,
  _swigc__p_vn__sensors__GpsConfigurationRegister,
  _swigc__p_vn__sensors__GpsSolutionEcefRegister,
  _swigc__p_vn__sensors__GpsSolutionLlaRegister,
  _swigc__p_vn__sensors__GyroCompensationRegister,
  _swigc__p_vn__sensors__ImuFilteringConfigurationRegister,
  _swigc__p_vn__sensors__ImuMeasurementsRegister,
  _swigc__p_vn__sensors__ImuRateConfigurationRegister,
  _swigc__p_vn__sensors__InsAdvancedConfigurationRegister,
  _swigc__p_vn__sensors__InsBasicConfigurationRegisterVn200,
  _swigc__p_vn__sensors__InsBasicConfigurationRegisterVn300,
  _swigc__p_vn__sensors__InsSolutionEcefRegister,
  _swigc__p_vn__sensors__InsSolutionLlaRegister,
  _swigc__p_vn__sensors__InsStateEcefRegister,
  _swigc__p_vn__sensors__InsStateLlaRegister,
  _swigc__p_vn__sensors__MagneticAccelerationAndAngularRatesRegister,
  _swigc__p_vn__sensors__MagneticAndGravityReferenceVectorsRegister,
  _swigc__p_vn__sensors__MagnetometerCalibrationControlRegister,
  _swigc__p_vn__sensors__MagnetometerCompensationRegister,
  _swigc__p_vn__sensors__QuaternionMagneticAccelerationAndAngularRatesRegister,
  _swigc__p_vn__sensors__ReferenceVectorConfigurationRegister,
  _swigc__p_vn__sensors__StartupFilterBiasEstimateRegister,
  _swigc__p_vn__sensors__SynchronizationControlRegister,
  _swigc__p_vn__sensors__SynchronizationStatusRegister,
  _swigc__p_vn__sensors__VelocityCompensationControlRegister,
  _swigc__p_vn__sensors__VelocityCompensationStatusRegister,
  _swigc__p_vn__sensors__VnSensor,
  _swigc__p_vn__sensors__VpeAccelerometerAdvancedTuningRegister,
  _swigc__p_vn__sensors__VpeAccelerometerBasicTuningRegister,
  _swigc__p_vn__sensors__VpeBasicControlRegister,
  _swigc__p_vn__sensors__VpeGyroBasicTuningRegister,
  _swigc__p_vn__sensors__VpeMagnetometerAdvancedTuningRegister,
  _swigc__p_vn__sensors__VpeMagnetometerBasicTuningRegister,
  _swigc__p_vn__sensors__YawPitchRollMagneticAccelerationAndAngularRatesRegister,
  _swigc__p_vn__sensors__YawPitchRollTrueBodyAccelerationAndAngularRatesRegister,
  _swigc__p_vn__sensors__YawPitchRollTrueInertialAccelerationAndAngularRatesRegister,
  _swigc__p_vn__xplat__IPort,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
        0,                                  /* tp_prev */
#endif
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "ERRORDETECTIONMODE_NONE",SWIG_From_int(static_cast< int >(vn::protocol::uart::ERRORDETECTIONMODE_NONE)));
  SWIG_Python_SetConstant(d, "ERRORDETECTIONMODE_CHECKSUM",SWIG_From_int(static_cast< int >(vn::protocol::uart::ERRORDETECTIONMODE_CHECKSUM)));
  SWIG_Python_SetConstant(d, "ERRORDETECTIONMODE_CRC",SWIG_From_int(static_cast< int >(vn::protocol::uart::ERRORDETECTIONMODE_CRC)));
  SWIG_Python_SetConstant(d, "VNOFF",SWIG_From_int(static_cast< int >(vn::protocol::uart::VNOFF)));
  SWIG_Python_SetConstant(d, "VNYPR",SWIG_From_int(static_cast< int >(vn::protocol::uart::VNYPR)));
  SWIG_Python_SetConstant(d, "VNQTN",SWIG_From_int(static_cast< int >(vn::protocol::uart::VNQTN)));
  SWIG_Python_SetConstant(d, "VNQMR",SWIG_From_int(static_cast< int >(vn::protocol::uart::VNQMR)));
  SWIG_Python_SetConstant(d, "VNMAG",SWIG_From_int(static_cast< int >(vn::protocol::uart::VNMAG)));
  SWIG_Python_SetConstant(d, "VNACC",SWIG_From_int(static_cast< int >(vn::protocol::uart::VNACC)));
  SWIG_Python_SetConstant(d, "VNGYR",SWIG_From_int(static_cast< int >(vn::protocol::uart::VNGYR)));
  SWIG_Python_SetConstant(d, "VNMAR",SWIG_From_int(static_cast< int >(vn::protocol::uart::VNMAR)));
  SWIG_Python_SetConstant(d, "VNYMR",SWIG_From_int(static_cast< int >(vn::protocol::uart::VNYMR)));
  SWIG_Python_SetConstant(d, "VNYBA",SWIG_From_int(static_cast< int >(vn::protocol::uart::VNYBA)));
  SWIG_Python_SetConstant(d, "VNYIA",SWIG_From_int(static_cast< int >(vn::protocol::uart::VNYIA)));
  SWIG_Python_SetConstant(d, "VNIMU",SWIG_From_int(static_cast< int >(vn::protocol::uart::VNIMU)));
  SWIG_Python_SetConstant(d, "VNGPS",SWIG_From_int(static_cast< int >(vn::protocol::uart::VNGPS)));
  SWIG_Python_SetConstant(d, "VNGPE",SWIG_From_int(static_cast< int >(vn::protocol::uart::VNGPE)));
  SWIG_Python_SetConstant(d, "VNINS",SWIG_From_int(static_cast< int >(vn::protocol::uart::VNINS)));
  SWIG_Python_SetConstant(d, "VNINE",SWIG_From_int(static_cast< int >(vn::protocol::uart::VNINE)));
  SWIG_Python_SetConstant(d, "VNISL",SWIG_From_int(static_cast< int >(vn::protocol::uart::VNISL)));
  SWIG_Python_SetConstant(d, "VNISE",SWIG_From_int(static_cast< int >(vn::protocol::uart::VNISE)));
  SWIG_Python_SetConstant(d, "VNDTV",SWIG_From_int(static_cast< int >(vn::protocol::uart::VNDTV)));
  SWIG_Python_SetConstant(d, "SYNCINMODE_COUNT",SWIG_From_int(static_cast< int >(vn::protocol::uart::SYNCINMODE_COUNT)));
  SWIG_Python_SetConstant(d, "SYNCINMODE_IMU",SWIG_From_int(static_cast< int >(vn::protocol::uart::SYNCINMODE_IMU)));
  SWIG_Python_SetConstant(d, "SYNCINMODE_ASYNC",SWIG_From_int(static_cast< int >(vn::protocol::uart::SYNCINMODE_ASYNC)));
  SWIG_Python_SetConstant(d, "SYNCINEDGE_RISING",SWIG_From_int(static_cast< int >(vn::protocol::uart::SYNCINEDGE_RISING)));
  SWIG_Python_SetConstant(d, "SYNCINEDGE_FALLING",SWIG_From_int(static_cast< int >(vn::protocol::uart::SYNCINEDGE_FALLING)));
  SWIG_Python_SetConstant(d, "SYNCOUTMODE_NONE",SWIG_From_int(static_cast< int >(vn::protocol::uart::SYNCOUTMODE_NONE)));
  SWIG_Python_SetConstant(d, "SYNCOUTMODE_ITEMSTART",SWIG_From_int(static_cast< int >(vn::protocol::uart::SYNCOUTMODE_ITEMSTART)));
  SWIG_Python_SetConstant(d, "SYNCOUTMODE_IMUREADY",SWIG_From_int(static_cast< int >(vn::protocol::uart::SYNCOUTMODE_IMUREADY)));
  SWIG_Python_SetConstant(d, "SYNCOUTMODE_INS",SWIG_From_int(static_cast< int >(vn::protocol::uart::SYNCOUTMODE_INS)));
  SWIG_Python_SetConstant(d, "SYNCOUTMODE_GPSPPS",SWIG_From_int(static_cast< int >(vn::protocol::uart::SYNCOUTMODE_GPSPPS)));
  SWIG_Python_SetConstant(d, "SYNCOUTPOLARITY_NEGATIVE",SWIG_From_int(static_cast< int >(vn::protocol::uart::SYNCOUTPOLARITY_NEGATIVE)));
  SWIG_Python_SetConstant(d, "SYNCOUTPOLARITY_POSITIVE",SWIG_From_int(static_cast< int >(vn::protocol::uart::SYNCOUTPOLARITY_POSITIVE)));
  SWIG_Python_SetConstant(d, "COUNTMODE_NONE",SWIG_From_int(static_cast< int >(vn::protocol::uart::COUNTMODE_NONE)));
  SWIG_Python_SetConstant(d, "COUNTMODE_SYNCINCOUNT",SWIG_From_int(static_cast< int >(vn::protocol::uart::COUNTMODE_SYNCINCOUNT)));
  SWIG_Python_SetConstant(d, "COUNTMODE_SYNCINTIME",SWIG_From_int(static_cast< int >(vn::protocol::uart::COUNTMODE_SYNCINTIME)));
  SWIG_Python_SetConstant(d, "COUNTMODE_SYNCOUTCOUNTER",SWIG_From_int(static_cast< int >(vn::protocol::uart::COUNTMODE_SYNCOUTCOUNTER)));
  SWIG_Python_SetConstant(d, "COUNTMODE_GPSPPS",SWIG_From_int(static_cast< int >(vn::protocol::uart::COUNTMODE_GPSPPS)));
  SWIG_Python_SetConstant(d, "STATUSMODE_OFF",SWIG_From_int(static_cast< int >(vn::protocol::uart::STATUSMODE_OFF)));
  SWIG_Python_SetConstant(d, "STATUSMODE_VPESTATUS",SWIG_From_int(static_cast< int >(vn::protocol::uart::STATUSMODE_VPESTATUS)));
  SWIG_Python_SetConstant(d, "STATUSMODE_INSSTATUS",SWIG_From_int(static_cast< int >(vn::protocol::uart::STATUSMODE_INSSTATUS)));
  SWIG_Python_SetConstant(d, "CHECKSUMMODE_OFF",SWIG_From_int(static_cast< int >(vn::protocol::uart::CHECKSUMMODE_OFF)));
  SWIG_Python_SetConstant(d, "CHECKSUMMODE_CHECKSUM",SWIG_From_int(static_cast< int >(vn::protocol::uart::CHECKSUMMODE_CHECKSUM)));
  SWIG_Python_SetConstant(d, "CHECKSUMMODE_CRC",SWIG_From_int(static_cast< int >(vn::protocol::uart::CHECKSUMMODE_CRC)));
  SWIG_Python_SetConstant(d, "ERRORMODE_IGNORE",SWIG_From_int(static_cast< int >(vn::protocol::uart::ERRORMODE_IGNORE)));
  SWIG_Python_SetConstant(d, "ERRORMODE_SEND",SWIG_From_int(static_cast< int >(vn::protocol::uart::ERRORMODE_SEND)));
  SWIG_Python_SetConstant(d, "ERRORMODE_SENDANDOFF",SWIG_From_int(static_cast< int >(vn::protocol::uart::ERRORMODE_SENDANDOFF)));
  SWIG_Python_SetConstant(d, "FILTERMODE_NOFILTERING",SWIG_From_int(static_cast< int >(vn::protocol::uart::FILTERMODE_NOFILTERING)));
  SWIG_Python_SetConstant(d, "FILTERMODE_ONLYRAW",SWIG_From_int(static_cast< int >(vn::protocol::uart::FILTERMODE_ONLYRAW)));
  SWIG_Python_SetConstant(d, "FILTERMODE_ONLYCOMPENSATED",SWIG_From_int(static_cast< int >(vn::protocol::uart::FILTERMODE_ONLYCOMPENSATED)));
  SWIG_Python_SetConstant(d, "FILTERMODE_BOTH",SWIG_From_int(static_cast< int >(vn::protocol::uart::FILTERMODE_BOTH)));
  SWIG_Python_SetConstant(d, "INTEGRATIONFRAME_BODY",SWIG_From_int(static_cast< int >(vn::protocol::uart::INTEGRATIONFRAME_BODY)));
  SWIG_Python_SetConstant(d, "INTEGRATIONFRAME_NED",SWIG_From_int(static_cast< int >(vn::protocol::uart::INTEGRATIONFRAME_NED)));
  SWIG_Python_SetConstant(d, "COMPENSATIONMODE_NONE",SWIG_From_int(static_cast< int >(vn::protocol::uart::COMPENSATIONMODE_NONE)));
  SWIG_Python_SetConstant(d, "COMPENSATIONMODE_BIAS",SWIG_From_int(static_cast< int >(vn::protocol::uart::COMPENSATIONMODE_BIAS)));
  SWIG_Python_SetConstant(d, "GPSFIX_NOFIX",SWIG_From_int(static_cast< int >(vn::protocol::uart::GPSFIX_NOFIX)));
  SWIG_Python_SetConstant(d, "GPSFIX_TIMEONLY",SWIG_From_int(static_cast< int >(vn::protocol::uart::GPSFIX_TIMEONLY)));
  SWIG_Python_SetConstant(d, "GPSFIX_2D",SWIG_From_int(static_cast< int >(vn::protocol::uart::GPSFIX_2D)));
  SWIG_Python_SetConstant(d, "GPSFIX_3D",SWIG_From_int(static_cast< int >(vn::protocol::uart::GPSFIX_3D)));
  SWIG_Python_SetConstant(d, "GPSMODE_ONBOARDGPS",SWIG_From_int(static_cast< int >(vn::protocol::uart::GPSMODE_ONBOARDGPS)));
  SWIG_Python_SetConstant(d, "GPSMODE_EXTERNALGPS",SWIG_From_int(static_cast< int >(vn::protocol::uart::GPSMODE_EXTERNALGPS)));
  SWIG_Python_SetConstant(d, "GPSMODE_EXTERNALVN200GPS",SWIG_From_int(static_cast< int >(vn::protocol::uart::GPSMODE_EXTERNALVN200GPS)));
  SWIG_Python_SetConstant(d, "PPSSOURCE_GPSPPSRISING",SWIG_From_int(static_cast< int >(vn::protocol::uart::PPSSOURCE_GPSPPSRISING)));
  SWIG_Python_SetConstant(d, "PPSSOURCE_GPSPPSFALLING",SWIG_From_int(static_cast< int >(vn::protocol::uart::PPSSOURCE_GPSPPSFALLING)));
  SWIG_Python_SetConstant(d, "PPSSOURCE_SYNCINRISING",SWIG_From_int(static_cast< int >(vn::protocol::uart::PPSSOURCE_SYNCINRISING)));
  SWIG_Python_SetConstant(d, "PPSSOURCE_SYNCINFALLING",SWIG_From_int(static_cast< int >(vn::protocol::uart::PPSSOURCE_SYNCINFALLING)));
  SWIG_Python_SetConstant(d, "VPEENABLE_DISABLE",SWIG_From_int(static_cast< int >(vn::protocol::uart::VPEENABLE_DISABLE)));
  SWIG_Python_SetConstant(d, "VPEENABLE_ENABLE",SWIG_From_int(static_cast< int >(vn::protocol::uart::VPEENABLE_ENABLE)));
  SWIG_Python_SetConstant(d, "HEADINGMODE_ABSOLUTE",SWIG_From_int(static_cast< int >(vn::protocol::uart::HEADINGMODE_ABSOLUTE)));
  SWIG_Python_SetConstant(d, "HEADINGMODE_RELATIVE",SWIG_From_int(static_cast< int >(vn::protocol::uart::HEADINGMODE_RELATIVE)));
  SWIG_Python_SetConstant(d, "HEADINGMODE_INDOOR",SWIG_From_int(static_cast< int >(vn::protocol::uart::HEADINGMODE_INDOOR)));
  SWIG_Python_SetConstant(d, "VPEMODE_OFF",SWIG_From_int(static_cast< int >(vn::protocol::uart::VPEMODE_OFF)));
  SWIG_Python_SetConstant(d, "VPEMODE_MODE1",SWIG_From_int(static_cast< int >(vn::protocol::uart::VPEMODE_MODE1)));
  SWIG_Python_SetConstant(d, "SCENARIO_AHRS",SWIG_From_int(static_cast< int >(vn::protocol::uart::SCENARIO_AHRS)));
  SWIG_Python_SetConstant(d, "SCENARIO_INSWITHPRESSURE",SWIG_From_int(static_cast< int >(vn::protocol::uart::SCENARIO_INSWITHPRESSURE)));
  SWIG_Python_SetConstant(d, "SCENARIO_INSWITHOUTPRESSURE",SWIG_From_int(static_cast< int >(vn::protocol::uart::SCENARIO_INSWITHOUTPRESSURE)));
  SWIG_Python_SetConstant(d, "SCENARIO_GPSMOVINGBASELINEDYNAMIC",SWIG_From_int(static_cast< int >(vn::protocol::uart::SCENARIO_GPSMOVINGBASELINEDYNAMIC)));
  SWIG_Python_SetConstant(d, "SCENARIO_GPSMOVINGBASELINESTATIC",SWIG_From_int(static_cast< int >(vn::protocol::uart::SCENARIO_GPSMOVINGBASELINESTATIC)));
  SWIG_Python_SetConstant(d, "HSIMODE_OFF",SWIG_From_int(static_cast< int >(vn::protocol::uart::HSIMODE_OFF)));
  SWIG_Python_SetConstant(d, "HSIMODE_RUN",SWIG_From_int(static_cast< int >(vn::protocol::uart::HSIMODE_RUN)));
  SWIG_Python_SetConstant(d, "HSIMODE_RESET",SWIG_From_int(static_cast< int >(vn::protocol::uart::HSIMODE_RESET)));
  SWIG_Python_SetConstant(d, "HSIOUTPUT_NOONBOARD",SWIG_From_int(static_cast< int >(vn::protocol::uart::HSIOUTPUT_NOONBOARD)));
  SWIG_Python_SetConstant(d, "HSIOUTPUT_USEONBOARD",SWIG_From_int(static_cast< int >(vn::protocol::uart::HSIOUTPUT_USEONBOARD)));
  SWIG_Python_SetConstant(d, "VELOCITYCOMPENSATIONMODE_DISABLED",SWIG_From_int(static_cast< int >(vn::protocol::uart::VELOCITYCOMPENSATIONMODE_DISABLED)));
  SWIG_Python_SetConstant(d, "VELOCITYCOMPENSATIONMODE_BODYMEASUREMENT",SWIG_From_int(static_cast< int >(vn::protocol::uart::VELOCITYCOMPENSATIONMODE_BODYMEASUREMENT)));
  SWIG_Python_SetConstant(d, "MAGNETICMODE_2D",SWIG_From_int(static_cast< int >(vn::protocol::uart::MAGNETICMODE_2D)));
  SWIG_Python_SetConstant(d, "MAGNETICMODE_3D",SWIG_From_int(static_cast< int >(vn::protocol::uart::MAGNETICMODE_3D)));
  SWIG_Python_SetConstant(d, "EXTERNALSENSORMODE_INTERNAL",SWIG_From_int(static_cast< int >(vn::protocol::uart::EXTERNALSENSORMODE_INTERNAL)));
  SWIG_Python_SetConstant(d, "EXTERNALSENSORMODE_EXTERNAL200HZ",SWIG_From_int(static_cast< int >(vn::protocol::uart::EXTERNALSENSORMODE_EXTERNAL200HZ)));
  SWIG_Python_SetConstant(d, "EXTERNALSENSORMODE_EXTERNALONUPDATE",SWIG_From_int(static_cast< int >(vn::protocol::uart::EXTERNALSENSORMODE_EXTERNALONUPDATE)));
  SWIG_Python_SetConstant(d, "FOAMINIT_NOFOAMINIT",SWIG_From_int(static_cast< int >(vn::protocol::uart::FOAMINIT_NOFOAMINIT)));
  SWIG_Python_SetConstant(d, "FOAMINIT_FOAMINITPITCHROLL",SWIG_From_int(static_cast< int >(vn::protocol::uart::FOAMINIT_FOAMINITPITCHROLL)));
  SWIG_Python_SetConstant(d, "FOAMINIT_FOAMINITHEADINGPITCHROLL",SWIG_From_int(static_cast< int >(vn::protocol::uart::FOAMINIT_FOAMINITHEADINGPITCHROLL)));
  SWIG_Python_SetConstant(d, "FOAMINIT_FOAMINITPITCHROLLCOVARIANCE",SWIG_From_int(static_cast< int >(vn::protocol::uart::FOAMINIT_FOAMINITPITCHROLLCOVARIANCE)));
  SWIG_Python_SetConstant(d, "FOAMINIT_FOAMINITHEADINGPITCHROLLCOVARIANCE",SWIG_From_int(static_cast< int >(vn::protocol::uart::FOAMINIT_FOAMINITHEADINGPITCHROLLCOVARIANCE)));
  SWIG_Python_SetConstant(d, "SENSSAT_MAGX",SWIG_From_int(static_cast< int >(vn::protocol::uart::SENSSAT_MAGX)));
  SWIG_Python_SetConstant(d, "SENSSAT_MAGY",SWIG_From_int(static_cast< int >(vn::protocol::uart::SENSSAT_MAGY)));
  SWIG_Python_SetConstant(d, "SENSSAT_MAGZ",SWIG_From_int(static_cast< int >(vn::protocol::uart::SENSSAT_MAGZ)));
  SWIG_Python_SetConstant(d, "SENSSAT_ACCX",SWIG_From_int(static_cast< int >(vn::protocol::uart::SENSSAT_ACCX)));
  SWIG_Python_SetConstant(d, "SENSSAT_ACCY",SWIG_From_int(static_cast< int >(vn::protocol::uart::SENSSAT_ACCY)));
  SWIG_Python_SetConstant(d, "SENSSAT_ACCZ",SWIG_From_int(static_cast< int >(vn::protocol::uart::SENSSAT_ACCZ)));
  SWIG_Python_SetConstant(d, "SENSSAT_GYROX",SWIG_From_int(static_cast< int >(vn::protocol::uart::SENSSAT_GYROX)));
  SWIG_Python_SetConstant(d, "SENSSAT_GYROY",SWIG_From_int(static_cast< int >(vn::protocol::uart::SENSSAT_GYROY)));
  SWIG_Python_SetConstant(d, "SENSSAT_GYROZ",SWIG_From_int(static_cast< int >(vn::protocol::uart::SENSSAT_GYROZ)));
  SWIG_Python_SetConstant(d, "SENSSAT_PRES",SWIG_From_int(static_cast< int >(vn::protocol::uart::SENSSAT_PRES)));
  SWIG_Python_SetConstant(d, "INSSTATUS_NOT_TRACKING",SWIG_From_int(static_cast< int >(vn::protocol::uart::INSSTATUS_NOT_TRACKING)));
  SWIG_Python_SetConstant(d, "INSSTATUS_SUFFICIENT_DYNAMIC_MOTION",SWIG_From_int(static_cast< int >(vn::protocol::uart::INSSTATUS_SUFFICIENT_DYNAMIC_MOTION)));
  SWIG_Python_SetConstant(d, "INSSTATUS_TRACKING",SWIG_From_int(static_cast< int >(vn::protocol::uart::INSSTATUS_TRACKING)));
  SWIG_Python_SetConstant(d, "INSSTATUS_GPS_FIX",SWIG_From_int(static_cast< int >(vn::protocol::uart::INSSTATUS_GPS_FIX)));
  SWIG_Python_SetConstant(d, "INSSTATUS_TIME_ERROR",SWIG_From_int(static_cast< int >(vn::protocol::uart::INSSTATUS_TIME_ERROR)));
  SWIG_Python_SetConstant(d, "INSSTATUS_IMU_ERROR",SWIG_From_int(static_cast< int >(vn::protocol::uart::INSSTATUS_IMU_ERROR)));
  SWIG_Python_SetConstant(d, "INSSTATUS_MAG_PRES_ERROR",SWIG_From_int(static_cast< int >(vn::protocol::uart::INSSTATUS_MAG_PRES_ERROR)));
  SWIG_Python_SetConstant(d, "INSSTATUS_GPS_ERROR",SWIG_From_int(static_cast< int >(vn::protocol::uart::INSSTATUS_GPS_ERROR)));
  PyDict_SetItemString(md,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"Packet_BinaryGroupLengths",Swig_var_Packet_BinaryGroupLengths_get, Swig_var_Packet_BinaryGroupLengths_set);
  SWIG_Python_SetConstant(d, "Packet_TYPE_UNKNOWN",SWIG_From_int(static_cast< int >(vn::protocol::uart::Packet::TYPE_UNKNOWN)));
  SWIG_Python_SetConstant(d, "Packet_TYPE_BINARY",SWIG_From_int(static_cast< int >(vn::protocol::uart::Packet::TYPE_BINARY)));
  SWIG_Python_SetConstant(d, "Packet_TYPE_ASCII",SWIG_From_int(static_cast< int >(vn::protocol::uart::Packet::TYPE_ASCII)));
  SWIG_Python_SetConstant(d, "VnSensor_VnSensor_Family_Unknown",SWIG_From_int(static_cast< int >(vn::sensors::VnSensor::VnSensor_Family_Unknown)));
  SWIG_Python_SetConstant(d, "VnSensor_VnSensor_Family_Vn100",SWIG_From_int(static_cast< int >(vn::sensors::VnSensor::VnSensor_Family_Vn100)));
  SWIG_Python_SetConstant(d, "VnSensor_VnSensor_Family_Vn200",SWIG_From_int(static_cast< int >(vn::sensors::VnSensor::VnSensor_Family_Vn200)));
  SWIG_Python_SetConstant(d, "VnSensor_VnSensor_Family_Vn300",SWIG_From_int(static_cast< int >(vn::sensors::VnSensor::VnSensor_Family_Vn300)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

