# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_libvncxx')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_libvncxx')
    _libvncxx = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libvncxx', [dirname(__file__)])
        except ImportError:
            import _libvncxx
            return _libvncxx
        if fp is not None:
            try:
                _mod = imp.load_module('_libvncxx', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libvncxx = swig_import_helper()
    del swig_import_helper
else:
    import _libvncxx
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class vec3f(_object):
    """Proxy of C++ vn::math::vec<(3,float)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vec3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vec3f, name)

    def __init__(self, *args):
        """
        __init__(vn::math::vec<(3,float)> self) -> vec3f
        __init__(vn::math::vec<(3,float)> self, float val) -> vec3f
        __init__(vn::math::vec<(3,float)> self, float const & x_val, float const & y_val, float const & z_val) -> vec3f
        """
        this = _libvncxx.new_vec3f(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def zero():
        """zero() -> vec3f"""
        return _libvncxx.vec3f_zero()

    zero = staticmethod(zero)

    def one():
        """one() -> vec3f"""
        return _libvncxx.vec3f_one()

    one = staticmethod(one)

    def unitX():
        """unitX() -> vec3f"""
        return _libvncxx.vec3f_unitX()

    unitX = staticmethod(unitX)

    def unitY():
        """unitY() -> vec3f"""
        return _libvncxx.vec3f_unitY()

    unitY = staticmethod(unitY)

    def unitZ():
        """unitZ() -> vec3f"""
        return _libvncxx.vec3f_unitZ()

    unitZ = staticmethod(unitZ)

    def __neg__(self):
        """__neg__(vec3f self) -> vec3f"""
        return _libvncxx.vec3f___neg__(self)


    def __iadd__(self, rhs):
        """__iadd__(vec3f self, vec3f rhs) -> vec3f"""
        return _libvncxx.vec3f___iadd__(self, rhs)


    def __isub__(self, rhs):
        """__isub__(vec3f self, vec3f rhs) -> vec3f"""
        return _libvncxx.vec3f___isub__(self, rhs)


    def __imul__(self, rhs):
        """__imul__(vec3f self, float const & rhs) -> vec3f"""
        return _libvncxx.vec3f___imul__(self, rhs)


    def __idiv__(self, rhs):
        """__idiv__(vec3f self, float const & rhs) -> vec3f"""
        return _libvncxx.vec3f___idiv__(self, rhs)


    def dim(self):
        """dim(vec3f self) -> size_t"""
        return _libvncxx.vec3f_dim(self)


    def neg(self):
        """neg(vec3f self) -> vec3f"""
        return _libvncxx.vec3f_neg(self)


    def mag(self):
        """mag(vec3f self) -> float"""
        return _libvncxx.vec3f_mag(self)


    def add(self, toAdd):
        """add(vec3f self, vec3f toAdd) -> vec3f"""
        return _libvncxx.vec3f_add(self, toAdd)


    def sub(self, to_sub):
        """sub(vec3f self, vec3f to_sub) -> vec3f"""
        return _libvncxx.vec3f_sub(self, to_sub)


    def mult(self, scalar):
        """mult(vec3f self, double const & scalar) -> vec3f"""
        return _libvncxx.vec3f_mult(self, scalar)


    def div(self, scalar):
        """div(vec3f self, double const & scalar) -> vec3f"""
        return _libvncxx.vec3f_div(self, scalar)


    def norm(self):
        """norm(vec3f self) -> vec3f"""
        return _libvncxx.vec3f_norm(self)


    def dot(self, rhs):
        """dot(vec3f self, vec3f rhs) -> float"""
        return _libvncxx.vec3f_dot(self, rhs)


    def cross(self, rhs):
        """cross(vec3f self, vec3f rhs) -> vec3f"""
        return _libvncxx.vec3f_cross(self, rhs)


    def __getX(self):
        """__getX(vec3f self) -> float"""
        return _libvncxx.vec3f___getX(self)


    def __setX(self, v):
        """__setX(vec3f self, float v)"""
        return _libvncxx.vec3f___setX(self, v)


    def __getY(self):
        """__getY(vec3f self) -> float"""
        return _libvncxx.vec3f___getY(self)


    def __setY(self, v):
        """__setY(vec3f self, float v)"""
        return _libvncxx.vec3f___setY(self, v)


    def __getZ(self):
        """__getZ(vec3f self) -> float"""
        return _libvncxx.vec3f___getZ(self)


    def __setZ(self, v):
        """__setZ(vec3f self, float v)"""
        return _libvncxx.vec3f___setZ(self, v)


    x = property(__getX, __setX)
    y = property(__getY, __setY)
    z = property(__getZ, __setZ)

    def __iter__(self):
    	for v in [ self.x, self.y, self.z ]:
    		yield v


    def __repr__(self):
        """__repr__(vec3f self) -> char *"""
        return _libvncxx.vec3f___repr__(self)


    def __str__(self):
        """__str__(vec3f self) -> char *"""
        return _libvncxx.vec3f___str__(self)

    __swig_destroy__ = _libvncxx.delete_vec3f
    __del__ = lambda self: None
vec3f_swigregister = _libvncxx.vec3f_swigregister
vec3f_swigregister(vec3f)

def vec3f_zero():
    """vec3f_zero() -> vec3f"""
    return _libvncxx.vec3f_zero()

def vec3f_one():
    """vec3f_one() -> vec3f"""
    return _libvncxx.vec3f_one()

def vec3f_unitX():
    """vec3f_unitX() -> vec3f"""
    return _libvncxx.vec3f_unitX()

def vec3f_unitY():
    """vec3f_unitY() -> vec3f"""
    return _libvncxx.vec3f_unitY()

def vec3f_unitZ():
    """vec3f_unitZ() -> vec3f"""
    return _libvncxx.vec3f_unitZ()

class vec3d(_object):
    """Proxy of C++ vn::math::vec<(3,double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vec3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vec3d, name)

    def __init__(self, *args):
        """
        __init__(vn::math::vec<(3,double)> self) -> vec3d
        __init__(vn::math::vec<(3,double)> self, double val) -> vec3d
        __init__(vn::math::vec<(3,double)> self, double const & x_val, double const & y_val, double const & z_val) -> vec3d
        """
        this = _libvncxx.new_vec3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def zero():
        """zero() -> vec3d"""
        return _libvncxx.vec3d_zero()

    zero = staticmethod(zero)

    def one():
        """one() -> vec3d"""
        return _libvncxx.vec3d_one()

    one = staticmethod(one)

    def unitX():
        """unitX() -> vec3d"""
        return _libvncxx.vec3d_unitX()

    unitX = staticmethod(unitX)

    def unitY():
        """unitY() -> vec3d"""
        return _libvncxx.vec3d_unitY()

    unitY = staticmethod(unitY)

    def unitZ():
        """unitZ() -> vec3d"""
        return _libvncxx.vec3d_unitZ()

    unitZ = staticmethod(unitZ)

    def __neg__(self):
        """__neg__(vec3d self) -> vec3d"""
        return _libvncxx.vec3d___neg__(self)


    def __iadd__(self, rhs):
        """__iadd__(vec3d self, vec3d rhs) -> vec3d"""
        return _libvncxx.vec3d___iadd__(self, rhs)


    def __isub__(self, rhs):
        """__isub__(vec3d self, vec3d rhs) -> vec3d"""
        return _libvncxx.vec3d___isub__(self, rhs)


    def __imul__(self, rhs):
        """__imul__(vec3d self, double const & rhs) -> vec3d"""
        return _libvncxx.vec3d___imul__(self, rhs)


    def __idiv__(self, rhs):
        """__idiv__(vec3d self, double const & rhs) -> vec3d"""
        return _libvncxx.vec3d___idiv__(self, rhs)


    def dim(self):
        """dim(vec3d self) -> size_t"""
        return _libvncxx.vec3d_dim(self)


    def neg(self):
        """neg(vec3d self) -> vec3d"""
        return _libvncxx.vec3d_neg(self)


    def mag(self):
        """mag(vec3d self) -> double"""
        return _libvncxx.vec3d_mag(self)


    def add(self, toAdd):
        """add(vec3d self, vec3d toAdd) -> vec3d"""
        return _libvncxx.vec3d_add(self, toAdd)


    def sub(self, to_sub):
        """sub(vec3d self, vec3d to_sub) -> vec3d"""
        return _libvncxx.vec3d_sub(self, to_sub)


    def mult(self, scalar):
        """mult(vec3d self, double const & scalar) -> vec3d"""
        return _libvncxx.vec3d_mult(self, scalar)


    def div(self, scalar):
        """div(vec3d self, double const & scalar) -> vec3d"""
        return _libvncxx.vec3d_div(self, scalar)


    def norm(self):
        """norm(vec3d self) -> vec3d"""
        return _libvncxx.vec3d_norm(self)


    def dot(self, rhs):
        """dot(vec3d self, vec3d rhs) -> double"""
        return _libvncxx.vec3d_dot(self, rhs)


    def cross(self, rhs):
        """cross(vec3d self, vec3d rhs) -> vec3d"""
        return _libvncxx.vec3d_cross(self, rhs)


    def __getX(self):
        """__getX(vec3d self) -> float"""
        return _libvncxx.vec3d___getX(self)


    def __setX(self, v):
        """__setX(vec3d self, double v)"""
        return _libvncxx.vec3d___setX(self, v)


    def __getY(self):
        """__getY(vec3d self) -> float"""
        return _libvncxx.vec3d___getY(self)


    def __setY(self, v):
        """__setY(vec3d self, double v)"""
        return _libvncxx.vec3d___setY(self, v)


    def __getZ(self):
        """__getZ(vec3d self) -> float"""
        return _libvncxx.vec3d___getZ(self)


    def __setZ(self, v):
        """__setZ(vec3d self, double v)"""
        return _libvncxx.vec3d___setZ(self, v)


    x = property(__getX, __setX)
    y = property(__getY, __setY)
    z = property(__getZ, __setZ)

    def __iter__(self):
    	for v in [ self.x, self.y, self.z ]:
    		yield v


    def __repr__(self):
        """__repr__(vec3d self) -> char *"""
        return _libvncxx.vec3d___repr__(self)


    def __str__(self):
        """__str__(vec3d self) -> char *"""
        return _libvncxx.vec3d___str__(self)

    __swig_destroy__ = _libvncxx.delete_vec3d
    __del__ = lambda self: None
vec3d_swigregister = _libvncxx.vec3d_swigregister
vec3d_swigregister(vec3d)

def vec3d_zero():
    """vec3d_zero() -> vec3d"""
    return _libvncxx.vec3d_zero()

def vec3d_one():
    """vec3d_one() -> vec3d"""
    return _libvncxx.vec3d_one()

def vec3d_unitX():
    """vec3d_unitX() -> vec3d"""
    return _libvncxx.vec3d_unitX()

def vec3d_unitY():
    """vec3d_unitY() -> vec3d"""
    return _libvncxx.vec3d_unitY()

def vec3d_unitZ():
    """vec3d_unitZ() -> vec3d"""
    return _libvncxx.vec3d_unitZ()

class vec4f(_object):
    """Proxy of C++ vn::math::vec<(4,float)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vec4f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vec4f, name)

    def __init__(self, *args):
        """
        __init__(vn::math::vec<(4,float)> self) -> vec4f
        __init__(vn::math::vec<(4,float)> self, float val) -> vec4f
        __init__(vn::math::vec<(4,float)> self, float x_val, float y_val, float z_val, float w_val) -> vec4f
        """
        this = _libvncxx.new_vec4f(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def zero():
        """zero() -> vec4f"""
        return _libvncxx.vec4f_zero()

    zero = staticmethod(zero)

    def one():
        """one() -> vec4f"""
        return _libvncxx.vec4f_one()

    one = staticmethod(one)

    def unitX():
        """unitX() -> vec4f"""
        return _libvncxx.vec4f_unitX()

    unitX = staticmethod(unitX)

    def unitY():
        """unitY() -> vec4f"""
        return _libvncxx.vec4f_unitY()

    unitY = staticmethod(unitY)

    def unitZ():
        """unitZ() -> vec4f"""
        return _libvncxx.vec4f_unitZ()

    unitZ = staticmethod(unitZ)

    def unitW():
        """unitW() -> vec4f"""
        return _libvncxx.vec4f_unitW()

    unitW = staticmethod(unitW)

    def __neg__(self):
        """__neg__(vec4f self) -> vec4f"""
        return _libvncxx.vec4f___neg__(self)


    def __iadd__(self, rhs):
        """__iadd__(vec4f self, vec4f rhs) -> vec4f"""
        return _libvncxx.vec4f___iadd__(self, rhs)


    def __isub__(self, rhs):
        """__isub__(vec4f self, vec4f rhs) -> vec4f"""
        return _libvncxx.vec4f___isub__(self, rhs)


    def __imul__(self, rhs):
        """__imul__(vec4f self, float const & rhs) -> vec4f"""
        return _libvncxx.vec4f___imul__(self, rhs)


    def __idiv__(self, rhs):
        """__idiv__(vec4f self, float const & rhs) -> vec4f"""
        return _libvncxx.vec4f___idiv__(self, rhs)


    def dim(self):
        """dim(vec4f self) -> size_t"""
        return _libvncxx.vec4f_dim(self)


    def neg(self):
        """neg(vec4f self) -> vec4f"""
        return _libvncxx.vec4f_neg(self)


    def mag(self):
        """mag(vec4f self) -> float"""
        return _libvncxx.vec4f_mag(self)


    def add(self, toAdd):
        """add(vec4f self, vec4f toAdd) -> vec4f"""
        return _libvncxx.vec4f_add(self, toAdd)


    def sub(self, to_sub):
        """sub(vec4f self, vec4f to_sub) -> vec4f"""
        return _libvncxx.vec4f_sub(self, to_sub)


    def mult(self, scalar):
        """mult(vec4f self, double const & scalar) -> vec4f"""
        return _libvncxx.vec4f_mult(self, scalar)


    def div(self, scalar):
        """div(vec4f self, double const & scalar) -> vec4f"""
        return _libvncxx.vec4f_div(self, scalar)


    def norm(self):
        """norm(vec4f self) -> vec4f"""
        return _libvncxx.vec4f_norm(self)


    def dot(self, rhs):
        """dot(vec4f self, vec4f rhs) -> float"""
        return _libvncxx.vec4f_dot(self, rhs)


    def __getX(self):
        """__getX(vec4f self) -> float"""
        return _libvncxx.vec4f___getX(self)


    def __setX(self, v):
        """__setX(vec4f self, float v)"""
        return _libvncxx.vec4f___setX(self, v)


    def __getY(self):
        """__getY(vec4f self) -> float"""
        return _libvncxx.vec4f___getY(self)


    def __setY(self, v):
        """__setY(vec4f self, float v)"""
        return _libvncxx.vec4f___setY(self, v)


    def __getZ(self):
        """__getZ(vec4f self) -> float"""
        return _libvncxx.vec4f___getZ(self)


    def __setZ(self, v):
        """__setZ(vec4f self, float v)"""
        return _libvncxx.vec4f___setZ(self, v)


    def __getW(self):
        """__getW(vec4f self) -> float"""
        return _libvncxx.vec4f___getW(self)


    def __setW(self, v):
        """__setW(vec4f self, float v)"""
        return _libvncxx.vec4f___setW(self, v)


    x = property(__getX, __setX)
    y = property(__getY, __setY)
    z = property(__getZ, __setZ)
    w = property(__getW, __setW)

    def __iter__(self):
    	for v in [ self.x, self.y, self.z, self.w ]:
    		yield v

    #def __repr__(self):
    #	return "<vnpy.vec4f>"


    def __repr__(self):
        """__repr__(vec4f self) -> char *"""
        return _libvncxx.vec4f___repr__(self)


    def __str__(self):
        """__str__(vec4f self) -> char *"""
        return _libvncxx.vec4f___str__(self)

    __swig_destroy__ = _libvncxx.delete_vec4f
    __del__ = lambda self: None
vec4f_swigregister = _libvncxx.vec4f_swigregister
vec4f_swigregister(vec4f)

def vec4f_zero():
    """vec4f_zero() -> vec4f"""
    return _libvncxx.vec4f_zero()

def vec4f_one():
    """vec4f_one() -> vec4f"""
    return _libvncxx.vec4f_one()

def vec4f_unitX():
    """vec4f_unitX() -> vec4f"""
    return _libvncxx.vec4f_unitX()

def vec4f_unitY():
    """vec4f_unitY() -> vec4f"""
    return _libvncxx.vec4f_unitY()

def vec4f_unitZ():
    """vec4f_unitZ() -> vec4f"""
    return _libvncxx.vec4f_unitZ()

def vec4f_unitW():
    """vec4f_unitW() -> vec4f"""
    return _libvncxx.vec4f_unitW()

class mat3f(_object):
    """Proxy of C++ vn::math::mat<(3,3,float)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mat3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mat3f, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vn::math::mat<(3,3,float)> self) -> mat3f
        __init__(vn::math::mat<(3,3,float)> self, float val) -> mat3f
        __init__(vn::math::mat<(3,3,float)> self, float e00v, float e01v, float e02v, float e10v, float e11v, float e12v, float e20v, float e21v, float e22v) -> mat3f
        __init__(vn::math::mat<(3,3,float)> self, vec3f col0, vec3f col1, vec3f col2) -> mat3f
        """
        this = _libvncxx.new_mat3f(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def zero():
        """zero() -> mat3f"""
        return _libvncxx.mat3f_zero()

    zero = staticmethod(zero)

    def one():
        """one() -> mat3f"""
        return _libvncxx.mat3f_one()

    one = staticmethod(one)

    def identity():
        """identity() -> mat3f"""
        return _libvncxx.mat3f_identity()

    identity = staticmethod(identity)

    def __call__(self, *args):
        """
        __call__(mat3f self, size_t row, size_t col) -> float
        __call__(mat3f self, size_t row, size_t col) -> float const &
        """
        return _libvncxx.mat3f___call__(self, *args)


    def __neg__(self):
        """__neg__(mat3f self) -> mat3f"""
        return _libvncxx.mat3f___neg__(self)


    def dimRow(self):
        """dimRow(mat3f self) -> size_t"""
        return _libvncxx.mat3f_dimRow(self)


    def dimCol(self):
        """dimCol(mat3f self) -> size_t"""
        return _libvncxx.mat3f_dimCol(self)


    def dimCols(self):
        """dimCols(mat3f self) -> size_t"""
        return _libvncxx.mat3f_dimCols(self)


    def neg(self):
        """neg(mat3f self) -> mat3f"""
        return _libvncxx.mat3f_neg(self)


    def mult(self, scalar):
        """mult(mat3f self, double const & scalar) -> mat3f"""
        return _libvncxx.mat3f_mult(self, scalar)


    def div(self, scalar):
        """div(mat3f self, double const & scalar) -> mat3f"""
        return _libvncxx.mat3f_div(self, scalar)


    def add(self, toAdd):
        """add(mat3f self, mat3f toAdd) -> mat3f"""
        return _libvncxx.mat3f_add(self, toAdd)


    def sub(self, toSub):
        """sub(mat3f self, mat3f toSub) -> mat3f"""
        return _libvncxx.mat3f_sub(self, toSub)


    def transpose(self):
        """transpose(mat3f self) -> mat3f"""
        return _libvncxx.mat3f_transpose(self)


    def __getE00(self):
        """__getE00(mat3f self) -> float"""
        return _libvncxx.mat3f___getE00(self)


    def __setE00(self, v):
        """__setE00(mat3f self, float v)"""
        return _libvncxx.mat3f___setE00(self, v)


    def __getE01(self):
        """__getE01(mat3f self) -> float"""
        return _libvncxx.mat3f___getE01(self)


    def __setE01(self, v):
        """__setE01(mat3f self, float v)"""
        return _libvncxx.mat3f___setE01(self, v)


    def __getE02(self):
        """__getE02(mat3f self) -> float"""
        return _libvncxx.mat3f___getE02(self)


    def __setE02(self, v):
        """__setE02(mat3f self, float v)"""
        return _libvncxx.mat3f___setE02(self, v)


    def __getE10(self):
        """__getE10(mat3f self) -> float"""
        return _libvncxx.mat3f___getE10(self)


    def __setE10(self, v):
        """__setE10(mat3f self, float v)"""
        return _libvncxx.mat3f___setE10(self, v)


    def __getE11(self):
        """__getE11(mat3f self) -> float"""
        return _libvncxx.mat3f___getE11(self)


    def __setE11(self, v):
        """__setE11(mat3f self, float v)"""
        return _libvncxx.mat3f___setE11(self, v)


    def __getE12(self):
        """__getE12(mat3f self) -> float"""
        return _libvncxx.mat3f___getE12(self)


    def __setE12(self, v):
        """__setE12(mat3f self, float v)"""
        return _libvncxx.mat3f___setE12(self, v)


    def __getE20(self):
        """__getE20(mat3f self) -> float"""
        return _libvncxx.mat3f___getE20(self)


    def __setE20(self, v):
        """__setE20(mat3f self, float v)"""
        return _libvncxx.mat3f___setE20(self, v)


    def __getE21(self):
        """__getE21(mat3f self) -> float"""
        return _libvncxx.mat3f___getE21(self)


    def __setE21(self, v):
        """__setE21(mat3f self, float v)"""
        return _libvncxx.mat3f___setE21(self, v)


    def __getE22(self):
        """__getE22(mat3f self) -> float"""
        return _libvncxx.mat3f___getE22(self)


    def __setE22(self, v):
        """__setE22(mat3f self, float v)"""
        return _libvncxx.mat3f___setE22(self, v)


    e00 = property(__getE00, __setE00)
    e01 = property(__getE01, __setE01)
    e02 = property(__getE02, __setE02)
    e10 = property(__getE10, __setE10)
    e11 = property(__getE11, __setE11)
    e12 = property(__getE12, __setE12)
    e20 = property(__getE20, __setE20)
    e21 = property(__getE21, __setE21)
    e22 = property(__getE22, __setE22)

    # TODO: Not sure how to return considering row- vs. column-ordering.
    #def __iter__(self):
    #	for v in [ self.e00, self.e01, self.e02, self.e10, self.e11, self.e12, self.e20, self.e21, self.e22 ]:
    #		yield v

    #def __repr__(self):
    #	return "<vnpy.mat3f>"

    __swig_destroy__ = _libvncxx.delete_mat3f
    __del__ = lambda self: None
mat3f_swigregister = _libvncxx.mat3f_swigregister
mat3f_swigregister(mat3f)

def mat3f_zero():
    """mat3f_zero() -> mat3f"""
    return _libvncxx.mat3f_zero()

def mat3f_one():
    """mat3f_one() -> mat3f"""
    return _libvncxx.mat3f_one()

def mat3f_identity():
    """mat3f_identity() -> mat3f"""
    return _libvncxx.mat3f_identity()

class Attitude(_object):
    """Proxy of C++ vn::math::AttitudeF class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Attitude, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Attitude, name)
    __repr__ = _swig_repr

    def no_rotation():
        """no_rotation() -> Attitude"""
        return _libvncxx.Attitude_no_rotation()

    no_rotation = staticmethod(no_rotation)

    def from_quat(quat):
        """from_quat(vec4f quat) -> Attitude"""
        return _libvncxx.Attitude_from_quat(quat)

    from_quat = staticmethod(from_quat)

    def from_ypr_degs(yprInDegs):
        """from_ypr_degs(vec3f yprInDegs) -> Attitude"""
        return _libvncxx.Attitude_from_ypr_degs(yprInDegs)

    from_ypr_degs = staticmethod(from_ypr_degs)

    def from_ypr_rads(yprInRads):
        """from_ypr_rads(vec3f yprInRads) -> Attitude"""
        return _libvncxx.Attitude_from_ypr_rads(yprInRads)

    from_ypr_rads = staticmethod(from_ypr_rads)

    def from_dcm(dcm):
        """from_dcm(mat3f dcm) -> Attitude"""
        return _libvncxx.Attitude_from_dcm(dcm)

    from_dcm = staticmethod(from_dcm)

    def __init__(self):
        """__init__(vn::math::AttitudeF self) -> Attitude"""
        this = _libvncxx.new_Attitude()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __yprInDegs(self):
        """__yprInDegs(Attitude self) -> vec3f"""
        return _libvncxx.Attitude___yprInDegs(self)


    def __yprInRads(self):
        """__yprInRads(Attitude self) -> vec3f"""
        return _libvncxx.Attitude___yprInRads(self)


    def __quat(self):
        """__quat(Attitude self) -> vec4f"""
        return _libvncxx.Attitude___quat(self)


    def __dcm(self):
        """__dcm(Attitude self) -> mat3f"""
        return _libvncxx.Attitude___dcm(self)


    ypr_degs = property(__yprInDegs)
    ypr_rads = property(__yprInRads)
    quat = property(__quat)
    dcm = property(__dcm)

    def __repr__(self):
    	return "<vnpy.Attitude>"

    __swig_destroy__ = _libvncxx.delete_Attitude
    __del__ = lambda self: None
Attitude_swigregister = _libvncxx.Attitude_swigregister
Attitude_swigregister(Attitude)

def Attitude_no_rotation():
    """Attitude_no_rotation() -> Attitude"""
    return _libvncxx.Attitude_no_rotation()

def Attitude_from_quat(quat):
    """Attitude_from_quat(vec4f quat) -> Attitude"""
    return _libvncxx.Attitude_from_quat(quat)

def Attitude_from_ypr_degs(yprInDegs):
    """Attitude_from_ypr_degs(vec3f yprInDegs) -> Attitude"""
    return _libvncxx.Attitude_from_ypr_degs(yprInDegs)

def Attitude_from_ypr_rads(yprInRads):
    """Attitude_from_ypr_rads(vec3f yprInRads) -> Attitude"""
    return _libvncxx.Attitude_from_ypr_rads(yprInRads)

def Attitude_from_dcm(dcm):
    """Attitude_from_dcm(mat3f dcm) -> Attitude"""
    return _libvncxx.Attitude_from_dcm(dcm)

class Position(_object):
    """Proxy of C++ vn::math::PositionD class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Position, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Position, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(vn::math::PositionD self) -> Position"""
        this = _libvncxx.new_Position()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def from_lla(lla):
        """from_lla(vec3d lla) -> Position"""
        return _libvncxx.Position_from_lla(lla)

    from_lla = staticmethod(from_lla)

    def from_ecef(ecef):
        """from_ecef(vec3d ecef) -> Position"""
        return _libvncxx.Position_from_ecef(ecef)

    from_ecef = staticmethod(from_ecef)

    def __repr__(self):
    	return "<vnpy.Position>"

    __swig_destroy__ = _libvncxx.delete_Position
    __del__ = lambda self: None
Position_swigregister = _libvncxx.Position_swigregister
Position_swigregister(Position)

def Position_from_lla(lla):
    """Position_from_lla(vec3d lla) -> Position"""
    return _libvncxx.Position_from_lla(lla)

def Position_from_ecef(ecef):
    """Position_from_ecef(vec3d ecef) -> Position"""
    return _libvncxx.Position_from_ecef(ecef)


def __rad2deg_f(angleInRads):
    """__rad2deg_f(float angleInRads) -> float"""
    return _libvncxx.__rad2deg_f(angleInRads)

def __rad2deg_d(angleInRads):
    """__rad2deg_d(double angleInRads) -> double"""
    return _libvncxx.__rad2deg_d(angleInRads)

def __deg2rad_f(angleInDegs):
    """__deg2rad_f(float angleInDegs) -> float"""
    return _libvncxx.__deg2rad_f(angleInDegs)

def __deg2rad_d(angleInDegs):
    """__deg2rad_d(double angleInDegs) -> double"""
    return _libvncxx.__deg2rad_d(angleInDegs)

def celsius2fahren(*args):
    """
    celsius2fahren(float tempInCelsius) -> float
    celsius2fahren(double tempInCelsius) -> double
    """
    return _libvncxx.celsius2fahren(*args)

def fahren2celsius(*args):
    """
    fahren2celsius(float tempInFahren) -> float
    fahren2celsius(double tempInFahren) -> double
    """
    return _libvncxx.fahren2celsius(*args)

def celsius2kelvin(*args):
    """
    celsius2kelvin(float tempInCelsius) -> float
    celsius2kelvin(double tempInCelsius) -> double
    """
    return _libvncxx.celsius2kelvin(*args)

def kelvin2celsius(*args):
    """
    kelvin2celsius(float tempInKelvin) -> float
    kelvin2celsius(double tempInKelvin) -> double
    """
    return _libvncxx.kelvin2celsius(*args)

def fahren2kelvin(*args):
    """
    fahren2kelvin(float tempInFahren) -> float
    fahren2kelvin(double tempInFahren) -> double
    """
    return _libvncxx.fahren2kelvin(*args)

def kelvin2fahren(*args):
    """
    kelvin2fahren(float tempInKelvin) -> float
    kelvin2fahren(double tempInKelvin) -> double
    """
    return _libvncxx.kelvin2fahren(*args)

def ypr_degs2quat(yprInDegs):
    """ypr_degs2quat(vec3f yprInDegs) -> vec4f"""
    return _libvncxx.ypr_degs2quat(yprInDegs)

def ypr_rads2quat(yprInRads):
    """ypr_rads2quat(vec3f yprInRads) -> vec4f"""
    return _libvncxx.ypr_rads2quat(yprInRads)

def ypr_degs2dcm(yprInDegs):
    """ypr_degs2dcm(vec3f yprInDegs) -> mat3f"""
    return _libvncxx.ypr_degs2dcm(yprInDegs)

def ypr_rads2dcm(yprInRads):
    """ypr_rads2dcm(vec3f yprInRads) -> mat3f"""
    return _libvncxx.ypr_rads2dcm(yprInRads)

def quat2ypr_degs(quat):
    """quat2ypr_degs(vec4f quat) -> vec3f"""
    return _libvncxx.quat2ypr_degs(quat)

def quat2ypr_rads(quat):
    """quat2ypr_rads(vec4f quat) -> vec3f"""
    return _libvncxx.quat2ypr_rads(quat)

def quat2dcm(quat):
    """quat2dcm(vec4f quat) -> mat3f"""
    return _libvncxx.quat2dcm(quat)

def dcm2ypr_degs(dcm):
    """dcm2ypr_degs(mat3f dcm) -> vec3f"""
    return _libvncxx.dcm2ypr_degs(dcm)

def dcm2ypr_rads(dcm):
    """dcm2ypr_rads(mat3f dcm) -> vec3f"""
    return _libvncxx.dcm2ypr_rads(dcm)

def dcm2quat(dcm):
    """dcm2quat(mat3f dcm) -> vec4f"""
    return _libvncxx.dcm2quat(dcm)

def velocity_ned_xy2course_over_ground(velNedX, velNedY):
    """velocity_ned_xy2course_over_ground(float velNedX, float velNedY) -> float"""
    return _libvncxx.velocity_ned_xy2course_over_ground(velNedX, velNedY)

def velocity_ned2course_over_ground(velNed):
    """velocity_ned2course_over_ground(vec3f velNed) -> float"""
    return _libvncxx.velocity_ned2course_over_ground(velNed)

def velocity_ned_xy2speed_over_ground(velNedX, velNedY):
    """velocity_ned_xy2speed_over_ground(float velNedX, float velNedY) -> float"""
    return _libvncxx.velocity_ned_xy2speed_over_ground(velNedX, velNedY)

def velocity_ned2speed_over_ground(velNed):
    """velocity_ned2speed_over_ground(vec3f velNed) -> float"""
    return _libvncxx.velocity_ned2speed_over_ground(velNed)

def quat2omega_phi_kappa_rads(quat):
    """quat2omega_phi_kappa_rads(vec4f quat) -> vec3f"""
    return _libvncxx.quat2omega_phi_kappa_rads(quat)

def dcm2omega_phi_kappa_rads(dcm):
    """dcm2omega_phi_kappa_rads(mat3f dcm) -> vec3f"""
    return _libvncxx.dcm2omega_phi_kappa_rads(dcm)

def ypr_degs2omega_phi_kappa_rads(yprDegs):
    """ypr_degs2omega_phi_kappa_rads(vec3f yprDegs) -> vec3f"""
    return _libvncxx.ypr_degs2omega_phi_kappa_rads(yprDegs)

def ypr_rads2omega_phi_kappa_rads(yprRads):
    """ypr_rads2omega_phi_kappa_rads(vec3f yprRads) -> vec3f"""
    return _libvncxx.ypr_rads2omega_phi_kappa_rads(yprRads)

def __rad2deg_v3f(anglesInRads):
    """__rad2deg_v3f(vec3f anglesInRads) -> vec3f"""
    return _libvncxx.__rad2deg_v3f(anglesInRads)

def __rad2deg_v3d(anglesInRads):
    """__rad2deg_v3d(vec3f anglesInRads) -> vec3f"""
    return _libvncxx.__rad2deg_v3d(anglesInRads)

def __deg2rad_v3f(anglesInDegs):
    """__deg2rad_v3f(vec3f anglesInDegs) -> vec3f"""
    return _libvncxx.__deg2rad_v3f(anglesInDegs)

def __deg2rad_v3d(anglesInDegs):
    """__deg2rad_v3d(vec3f anglesInDegs) -> vec3f"""
    return _libvncxx.__deg2rad_v3d(anglesInDegs)
ERRORDETECTIONMODE_NONE = _libvncxx.ERRORDETECTIONMODE_NONE
ERRORDETECTIONMODE_CHECKSUM = _libvncxx.ERRORDETECTIONMODE_CHECKSUM
ERRORDETECTIONMODE_CRC = _libvncxx.ERRORDETECTIONMODE_CRC
VNOFF = _libvncxx.VNOFF
VNYPR = _libvncxx.VNYPR
VNQTN = _libvncxx.VNQTN
VNQMR = _libvncxx.VNQMR
VNMAG = _libvncxx.VNMAG
VNACC = _libvncxx.VNACC
VNGYR = _libvncxx.VNGYR
VNMAR = _libvncxx.VNMAR
VNYMR = _libvncxx.VNYMR
VNYBA = _libvncxx.VNYBA
VNYIA = _libvncxx.VNYIA
VNIMU = _libvncxx.VNIMU
VNGPS = _libvncxx.VNGPS
VNGPE = _libvncxx.VNGPE
VNINS = _libvncxx.VNINS
VNINE = _libvncxx.VNINE
VNISL = _libvncxx.VNISL
VNISE = _libvncxx.VNISE
VNDTV = _libvncxx.VNDTV
SYNCINMODE_COUNT = _libvncxx.SYNCINMODE_COUNT
SYNCINMODE_IMU = _libvncxx.SYNCINMODE_IMU
SYNCINMODE_ASYNC = _libvncxx.SYNCINMODE_ASYNC
SYNCINEDGE_RISING = _libvncxx.SYNCINEDGE_RISING
SYNCINEDGE_FALLING = _libvncxx.SYNCINEDGE_FALLING
SYNCOUTMODE_NONE = _libvncxx.SYNCOUTMODE_NONE
SYNCOUTMODE_ITEMSTART = _libvncxx.SYNCOUTMODE_ITEMSTART
SYNCOUTMODE_IMUREADY = _libvncxx.SYNCOUTMODE_IMUREADY
SYNCOUTMODE_INS = _libvncxx.SYNCOUTMODE_INS
SYNCOUTMODE_GPSPPS = _libvncxx.SYNCOUTMODE_GPSPPS
SYNCOUTPOLARITY_NEGATIVE = _libvncxx.SYNCOUTPOLARITY_NEGATIVE
SYNCOUTPOLARITY_POSITIVE = _libvncxx.SYNCOUTPOLARITY_POSITIVE
COUNTMODE_NONE = _libvncxx.COUNTMODE_NONE
COUNTMODE_SYNCINCOUNT = _libvncxx.COUNTMODE_SYNCINCOUNT
COUNTMODE_SYNCINTIME = _libvncxx.COUNTMODE_SYNCINTIME
COUNTMODE_SYNCOUTCOUNTER = _libvncxx.COUNTMODE_SYNCOUTCOUNTER
COUNTMODE_GPSPPS = _libvncxx.COUNTMODE_GPSPPS
STATUSMODE_OFF = _libvncxx.STATUSMODE_OFF
STATUSMODE_VPESTATUS = _libvncxx.STATUSMODE_VPESTATUS
STATUSMODE_INSSTATUS = _libvncxx.STATUSMODE_INSSTATUS
CHECKSUMMODE_OFF = _libvncxx.CHECKSUMMODE_OFF
CHECKSUMMODE_CHECKSUM = _libvncxx.CHECKSUMMODE_CHECKSUM
CHECKSUMMODE_CRC = _libvncxx.CHECKSUMMODE_CRC
ERRORMODE_IGNORE = _libvncxx.ERRORMODE_IGNORE
ERRORMODE_SEND = _libvncxx.ERRORMODE_SEND
ERRORMODE_SENDANDOFF = _libvncxx.ERRORMODE_SENDANDOFF
FILTERMODE_NOFILTERING = _libvncxx.FILTERMODE_NOFILTERING
FILTERMODE_ONLYRAW = _libvncxx.FILTERMODE_ONLYRAW
FILTERMODE_ONLYCOMPENSATED = _libvncxx.FILTERMODE_ONLYCOMPENSATED
FILTERMODE_BOTH = _libvncxx.FILTERMODE_BOTH
INTEGRATIONFRAME_BODY = _libvncxx.INTEGRATIONFRAME_BODY
INTEGRATIONFRAME_NED = _libvncxx.INTEGRATIONFRAME_NED
COMPENSATIONMODE_NONE = _libvncxx.COMPENSATIONMODE_NONE
COMPENSATIONMODE_BIAS = _libvncxx.COMPENSATIONMODE_BIAS
GPSFIX_NOFIX = _libvncxx.GPSFIX_NOFIX
GPSFIX_TIMEONLY = _libvncxx.GPSFIX_TIMEONLY
GPSFIX_2D = _libvncxx.GPSFIX_2D
GPSFIX_3D = _libvncxx.GPSFIX_3D
GPSMODE_ONBOARDGPS = _libvncxx.GPSMODE_ONBOARDGPS
GPSMODE_EXTERNALGPS = _libvncxx.GPSMODE_EXTERNALGPS
GPSMODE_EXTERNALVN200GPS = _libvncxx.GPSMODE_EXTERNALVN200GPS
PPSSOURCE_GPSPPSRISING = _libvncxx.PPSSOURCE_GPSPPSRISING
PPSSOURCE_GPSPPSFALLING = _libvncxx.PPSSOURCE_GPSPPSFALLING
PPSSOURCE_SYNCINRISING = _libvncxx.PPSSOURCE_SYNCINRISING
PPSSOURCE_SYNCINFALLING = _libvncxx.PPSSOURCE_SYNCINFALLING
VPEENABLE_DISABLE = _libvncxx.VPEENABLE_DISABLE
VPEENABLE_ENABLE = _libvncxx.VPEENABLE_ENABLE
HEADINGMODE_ABSOLUTE = _libvncxx.HEADINGMODE_ABSOLUTE
HEADINGMODE_RELATIVE = _libvncxx.HEADINGMODE_RELATIVE
HEADINGMODE_INDOOR = _libvncxx.HEADINGMODE_INDOOR
VPEMODE_OFF = _libvncxx.VPEMODE_OFF
VPEMODE_MODE1 = _libvncxx.VPEMODE_MODE1
SCENARIO_AHRS = _libvncxx.SCENARIO_AHRS
SCENARIO_INSWITHPRESSURE = _libvncxx.SCENARIO_INSWITHPRESSURE
SCENARIO_INSWITHOUTPRESSURE = _libvncxx.SCENARIO_INSWITHOUTPRESSURE
SCENARIO_GPSMOVINGBASELINEDYNAMIC = _libvncxx.SCENARIO_GPSMOVINGBASELINEDYNAMIC
SCENARIO_GPSMOVINGBASELINESTATIC = _libvncxx.SCENARIO_GPSMOVINGBASELINESTATIC
HSIMODE_OFF = _libvncxx.HSIMODE_OFF
HSIMODE_RUN = _libvncxx.HSIMODE_RUN
HSIMODE_RESET = _libvncxx.HSIMODE_RESET
HSIOUTPUT_NOONBOARD = _libvncxx.HSIOUTPUT_NOONBOARD
HSIOUTPUT_USEONBOARD = _libvncxx.HSIOUTPUT_USEONBOARD
VELOCITYCOMPENSATIONMODE_DISABLED = _libvncxx.VELOCITYCOMPENSATIONMODE_DISABLED
VELOCITYCOMPENSATIONMODE_BODYMEASUREMENT = _libvncxx.VELOCITYCOMPENSATIONMODE_BODYMEASUREMENT
MAGNETICMODE_2D = _libvncxx.MAGNETICMODE_2D
MAGNETICMODE_3D = _libvncxx.MAGNETICMODE_3D
EXTERNALSENSORMODE_INTERNAL = _libvncxx.EXTERNALSENSORMODE_INTERNAL
EXTERNALSENSORMODE_EXTERNAL200HZ = _libvncxx.EXTERNALSENSORMODE_EXTERNAL200HZ
EXTERNALSENSORMODE_EXTERNALONUPDATE = _libvncxx.EXTERNALSENSORMODE_EXTERNALONUPDATE
FOAMINIT_NOFOAMINIT = _libvncxx.FOAMINIT_NOFOAMINIT
FOAMINIT_FOAMINITPITCHROLL = _libvncxx.FOAMINIT_FOAMINITPITCHROLL
FOAMINIT_FOAMINITHEADINGPITCHROLL = _libvncxx.FOAMINIT_FOAMINITHEADINGPITCHROLL
FOAMINIT_FOAMINITPITCHROLLCOVARIANCE = _libvncxx.FOAMINIT_FOAMINITPITCHROLLCOVARIANCE
FOAMINIT_FOAMINITHEADINGPITCHROLLCOVARIANCE = _libvncxx.FOAMINIT_FOAMINITHEADINGPITCHROLLCOVARIANCE
SENSSAT_MAGX = _libvncxx.SENSSAT_MAGX
SENSSAT_MAGY = _libvncxx.SENSSAT_MAGY
SENSSAT_MAGZ = _libvncxx.SENSSAT_MAGZ
SENSSAT_ACCX = _libvncxx.SENSSAT_ACCX
SENSSAT_ACCY = _libvncxx.SENSSAT_ACCY
SENSSAT_ACCZ = _libvncxx.SENSSAT_ACCZ
SENSSAT_GYROX = _libvncxx.SENSSAT_GYROX
SENSSAT_GYROY = _libvncxx.SENSSAT_GYROY
SENSSAT_GYROZ = _libvncxx.SENSSAT_GYROZ
SENSSAT_PRES = _libvncxx.SENSSAT_PRES
class VpeStatus(_object):
    """Proxy of C++ vn::protocol::uart::VpeStatus class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VpeStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VpeStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["attitudeQuality"] = _libvncxx.VpeStatus_attitudeQuality_set
    __swig_getmethods__["attitudeQuality"] = _libvncxx.VpeStatus_attitudeQuality_get
    if _newclass:
        attitudeQuality = _swig_property(_libvncxx.VpeStatus_attitudeQuality_get, _libvncxx.VpeStatus_attitudeQuality_set)
    __swig_setmethods__["gyroSaturation"] = _libvncxx.VpeStatus_gyroSaturation_set
    __swig_getmethods__["gyroSaturation"] = _libvncxx.VpeStatus_gyroSaturation_get
    if _newclass:
        gyroSaturation = _swig_property(_libvncxx.VpeStatus_gyroSaturation_get, _libvncxx.VpeStatus_gyroSaturation_set)
    __swig_setmethods__["gyroSaturationRecovery"] = _libvncxx.VpeStatus_gyroSaturationRecovery_set
    __swig_getmethods__["gyroSaturationRecovery"] = _libvncxx.VpeStatus_gyroSaturationRecovery_get
    if _newclass:
        gyroSaturationRecovery = _swig_property(_libvncxx.VpeStatus_gyroSaturationRecovery_get, _libvncxx.VpeStatus_gyroSaturationRecovery_set)
    __swig_setmethods__["magDisturbance"] = _libvncxx.VpeStatus_magDisturbance_set
    __swig_getmethods__["magDisturbance"] = _libvncxx.VpeStatus_magDisturbance_get
    if _newclass:
        magDisturbance = _swig_property(_libvncxx.VpeStatus_magDisturbance_get, _libvncxx.VpeStatus_magDisturbance_set)
    __swig_setmethods__["magSaturation"] = _libvncxx.VpeStatus_magSaturation_set
    __swig_getmethods__["magSaturation"] = _libvncxx.VpeStatus_magSaturation_get
    if _newclass:
        magSaturation = _swig_property(_libvncxx.VpeStatus_magSaturation_get, _libvncxx.VpeStatus_magSaturation_set)
    __swig_setmethods__["accDisturbance"] = _libvncxx.VpeStatus_accDisturbance_set
    __swig_getmethods__["accDisturbance"] = _libvncxx.VpeStatus_accDisturbance_get
    if _newclass:
        accDisturbance = _swig_property(_libvncxx.VpeStatus_accDisturbance_get, _libvncxx.VpeStatus_accDisturbance_set)
    __swig_setmethods__["accSaturation"] = _libvncxx.VpeStatus_accSaturation_set
    __swig_getmethods__["accSaturation"] = _libvncxx.VpeStatus_accSaturation_get
    if _newclass:
        accSaturation = _swig_property(_libvncxx.VpeStatus_accSaturation_get, _libvncxx.VpeStatus_accSaturation_set)
    __swig_setmethods__["knownMagDisturbance"] = _libvncxx.VpeStatus_knownMagDisturbance_set
    __swig_getmethods__["knownMagDisturbance"] = _libvncxx.VpeStatus_knownMagDisturbance_get
    if _newclass:
        knownMagDisturbance = _swig_property(_libvncxx.VpeStatus_knownMagDisturbance_get, _libvncxx.VpeStatus_knownMagDisturbance_set)
    __swig_setmethods__["knownAccelDisturbance"] = _libvncxx.VpeStatus_knownAccelDisturbance_set
    __swig_getmethods__["knownAccelDisturbance"] = _libvncxx.VpeStatus_knownAccelDisturbance_get
    if _newclass:
        knownAccelDisturbance = _swig_property(_libvncxx.VpeStatus_knownAccelDisturbance_get, _libvncxx.VpeStatus_knownAccelDisturbance_set)

    def __init__(self, *args):
        """
        __init__(vn::protocol::uart::VpeStatus self) -> VpeStatus
        __init__(vn::protocol::uart::VpeStatus self, uint16_t raw) -> VpeStatus
        """
        this = _libvncxx.new_VpeStatus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_VpeStatus
    __del__ = lambda self: None
VpeStatus_swigregister = _libvncxx.VpeStatus_swigregister
VpeStatus_swigregister(VpeStatus)

INSSTATUS_NOT_TRACKING = _libvncxx.INSSTATUS_NOT_TRACKING
INSSTATUS_SUFFICIENT_DYNAMIC_MOTION = _libvncxx.INSSTATUS_SUFFICIENT_DYNAMIC_MOTION
INSSTATUS_TRACKING = _libvncxx.INSSTATUS_TRACKING
INSSTATUS_GPS_FIX = _libvncxx.INSSTATUS_GPS_FIX
INSSTATUS_TIME_ERROR = _libvncxx.INSSTATUS_TIME_ERROR
INSSTATUS_IMU_ERROR = _libvncxx.INSSTATUS_IMU_ERROR
INSSTATUS_MAG_PRES_ERROR = _libvncxx.INSSTATUS_MAG_PRES_ERROR
INSSTATUS_GPS_ERROR = _libvncxx.INSSTATUS_GPS_ERROR
class TimeUtc(_object):
    """Proxy of C++ vn::protocol::uart::TimeUtc class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeUtc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeUtc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["year"] = _libvncxx.TimeUtc_year_set
    __swig_getmethods__["year"] = _libvncxx.TimeUtc_year_get
    if _newclass:
        year = _swig_property(_libvncxx.TimeUtc_year_get, _libvncxx.TimeUtc_year_set)
    __swig_setmethods__["month"] = _libvncxx.TimeUtc_month_set
    __swig_getmethods__["month"] = _libvncxx.TimeUtc_month_get
    if _newclass:
        month = _swig_property(_libvncxx.TimeUtc_month_get, _libvncxx.TimeUtc_month_set)
    __swig_setmethods__["day"] = _libvncxx.TimeUtc_day_set
    __swig_getmethods__["day"] = _libvncxx.TimeUtc_day_get
    if _newclass:
        day = _swig_property(_libvncxx.TimeUtc_day_get, _libvncxx.TimeUtc_day_set)
    __swig_setmethods__["hour"] = _libvncxx.TimeUtc_hour_set
    __swig_getmethods__["hour"] = _libvncxx.TimeUtc_hour_get
    if _newclass:
        hour = _swig_property(_libvncxx.TimeUtc_hour_get, _libvncxx.TimeUtc_hour_set)
    __swig_setmethods__["min"] = _libvncxx.TimeUtc_min_set
    __swig_getmethods__["min"] = _libvncxx.TimeUtc_min_get
    if _newclass:
        min = _swig_property(_libvncxx.TimeUtc_min_get, _libvncxx.TimeUtc_min_set)
    __swig_setmethods__["sec"] = _libvncxx.TimeUtc_sec_set
    __swig_getmethods__["sec"] = _libvncxx.TimeUtc_sec_get
    if _newclass:
        sec = _swig_property(_libvncxx.TimeUtc_sec_get, _libvncxx.TimeUtc_sec_set)
    __swig_setmethods__["ms"] = _libvncxx.TimeUtc_ms_set
    __swig_getmethods__["ms"] = _libvncxx.TimeUtc_ms_get
    if _newclass:
        ms = _swig_property(_libvncxx.TimeUtc_ms_get, _libvncxx.TimeUtc_ms_set)

    def __init__(self):
        """__init__(vn::protocol::uart::TimeUtc self) -> TimeUtc"""
        this = _libvncxx.new_TimeUtc()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_TimeUtc
    __del__ = lambda self: None
TimeUtc_swigregister = _libvncxx.TimeUtc_swigregister
TimeUtc_swigregister(TimeUtc)


def __or__(*args):
    """
    __or__(COMMONGROUP lhs, COMMONGROUP rhs) -> COMMONGROUP
    __or__(TIMEGROUP lhs, TIMEGROUP rhs) -> TIMEGROUP
    __or__(IMUGROUP lhs, IMUGROUP rhs) -> IMUGROUP
    __or__(GPSGROUP lhs, GPSGROUP rhs) -> GPSGROUP
    __or__(ATTITUDEGROUP lhs, ATTITUDEGROUP rhs) -> ATTITUDEGROUP
    __or__(INSGROUP lhs, INSGROUP rhs) -> INSGROUP
    """
    return _libvncxx.__or__(*args)

def to_string(*args):
    """
    to_string(ASYNCMODE val) -> std::string
    to_string(COMMONGROUP val) -> std::string
    to_string(TIMEGROUP val) -> std::string
    to_string(IMUGROUP val) -> std::string
    to_string(GPSGROUP val) -> std::string
    to_string(ATTITUDEGROUP val) -> std::string
    to_string(INSGROUP val) -> std::string
    """
    return _libvncxx.to_string(*args)

def __lshift__(*args):
    """
    __lshift__(std::ostream & out, ASYNCMODE e) -> std::ostream
    __lshift__(std::ostream & out, COMMONGROUP e) -> std::ostream
    __lshift__(std::ostream & out, TIMEGROUP e) -> std::ostream
    __lshift__(std::ostream & out, IMUGROUP e) -> std::ostream
    __lshift__(std::ostream & out, GPSGROUP e) -> std::ostream
    __lshift__(std::ostream & out, ATTITUDEGROUP e) -> std::ostream
    __lshift__(std::ostream & out, INSGROUP e) -> std::ostream &
    """
    return _libvncxx.__lshift__(*args)
class Packet(_object):
    """Proxy of C++ vn::protocol::uart::Packet class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Packet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Packet, name)
    __repr__ = _swig_repr
    __swig_getmethods__["BinaryGroupLengths"] = _libvncxx.Packet_BinaryGroupLengths_get
    if _newclass:
        BinaryGroupLengths = _swig_property(_libvncxx.Packet_BinaryGroupLengths_get)
    TYPE_UNKNOWN = _libvncxx.Packet_TYPE_UNKNOWN
    TYPE_BINARY = _libvncxx.Packet_TYPE_BINARY
    TYPE_ASCII = _libvncxx.Packet_TYPE_ASCII

    def __init__(self, *args):
        """
        __init__(vn::protocol::uart::Packet self) -> Packet
        __init__(vn::protocol::uart::Packet self, char const * packet, size_t length) -> Packet
        __init__(vn::protocol::uart::Packet self, std::string packet) -> Packet
        __init__(vn::protocol::uart::Packet self, Packet toCopy) -> Packet
        """
        this = _libvncxx.new_Packet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_Packet
    __del__ = lambda self: None

    def __datastr(self):
        """__datastr(Packet self) -> std::string"""
        return _libvncxx.Packet___datastr(self)


    def __type(self):
        """__type(Packet self) -> vn::protocol::uart::Packet::Type"""
        return _libvncxx.Packet___type(self)


    def __isValid(self):
        """__isValid(Packet self) -> bool"""
        return _libvncxx.Packet___isValid(self)


    def __isError(self):
        """__isError(Packet self) -> bool"""
        return _libvncxx.Packet___isError(self)


    def __isResponse(self):
        """__isResponse(Packet self) -> bool"""
        return _libvncxx.Packet___isResponse(self)


    def __isAsciiAsync(self):
        """__isAsciiAsync(Packet self) -> bool"""
        return _libvncxx.Packet___isAsciiAsync(self)


    def determine_ascii_async_type(self):
        """determine_ascii_async_type(Packet self) -> vn::protocol::uart::AsciiAsync"""
        return _libvncxx.Packet_determine_ascii_async_type(self)


    def isCompatible(self, commonGroup, timeGroup, imuGroup, gpsGroup, attitudeGroup, insGroup):
        """isCompatible(Packet self, COMMONGROUP commonGroup, TIMEGROUP timeGroup, IMUGROUP imuGroup, GPSGROUP gpsGroup, ATTITUDEGROUP attitudeGroup, INSGROUP insGroup) -> bool"""
        return _libvncxx.Packet_isCompatible(self, commonGroup, timeGroup, imuGroup, gpsGroup, attitudeGroup, insGroup)


    def computeBinaryPacketLength(startOfPossibleBinaryPacket):
        """computeBinaryPacketLength(char const * startOfPossibleBinaryPacket) -> size_t"""
        return _libvncxx.Packet_computeBinaryPacketLength(startOfPossibleBinaryPacket)

    computeBinaryPacketLength = staticmethod(computeBinaryPacketLength)

    def computeNumOfBytesForBinaryGroupPayload(group, groupField):
        """computeNumOfBytesForBinaryGroupPayload(BINARYGROUP group, uint16_t groupField) -> size_t"""
        return _libvncxx.Packet_computeNumOfBytesForBinaryGroupPayload(group, groupField)

    computeNumOfBytesForBinaryGroupPayload = staticmethod(computeNumOfBytesForBinaryGroupPayload)

    def parse_error(self):
        """parse_error(Packet self) -> SENSORERROR"""
        return _libvncxx.Packet_parse_error(self)


    def groups(self):
        """groups(Packet self) -> uint8_t"""
        return _libvncxx.Packet_groups(self)


    def groupField(self, index):
        """groupField(Packet self, size_t index) -> uint16_t"""
        return _libvncxx.Packet_groupField(self, index)


    def extractUint8(self):
        """extractUint8(Packet self) -> uint8_t"""
        return _libvncxx.Packet_extractUint8(self)


    def extractInt8(self):
        """extractInt8(Packet self) -> int8_t"""
        return _libvncxx.Packet_extractInt8(self)


    def extractUint16(self):
        """extractUint16(Packet self) -> uint16_t"""
        return _libvncxx.Packet_extractUint16(self)


    def extractUint32(self):
        """extractUint32(Packet self) -> uint32_t"""
        return _libvncxx.Packet_extractUint32(self)


    def extractUint64(self):
        """extractUint64(Packet self) -> uint64_t"""
        return _libvncxx.Packet_extractUint64(self)


    def extractFloat(self):
        """extractFloat(Packet self) -> float"""
        return _libvncxx.Packet_extractFloat(self)


    def extractVec3f(self):
        """extractVec3f(Packet self) -> vec3f"""
        return _libvncxx.Packet_extractVec3f(self)


    def extractVec3d(self):
        """extractVec3d(Packet self) -> vec3d"""
        return _libvncxx.Packet_extractVec3d(self)


    def extractVec4f(self):
        """extractVec4f(Packet self) -> vec4f"""
        return _libvncxx.Packet_extractVec4f(self)


    def extractMat3f(self):
        """extractMat3f(Packet self) -> mat3f"""
        return _libvncxx.Packet_extractMat3f(self)


    def finalizeCommand(errorDetectionMode, packet, length):
        """finalizeCommand(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * packet, size_t length) -> size_t"""
        return _libvncxx.Packet_finalizeCommand(errorDetectionMode, packet, length)

    finalizeCommand = staticmethod(finalizeCommand)

    def genReadBinaryOutput1(errorDetectionMode, buffer, size):
        """genReadBinaryOutput1(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadBinaryOutput1(errorDetectionMode, buffer, size)

    genReadBinaryOutput1 = staticmethod(genReadBinaryOutput1)

    def genReadBinaryOutput2(errorDetectionMode, buffer, size):
        """genReadBinaryOutput2(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadBinaryOutput2(errorDetectionMode, buffer, size)

    genReadBinaryOutput2 = staticmethod(genReadBinaryOutput2)

    def genReadBinaryOutput3(errorDetectionMode, buffer, size):
        """genReadBinaryOutput3(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadBinaryOutput3(errorDetectionMode, buffer, size)

    genReadBinaryOutput3 = staticmethod(genReadBinaryOutput3)

    def genWriteBinaryOutput1(errorDetectionMode, buffer, size, asyncMode, rateDivisor, commonField, timeField, imuField, gpsField, attitudeField, insField):
        """genWriteBinaryOutput1(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint16_t asyncMode, uint16_t rateDivisor, uint16_t commonField, uint16_t timeField, uint16_t imuField, uint16_t gpsField, uint16_t attitudeField, uint16_t insField) -> size_t"""
        return _libvncxx.Packet_genWriteBinaryOutput1(errorDetectionMode, buffer, size, asyncMode, rateDivisor, commonField, timeField, imuField, gpsField, attitudeField, insField)

    genWriteBinaryOutput1 = staticmethod(genWriteBinaryOutput1)

    def genWriteBinaryOutput2(errorDetectionMode, buffer, size, asyncMode, rateDivisor, commonField, timeField, imuField, gpsField, attitudeField, insField):
        """genWriteBinaryOutput2(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint16_t asyncMode, uint16_t rateDivisor, uint16_t commonField, uint16_t timeField, uint16_t imuField, uint16_t gpsField, uint16_t attitudeField, uint16_t insField) -> size_t"""
        return _libvncxx.Packet_genWriteBinaryOutput2(errorDetectionMode, buffer, size, asyncMode, rateDivisor, commonField, timeField, imuField, gpsField, attitudeField, insField)

    genWriteBinaryOutput2 = staticmethod(genWriteBinaryOutput2)

    def genWriteBinaryOutput3(errorDetectionMode, buffer, size, asyncMode, rateDivisor, commonField, timeField, imuField, gpsField, attitudeField, insField):
        """genWriteBinaryOutput3(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint16_t asyncMode, uint16_t rateDivisor, uint16_t commonField, uint16_t timeField, uint16_t imuField, uint16_t gpsField, uint16_t attitudeField, uint16_t insField) -> size_t"""
        return _libvncxx.Packet_genWriteBinaryOutput3(errorDetectionMode, buffer, size, asyncMode, rateDivisor, commonField, timeField, imuField, gpsField, attitudeField, insField)

    genWriteBinaryOutput3 = staticmethod(genWriteBinaryOutput3)

    def genWriteSettings(errorDetectionMode, buffer, size):
        """genWriteSettings(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genWriteSettings(errorDetectionMode, buffer, size)

    genWriteSettings = staticmethod(genWriteSettings)

    def genTare(errorDetectionMode, buffer, size):
        """genTare(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genTare(errorDetectionMode, buffer, size)

    genTare = staticmethod(genTare)

    def genKnownMagneticDisturbance(errorDetectionMode, buffer, size, isMagneticDisturbancePresent):
        """genKnownMagneticDisturbance(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, bool isMagneticDisturbancePresent) -> size_t"""
        return _libvncxx.Packet_genKnownMagneticDisturbance(errorDetectionMode, buffer, size, isMagneticDisturbancePresent)

    genKnownMagneticDisturbance = staticmethod(genKnownMagneticDisturbance)

    def genKnownAccelerationDisturbance(errorDetectionMode, buffer, size, isAccelerationDisturbancePresent):
        """genKnownAccelerationDisturbance(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, bool isAccelerationDisturbancePresent) -> size_t"""
        return _libvncxx.Packet_genKnownAccelerationDisturbance(errorDetectionMode, buffer, size, isAccelerationDisturbancePresent)

    genKnownAccelerationDisturbance = staticmethod(genKnownAccelerationDisturbance)

    def genSetGyroBias(errorDetectionMode, buffer, size):
        """genSetGyroBias(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genSetGyroBias(errorDetectionMode, buffer, size)

    genSetGyroBias = staticmethod(genSetGyroBias)

    def genRestoreFactorySettings(errorDetectionMode, buffer, size):
        """genRestoreFactorySettings(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genRestoreFactorySettings(errorDetectionMode, buffer, size)

    genRestoreFactorySettings = staticmethod(genRestoreFactorySettings)

    def genReset(errorDetectionMode, buffer, size):
        """genReset(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReset(errorDetectionMode, buffer, size)

    genReset = staticmethod(genReset)

    def genReadUserTag(errorDetectionMode, buffer, size):
        """genReadUserTag(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadUserTag(errorDetectionMode, buffer, size)

    genReadUserTag = staticmethod(genReadUserTag)

    def genWriteUserTag(errorDetectionMode, buffer, size, tag):
        """genWriteUserTag(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, std::string tag) -> size_t"""
        return _libvncxx.Packet_genWriteUserTag(errorDetectionMode, buffer, size, tag)

    genWriteUserTag = staticmethod(genWriteUserTag)

    def genReadModelNumber(errorDetectionMode, buffer, size):
        """genReadModelNumber(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadModelNumber(errorDetectionMode, buffer, size)

    genReadModelNumber = staticmethod(genReadModelNumber)

    def genReadHardwareRevision(errorDetectionMode, buffer, size):
        """genReadHardwareRevision(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadHardwareRevision(errorDetectionMode, buffer, size)

    genReadHardwareRevision = staticmethod(genReadHardwareRevision)

    def genReadSerialNumber(errorDetectionMode, buffer, size):
        """genReadSerialNumber(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadSerialNumber(errorDetectionMode, buffer, size)

    genReadSerialNumber = staticmethod(genReadSerialNumber)

    def genReadFirmwareVersion(errorDetectionMode, buffer, size):
        """genReadFirmwareVersion(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadFirmwareVersion(errorDetectionMode, buffer, size)

    genReadFirmwareVersion = staticmethod(genReadFirmwareVersion)

    def genReadSerialBaudRate(*args):
        """
        genReadSerialBaudRate(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t port) -> size_t
        genReadSerialBaudRate(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t
        """
        return _libvncxx.Packet_genReadSerialBaudRate(*args)

    genReadSerialBaudRate = staticmethod(genReadSerialBaudRate)

    def genWriteSerialBaudRate(*args):
        """
        genWriteSerialBaudRate(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint32_t baudrate, uint8_t port) -> size_t
        genWriteSerialBaudRate(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint32_t baudrate) -> size_t
        """
        return _libvncxx.Packet_genWriteSerialBaudRate(*args)

    genWriteSerialBaudRate = staticmethod(genWriteSerialBaudRate)

    def genReadAsyncDataOutputType(*args):
        """
        genReadAsyncDataOutputType(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t port) -> size_t
        genReadAsyncDataOutputType(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t
        """
        return _libvncxx.Packet_genReadAsyncDataOutputType(*args)

    genReadAsyncDataOutputType = staticmethod(genReadAsyncDataOutputType)

    def genWriteAsyncDataOutputType(*args):
        """
        genWriteAsyncDataOutputType(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint32_t ador, uint8_t port) -> size_t
        genWriteAsyncDataOutputType(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint32_t ador) -> size_t
        """
        return _libvncxx.Packet_genWriteAsyncDataOutputType(*args)

    genWriteAsyncDataOutputType = staticmethod(genWriteAsyncDataOutputType)

    def genReadAsyncDataOutputFrequency(*args):
        """
        genReadAsyncDataOutputFrequency(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t port) -> size_t
        genReadAsyncDataOutputFrequency(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t
        """
        return _libvncxx.Packet_genReadAsyncDataOutputFrequency(*args)

    genReadAsyncDataOutputFrequency = staticmethod(genReadAsyncDataOutputFrequency)

    def genWriteAsyncDataOutputFrequency(*args):
        """
        genWriteAsyncDataOutputFrequency(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint32_t adof, uint8_t port) -> size_t
        genWriteAsyncDataOutputFrequency(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint32_t adof) -> size_t
        """
        return _libvncxx.Packet_genWriteAsyncDataOutputFrequency(*args)

    genWriteAsyncDataOutputFrequency = staticmethod(genWriteAsyncDataOutputFrequency)

    def genReadYawPitchRoll(errorDetectionMode, buffer, size):
        """genReadYawPitchRoll(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadYawPitchRoll(errorDetectionMode, buffer, size)

    genReadYawPitchRoll = staticmethod(genReadYawPitchRoll)

    def genReadAttitudeQuaternion(errorDetectionMode, buffer, size):
        """genReadAttitudeQuaternion(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadAttitudeQuaternion(errorDetectionMode, buffer, size)

    genReadAttitudeQuaternion = staticmethod(genReadAttitudeQuaternion)

    def genReadQuaternionMagneticAccelerationAndAngularRates(errorDetectionMode, buffer, size):
        """genReadQuaternionMagneticAccelerationAndAngularRates(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadQuaternionMagneticAccelerationAndAngularRates(errorDetectionMode, buffer, size)

    genReadQuaternionMagneticAccelerationAndAngularRates = staticmethod(genReadQuaternionMagneticAccelerationAndAngularRates)

    def genReadMagneticMeasurements(errorDetectionMode, buffer, size):
        """genReadMagneticMeasurements(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadMagneticMeasurements(errorDetectionMode, buffer, size)

    genReadMagneticMeasurements = staticmethod(genReadMagneticMeasurements)

    def genReadAccelerationMeasurements(errorDetectionMode, buffer, size):
        """genReadAccelerationMeasurements(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadAccelerationMeasurements(errorDetectionMode, buffer, size)

    genReadAccelerationMeasurements = staticmethod(genReadAccelerationMeasurements)

    def genReadAngularRateMeasurements(errorDetectionMode, buffer, size):
        """genReadAngularRateMeasurements(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadAngularRateMeasurements(errorDetectionMode, buffer, size)

    genReadAngularRateMeasurements = staticmethod(genReadAngularRateMeasurements)

    def genReadMagneticAccelerationAndAngularRates(errorDetectionMode, buffer, size):
        """genReadMagneticAccelerationAndAngularRates(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadMagneticAccelerationAndAngularRates(errorDetectionMode, buffer, size)

    genReadMagneticAccelerationAndAngularRates = staticmethod(genReadMagneticAccelerationAndAngularRates)

    def genReadMagneticAndGravityReferenceVectors(errorDetectionMode, buffer, size):
        """genReadMagneticAndGravityReferenceVectors(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadMagneticAndGravityReferenceVectors(errorDetectionMode, buffer, size)

    genReadMagneticAndGravityReferenceVectors = staticmethod(genReadMagneticAndGravityReferenceVectors)

    def genWriteMagneticAndGravityReferenceVectors(errorDetectionMode, buffer, size, magRef, accRef):
        """genWriteMagneticAndGravityReferenceVectors(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f magRef, vec3f accRef) -> size_t"""
        return _libvncxx.Packet_genWriteMagneticAndGravityReferenceVectors(errorDetectionMode, buffer, size, magRef, accRef)

    genWriteMagneticAndGravityReferenceVectors = staticmethod(genWriteMagneticAndGravityReferenceVectors)

    def genReadFilterMeasurementsVarianceParameters(errorDetectionMode, buffer, size):
        """genReadFilterMeasurementsVarianceParameters(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadFilterMeasurementsVarianceParameters(errorDetectionMode, buffer, size)

    genReadFilterMeasurementsVarianceParameters = staticmethod(genReadFilterMeasurementsVarianceParameters)

    def genWriteFilterMeasurementsVarianceParameters(errorDetectionMode, buffer, size, angularWalkVariance, angularRateVariance, magneticVariance, accelerationVariance):
        """genWriteFilterMeasurementsVarianceParameters(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, float angularWalkVariance, vec3f angularRateVariance, vec3f magneticVariance, vec3f accelerationVariance) -> size_t"""
        return _libvncxx.Packet_genWriteFilterMeasurementsVarianceParameters(errorDetectionMode, buffer, size, angularWalkVariance, angularRateVariance, magneticVariance, accelerationVariance)

    genWriteFilterMeasurementsVarianceParameters = staticmethod(genWriteFilterMeasurementsVarianceParameters)

    def genReadMagnetometerCompensation(errorDetectionMode, buffer, size):
        """genReadMagnetometerCompensation(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadMagnetometerCompensation(errorDetectionMode, buffer, size)

    genReadMagnetometerCompensation = staticmethod(genReadMagnetometerCompensation)

    def genWriteMagnetometerCompensation(errorDetectionMode, buffer, size, c, b):
        """genWriteMagnetometerCompensation(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, mat3f c, vec3f b) -> size_t"""
        return _libvncxx.Packet_genWriteMagnetometerCompensation(errorDetectionMode, buffer, size, c, b)

    genWriteMagnetometerCompensation = staticmethod(genWriteMagnetometerCompensation)

    def genReadFilterActiveTuningParameters(errorDetectionMode, buffer, size):
        """genReadFilterActiveTuningParameters(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadFilterActiveTuningParameters(errorDetectionMode, buffer, size)

    genReadFilterActiveTuningParameters = staticmethod(genReadFilterActiveTuningParameters)

    def genWriteFilterActiveTuningParameters(errorDetectionMode, buffer, size, magneticDisturbanceGain, accelerationDisturbanceGain, magneticDisturbanceMemory, accelerationDisturbanceMemory):
        """genWriteFilterActiveTuningParameters(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, float magneticDisturbanceGain, float accelerationDisturbanceGain, float magneticDisturbanceMemory, float accelerationDisturbanceMemory) -> size_t"""
        return _libvncxx.Packet_genWriteFilterActiveTuningParameters(errorDetectionMode, buffer, size, magneticDisturbanceGain, accelerationDisturbanceGain, magneticDisturbanceMemory, accelerationDisturbanceMemory)

    genWriteFilterActiveTuningParameters = staticmethod(genWriteFilterActiveTuningParameters)

    def genReadAccelerationCompensation(errorDetectionMode, buffer, size):
        """genReadAccelerationCompensation(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadAccelerationCompensation(errorDetectionMode, buffer, size)

    genReadAccelerationCompensation = staticmethod(genReadAccelerationCompensation)

    def genWriteAccelerationCompensation(errorDetectionMode, buffer, size, c, b):
        """genWriteAccelerationCompensation(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, mat3f c, vec3f b) -> size_t"""
        return _libvncxx.Packet_genWriteAccelerationCompensation(errorDetectionMode, buffer, size, c, b)

    genWriteAccelerationCompensation = staticmethod(genWriteAccelerationCompensation)

    def genReadReferenceFrameRotation(errorDetectionMode, buffer, size):
        """genReadReferenceFrameRotation(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadReferenceFrameRotation(errorDetectionMode, buffer, size)

    genReadReferenceFrameRotation = staticmethod(genReadReferenceFrameRotation)

    def genWriteReferenceFrameRotation(errorDetectionMode, buffer, size, c):
        """genWriteReferenceFrameRotation(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, mat3f c) -> size_t"""
        return _libvncxx.Packet_genWriteReferenceFrameRotation(errorDetectionMode, buffer, size, c)

    genWriteReferenceFrameRotation = staticmethod(genWriteReferenceFrameRotation)

    def genReadYawPitchRollMagneticAccelerationAndAngularRates(errorDetectionMode, buffer, size):
        """genReadYawPitchRollMagneticAccelerationAndAngularRates(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadYawPitchRollMagneticAccelerationAndAngularRates(errorDetectionMode, buffer, size)

    genReadYawPitchRollMagneticAccelerationAndAngularRates = staticmethod(genReadYawPitchRollMagneticAccelerationAndAngularRates)

    def genReadCommunicationProtocolControl(errorDetectionMode, buffer, size):
        """genReadCommunicationProtocolControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadCommunicationProtocolControl(errorDetectionMode, buffer, size)

    genReadCommunicationProtocolControl = staticmethod(genReadCommunicationProtocolControl)

    def genWriteCommunicationProtocolControl(errorDetectionMode, buffer, size, serialCount, serialStatus, spiCount, spiStatus, serialChecksum, spiChecksum, errorMode):
        """genWriteCommunicationProtocolControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t serialCount, uint8_t serialStatus, uint8_t spiCount, uint8_t spiStatus, uint8_t serialChecksum, uint8_t spiChecksum, uint8_t errorMode) -> size_t"""
        return _libvncxx.Packet_genWriteCommunicationProtocolControl(errorDetectionMode, buffer, size, serialCount, serialStatus, spiCount, spiStatus, serialChecksum, spiChecksum, errorMode)

    genWriteCommunicationProtocolControl = staticmethod(genWriteCommunicationProtocolControl)

    def genReadSynchronizationControl(errorDetectionMode, buffer, size):
        """genReadSynchronizationControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadSynchronizationControl(errorDetectionMode, buffer, size)

    genReadSynchronizationControl = staticmethod(genReadSynchronizationControl)

    def genWriteSynchronizationControl(errorDetectionMode, buffer, size, syncInMode, syncInEdge, syncInSkipFactor, syncOutMode, syncOutPolarity, syncOutSkipFactor, syncOutPulseWidth):
        """genWriteSynchronizationControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t syncInMode, uint8_t syncInEdge, uint16_t syncInSkipFactor, uint8_t syncOutMode, uint8_t syncOutPolarity, uint16_t syncOutSkipFactor, uint32_t syncOutPulseWidth) -> size_t"""
        return _libvncxx.Packet_genWriteSynchronizationControl(errorDetectionMode, buffer, size, syncInMode, syncInEdge, syncInSkipFactor, syncOutMode, syncOutPolarity, syncOutSkipFactor, syncOutPulseWidth)

    genWriteSynchronizationControl = staticmethod(genWriteSynchronizationControl)

    def genReadSynchronizationStatus(errorDetectionMode, buffer, size):
        """genReadSynchronizationStatus(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadSynchronizationStatus(errorDetectionMode, buffer, size)

    genReadSynchronizationStatus = staticmethod(genReadSynchronizationStatus)

    def genWriteSynchronizationStatus(errorDetectionMode, buffer, size, syncInCount, syncInTime, syncOutCount):
        """genWriteSynchronizationStatus(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint32_t syncInCount, uint32_t syncInTime, uint32_t syncOutCount) -> size_t"""
        return _libvncxx.Packet_genWriteSynchronizationStatus(errorDetectionMode, buffer, size, syncInCount, syncInTime, syncOutCount)

    genWriteSynchronizationStatus = staticmethod(genWriteSynchronizationStatus)

    def genReadFilterBasicControl(errorDetectionMode, buffer, size):
        """genReadFilterBasicControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadFilterBasicControl(errorDetectionMode, buffer, size)

    genReadFilterBasicControl = staticmethod(genReadFilterBasicControl)

    def genWriteFilterBasicControl(errorDetectionMode, buffer, size, magMode, extMagMode, extAccMode, extGyroMode, gyroLimit):
        """genWriteFilterBasicControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t magMode, uint8_t extMagMode, uint8_t extAccMode, uint8_t extGyroMode, vec3f gyroLimit) -> size_t"""
        return _libvncxx.Packet_genWriteFilterBasicControl(errorDetectionMode, buffer, size, magMode, extMagMode, extAccMode, extGyroMode, gyroLimit)

    genWriteFilterBasicControl = staticmethod(genWriteFilterBasicControl)

    def genReadVpeBasicControl(errorDetectionMode, buffer, size):
        """genReadVpeBasicControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadVpeBasicControl(errorDetectionMode, buffer, size)

    genReadVpeBasicControl = staticmethod(genReadVpeBasicControl)

    def genWriteVpeBasicControl(errorDetectionMode, buffer, size, enable, headingMode, filteringMode, tuningMode):
        """genWriteVpeBasicControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t enable, uint8_t headingMode, uint8_t filteringMode, uint8_t tuningMode) -> size_t"""
        return _libvncxx.Packet_genWriteVpeBasicControl(errorDetectionMode, buffer, size, enable, headingMode, filteringMode, tuningMode)

    genWriteVpeBasicControl = staticmethod(genWriteVpeBasicControl)

    def genReadVpeMagnetometerBasicTuning(errorDetectionMode, buffer, size):
        """genReadVpeMagnetometerBasicTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadVpeMagnetometerBasicTuning(errorDetectionMode, buffer, size)

    genReadVpeMagnetometerBasicTuning = staticmethod(genReadVpeMagnetometerBasicTuning)

    def genWriteVpeMagnetometerBasicTuning(errorDetectionMode, buffer, size, baseTuning, adaptiveTuning, adaptiveFiltering):
        """genWriteVpeMagnetometerBasicTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f baseTuning, vec3f adaptiveTuning, vec3f adaptiveFiltering) -> size_t"""
        return _libvncxx.Packet_genWriteVpeMagnetometerBasicTuning(errorDetectionMode, buffer, size, baseTuning, adaptiveTuning, adaptiveFiltering)

    genWriteVpeMagnetometerBasicTuning = staticmethod(genWriteVpeMagnetometerBasicTuning)

    def genReadVpeMagnetometerAdvancedTuning(errorDetectionMode, buffer, size):
        """genReadVpeMagnetometerAdvancedTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadVpeMagnetometerAdvancedTuning(errorDetectionMode, buffer, size)

    genReadVpeMagnetometerAdvancedTuning = staticmethod(genReadVpeMagnetometerAdvancedTuning)

    def genWriteVpeMagnetometerAdvancedTuning(errorDetectionMode, buffer, size, minFiltering, maxFiltering, maxAdaptRate, disturbanceWindow, maxTuning):
        """genWriteVpeMagnetometerAdvancedTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f minFiltering, vec3f maxFiltering, float maxAdaptRate, float disturbanceWindow, float maxTuning) -> size_t"""
        return _libvncxx.Packet_genWriteVpeMagnetometerAdvancedTuning(errorDetectionMode, buffer, size, minFiltering, maxFiltering, maxAdaptRate, disturbanceWindow, maxTuning)

    genWriteVpeMagnetometerAdvancedTuning = staticmethod(genWriteVpeMagnetometerAdvancedTuning)

    def genReadVpeAccelerometerBasicTuning(errorDetectionMode, buffer, size):
        """genReadVpeAccelerometerBasicTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadVpeAccelerometerBasicTuning(errorDetectionMode, buffer, size)

    genReadVpeAccelerometerBasicTuning = staticmethod(genReadVpeAccelerometerBasicTuning)

    def genWriteVpeAccelerometerBasicTuning(errorDetectionMode, buffer, size, baseTuning, adaptiveTuning, adaptiveFiltering):
        """genWriteVpeAccelerometerBasicTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f baseTuning, vec3f adaptiveTuning, vec3f adaptiveFiltering) -> size_t"""
        return _libvncxx.Packet_genWriteVpeAccelerometerBasicTuning(errorDetectionMode, buffer, size, baseTuning, adaptiveTuning, adaptiveFiltering)

    genWriteVpeAccelerometerBasicTuning = staticmethod(genWriteVpeAccelerometerBasicTuning)

    def genReadVpeAccelerometerAdvancedTuning(errorDetectionMode, buffer, size):
        """genReadVpeAccelerometerAdvancedTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadVpeAccelerometerAdvancedTuning(errorDetectionMode, buffer, size)

    genReadVpeAccelerometerAdvancedTuning = staticmethod(genReadVpeAccelerometerAdvancedTuning)

    def genWriteVpeAccelerometerAdvancedTuning(errorDetectionMode, buffer, size, minFiltering, maxFiltering, maxAdaptRate, disturbanceWindow, maxTuning):
        """genWriteVpeAccelerometerAdvancedTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f minFiltering, vec3f maxFiltering, float maxAdaptRate, float disturbanceWindow, float maxTuning) -> size_t"""
        return _libvncxx.Packet_genWriteVpeAccelerometerAdvancedTuning(errorDetectionMode, buffer, size, minFiltering, maxFiltering, maxAdaptRate, disturbanceWindow, maxTuning)

    genWriteVpeAccelerometerAdvancedTuning = staticmethod(genWriteVpeAccelerometerAdvancedTuning)

    def genReadVpeGyroBasicTuning(errorDetectionMode, buffer, size):
        """genReadVpeGyroBasicTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadVpeGyroBasicTuning(errorDetectionMode, buffer, size)

    genReadVpeGyroBasicTuning = staticmethod(genReadVpeGyroBasicTuning)

    def genWriteVpeGyroBasicTuning(errorDetectionMode, buffer, size, angularWalkVariance, baseTuning, adaptiveTuning):
        """genWriteVpeGyroBasicTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f angularWalkVariance, vec3f baseTuning, vec3f adaptiveTuning) -> size_t"""
        return _libvncxx.Packet_genWriteVpeGyroBasicTuning(errorDetectionMode, buffer, size, angularWalkVariance, baseTuning, adaptiveTuning)

    genWriteVpeGyroBasicTuning = staticmethod(genWriteVpeGyroBasicTuning)

    def genReadFilterStartupGyroBias(errorDetectionMode, buffer, size):
        """genReadFilterStartupGyroBias(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadFilterStartupGyroBias(errorDetectionMode, buffer, size)

    genReadFilterStartupGyroBias = staticmethod(genReadFilterStartupGyroBias)

    def genWriteFilterStartupGyroBias(errorDetectionMode, buffer, size, bias):
        """genWriteFilterStartupGyroBias(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f bias) -> size_t"""
        return _libvncxx.Packet_genWriteFilterStartupGyroBias(errorDetectionMode, buffer, size, bias)

    genWriteFilterStartupGyroBias = staticmethod(genWriteFilterStartupGyroBias)

    def genReadMagnetometerCalibrationControl(errorDetectionMode, buffer, size):
        """genReadMagnetometerCalibrationControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadMagnetometerCalibrationControl(errorDetectionMode, buffer, size)

    genReadMagnetometerCalibrationControl = staticmethod(genReadMagnetometerCalibrationControl)

    def genWriteMagnetometerCalibrationControl(errorDetectionMode, buffer, size, hsiMode, hsiOutput, convergeRate):
        """genWriteMagnetometerCalibrationControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t hsiMode, uint8_t hsiOutput, uint8_t convergeRate) -> size_t"""
        return _libvncxx.Packet_genWriteMagnetometerCalibrationControl(errorDetectionMode, buffer, size, hsiMode, hsiOutput, convergeRate)

    genWriteMagnetometerCalibrationControl = staticmethod(genWriteMagnetometerCalibrationControl)

    def genReadCalculatedMagnetometerCalibration(errorDetectionMode, buffer, size):
        """genReadCalculatedMagnetometerCalibration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadCalculatedMagnetometerCalibration(errorDetectionMode, buffer, size)

    genReadCalculatedMagnetometerCalibration = staticmethod(genReadCalculatedMagnetometerCalibration)

    def genReadIndoorHeadingModeControl(errorDetectionMode, buffer, size):
        """genReadIndoorHeadingModeControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadIndoorHeadingModeControl(errorDetectionMode, buffer, size)

    genReadIndoorHeadingModeControl = staticmethod(genReadIndoorHeadingModeControl)

    def genWriteIndoorHeadingModeControl(errorDetectionMode, buffer, size, maxRateError):
        """genWriteIndoorHeadingModeControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, float maxRateError) -> size_t"""
        return _libvncxx.Packet_genWriteIndoorHeadingModeControl(errorDetectionMode, buffer, size, maxRateError)

    genWriteIndoorHeadingModeControl = staticmethod(genWriteIndoorHeadingModeControl)

    def genReadVelocityCompensationMeasurement(errorDetectionMode, buffer, size):
        """genReadVelocityCompensationMeasurement(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadVelocityCompensationMeasurement(errorDetectionMode, buffer, size)

    genReadVelocityCompensationMeasurement = staticmethod(genReadVelocityCompensationMeasurement)

    def genWriteVelocityCompensationMeasurement(errorDetectionMode, buffer, size, velocity):
        """genWriteVelocityCompensationMeasurement(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f velocity) -> size_t"""
        return _libvncxx.Packet_genWriteVelocityCompensationMeasurement(errorDetectionMode, buffer, size, velocity)

    genWriteVelocityCompensationMeasurement = staticmethod(genWriteVelocityCompensationMeasurement)

    def genReadVelocityCompensationControl(errorDetectionMode, buffer, size):
        """genReadVelocityCompensationControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadVelocityCompensationControl(errorDetectionMode, buffer, size)

    genReadVelocityCompensationControl = staticmethod(genReadVelocityCompensationControl)

    def genWriteVelocityCompensationControl(errorDetectionMode, buffer, size, mode, velocityTuning, rateTuning):
        """genWriteVelocityCompensationControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t mode, float velocityTuning, float rateTuning) -> size_t"""
        return _libvncxx.Packet_genWriteVelocityCompensationControl(errorDetectionMode, buffer, size, mode, velocityTuning, rateTuning)

    genWriteVelocityCompensationControl = staticmethod(genWriteVelocityCompensationControl)

    def genReadVelocityCompensationStatus(errorDetectionMode, buffer, size):
        """genReadVelocityCompensationStatus(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadVelocityCompensationStatus(errorDetectionMode, buffer, size)

    genReadVelocityCompensationStatus = staticmethod(genReadVelocityCompensationStatus)

    def genReadImuMeasurements(errorDetectionMode, buffer, size):
        """genReadImuMeasurements(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadImuMeasurements(errorDetectionMode, buffer, size)

    genReadImuMeasurements = staticmethod(genReadImuMeasurements)

    def genReadGpsConfiguration(errorDetectionMode, buffer, size):
        """genReadGpsConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadGpsConfiguration(errorDetectionMode, buffer, size)

    genReadGpsConfiguration = staticmethod(genReadGpsConfiguration)

    def genWriteGpsConfiguration(errorDetectionMode, buffer, size, mode, ppsSource):
        """genWriteGpsConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t mode, uint8_t ppsSource) -> size_t"""
        return _libvncxx.Packet_genWriteGpsConfiguration(errorDetectionMode, buffer, size, mode, ppsSource)

    genWriteGpsConfiguration = staticmethod(genWriteGpsConfiguration)

    def genReadGpsAntennaOffset(errorDetectionMode, buffer, size):
        """genReadGpsAntennaOffset(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadGpsAntennaOffset(errorDetectionMode, buffer, size)

    genReadGpsAntennaOffset = staticmethod(genReadGpsAntennaOffset)

    def genWriteGpsAntennaOffset(errorDetectionMode, buffer, size, position):
        """genWriteGpsAntennaOffset(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f position) -> size_t"""
        return _libvncxx.Packet_genWriteGpsAntennaOffset(errorDetectionMode, buffer, size, position)

    genWriteGpsAntennaOffset = staticmethod(genWriteGpsAntennaOffset)

    def genReadGpsSolutionLla(errorDetectionMode, buffer, size):
        """genReadGpsSolutionLla(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadGpsSolutionLla(errorDetectionMode, buffer, size)

    genReadGpsSolutionLla = staticmethod(genReadGpsSolutionLla)

    def genReadGpsSolutionEcef(errorDetectionMode, buffer, size):
        """genReadGpsSolutionEcef(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadGpsSolutionEcef(errorDetectionMode, buffer, size)

    genReadGpsSolutionEcef = staticmethod(genReadGpsSolutionEcef)

    def genReadInsSolutionLla(errorDetectionMode, buffer, size):
        """genReadInsSolutionLla(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadInsSolutionLla(errorDetectionMode, buffer, size)

    genReadInsSolutionLla = staticmethod(genReadInsSolutionLla)

    def genReadInsSolutionEcef(errorDetectionMode, buffer, size):
        """genReadInsSolutionEcef(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadInsSolutionEcef(errorDetectionMode, buffer, size)

    genReadInsSolutionEcef = staticmethod(genReadInsSolutionEcef)

    def genReadInsBasicConfiguration(errorDetectionMode, buffer, size):
        """genReadInsBasicConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadInsBasicConfiguration(errorDetectionMode, buffer, size)

    genReadInsBasicConfiguration = staticmethod(genReadInsBasicConfiguration)

    def genWriteInsBasicConfiguration(errorDetectionMode, buffer, size, scenario, ahrsAiding, estBaseline):
        """genWriteInsBasicConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t scenario, uint8_t ahrsAiding, uint8_t estBaseline) -> size_t"""
        return _libvncxx.Packet_genWriteInsBasicConfiguration(errorDetectionMode, buffer, size, scenario, ahrsAiding, estBaseline)

    genWriteInsBasicConfiguration = staticmethod(genWriteInsBasicConfiguration)

    def genReadInsAdvancedConfiguration(errorDetectionMode, buffer, size):
        """genReadInsAdvancedConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadInsAdvancedConfiguration(errorDetectionMode, buffer, size)

    genReadInsAdvancedConfiguration = staticmethod(genReadInsAdvancedConfiguration)

    def genWriteInsAdvancedConfiguration(errorDetectionMode, buffer, size, useMag, usePres, posAtt, velAtt, velBias, useFoam, gpsCovType, velCount, velInit, moveOrigin, gpsTimeout, deltaLimitPos, deltaLimitVel, minPosUncertainty, minVelUncertainty):
        """genWriteInsAdvancedConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t useMag, uint8_t usePres, uint8_t posAtt, uint8_t velAtt, uint8_t velBias, uint8_t useFoam, uint8_t gpsCovType, uint8_t velCount, float velInit, float moveOrigin, float gpsTimeout, float deltaLimitPos, float deltaLimitVel, float minPosUncertainty, float minVelUncertainty) -> size_t"""
        return _libvncxx.Packet_genWriteInsAdvancedConfiguration(errorDetectionMode, buffer, size, useMag, usePres, posAtt, velAtt, velBias, useFoam, gpsCovType, velCount, velInit, moveOrigin, gpsTimeout, deltaLimitPos, deltaLimitVel, minPosUncertainty, minVelUncertainty)

    genWriteInsAdvancedConfiguration = staticmethod(genWriteInsAdvancedConfiguration)

    def genReadInsStateLla(errorDetectionMode, buffer, size):
        """genReadInsStateLla(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadInsStateLla(errorDetectionMode, buffer, size)

    genReadInsStateLla = staticmethod(genReadInsStateLla)

    def genReadInsStateEcef(errorDetectionMode, buffer, size):
        """genReadInsStateEcef(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadInsStateEcef(errorDetectionMode, buffer, size)

    genReadInsStateEcef = staticmethod(genReadInsStateEcef)

    def genReadStartupFilterBiasEstimate(errorDetectionMode, buffer, size):
        """genReadStartupFilterBiasEstimate(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadStartupFilterBiasEstimate(errorDetectionMode, buffer, size)

    genReadStartupFilterBiasEstimate = staticmethod(genReadStartupFilterBiasEstimate)

    def genWriteStartupFilterBiasEstimate(errorDetectionMode, buffer, size, gyroBias, accelBias, pressureBias):
        """genWriteStartupFilterBiasEstimate(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f gyroBias, vec3f accelBias, float pressureBias) -> size_t"""
        return _libvncxx.Packet_genWriteStartupFilterBiasEstimate(errorDetectionMode, buffer, size, gyroBias, accelBias, pressureBias)

    genWriteStartupFilterBiasEstimate = staticmethod(genWriteStartupFilterBiasEstimate)

    def genReadDeltaThetaAndDeltaVelocity(errorDetectionMode, buffer, size):
        """genReadDeltaThetaAndDeltaVelocity(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadDeltaThetaAndDeltaVelocity(errorDetectionMode, buffer, size)

    genReadDeltaThetaAndDeltaVelocity = staticmethod(genReadDeltaThetaAndDeltaVelocity)

    def genReadDeltaThetaAndDeltaVelocityConfiguration(errorDetectionMode, buffer, size):
        """genReadDeltaThetaAndDeltaVelocityConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadDeltaThetaAndDeltaVelocityConfiguration(errorDetectionMode, buffer, size)

    genReadDeltaThetaAndDeltaVelocityConfiguration = staticmethod(genReadDeltaThetaAndDeltaVelocityConfiguration)

    def genWriteDeltaThetaAndDeltaVelocityConfiguration(errorDetectionMode, buffer, size, integrationFrame, gyroCompensation, accelCompensation):
        """genWriteDeltaThetaAndDeltaVelocityConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t integrationFrame, uint8_t gyroCompensation, uint8_t accelCompensation) -> size_t"""
        return _libvncxx.Packet_genWriteDeltaThetaAndDeltaVelocityConfiguration(errorDetectionMode, buffer, size, integrationFrame, gyroCompensation, accelCompensation)

    genWriteDeltaThetaAndDeltaVelocityConfiguration = staticmethod(genWriteDeltaThetaAndDeltaVelocityConfiguration)

    def genReadReferenceVectorConfiguration(errorDetectionMode, buffer, size):
        """genReadReferenceVectorConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadReferenceVectorConfiguration(errorDetectionMode, buffer, size)

    genReadReferenceVectorConfiguration = staticmethod(genReadReferenceVectorConfiguration)

    def genWriteReferenceVectorConfiguration(errorDetectionMode, buffer, size, useMagModel, useGravityModel, recalcThreshold, year, position):
        """genWriteReferenceVectorConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t useMagModel, uint8_t useGravityModel, uint32_t recalcThreshold, float year, vec3d position) -> size_t"""
        return _libvncxx.Packet_genWriteReferenceVectorConfiguration(errorDetectionMode, buffer, size, useMagModel, useGravityModel, recalcThreshold, year, position)

    genWriteReferenceVectorConfiguration = staticmethod(genWriteReferenceVectorConfiguration)

    def genReadGyroCompensation(errorDetectionMode, buffer, size):
        """genReadGyroCompensation(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadGyroCompensation(errorDetectionMode, buffer, size)

    genReadGyroCompensation = staticmethod(genReadGyroCompensation)

    def genWriteGyroCompensation(errorDetectionMode, buffer, size, c, b):
        """genWriteGyroCompensation(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, mat3f c, vec3f b) -> size_t"""
        return _libvncxx.Packet_genWriteGyroCompensation(errorDetectionMode, buffer, size, c, b)

    genWriteGyroCompensation = staticmethod(genWriteGyroCompensation)

    def genReadImuFilteringConfiguration(errorDetectionMode, buffer, size):
        """genReadImuFilteringConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadImuFilteringConfiguration(errorDetectionMode, buffer, size)

    genReadImuFilteringConfiguration = staticmethod(genReadImuFilteringConfiguration)

    def genWriteImuFilteringConfiguration(errorDetectionMode, buffer, size, magWindowSize, accelWindowSize, gyroWindowSize, tempWindowSize, presWindowSize, magFilterMode, accelFilterMode, gyroFilterMode, tempFilterMode, presFilterMode):
        """genWriteImuFilteringConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint16_t magWindowSize, uint16_t accelWindowSize, uint16_t gyroWindowSize, uint16_t tempWindowSize, uint16_t presWindowSize, uint8_t magFilterMode, uint8_t accelFilterMode, uint8_t gyroFilterMode, uint8_t tempFilterMode, uint8_t presFilterMode) -> size_t"""
        return _libvncxx.Packet_genWriteImuFilteringConfiguration(errorDetectionMode, buffer, size, magWindowSize, accelWindowSize, gyroWindowSize, tempWindowSize, presWindowSize, magFilterMode, accelFilterMode, gyroFilterMode, tempFilterMode, presFilterMode)

    genWriteImuFilteringConfiguration = staticmethod(genWriteImuFilteringConfiguration)

    def genReadGpsCompassBaseline(errorDetectionMode, buffer, size):
        """genReadGpsCompassBaseline(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadGpsCompassBaseline(errorDetectionMode, buffer, size)

    genReadGpsCompassBaseline = staticmethod(genReadGpsCompassBaseline)

    def genWriteGpsCompassBaseline(errorDetectionMode, buffer, size, position, uncertainty):
        """genWriteGpsCompassBaseline(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f position, vec3f uncertainty) -> size_t"""
        return _libvncxx.Packet_genWriteGpsCompassBaseline(errorDetectionMode, buffer, size, position, uncertainty)

    genWriteGpsCompassBaseline = staticmethod(genWriteGpsCompassBaseline)

    def genReadGpsCompassEstimatedBaseline(errorDetectionMode, buffer, size):
        """genReadGpsCompassEstimatedBaseline(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadGpsCompassEstimatedBaseline(errorDetectionMode, buffer, size)

    genReadGpsCompassEstimatedBaseline = staticmethod(genReadGpsCompassEstimatedBaseline)

    def genReadImuRateConfiguration(errorDetectionMode, buffer, size):
        """genReadImuRateConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadImuRateConfiguration(errorDetectionMode, buffer, size)

    genReadImuRateConfiguration = staticmethod(genReadImuRateConfiguration)

    def genWriteImuRateConfiguration(errorDetectionMode, buffer, size, imuRate, navDivisor, filterTargetRate, filterMinRate):
        """genWriteImuRateConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint16_t imuRate, uint16_t navDivisor, float filterTargetRate, float filterMinRate) -> size_t"""
        return _libvncxx.Packet_genWriteImuRateConfiguration(errorDetectionMode, buffer, size, imuRate, navDivisor, filterTargetRate, filterMinRate)

    genWriteImuRateConfiguration = staticmethod(genWriteImuRateConfiguration)

    def genReadYawPitchRollTrueBodyAccelerationAndAngularRates(errorDetectionMode, buffer, size):
        """genReadYawPitchRollTrueBodyAccelerationAndAngularRates(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadYawPitchRollTrueBodyAccelerationAndAngularRates(errorDetectionMode, buffer, size)

    genReadYawPitchRollTrueBodyAccelerationAndAngularRates = staticmethod(genReadYawPitchRollTrueBodyAccelerationAndAngularRates)

    def genReadYawPitchRollTrueInertialAccelerationAndAngularRates(errorDetectionMode, buffer, size):
        """genReadYawPitchRollTrueInertialAccelerationAndAngularRates(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
        return _libvncxx.Packet_genReadYawPitchRollTrueInertialAccelerationAndAngularRates(errorDetectionMode, buffer, size)

    genReadYawPitchRollTrueInertialAccelerationAndAngularRates = staticmethod(genReadYawPitchRollTrueInertialAccelerationAndAngularRates)

    def parseVNYPR(self, yawPitchRoll):
        """parseVNYPR(Packet self, vec3f yawPitchRoll)"""
        return _libvncxx.Packet_parseVNYPR(self, yawPitchRoll)


    def parseVNQTN(self, quaternion):
        """parseVNQTN(Packet self, vec4f quaternion)"""
        return _libvncxx.Packet_parseVNQTN(self, quaternion)


    def parseVNQMR(self, quaternion, magnetic, acceleration, angularRate):
        """parseVNQMR(Packet self, vec4f quaternion, vec3f magnetic, vec3f acceleration, vec3f angularRate)"""
        return _libvncxx.Packet_parseVNQMR(self, quaternion, magnetic, acceleration, angularRate)


    def parseVNMAG(self, magnetic):
        """parseVNMAG(Packet self, vec3f magnetic)"""
        return _libvncxx.Packet_parseVNMAG(self, magnetic)


    def parseVNACC(self, acceleration):
        """parseVNACC(Packet self, vec3f acceleration)"""
        return _libvncxx.Packet_parseVNACC(self, acceleration)


    def parseVNGYR(self, angularRate):
        """parseVNGYR(Packet self, vec3f angularRate)"""
        return _libvncxx.Packet_parseVNGYR(self, angularRate)


    def parseVNMAR(self, magnetic, acceleration, angularRate):
        """parseVNMAR(Packet self, vec3f magnetic, vec3f acceleration, vec3f angularRate)"""
        return _libvncxx.Packet_parseVNMAR(self, magnetic, acceleration, angularRate)


    def parseVNYMR(self, yawPitchRoll, magnetic, acceleration, angularRate):
        """parseVNYMR(Packet self, vec3f yawPitchRoll, vec3f magnetic, vec3f acceleration, vec3f angularRate)"""
        return _libvncxx.Packet_parseVNYMR(self, yawPitchRoll, magnetic, acceleration, angularRate)


    def parseVNYBA(self, yawPitchRoll, accelerationBody, angularRate):
        """parseVNYBA(Packet self, vec3f yawPitchRoll, vec3f accelerationBody, vec3f angularRate)"""
        return _libvncxx.Packet_parseVNYBA(self, yawPitchRoll, accelerationBody, angularRate)


    def parseVNYIA(self, yawPitchRoll, accelerationInertial, angularRate):
        """parseVNYIA(Packet self, vec3f yawPitchRoll, vec3f accelerationInertial, vec3f angularRate)"""
        return _libvncxx.Packet_parseVNYIA(self, yawPitchRoll, accelerationInertial, angularRate)


    def parseVNIMU(self, magneticUncompensated, accelerationUncompensated, angularRateUncompensated, temperature, pressure):
        """parseVNIMU(Packet self, vec3f magneticUncompensated, vec3f accelerationUncompensated, vec3f angularRateUncompensated, float * temperature, float * pressure)"""
        return _libvncxx.Packet_parseVNIMU(self, magneticUncompensated, accelerationUncompensated, angularRateUncompensated, temperature, pressure)


    def parseVNGPS(self, time, week, gpsFix, numSats, lla, nedVel, nedAcc, speedAcc, timeAcc):
        """parseVNGPS(Packet self, double * time, uint16_t * week, uint8_t * gpsFix, uint8_t * numSats, vec3d lla, vec3f nedVel, vec3f nedAcc, float * speedAcc, float * timeAcc)"""
        return _libvncxx.Packet_parseVNGPS(self, time, week, gpsFix, numSats, lla, nedVel, nedAcc, speedAcc, timeAcc)


    def parseVNINS(self, time, week, status, yawPitchRoll, lla, nedVel, attUncertainty, posUncertainty, velUncertainty):
        """parseVNINS(Packet self, double * time, uint16_t * week, uint16_t * status, vec3f yawPitchRoll, vec3d lla, vec3f nedVel, float * attUncertainty, float * posUncertainty, float * velUncertainty)"""
        return _libvncxx.Packet_parseVNINS(self, time, week, status, yawPitchRoll, lla, nedVel, attUncertainty, posUncertainty, velUncertainty)


    def parseVNINE(self, time, week, status, ypr, position, velocity, attUncertainty, posUncertainty, velUncertainty):
        """parseVNINE(Packet self, double * time, uint16_t * week, uint16_t * status, vec3f ypr, vec3d position, vec3f velocity, float * attUncertainty, float * posUncertainty, float * velUncertainty)"""
        return _libvncxx.Packet_parseVNINE(self, time, week, status, ypr, position, velocity, attUncertainty, posUncertainty, velUncertainty)


    def parseVNISL(self, ypr, lla, velocity, acceleration, angularRate):
        """parseVNISL(Packet self, vec3f ypr, vec3d lla, vec3f velocity, vec3f acceleration, vec3f angularRate)"""
        return _libvncxx.Packet_parseVNISL(self, ypr, lla, velocity, acceleration, angularRate)


    def parseVNISE(self, ypr, position, velocity, acceleration, angularRate):
        """parseVNISE(Packet self, vec3f ypr, vec3d position, vec3f velocity, vec3f acceleration, vec3f angularRate)"""
        return _libvncxx.Packet_parseVNISE(self, ypr, position, velocity, acceleration, angularRate)


    def parseVNGPE(self, tow, week, gpsFix, numSats, position, velocity, posAcc, speedAcc, timeAcc):
        """parseVNGPE(Packet self, double * tow, uint16_t * week, uint8_t * gpsFix, uint8_t * numSats, vec3d position, vec3f velocity, vec3f posAcc, float * speedAcc, float * timeAcc)"""
        return _libvncxx.Packet_parseVNGPE(self, tow, week, gpsFix, numSats, position, velocity, posAcc, speedAcc, timeAcc)


    def parseVNDTV(self, deltaTime, deltaTheta, deltaVelocity):
        """parseVNDTV(Packet self, float * deltaTime, vec3f deltaTheta, vec3f deltaVelocity)"""
        return _libvncxx.Packet_parseVNDTV(self, deltaTime, deltaTheta, deltaVelocity)


    def parseBinaryOutput(self, asyncMode, rateDivisor, outputGroup, commonField, timeField, imuField, gpsField, attitudeField, insField):
        """parseBinaryOutput(Packet self, uint16_t * asyncMode, uint16_t * rateDivisor, uint16_t * outputGroup, uint16_t * commonField, uint16_t * timeField, uint16_t * imuField, uint16_t * gpsField, uint16_t * attitudeField, uint16_t * insField)"""
        return _libvncxx.Packet_parseBinaryOutput(self, asyncMode, rateDivisor, outputGroup, commonField, timeField, imuField, gpsField, attitudeField, insField)


    def parseUserTag(self, tag):
        """parseUserTag(Packet self, char * tag)"""
        return _libvncxx.Packet_parseUserTag(self, tag)


    def parseModelNumber(self, productName):
        """parseModelNumber(Packet self, char * productName)"""
        return _libvncxx.Packet_parseModelNumber(self, productName)


    def parseHardwareRevision(self, revision):
        """parseHardwareRevision(Packet self, uint32_t * revision)"""
        return _libvncxx.Packet_parseHardwareRevision(self, revision)


    def parseSerialNumber(self, serialNum):
        """parseSerialNumber(Packet self, uint32_t * serialNum)"""
        return _libvncxx.Packet_parseSerialNumber(self, serialNum)


    def parseFirmwareVersion(self, firmwareVersion):
        """parseFirmwareVersion(Packet self, char * firmwareVersion)"""
        return _libvncxx.Packet_parseFirmwareVersion(self, firmwareVersion)


    def parseSerialBaudRate(self, baudrate):
        """parseSerialBaudRate(Packet self, uint32_t * baudrate)"""
        return _libvncxx.Packet_parseSerialBaudRate(self, baudrate)


    def parseAsyncDataOutputType(self, ador):
        """parseAsyncDataOutputType(Packet self, uint32_t * ador)"""
        return _libvncxx.Packet_parseAsyncDataOutputType(self, ador)


    def parseAsyncDataOutputFrequency(self, adof):
        """parseAsyncDataOutputFrequency(Packet self, uint32_t * adof)"""
        return _libvncxx.Packet_parseAsyncDataOutputFrequency(self, adof)


    def parseYawPitchRoll(self, yawPitchRoll):
        """parseYawPitchRoll(Packet self, vec3f yawPitchRoll)"""
        return _libvncxx.Packet_parseYawPitchRoll(self, yawPitchRoll)


    def parseAttitudeQuaternion(self, quat):
        """parseAttitudeQuaternion(Packet self, vec4f quat)"""
        return _libvncxx.Packet_parseAttitudeQuaternion(self, quat)


    def parseQuaternionMagneticAccelerationAndAngularRates(self, quat, mag, accel, gyro):
        """parseQuaternionMagneticAccelerationAndAngularRates(Packet self, vec4f quat, vec3f mag, vec3f accel, vec3f gyro)"""
        return _libvncxx.Packet_parseQuaternionMagneticAccelerationAndAngularRates(self, quat, mag, accel, gyro)


    def parseMagneticMeasurements(self, mag):
        """parseMagneticMeasurements(Packet self, vec3f mag)"""
        return _libvncxx.Packet_parseMagneticMeasurements(self, mag)


    def parseAccelerationMeasurements(self, accel):
        """parseAccelerationMeasurements(Packet self, vec3f accel)"""
        return _libvncxx.Packet_parseAccelerationMeasurements(self, accel)


    def parseAngularRateMeasurements(self, gyro):
        """parseAngularRateMeasurements(Packet self, vec3f gyro)"""
        return _libvncxx.Packet_parseAngularRateMeasurements(self, gyro)


    def parseMagneticAccelerationAndAngularRates(self, mag, accel, gyro):
        """parseMagneticAccelerationAndAngularRates(Packet self, vec3f mag, vec3f accel, vec3f gyro)"""
        return _libvncxx.Packet_parseMagneticAccelerationAndAngularRates(self, mag, accel, gyro)


    def parseMagneticAndGravityReferenceVectors(self, magRef, accRef):
        """parseMagneticAndGravityReferenceVectors(Packet self, vec3f magRef, vec3f accRef)"""
        return _libvncxx.Packet_parseMagneticAndGravityReferenceVectors(self, magRef, accRef)


    def parseFilterMeasurementsVarianceParameters(self, angularWalkVariance, angularRateVariance, magneticVariance, accelerationVariance):
        """parseFilterMeasurementsVarianceParameters(Packet self, float * angularWalkVariance, vec3f angularRateVariance, vec3f magneticVariance, vec3f accelerationVariance)"""
        return _libvncxx.Packet_parseFilterMeasurementsVarianceParameters(self, angularWalkVariance, angularRateVariance, magneticVariance, accelerationVariance)


    def parseMagnetometerCompensation(self, c, b):
        """parseMagnetometerCompensation(Packet self, mat3f c, vec3f b)"""
        return _libvncxx.Packet_parseMagnetometerCompensation(self, c, b)


    def parseFilterActiveTuningParameters(self, magneticDisturbanceGain, accelerationDisturbanceGain, magneticDisturbanceMemory, accelerationDisturbanceMemory):
        """parseFilterActiveTuningParameters(Packet self, float * magneticDisturbanceGain, float * accelerationDisturbanceGain, float * magneticDisturbanceMemory, float * accelerationDisturbanceMemory)"""
        return _libvncxx.Packet_parseFilterActiveTuningParameters(self, magneticDisturbanceGain, accelerationDisturbanceGain, magneticDisturbanceMemory, accelerationDisturbanceMemory)


    def parseAccelerationCompensation(self, c, b):
        """parseAccelerationCompensation(Packet self, mat3f c, vec3f b)"""
        return _libvncxx.Packet_parseAccelerationCompensation(self, c, b)


    def parseReferenceFrameRotation(self, c):
        """parseReferenceFrameRotation(Packet self, mat3f c)"""
        return _libvncxx.Packet_parseReferenceFrameRotation(self, c)


    def parseYawPitchRollMagneticAccelerationAndAngularRates(self, yawPitchRoll, mag, accel, gyro):
        """parseYawPitchRollMagneticAccelerationAndAngularRates(Packet self, vec3f yawPitchRoll, vec3f mag, vec3f accel, vec3f gyro)"""
        return _libvncxx.Packet_parseYawPitchRollMagneticAccelerationAndAngularRates(self, yawPitchRoll, mag, accel, gyro)


    def parseCommunicationProtocolControl(self, serialCount, serialStatus, spiCount, spiStatus, serialChecksum, spiChecksum, errorMode):
        """parseCommunicationProtocolControl(Packet self, uint8_t * serialCount, uint8_t * serialStatus, uint8_t * spiCount, uint8_t * spiStatus, uint8_t * serialChecksum, uint8_t * spiChecksum, uint8_t * errorMode)"""
        return _libvncxx.Packet_parseCommunicationProtocolControl(self, serialCount, serialStatus, spiCount, spiStatus, serialChecksum, spiChecksum, errorMode)


    def parseSynchronizationControl(self, syncInMode, syncInEdge, syncInSkipFactor, syncOutMode, syncOutPolarity, syncOutSkipFactor, syncOutPulseWidth):
        """parseSynchronizationControl(Packet self, uint8_t * syncInMode, uint8_t * syncInEdge, uint16_t * syncInSkipFactor, uint8_t * syncOutMode, uint8_t * syncOutPolarity, uint16_t * syncOutSkipFactor, uint32_t * syncOutPulseWidth)"""
        return _libvncxx.Packet_parseSynchronizationControl(self, syncInMode, syncInEdge, syncInSkipFactor, syncOutMode, syncOutPolarity, syncOutSkipFactor, syncOutPulseWidth)


    def parseSynchronizationStatus(self, syncInCount, syncInTime, syncOutCount):
        """parseSynchronizationStatus(Packet self, uint32_t * syncInCount, uint32_t * syncInTime, uint32_t * syncOutCount)"""
        return _libvncxx.Packet_parseSynchronizationStatus(self, syncInCount, syncInTime, syncOutCount)


    def parseFilterBasicControl(self, magMode, extMagMode, extAccMode, extGyroMode, gyroLimit):
        """parseFilterBasicControl(Packet self, uint8_t * magMode, uint8_t * extMagMode, uint8_t * extAccMode, uint8_t * extGyroMode, vec3f gyroLimit)"""
        return _libvncxx.Packet_parseFilterBasicControl(self, magMode, extMagMode, extAccMode, extGyroMode, gyroLimit)


    def parseVpeBasicControl(self, enable, headingMode, filteringMode, tuningMode):
        """parseVpeBasicControl(Packet self, uint8_t * enable, uint8_t * headingMode, uint8_t * filteringMode, uint8_t * tuningMode)"""
        return _libvncxx.Packet_parseVpeBasicControl(self, enable, headingMode, filteringMode, tuningMode)


    def parseVpeMagnetometerBasicTuning(self, baseTuning, adaptiveTuning, adaptiveFiltering):
        """parseVpeMagnetometerBasicTuning(Packet self, vec3f baseTuning, vec3f adaptiveTuning, vec3f adaptiveFiltering)"""
        return _libvncxx.Packet_parseVpeMagnetometerBasicTuning(self, baseTuning, adaptiveTuning, adaptiveFiltering)


    def parseVpeMagnetometerAdvancedTuning(self, minFiltering, maxFiltering, maxAdaptRate, disturbanceWindow, maxTuning):
        """parseVpeMagnetometerAdvancedTuning(Packet self, vec3f minFiltering, vec3f maxFiltering, float * maxAdaptRate, float * disturbanceWindow, float * maxTuning)"""
        return _libvncxx.Packet_parseVpeMagnetometerAdvancedTuning(self, minFiltering, maxFiltering, maxAdaptRate, disturbanceWindow, maxTuning)


    def parseVpeAccelerometerBasicTuning(self, baseTuning, adaptiveTuning, adaptiveFiltering):
        """parseVpeAccelerometerBasicTuning(Packet self, vec3f baseTuning, vec3f adaptiveTuning, vec3f adaptiveFiltering)"""
        return _libvncxx.Packet_parseVpeAccelerometerBasicTuning(self, baseTuning, adaptiveTuning, adaptiveFiltering)


    def parseVpeAccelerometerAdvancedTuning(self, minFiltering, maxFiltering, maxAdaptRate, disturbanceWindow, maxTuning):
        """parseVpeAccelerometerAdvancedTuning(Packet self, vec3f minFiltering, vec3f maxFiltering, float * maxAdaptRate, float * disturbanceWindow, float * maxTuning)"""
        return _libvncxx.Packet_parseVpeAccelerometerAdvancedTuning(self, minFiltering, maxFiltering, maxAdaptRate, disturbanceWindow, maxTuning)


    def parseVpeGyroBasicTuning(self, angularWalkVariance, baseTuning, adaptiveTuning):
        """parseVpeGyroBasicTuning(Packet self, vec3f angularWalkVariance, vec3f baseTuning, vec3f adaptiveTuning)"""
        return _libvncxx.Packet_parseVpeGyroBasicTuning(self, angularWalkVariance, baseTuning, adaptiveTuning)


    def parseFilterStartupGyroBias(self, bias):
        """parseFilterStartupGyroBias(Packet self, vec3f bias)"""
        return _libvncxx.Packet_parseFilterStartupGyroBias(self, bias)


    def parseMagnetometerCalibrationControl(self, hsiMode, hsiOutput, convergeRate):
        """parseMagnetometerCalibrationControl(Packet self, uint8_t * hsiMode, uint8_t * hsiOutput, uint8_t * convergeRate)"""
        return _libvncxx.Packet_parseMagnetometerCalibrationControl(self, hsiMode, hsiOutput, convergeRate)


    def parseCalculatedMagnetometerCalibration(self, c, b):
        """parseCalculatedMagnetometerCalibration(Packet self, mat3f c, vec3f b)"""
        return _libvncxx.Packet_parseCalculatedMagnetometerCalibration(self, c, b)


    def parseIndoorHeadingModeControl(self, maxRateError):
        """parseIndoorHeadingModeControl(Packet self, float * maxRateError)"""
        return _libvncxx.Packet_parseIndoorHeadingModeControl(self, maxRateError)


    def parseVelocityCompensationMeasurement(self, velocity):
        """parseVelocityCompensationMeasurement(Packet self, vec3f velocity)"""
        return _libvncxx.Packet_parseVelocityCompensationMeasurement(self, velocity)


    def parseVelocityCompensationControl(self, mode, velocityTuning, rateTuning):
        """parseVelocityCompensationControl(Packet self, uint8_t * mode, float * velocityTuning, float * rateTuning)"""
        return _libvncxx.Packet_parseVelocityCompensationControl(self, mode, velocityTuning, rateTuning)


    def parseVelocityCompensationStatus(self, x, xDot, accelOffset, omega):
        """parseVelocityCompensationStatus(Packet self, float * x, float * xDot, vec3f accelOffset, vec3f omega)"""
        return _libvncxx.Packet_parseVelocityCompensationStatus(self, x, xDot, accelOffset, omega)


    def parseImuMeasurements(self, mag, accel, gyro, temp, pressure):
        """parseImuMeasurements(Packet self, vec3f mag, vec3f accel, vec3f gyro, float * temp, float * pressure)"""
        return _libvncxx.Packet_parseImuMeasurements(self, mag, accel, gyro, temp, pressure)


    def parseGpsConfiguration(self, mode, ppsSource):
        """parseGpsConfiguration(Packet self, uint8_t * mode, uint8_t * ppsSource)"""
        return _libvncxx.Packet_parseGpsConfiguration(self, mode, ppsSource)


    def parseGpsAntennaOffset(self, position):
        """parseGpsAntennaOffset(Packet self, vec3f position)"""
        return _libvncxx.Packet_parseGpsAntennaOffset(self, position)


    def parseGpsSolutionLla(self, time, week, gpsFix, numSats, lla, nedVel, nedAcc, speedAcc, timeAcc):
        """parseGpsSolutionLla(Packet self, double * time, uint16_t * week, uint8_t * gpsFix, uint8_t * numSats, vec3d lla, vec3f nedVel, vec3f nedAcc, float * speedAcc, float * timeAcc)"""
        return _libvncxx.Packet_parseGpsSolutionLla(self, time, week, gpsFix, numSats, lla, nedVel, nedAcc, speedAcc, timeAcc)


    def parseGpsSolutionEcef(self, tow, week, gpsFix, numSats, position, velocity, posAcc, speedAcc, timeAcc):
        """parseGpsSolutionEcef(Packet self, double * tow, uint16_t * week, uint8_t * gpsFix, uint8_t * numSats, vec3d position, vec3f velocity, vec3f posAcc, float * speedAcc, float * timeAcc)"""
        return _libvncxx.Packet_parseGpsSolutionEcef(self, tow, week, gpsFix, numSats, position, velocity, posAcc, speedAcc, timeAcc)


    def parseInsSolutionLla(self, time, week, status, yawPitchRoll, position, nedVel, attUncertainty, posUncertainty, velUncertainty):
        """parseInsSolutionLla(Packet self, double * time, uint16_t * week, uint16_t * status, vec3f yawPitchRoll, vec3d position, vec3f nedVel, float * attUncertainty, float * posUncertainty, float * velUncertainty)"""
        return _libvncxx.Packet_parseInsSolutionLla(self, time, week, status, yawPitchRoll, position, nedVel, attUncertainty, posUncertainty, velUncertainty)


    def parseInsSolutionEcef(self, time, week, status, yawPitchRoll, position, velocity, attUncertainty, posUncertainty, velUncertainty):
        """parseInsSolutionEcef(Packet self, double * time, uint16_t * week, uint16_t * status, vec3f yawPitchRoll, vec3d position, vec3f velocity, float * attUncertainty, float * posUncertainty, float * velUncertainty)"""
        return _libvncxx.Packet_parseInsSolutionEcef(self, time, week, status, yawPitchRoll, position, velocity, attUncertainty, posUncertainty, velUncertainty)


    def parseInsBasicConfiguration(self, *args):
        """
        parseInsBasicConfiguration(Packet self, uint8_t * scenario, uint8_t * ahrsAiding)
        parseInsBasicConfiguration(Packet self, uint8_t * scenario, uint8_t * ahrsAiding, uint8_t * estBaseline)
        """
        return _libvncxx.Packet_parseInsBasicConfiguration(self, *args)


    def parseInsAdvancedConfiguration(self, useMag, usePres, posAtt, velAtt, velBias, useFoam, gpsCovType, velCount, velInit, moveOrigin, gpsTimeout, deltaLimitPos, deltaLimitVel, minPosUncertainty, minVelUncertainty):
        """parseInsAdvancedConfiguration(Packet self, uint8_t * useMag, uint8_t * usePres, uint8_t * posAtt, uint8_t * velAtt, uint8_t * velBias, uint8_t * useFoam, uint8_t * gpsCovType, uint8_t * velCount, float * velInit, float * moveOrigin, float * gpsTimeout, float * deltaLimitPos, float * deltaLimitVel, float * minPosUncertainty, float * minVelUncertainty)"""
        return _libvncxx.Packet_parseInsAdvancedConfiguration(self, useMag, usePres, posAtt, velAtt, velBias, useFoam, gpsCovType, velCount, velInit, moveOrigin, gpsTimeout, deltaLimitPos, deltaLimitVel, minPosUncertainty, minVelUncertainty)


    def parseInsStateLla(self, yawPitchRoll, position, velocity, accel, angularRate):
        """parseInsStateLla(Packet self, vec3f yawPitchRoll, vec3d position, vec3f velocity, vec3f accel, vec3f angularRate)"""
        return _libvncxx.Packet_parseInsStateLla(self, yawPitchRoll, position, velocity, accel, angularRate)


    def parseInsStateEcef(self, yawPitchRoll, position, velocity, accel, angularRate):
        """parseInsStateEcef(Packet self, vec3f yawPitchRoll, vec3d position, vec3f velocity, vec3f accel, vec3f angularRate)"""
        return _libvncxx.Packet_parseInsStateEcef(self, yawPitchRoll, position, velocity, accel, angularRate)


    def parseStartupFilterBiasEstimate(self, gyroBias, accelBias, pressureBias):
        """parseStartupFilterBiasEstimate(Packet self, vec3f gyroBias, vec3f accelBias, float * pressureBias)"""
        return _libvncxx.Packet_parseStartupFilterBiasEstimate(self, gyroBias, accelBias, pressureBias)


    def parseDeltaThetaAndDeltaVelocity(self, deltaTime, deltaTheta, deltaVelocity):
        """parseDeltaThetaAndDeltaVelocity(Packet self, float * deltaTime, vec3f deltaTheta, vec3f deltaVelocity)"""
        return _libvncxx.Packet_parseDeltaThetaAndDeltaVelocity(self, deltaTime, deltaTheta, deltaVelocity)


    def parseDeltaThetaAndDeltaVelocityConfiguration(self, integrationFrame, gyroCompensation, accelCompensation):
        """parseDeltaThetaAndDeltaVelocityConfiguration(Packet self, uint8_t * integrationFrame, uint8_t * gyroCompensation, uint8_t * accelCompensation)"""
        return _libvncxx.Packet_parseDeltaThetaAndDeltaVelocityConfiguration(self, integrationFrame, gyroCompensation, accelCompensation)


    def parseReferenceVectorConfiguration(self, useMagModel, useGravityModel, recalcThreshold, year, position):
        """parseReferenceVectorConfiguration(Packet self, uint8_t * useMagModel, uint8_t * useGravityModel, uint32_t * recalcThreshold, float * year, vec3d position)"""
        return _libvncxx.Packet_parseReferenceVectorConfiguration(self, useMagModel, useGravityModel, recalcThreshold, year, position)


    def parseGyroCompensation(self, c, b):
        """parseGyroCompensation(Packet self, mat3f c, vec3f b)"""
        return _libvncxx.Packet_parseGyroCompensation(self, c, b)


    def parseImuFilteringConfiguration(self, magWindowSize, accelWindowSize, gyroWindowSize, tempWindowSize, presWindowSize, magFilterMode, accelFilterMode, gyroFilterMode, tempFilterMode, presFilterMode):
        """parseImuFilteringConfiguration(Packet self, uint16_t * magWindowSize, uint16_t * accelWindowSize, uint16_t * gyroWindowSize, uint16_t * tempWindowSize, uint16_t * presWindowSize, uint8_t * magFilterMode, uint8_t * accelFilterMode, uint8_t * gyroFilterMode, uint8_t * tempFilterMode, uint8_t * presFilterMode)"""
        return _libvncxx.Packet_parseImuFilteringConfiguration(self, magWindowSize, accelWindowSize, gyroWindowSize, tempWindowSize, presWindowSize, magFilterMode, accelFilterMode, gyroFilterMode, tempFilterMode, presFilterMode)


    def parseGpsCompassBaseline(self, position, uncertainty):
        """parseGpsCompassBaseline(Packet self, vec3f position, vec3f uncertainty)"""
        return _libvncxx.Packet_parseGpsCompassBaseline(self, position, uncertainty)


    def parseGpsCompassEstimatedBaseline(self, estBaselineUsed, numMeas, position, uncertainty):
        """parseGpsCompassEstimatedBaseline(Packet self, uint8_t * estBaselineUsed, uint16_t * numMeas, vec3f position, vec3f uncertainty)"""
        return _libvncxx.Packet_parseGpsCompassEstimatedBaseline(self, estBaselineUsed, numMeas, position, uncertainty)


    def parseImuRateConfiguration(self, imuRate, navDivisor, filterTargetRate, filterMinRate):
        """parseImuRateConfiguration(Packet self, uint16_t * imuRate, uint16_t * navDivisor, float * filterTargetRate, float * filterMinRate)"""
        return _libvncxx.Packet_parseImuRateConfiguration(self, imuRate, navDivisor, filterTargetRate, filterMinRate)


    def parseYawPitchRollTrueBodyAccelerationAndAngularRates(self, yawPitchRoll, bodyAccel, gyro):
        """parseYawPitchRollTrueBodyAccelerationAndAngularRates(Packet self, vec3f yawPitchRoll, vec3f bodyAccel, vec3f gyro)"""
        return _libvncxx.Packet_parseYawPitchRollTrueBodyAccelerationAndAngularRates(self, yawPitchRoll, bodyAccel, gyro)


    def parseYawPitchRollTrueInertialAccelerationAndAngularRates(self, yawPitchRoll, inertialAccel, gyro):
        """parseYawPitchRollTrueInertialAccelerationAndAngularRates(Packet self, vec3f yawPitchRoll, vec3f inertialAccel, vec3f gyro)"""
        return _libvncxx.Packet_parseYawPitchRollTrueInertialAccelerationAndAngularRates(self, yawPitchRoll, inertialAccel, gyro)


    is_valid = property(__isValid)
    type = property(__type)
    datastr = property(__datastr)
    is_error = property(__isError)
    is_response = property(__isResponse)
    is_ascii_async = property(__isAsciiAsync)

    def __repr__(self):
    	return "<vnpy.Packet>"

Packet_swigregister = _libvncxx.Packet_swigregister
Packet_swigregister(Packet)
cvar = _libvncxx.cvar

def Packet_computeBinaryPacketLength(startOfPossibleBinaryPacket):
    """Packet_computeBinaryPacketLength(char const * startOfPossibleBinaryPacket) -> size_t"""
    return _libvncxx.Packet_computeBinaryPacketLength(startOfPossibleBinaryPacket)

def Packet_computeNumOfBytesForBinaryGroupPayload(group, groupField):
    """Packet_computeNumOfBytesForBinaryGroupPayload(BINARYGROUP group, uint16_t groupField) -> size_t"""
    return _libvncxx.Packet_computeNumOfBytesForBinaryGroupPayload(group, groupField)

def Packet_finalizeCommand(errorDetectionMode, packet, length):
    """Packet_finalizeCommand(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * packet, size_t length) -> size_t"""
    return _libvncxx.Packet_finalizeCommand(errorDetectionMode, packet, length)

def Packet_genReadBinaryOutput1(errorDetectionMode, buffer, size):
    """Packet_genReadBinaryOutput1(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadBinaryOutput1(errorDetectionMode, buffer, size)

def Packet_genReadBinaryOutput2(errorDetectionMode, buffer, size):
    """Packet_genReadBinaryOutput2(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadBinaryOutput2(errorDetectionMode, buffer, size)

def Packet_genReadBinaryOutput3(errorDetectionMode, buffer, size):
    """Packet_genReadBinaryOutput3(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadBinaryOutput3(errorDetectionMode, buffer, size)

def Packet_genWriteBinaryOutput1(errorDetectionMode, buffer, size, asyncMode, rateDivisor, commonField, timeField, imuField, gpsField, attitudeField, insField):
    """Packet_genWriteBinaryOutput1(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint16_t asyncMode, uint16_t rateDivisor, uint16_t commonField, uint16_t timeField, uint16_t imuField, uint16_t gpsField, uint16_t attitudeField, uint16_t insField) -> size_t"""
    return _libvncxx.Packet_genWriteBinaryOutput1(errorDetectionMode, buffer, size, asyncMode, rateDivisor, commonField, timeField, imuField, gpsField, attitudeField, insField)

def Packet_genWriteBinaryOutput2(errorDetectionMode, buffer, size, asyncMode, rateDivisor, commonField, timeField, imuField, gpsField, attitudeField, insField):
    """Packet_genWriteBinaryOutput2(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint16_t asyncMode, uint16_t rateDivisor, uint16_t commonField, uint16_t timeField, uint16_t imuField, uint16_t gpsField, uint16_t attitudeField, uint16_t insField) -> size_t"""
    return _libvncxx.Packet_genWriteBinaryOutput2(errorDetectionMode, buffer, size, asyncMode, rateDivisor, commonField, timeField, imuField, gpsField, attitudeField, insField)

def Packet_genWriteBinaryOutput3(errorDetectionMode, buffer, size, asyncMode, rateDivisor, commonField, timeField, imuField, gpsField, attitudeField, insField):
    """Packet_genWriteBinaryOutput3(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint16_t asyncMode, uint16_t rateDivisor, uint16_t commonField, uint16_t timeField, uint16_t imuField, uint16_t gpsField, uint16_t attitudeField, uint16_t insField) -> size_t"""
    return _libvncxx.Packet_genWriteBinaryOutput3(errorDetectionMode, buffer, size, asyncMode, rateDivisor, commonField, timeField, imuField, gpsField, attitudeField, insField)

def Packet_genWriteSettings(errorDetectionMode, buffer, size):
    """Packet_genWriteSettings(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genWriteSettings(errorDetectionMode, buffer, size)

def Packet_genTare(errorDetectionMode, buffer, size):
    """Packet_genTare(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genTare(errorDetectionMode, buffer, size)

def Packet_genKnownMagneticDisturbance(errorDetectionMode, buffer, size, isMagneticDisturbancePresent):
    """Packet_genKnownMagneticDisturbance(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, bool isMagneticDisturbancePresent) -> size_t"""
    return _libvncxx.Packet_genKnownMagneticDisturbance(errorDetectionMode, buffer, size, isMagneticDisturbancePresent)

def Packet_genKnownAccelerationDisturbance(errorDetectionMode, buffer, size, isAccelerationDisturbancePresent):
    """Packet_genKnownAccelerationDisturbance(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, bool isAccelerationDisturbancePresent) -> size_t"""
    return _libvncxx.Packet_genKnownAccelerationDisturbance(errorDetectionMode, buffer, size, isAccelerationDisturbancePresent)

def Packet_genSetGyroBias(errorDetectionMode, buffer, size):
    """Packet_genSetGyroBias(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genSetGyroBias(errorDetectionMode, buffer, size)

def Packet_genRestoreFactorySettings(errorDetectionMode, buffer, size):
    """Packet_genRestoreFactorySettings(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genRestoreFactorySettings(errorDetectionMode, buffer, size)

def Packet_genReset(errorDetectionMode, buffer, size):
    """Packet_genReset(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReset(errorDetectionMode, buffer, size)

def Packet_genReadUserTag(errorDetectionMode, buffer, size):
    """Packet_genReadUserTag(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadUserTag(errorDetectionMode, buffer, size)

def Packet_genWriteUserTag(errorDetectionMode, buffer, size, tag):
    """Packet_genWriteUserTag(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, std::string tag) -> size_t"""
    return _libvncxx.Packet_genWriteUserTag(errorDetectionMode, buffer, size, tag)

def Packet_genReadModelNumber(errorDetectionMode, buffer, size):
    """Packet_genReadModelNumber(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadModelNumber(errorDetectionMode, buffer, size)

def Packet_genReadHardwareRevision(errorDetectionMode, buffer, size):
    """Packet_genReadHardwareRevision(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadHardwareRevision(errorDetectionMode, buffer, size)

def Packet_genReadSerialNumber(errorDetectionMode, buffer, size):
    """Packet_genReadSerialNumber(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadSerialNumber(errorDetectionMode, buffer, size)

def Packet_genReadFirmwareVersion(errorDetectionMode, buffer, size):
    """Packet_genReadFirmwareVersion(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadFirmwareVersion(errorDetectionMode, buffer, size)

def Packet_genReadSerialBaudRate(*args):
    """
    genReadSerialBaudRate(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t port) -> size_t
    Packet_genReadSerialBaudRate(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t
    """
    return _libvncxx.Packet_genReadSerialBaudRate(*args)

def Packet_genWriteSerialBaudRate(*args):
    """
    genWriteSerialBaudRate(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint32_t baudrate, uint8_t port) -> size_t
    Packet_genWriteSerialBaudRate(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint32_t baudrate) -> size_t
    """
    return _libvncxx.Packet_genWriteSerialBaudRate(*args)

def Packet_genReadAsyncDataOutputType(*args):
    """
    genReadAsyncDataOutputType(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t port) -> size_t
    Packet_genReadAsyncDataOutputType(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t
    """
    return _libvncxx.Packet_genReadAsyncDataOutputType(*args)

def Packet_genWriteAsyncDataOutputType(*args):
    """
    genWriteAsyncDataOutputType(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint32_t ador, uint8_t port) -> size_t
    Packet_genWriteAsyncDataOutputType(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint32_t ador) -> size_t
    """
    return _libvncxx.Packet_genWriteAsyncDataOutputType(*args)

def Packet_genReadAsyncDataOutputFrequency(*args):
    """
    genReadAsyncDataOutputFrequency(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t port) -> size_t
    Packet_genReadAsyncDataOutputFrequency(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t
    """
    return _libvncxx.Packet_genReadAsyncDataOutputFrequency(*args)

def Packet_genWriteAsyncDataOutputFrequency(*args):
    """
    genWriteAsyncDataOutputFrequency(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint32_t adof, uint8_t port) -> size_t
    Packet_genWriteAsyncDataOutputFrequency(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint32_t adof) -> size_t
    """
    return _libvncxx.Packet_genWriteAsyncDataOutputFrequency(*args)

def Packet_genReadYawPitchRoll(errorDetectionMode, buffer, size):
    """Packet_genReadYawPitchRoll(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadYawPitchRoll(errorDetectionMode, buffer, size)

def Packet_genReadAttitudeQuaternion(errorDetectionMode, buffer, size):
    """Packet_genReadAttitudeQuaternion(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadAttitudeQuaternion(errorDetectionMode, buffer, size)

def Packet_genReadQuaternionMagneticAccelerationAndAngularRates(errorDetectionMode, buffer, size):
    """Packet_genReadQuaternionMagneticAccelerationAndAngularRates(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadQuaternionMagneticAccelerationAndAngularRates(errorDetectionMode, buffer, size)

def Packet_genReadMagneticMeasurements(errorDetectionMode, buffer, size):
    """Packet_genReadMagneticMeasurements(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadMagneticMeasurements(errorDetectionMode, buffer, size)

def Packet_genReadAccelerationMeasurements(errorDetectionMode, buffer, size):
    """Packet_genReadAccelerationMeasurements(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadAccelerationMeasurements(errorDetectionMode, buffer, size)

def Packet_genReadAngularRateMeasurements(errorDetectionMode, buffer, size):
    """Packet_genReadAngularRateMeasurements(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadAngularRateMeasurements(errorDetectionMode, buffer, size)

def Packet_genReadMagneticAccelerationAndAngularRates(errorDetectionMode, buffer, size):
    """Packet_genReadMagneticAccelerationAndAngularRates(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadMagneticAccelerationAndAngularRates(errorDetectionMode, buffer, size)

def Packet_genReadMagneticAndGravityReferenceVectors(errorDetectionMode, buffer, size):
    """Packet_genReadMagneticAndGravityReferenceVectors(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadMagneticAndGravityReferenceVectors(errorDetectionMode, buffer, size)

def Packet_genWriteMagneticAndGravityReferenceVectors(errorDetectionMode, buffer, size, magRef, accRef):
    """Packet_genWriteMagneticAndGravityReferenceVectors(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f magRef, vec3f accRef) -> size_t"""
    return _libvncxx.Packet_genWriteMagneticAndGravityReferenceVectors(errorDetectionMode, buffer, size, magRef, accRef)

def Packet_genReadFilterMeasurementsVarianceParameters(errorDetectionMode, buffer, size):
    """Packet_genReadFilterMeasurementsVarianceParameters(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadFilterMeasurementsVarianceParameters(errorDetectionMode, buffer, size)

def Packet_genWriteFilterMeasurementsVarianceParameters(errorDetectionMode, buffer, size, angularWalkVariance, angularRateVariance, magneticVariance, accelerationVariance):
    """Packet_genWriteFilterMeasurementsVarianceParameters(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, float angularWalkVariance, vec3f angularRateVariance, vec3f magneticVariance, vec3f accelerationVariance) -> size_t"""
    return _libvncxx.Packet_genWriteFilterMeasurementsVarianceParameters(errorDetectionMode, buffer, size, angularWalkVariance, angularRateVariance, magneticVariance, accelerationVariance)

def Packet_genReadMagnetometerCompensation(errorDetectionMode, buffer, size):
    """Packet_genReadMagnetometerCompensation(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadMagnetometerCompensation(errorDetectionMode, buffer, size)

def Packet_genWriteMagnetometerCompensation(errorDetectionMode, buffer, size, c, b):
    """Packet_genWriteMagnetometerCompensation(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, mat3f c, vec3f b) -> size_t"""
    return _libvncxx.Packet_genWriteMagnetometerCompensation(errorDetectionMode, buffer, size, c, b)

def Packet_genReadFilterActiveTuningParameters(errorDetectionMode, buffer, size):
    """Packet_genReadFilterActiveTuningParameters(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadFilterActiveTuningParameters(errorDetectionMode, buffer, size)

def Packet_genWriteFilterActiveTuningParameters(errorDetectionMode, buffer, size, magneticDisturbanceGain, accelerationDisturbanceGain, magneticDisturbanceMemory, accelerationDisturbanceMemory):
    """Packet_genWriteFilterActiveTuningParameters(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, float magneticDisturbanceGain, float accelerationDisturbanceGain, float magneticDisturbanceMemory, float accelerationDisturbanceMemory) -> size_t"""
    return _libvncxx.Packet_genWriteFilterActiveTuningParameters(errorDetectionMode, buffer, size, magneticDisturbanceGain, accelerationDisturbanceGain, magneticDisturbanceMemory, accelerationDisturbanceMemory)

def Packet_genReadAccelerationCompensation(errorDetectionMode, buffer, size):
    """Packet_genReadAccelerationCompensation(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadAccelerationCompensation(errorDetectionMode, buffer, size)

def Packet_genWriteAccelerationCompensation(errorDetectionMode, buffer, size, c, b):
    """Packet_genWriteAccelerationCompensation(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, mat3f c, vec3f b) -> size_t"""
    return _libvncxx.Packet_genWriteAccelerationCompensation(errorDetectionMode, buffer, size, c, b)

def Packet_genReadReferenceFrameRotation(errorDetectionMode, buffer, size):
    """Packet_genReadReferenceFrameRotation(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadReferenceFrameRotation(errorDetectionMode, buffer, size)

def Packet_genWriteReferenceFrameRotation(errorDetectionMode, buffer, size, c):
    """Packet_genWriteReferenceFrameRotation(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, mat3f c) -> size_t"""
    return _libvncxx.Packet_genWriteReferenceFrameRotation(errorDetectionMode, buffer, size, c)

def Packet_genReadYawPitchRollMagneticAccelerationAndAngularRates(errorDetectionMode, buffer, size):
    """Packet_genReadYawPitchRollMagneticAccelerationAndAngularRates(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadYawPitchRollMagneticAccelerationAndAngularRates(errorDetectionMode, buffer, size)

def Packet_genReadCommunicationProtocolControl(errorDetectionMode, buffer, size):
    """Packet_genReadCommunicationProtocolControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadCommunicationProtocolControl(errorDetectionMode, buffer, size)

def Packet_genWriteCommunicationProtocolControl(errorDetectionMode, buffer, size, serialCount, serialStatus, spiCount, spiStatus, serialChecksum, spiChecksum, errorMode):
    """Packet_genWriteCommunicationProtocolControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t serialCount, uint8_t serialStatus, uint8_t spiCount, uint8_t spiStatus, uint8_t serialChecksum, uint8_t spiChecksum, uint8_t errorMode) -> size_t"""
    return _libvncxx.Packet_genWriteCommunicationProtocolControl(errorDetectionMode, buffer, size, serialCount, serialStatus, spiCount, spiStatus, serialChecksum, spiChecksum, errorMode)

def Packet_genReadSynchronizationControl(errorDetectionMode, buffer, size):
    """Packet_genReadSynchronizationControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadSynchronizationControl(errorDetectionMode, buffer, size)

def Packet_genWriteSynchronizationControl(errorDetectionMode, buffer, size, syncInMode, syncInEdge, syncInSkipFactor, syncOutMode, syncOutPolarity, syncOutSkipFactor, syncOutPulseWidth):
    """Packet_genWriteSynchronizationControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t syncInMode, uint8_t syncInEdge, uint16_t syncInSkipFactor, uint8_t syncOutMode, uint8_t syncOutPolarity, uint16_t syncOutSkipFactor, uint32_t syncOutPulseWidth) -> size_t"""
    return _libvncxx.Packet_genWriteSynchronizationControl(errorDetectionMode, buffer, size, syncInMode, syncInEdge, syncInSkipFactor, syncOutMode, syncOutPolarity, syncOutSkipFactor, syncOutPulseWidth)

def Packet_genReadSynchronizationStatus(errorDetectionMode, buffer, size):
    """Packet_genReadSynchronizationStatus(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadSynchronizationStatus(errorDetectionMode, buffer, size)

def Packet_genWriteSynchronizationStatus(errorDetectionMode, buffer, size, syncInCount, syncInTime, syncOutCount):
    """Packet_genWriteSynchronizationStatus(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint32_t syncInCount, uint32_t syncInTime, uint32_t syncOutCount) -> size_t"""
    return _libvncxx.Packet_genWriteSynchronizationStatus(errorDetectionMode, buffer, size, syncInCount, syncInTime, syncOutCount)

def Packet_genReadFilterBasicControl(errorDetectionMode, buffer, size):
    """Packet_genReadFilterBasicControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadFilterBasicControl(errorDetectionMode, buffer, size)

def Packet_genWriteFilterBasicControl(errorDetectionMode, buffer, size, magMode, extMagMode, extAccMode, extGyroMode, gyroLimit):
    """Packet_genWriteFilterBasicControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t magMode, uint8_t extMagMode, uint8_t extAccMode, uint8_t extGyroMode, vec3f gyroLimit) -> size_t"""
    return _libvncxx.Packet_genWriteFilterBasicControl(errorDetectionMode, buffer, size, magMode, extMagMode, extAccMode, extGyroMode, gyroLimit)

def Packet_genReadVpeBasicControl(errorDetectionMode, buffer, size):
    """Packet_genReadVpeBasicControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadVpeBasicControl(errorDetectionMode, buffer, size)

def Packet_genWriteVpeBasicControl(errorDetectionMode, buffer, size, enable, headingMode, filteringMode, tuningMode):
    """Packet_genWriteVpeBasicControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t enable, uint8_t headingMode, uint8_t filteringMode, uint8_t tuningMode) -> size_t"""
    return _libvncxx.Packet_genWriteVpeBasicControl(errorDetectionMode, buffer, size, enable, headingMode, filteringMode, tuningMode)

def Packet_genReadVpeMagnetometerBasicTuning(errorDetectionMode, buffer, size):
    """Packet_genReadVpeMagnetometerBasicTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadVpeMagnetometerBasicTuning(errorDetectionMode, buffer, size)

def Packet_genWriteVpeMagnetometerBasicTuning(errorDetectionMode, buffer, size, baseTuning, adaptiveTuning, adaptiveFiltering):
    """Packet_genWriteVpeMagnetometerBasicTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f baseTuning, vec3f adaptiveTuning, vec3f adaptiveFiltering) -> size_t"""
    return _libvncxx.Packet_genWriteVpeMagnetometerBasicTuning(errorDetectionMode, buffer, size, baseTuning, adaptiveTuning, adaptiveFiltering)

def Packet_genReadVpeMagnetometerAdvancedTuning(errorDetectionMode, buffer, size):
    """Packet_genReadVpeMagnetometerAdvancedTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadVpeMagnetometerAdvancedTuning(errorDetectionMode, buffer, size)

def Packet_genWriteVpeMagnetometerAdvancedTuning(errorDetectionMode, buffer, size, minFiltering, maxFiltering, maxAdaptRate, disturbanceWindow, maxTuning):
    """Packet_genWriteVpeMagnetometerAdvancedTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f minFiltering, vec3f maxFiltering, float maxAdaptRate, float disturbanceWindow, float maxTuning) -> size_t"""
    return _libvncxx.Packet_genWriteVpeMagnetometerAdvancedTuning(errorDetectionMode, buffer, size, minFiltering, maxFiltering, maxAdaptRate, disturbanceWindow, maxTuning)

def Packet_genReadVpeAccelerometerBasicTuning(errorDetectionMode, buffer, size):
    """Packet_genReadVpeAccelerometerBasicTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadVpeAccelerometerBasicTuning(errorDetectionMode, buffer, size)

def Packet_genWriteVpeAccelerometerBasicTuning(errorDetectionMode, buffer, size, baseTuning, adaptiveTuning, adaptiveFiltering):
    """Packet_genWriteVpeAccelerometerBasicTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f baseTuning, vec3f adaptiveTuning, vec3f adaptiveFiltering) -> size_t"""
    return _libvncxx.Packet_genWriteVpeAccelerometerBasicTuning(errorDetectionMode, buffer, size, baseTuning, adaptiveTuning, adaptiveFiltering)

def Packet_genReadVpeAccelerometerAdvancedTuning(errorDetectionMode, buffer, size):
    """Packet_genReadVpeAccelerometerAdvancedTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadVpeAccelerometerAdvancedTuning(errorDetectionMode, buffer, size)

def Packet_genWriteVpeAccelerometerAdvancedTuning(errorDetectionMode, buffer, size, minFiltering, maxFiltering, maxAdaptRate, disturbanceWindow, maxTuning):
    """Packet_genWriteVpeAccelerometerAdvancedTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f minFiltering, vec3f maxFiltering, float maxAdaptRate, float disturbanceWindow, float maxTuning) -> size_t"""
    return _libvncxx.Packet_genWriteVpeAccelerometerAdvancedTuning(errorDetectionMode, buffer, size, minFiltering, maxFiltering, maxAdaptRate, disturbanceWindow, maxTuning)

def Packet_genReadVpeGyroBasicTuning(errorDetectionMode, buffer, size):
    """Packet_genReadVpeGyroBasicTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadVpeGyroBasicTuning(errorDetectionMode, buffer, size)

def Packet_genWriteVpeGyroBasicTuning(errorDetectionMode, buffer, size, angularWalkVariance, baseTuning, adaptiveTuning):
    """Packet_genWriteVpeGyroBasicTuning(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f angularWalkVariance, vec3f baseTuning, vec3f adaptiveTuning) -> size_t"""
    return _libvncxx.Packet_genWriteVpeGyroBasicTuning(errorDetectionMode, buffer, size, angularWalkVariance, baseTuning, adaptiveTuning)

def Packet_genReadFilterStartupGyroBias(errorDetectionMode, buffer, size):
    """Packet_genReadFilterStartupGyroBias(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadFilterStartupGyroBias(errorDetectionMode, buffer, size)

def Packet_genWriteFilterStartupGyroBias(errorDetectionMode, buffer, size, bias):
    """Packet_genWriteFilterStartupGyroBias(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f bias) -> size_t"""
    return _libvncxx.Packet_genWriteFilterStartupGyroBias(errorDetectionMode, buffer, size, bias)

def Packet_genReadMagnetometerCalibrationControl(errorDetectionMode, buffer, size):
    """Packet_genReadMagnetometerCalibrationControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadMagnetometerCalibrationControl(errorDetectionMode, buffer, size)

def Packet_genWriteMagnetometerCalibrationControl(errorDetectionMode, buffer, size, hsiMode, hsiOutput, convergeRate):
    """Packet_genWriteMagnetometerCalibrationControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t hsiMode, uint8_t hsiOutput, uint8_t convergeRate) -> size_t"""
    return _libvncxx.Packet_genWriteMagnetometerCalibrationControl(errorDetectionMode, buffer, size, hsiMode, hsiOutput, convergeRate)

def Packet_genReadCalculatedMagnetometerCalibration(errorDetectionMode, buffer, size):
    """Packet_genReadCalculatedMagnetometerCalibration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadCalculatedMagnetometerCalibration(errorDetectionMode, buffer, size)

def Packet_genReadIndoorHeadingModeControl(errorDetectionMode, buffer, size):
    """Packet_genReadIndoorHeadingModeControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadIndoorHeadingModeControl(errorDetectionMode, buffer, size)

def Packet_genWriteIndoorHeadingModeControl(errorDetectionMode, buffer, size, maxRateError):
    """Packet_genWriteIndoorHeadingModeControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, float maxRateError) -> size_t"""
    return _libvncxx.Packet_genWriteIndoorHeadingModeControl(errorDetectionMode, buffer, size, maxRateError)

def Packet_genReadVelocityCompensationMeasurement(errorDetectionMode, buffer, size):
    """Packet_genReadVelocityCompensationMeasurement(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadVelocityCompensationMeasurement(errorDetectionMode, buffer, size)

def Packet_genWriteVelocityCompensationMeasurement(errorDetectionMode, buffer, size, velocity):
    """Packet_genWriteVelocityCompensationMeasurement(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f velocity) -> size_t"""
    return _libvncxx.Packet_genWriteVelocityCompensationMeasurement(errorDetectionMode, buffer, size, velocity)

def Packet_genReadVelocityCompensationControl(errorDetectionMode, buffer, size):
    """Packet_genReadVelocityCompensationControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadVelocityCompensationControl(errorDetectionMode, buffer, size)

def Packet_genWriteVelocityCompensationControl(errorDetectionMode, buffer, size, mode, velocityTuning, rateTuning):
    """Packet_genWriteVelocityCompensationControl(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t mode, float velocityTuning, float rateTuning) -> size_t"""
    return _libvncxx.Packet_genWriteVelocityCompensationControl(errorDetectionMode, buffer, size, mode, velocityTuning, rateTuning)

def Packet_genReadVelocityCompensationStatus(errorDetectionMode, buffer, size):
    """Packet_genReadVelocityCompensationStatus(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadVelocityCompensationStatus(errorDetectionMode, buffer, size)

def Packet_genReadImuMeasurements(errorDetectionMode, buffer, size):
    """Packet_genReadImuMeasurements(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadImuMeasurements(errorDetectionMode, buffer, size)

def Packet_genReadGpsConfiguration(errorDetectionMode, buffer, size):
    """Packet_genReadGpsConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadGpsConfiguration(errorDetectionMode, buffer, size)

def Packet_genWriteGpsConfiguration(errorDetectionMode, buffer, size, mode, ppsSource):
    """Packet_genWriteGpsConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t mode, uint8_t ppsSource) -> size_t"""
    return _libvncxx.Packet_genWriteGpsConfiguration(errorDetectionMode, buffer, size, mode, ppsSource)

def Packet_genReadGpsAntennaOffset(errorDetectionMode, buffer, size):
    """Packet_genReadGpsAntennaOffset(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadGpsAntennaOffset(errorDetectionMode, buffer, size)

def Packet_genWriteGpsAntennaOffset(errorDetectionMode, buffer, size, position):
    """Packet_genWriteGpsAntennaOffset(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f position) -> size_t"""
    return _libvncxx.Packet_genWriteGpsAntennaOffset(errorDetectionMode, buffer, size, position)

def Packet_genReadGpsSolutionLla(errorDetectionMode, buffer, size):
    """Packet_genReadGpsSolutionLla(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadGpsSolutionLla(errorDetectionMode, buffer, size)

def Packet_genReadGpsSolutionEcef(errorDetectionMode, buffer, size):
    """Packet_genReadGpsSolutionEcef(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadGpsSolutionEcef(errorDetectionMode, buffer, size)

def Packet_genReadInsSolutionLla(errorDetectionMode, buffer, size):
    """Packet_genReadInsSolutionLla(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadInsSolutionLla(errorDetectionMode, buffer, size)

def Packet_genReadInsSolutionEcef(errorDetectionMode, buffer, size):
    """Packet_genReadInsSolutionEcef(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadInsSolutionEcef(errorDetectionMode, buffer, size)

def Packet_genReadInsBasicConfiguration(errorDetectionMode, buffer, size):
    """Packet_genReadInsBasicConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadInsBasicConfiguration(errorDetectionMode, buffer, size)

def Packet_genWriteInsBasicConfiguration(errorDetectionMode, buffer, size, scenario, ahrsAiding, estBaseline):
    """Packet_genWriteInsBasicConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t scenario, uint8_t ahrsAiding, uint8_t estBaseline) -> size_t"""
    return _libvncxx.Packet_genWriteInsBasicConfiguration(errorDetectionMode, buffer, size, scenario, ahrsAiding, estBaseline)

def Packet_genReadInsAdvancedConfiguration(errorDetectionMode, buffer, size):
    """Packet_genReadInsAdvancedConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadInsAdvancedConfiguration(errorDetectionMode, buffer, size)

def Packet_genWriteInsAdvancedConfiguration(errorDetectionMode, buffer, size, useMag, usePres, posAtt, velAtt, velBias, useFoam, gpsCovType, velCount, velInit, moveOrigin, gpsTimeout, deltaLimitPos, deltaLimitVel, minPosUncertainty, minVelUncertainty):
    """Packet_genWriteInsAdvancedConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t useMag, uint8_t usePres, uint8_t posAtt, uint8_t velAtt, uint8_t velBias, uint8_t useFoam, uint8_t gpsCovType, uint8_t velCount, float velInit, float moveOrigin, float gpsTimeout, float deltaLimitPos, float deltaLimitVel, float minPosUncertainty, float minVelUncertainty) -> size_t"""
    return _libvncxx.Packet_genWriteInsAdvancedConfiguration(errorDetectionMode, buffer, size, useMag, usePres, posAtt, velAtt, velBias, useFoam, gpsCovType, velCount, velInit, moveOrigin, gpsTimeout, deltaLimitPos, deltaLimitVel, minPosUncertainty, minVelUncertainty)

def Packet_genReadInsStateLla(errorDetectionMode, buffer, size):
    """Packet_genReadInsStateLla(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadInsStateLla(errorDetectionMode, buffer, size)

def Packet_genReadInsStateEcef(errorDetectionMode, buffer, size):
    """Packet_genReadInsStateEcef(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadInsStateEcef(errorDetectionMode, buffer, size)

def Packet_genReadStartupFilterBiasEstimate(errorDetectionMode, buffer, size):
    """Packet_genReadStartupFilterBiasEstimate(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadStartupFilterBiasEstimate(errorDetectionMode, buffer, size)

def Packet_genWriteStartupFilterBiasEstimate(errorDetectionMode, buffer, size, gyroBias, accelBias, pressureBias):
    """Packet_genWriteStartupFilterBiasEstimate(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f gyroBias, vec3f accelBias, float pressureBias) -> size_t"""
    return _libvncxx.Packet_genWriteStartupFilterBiasEstimate(errorDetectionMode, buffer, size, gyroBias, accelBias, pressureBias)

def Packet_genReadDeltaThetaAndDeltaVelocity(errorDetectionMode, buffer, size):
    """Packet_genReadDeltaThetaAndDeltaVelocity(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadDeltaThetaAndDeltaVelocity(errorDetectionMode, buffer, size)

def Packet_genReadDeltaThetaAndDeltaVelocityConfiguration(errorDetectionMode, buffer, size):
    """Packet_genReadDeltaThetaAndDeltaVelocityConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadDeltaThetaAndDeltaVelocityConfiguration(errorDetectionMode, buffer, size)

def Packet_genWriteDeltaThetaAndDeltaVelocityConfiguration(errorDetectionMode, buffer, size, integrationFrame, gyroCompensation, accelCompensation):
    """Packet_genWriteDeltaThetaAndDeltaVelocityConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t integrationFrame, uint8_t gyroCompensation, uint8_t accelCompensation) -> size_t"""
    return _libvncxx.Packet_genWriteDeltaThetaAndDeltaVelocityConfiguration(errorDetectionMode, buffer, size, integrationFrame, gyroCompensation, accelCompensation)

def Packet_genReadReferenceVectorConfiguration(errorDetectionMode, buffer, size):
    """Packet_genReadReferenceVectorConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadReferenceVectorConfiguration(errorDetectionMode, buffer, size)

def Packet_genWriteReferenceVectorConfiguration(errorDetectionMode, buffer, size, useMagModel, useGravityModel, recalcThreshold, year, position):
    """Packet_genWriteReferenceVectorConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint8_t useMagModel, uint8_t useGravityModel, uint32_t recalcThreshold, float year, vec3d position) -> size_t"""
    return _libvncxx.Packet_genWriteReferenceVectorConfiguration(errorDetectionMode, buffer, size, useMagModel, useGravityModel, recalcThreshold, year, position)

def Packet_genReadGyroCompensation(errorDetectionMode, buffer, size):
    """Packet_genReadGyroCompensation(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadGyroCompensation(errorDetectionMode, buffer, size)

def Packet_genWriteGyroCompensation(errorDetectionMode, buffer, size, c, b):
    """Packet_genWriteGyroCompensation(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, mat3f c, vec3f b) -> size_t"""
    return _libvncxx.Packet_genWriteGyroCompensation(errorDetectionMode, buffer, size, c, b)

def Packet_genReadImuFilteringConfiguration(errorDetectionMode, buffer, size):
    """Packet_genReadImuFilteringConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadImuFilteringConfiguration(errorDetectionMode, buffer, size)

def Packet_genWriteImuFilteringConfiguration(errorDetectionMode, buffer, size, magWindowSize, accelWindowSize, gyroWindowSize, tempWindowSize, presWindowSize, magFilterMode, accelFilterMode, gyroFilterMode, tempFilterMode, presFilterMode):
    """Packet_genWriteImuFilteringConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint16_t magWindowSize, uint16_t accelWindowSize, uint16_t gyroWindowSize, uint16_t tempWindowSize, uint16_t presWindowSize, uint8_t magFilterMode, uint8_t accelFilterMode, uint8_t gyroFilterMode, uint8_t tempFilterMode, uint8_t presFilterMode) -> size_t"""
    return _libvncxx.Packet_genWriteImuFilteringConfiguration(errorDetectionMode, buffer, size, magWindowSize, accelWindowSize, gyroWindowSize, tempWindowSize, presWindowSize, magFilterMode, accelFilterMode, gyroFilterMode, tempFilterMode, presFilterMode)

def Packet_genReadGpsCompassBaseline(errorDetectionMode, buffer, size):
    """Packet_genReadGpsCompassBaseline(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadGpsCompassBaseline(errorDetectionMode, buffer, size)

def Packet_genWriteGpsCompassBaseline(errorDetectionMode, buffer, size, position, uncertainty):
    """Packet_genWriteGpsCompassBaseline(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, vec3f position, vec3f uncertainty) -> size_t"""
    return _libvncxx.Packet_genWriteGpsCompassBaseline(errorDetectionMode, buffer, size, position, uncertainty)

def Packet_genReadGpsCompassEstimatedBaseline(errorDetectionMode, buffer, size):
    """Packet_genReadGpsCompassEstimatedBaseline(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadGpsCompassEstimatedBaseline(errorDetectionMode, buffer, size)

def Packet_genReadImuRateConfiguration(errorDetectionMode, buffer, size):
    """Packet_genReadImuRateConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadImuRateConfiguration(errorDetectionMode, buffer, size)

def Packet_genWriteImuRateConfiguration(errorDetectionMode, buffer, size, imuRate, navDivisor, filterTargetRate, filterMinRate):
    """Packet_genWriteImuRateConfiguration(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size, uint16_t imuRate, uint16_t navDivisor, float filterTargetRate, float filterMinRate) -> size_t"""
    return _libvncxx.Packet_genWriteImuRateConfiguration(errorDetectionMode, buffer, size, imuRate, navDivisor, filterTargetRate, filterMinRate)

def Packet_genReadYawPitchRollTrueBodyAccelerationAndAngularRates(errorDetectionMode, buffer, size):
    """Packet_genReadYawPitchRollTrueBodyAccelerationAndAngularRates(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadYawPitchRollTrueBodyAccelerationAndAngularRates(errorDetectionMode, buffer, size)

def Packet_genReadYawPitchRollTrueInertialAccelerationAndAngularRates(errorDetectionMode, buffer, size):
    """Packet_genReadYawPitchRollTrueInertialAccelerationAndAngularRates(vn::protocol::uart::ErrorDetectionMode errorDetectionMode, char * buffer, size_t size) -> size_t"""
    return _libvncxx.Packet_genReadYawPitchRollTrueInertialAccelerationAndAngularRates(errorDetectionMode, buffer, size)

class BinaryOutputRegister(_object):
    """Proxy of C++ vn::sensors::BinaryOutputRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinaryOutputRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BinaryOutputRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["async_mode"] = _libvncxx.BinaryOutputRegister_async_mode_set
    __swig_getmethods__["async_mode"] = _libvncxx.BinaryOutputRegister_async_mode_get
    if _newclass:
        async_mode = _swig_property(_libvncxx.BinaryOutputRegister_async_mode_get, _libvncxx.BinaryOutputRegister_async_mode_set)
    __swig_setmethods__["rate_divisor"] = _libvncxx.BinaryOutputRegister_rate_divisor_set
    __swig_getmethods__["rate_divisor"] = _libvncxx.BinaryOutputRegister_rate_divisor_get
    if _newclass:
        rate_divisor = _swig_property(_libvncxx.BinaryOutputRegister_rate_divisor_get, _libvncxx.BinaryOutputRegister_rate_divisor_set)
    __swig_setmethods__["common_field"] = _libvncxx.BinaryOutputRegister_common_field_set
    __swig_getmethods__["common_field"] = _libvncxx.BinaryOutputRegister_common_field_get
    if _newclass:
        common_field = _swig_property(_libvncxx.BinaryOutputRegister_common_field_get, _libvncxx.BinaryOutputRegister_common_field_set)
    __swig_setmethods__["time_field"] = _libvncxx.BinaryOutputRegister_time_field_set
    __swig_getmethods__["time_field"] = _libvncxx.BinaryOutputRegister_time_field_get
    if _newclass:
        time_field = _swig_property(_libvncxx.BinaryOutputRegister_time_field_get, _libvncxx.BinaryOutputRegister_time_field_set)
    __swig_setmethods__["imu_field"] = _libvncxx.BinaryOutputRegister_imu_field_set
    __swig_getmethods__["imu_field"] = _libvncxx.BinaryOutputRegister_imu_field_get
    if _newclass:
        imu_field = _swig_property(_libvncxx.BinaryOutputRegister_imu_field_get, _libvncxx.BinaryOutputRegister_imu_field_set)
    __swig_setmethods__["gps_field"] = _libvncxx.BinaryOutputRegister_gps_field_set
    __swig_getmethods__["gps_field"] = _libvncxx.BinaryOutputRegister_gps_field_get
    if _newclass:
        gps_field = _swig_property(_libvncxx.BinaryOutputRegister_gps_field_get, _libvncxx.BinaryOutputRegister_gps_field_set)
    __swig_setmethods__["attitude_field"] = _libvncxx.BinaryOutputRegister_attitude_field_set
    __swig_getmethods__["attitude_field"] = _libvncxx.BinaryOutputRegister_attitude_field_get
    if _newclass:
        attitude_field = _swig_property(_libvncxx.BinaryOutputRegister_attitude_field_get, _libvncxx.BinaryOutputRegister_attitude_field_set)
    __swig_setmethods__["ins_field"] = _libvncxx.BinaryOutputRegister_ins_field_set
    __swig_getmethods__["ins_field"] = _libvncxx.BinaryOutputRegister_ins_field_get
    if _newclass:
        ins_field = _swig_property(_libvncxx.BinaryOutputRegister_ins_field_get, _libvncxx.BinaryOutputRegister_ins_field_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::BinaryOutputRegister self) -> BinaryOutputRegister
        __init__(vn::sensors::BinaryOutputRegister self, ASYNCMODE asyncModeIn, uint16_t rateDivisorIn, COMMONGROUP commonFieldIn, TIMEGROUP timeFieldIn, IMUGROUP imuFieldIn, GPSGROUP gpsFieldIn, ATTITUDEGROUP attitudeFieldIn, INSGROUP insFieldIn) -> BinaryOutputRegister
        __init__(vn::sensors::BinaryOutputRegister self, uint16_t asyncModeIn, uint16_t rateDivisorIn, uint16_t commonFieldIn, uint16_t timeFieldIn, uint16_t imuFieldIn, uint16_t gpsFieldIn, uint16_t attitudeFieldIn, uint16_t insFieldIn) -> BinaryOutputRegister
        """
        this = _libvncxx.new_BinaryOutputRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_BinaryOutputRegister
    __del__ = lambda self: None
BinaryOutputRegister_swigregister = _libvncxx.BinaryOutputRegister_swigregister
BinaryOutputRegister_swigregister(BinaryOutputRegister)

class QuaternionMagneticAccelerationAndAngularRatesRegister(_object):
    """Proxy of C++ vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuaternionMagneticAccelerationAndAngularRatesRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuaternionMagneticAccelerationAndAngularRatesRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["quat"] = _libvncxx.QuaternionMagneticAccelerationAndAngularRatesRegister_quat_set
    __swig_getmethods__["quat"] = _libvncxx.QuaternionMagneticAccelerationAndAngularRatesRegister_quat_get
    if _newclass:
        quat = _swig_property(_libvncxx.QuaternionMagneticAccelerationAndAngularRatesRegister_quat_get, _libvncxx.QuaternionMagneticAccelerationAndAngularRatesRegister_quat_set)
    __swig_setmethods__["mag"] = _libvncxx.QuaternionMagneticAccelerationAndAngularRatesRegister_mag_set
    __swig_getmethods__["mag"] = _libvncxx.QuaternionMagneticAccelerationAndAngularRatesRegister_mag_get
    if _newclass:
        mag = _swig_property(_libvncxx.QuaternionMagneticAccelerationAndAngularRatesRegister_mag_get, _libvncxx.QuaternionMagneticAccelerationAndAngularRatesRegister_mag_set)
    __swig_setmethods__["accel"] = _libvncxx.QuaternionMagneticAccelerationAndAngularRatesRegister_accel_set
    __swig_getmethods__["accel"] = _libvncxx.QuaternionMagneticAccelerationAndAngularRatesRegister_accel_get
    if _newclass:
        accel = _swig_property(_libvncxx.QuaternionMagneticAccelerationAndAngularRatesRegister_accel_get, _libvncxx.QuaternionMagneticAccelerationAndAngularRatesRegister_accel_set)
    __swig_setmethods__["gyro"] = _libvncxx.QuaternionMagneticAccelerationAndAngularRatesRegister_gyro_set
    __swig_getmethods__["gyro"] = _libvncxx.QuaternionMagneticAccelerationAndAngularRatesRegister_gyro_get
    if _newclass:
        gyro = _swig_property(_libvncxx.QuaternionMagneticAccelerationAndAngularRatesRegister_gyro_get, _libvncxx.QuaternionMagneticAccelerationAndAngularRatesRegister_gyro_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister self) -> QuaternionMagneticAccelerationAndAngularRatesRegister
        __init__(vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister self, vec4f quatIn, vec3f magIn, vec3f accelIn, vec3f gyroIn) -> QuaternionMagneticAccelerationAndAngularRatesRegister
        """
        this = _libvncxx.new_QuaternionMagneticAccelerationAndAngularRatesRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_QuaternionMagneticAccelerationAndAngularRatesRegister
    __del__ = lambda self: None
QuaternionMagneticAccelerationAndAngularRatesRegister_swigregister = _libvncxx.QuaternionMagneticAccelerationAndAngularRatesRegister_swigregister
QuaternionMagneticAccelerationAndAngularRatesRegister_swigregister(QuaternionMagneticAccelerationAndAngularRatesRegister)

class MagneticAccelerationAndAngularRatesRegister(_object):
    """Proxy of C++ vn::sensors::MagneticAccelerationAndAngularRatesRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MagneticAccelerationAndAngularRatesRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MagneticAccelerationAndAngularRatesRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mag"] = _libvncxx.MagneticAccelerationAndAngularRatesRegister_mag_set
    __swig_getmethods__["mag"] = _libvncxx.MagneticAccelerationAndAngularRatesRegister_mag_get
    if _newclass:
        mag = _swig_property(_libvncxx.MagneticAccelerationAndAngularRatesRegister_mag_get, _libvncxx.MagneticAccelerationAndAngularRatesRegister_mag_set)
    __swig_setmethods__["accel"] = _libvncxx.MagneticAccelerationAndAngularRatesRegister_accel_set
    __swig_getmethods__["accel"] = _libvncxx.MagneticAccelerationAndAngularRatesRegister_accel_get
    if _newclass:
        accel = _swig_property(_libvncxx.MagneticAccelerationAndAngularRatesRegister_accel_get, _libvncxx.MagneticAccelerationAndAngularRatesRegister_accel_set)
    __swig_setmethods__["gyro"] = _libvncxx.MagneticAccelerationAndAngularRatesRegister_gyro_set
    __swig_getmethods__["gyro"] = _libvncxx.MagneticAccelerationAndAngularRatesRegister_gyro_get
    if _newclass:
        gyro = _swig_property(_libvncxx.MagneticAccelerationAndAngularRatesRegister_gyro_get, _libvncxx.MagneticAccelerationAndAngularRatesRegister_gyro_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::MagneticAccelerationAndAngularRatesRegister self) -> MagneticAccelerationAndAngularRatesRegister
        __init__(vn::sensors::MagneticAccelerationAndAngularRatesRegister self, vec3f magIn, vec3f accelIn, vec3f gyroIn) -> MagneticAccelerationAndAngularRatesRegister
        """
        this = _libvncxx.new_MagneticAccelerationAndAngularRatesRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_MagneticAccelerationAndAngularRatesRegister
    __del__ = lambda self: None
MagneticAccelerationAndAngularRatesRegister_swigregister = _libvncxx.MagneticAccelerationAndAngularRatesRegister_swigregister
MagneticAccelerationAndAngularRatesRegister_swigregister(MagneticAccelerationAndAngularRatesRegister)

class MagneticAndGravityReferenceVectorsRegister(_object):
    """Proxy of C++ vn::sensors::MagneticAndGravityReferenceVectorsRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MagneticAndGravityReferenceVectorsRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MagneticAndGravityReferenceVectorsRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mag_ref"] = _libvncxx.MagneticAndGravityReferenceVectorsRegister_mag_ref_set
    __swig_getmethods__["mag_ref"] = _libvncxx.MagneticAndGravityReferenceVectorsRegister_mag_ref_get
    if _newclass:
        mag_ref = _swig_property(_libvncxx.MagneticAndGravityReferenceVectorsRegister_mag_ref_get, _libvncxx.MagneticAndGravityReferenceVectorsRegister_mag_ref_set)
    __swig_setmethods__["acc_ref"] = _libvncxx.MagneticAndGravityReferenceVectorsRegister_acc_ref_set
    __swig_getmethods__["acc_ref"] = _libvncxx.MagneticAndGravityReferenceVectorsRegister_acc_ref_get
    if _newclass:
        acc_ref = _swig_property(_libvncxx.MagneticAndGravityReferenceVectorsRegister_acc_ref_get, _libvncxx.MagneticAndGravityReferenceVectorsRegister_acc_ref_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::MagneticAndGravityReferenceVectorsRegister self) -> MagneticAndGravityReferenceVectorsRegister
        __init__(vn::sensors::MagneticAndGravityReferenceVectorsRegister self, vec3f magRefIn, vec3f accRefIn) -> MagneticAndGravityReferenceVectorsRegister
        """
        this = _libvncxx.new_MagneticAndGravityReferenceVectorsRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_MagneticAndGravityReferenceVectorsRegister
    __del__ = lambda self: None
MagneticAndGravityReferenceVectorsRegister_swigregister = _libvncxx.MagneticAndGravityReferenceVectorsRegister_swigregister
MagneticAndGravityReferenceVectorsRegister_swigregister(MagneticAndGravityReferenceVectorsRegister)

class FilterMeasurementsVarianceParametersRegister(_object):
    """Proxy of C++ vn::sensors::FilterMeasurementsVarianceParametersRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterMeasurementsVarianceParametersRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FilterMeasurementsVarianceParametersRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["angular_walk_variance"] = _libvncxx.FilterMeasurementsVarianceParametersRegister_angular_walk_variance_set
    __swig_getmethods__["angular_walk_variance"] = _libvncxx.FilterMeasurementsVarianceParametersRegister_angular_walk_variance_get
    if _newclass:
        angular_walk_variance = _swig_property(_libvncxx.FilterMeasurementsVarianceParametersRegister_angular_walk_variance_get, _libvncxx.FilterMeasurementsVarianceParametersRegister_angular_walk_variance_set)
    __swig_setmethods__["angular_rate_variance"] = _libvncxx.FilterMeasurementsVarianceParametersRegister_angular_rate_variance_set
    __swig_getmethods__["angular_rate_variance"] = _libvncxx.FilterMeasurementsVarianceParametersRegister_angular_rate_variance_get
    if _newclass:
        angular_rate_variance = _swig_property(_libvncxx.FilterMeasurementsVarianceParametersRegister_angular_rate_variance_get, _libvncxx.FilterMeasurementsVarianceParametersRegister_angular_rate_variance_set)
    __swig_setmethods__["magnetic_variance"] = _libvncxx.FilterMeasurementsVarianceParametersRegister_magnetic_variance_set
    __swig_getmethods__["magnetic_variance"] = _libvncxx.FilterMeasurementsVarianceParametersRegister_magnetic_variance_get
    if _newclass:
        magnetic_variance = _swig_property(_libvncxx.FilterMeasurementsVarianceParametersRegister_magnetic_variance_get, _libvncxx.FilterMeasurementsVarianceParametersRegister_magnetic_variance_set)
    __swig_setmethods__["acceleration_variance"] = _libvncxx.FilterMeasurementsVarianceParametersRegister_acceleration_variance_set
    __swig_getmethods__["acceleration_variance"] = _libvncxx.FilterMeasurementsVarianceParametersRegister_acceleration_variance_get
    if _newclass:
        acceleration_variance = _swig_property(_libvncxx.FilterMeasurementsVarianceParametersRegister_acceleration_variance_get, _libvncxx.FilterMeasurementsVarianceParametersRegister_acceleration_variance_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::FilterMeasurementsVarianceParametersRegister self) -> FilterMeasurementsVarianceParametersRegister
        __init__(vn::sensors::FilterMeasurementsVarianceParametersRegister self, float angularWalkVarianceIn, vec3f angularRateVarianceIn, vec3f magneticVarianceIn, vec3f accelerationVarianceIn) -> FilterMeasurementsVarianceParametersRegister
        """
        this = _libvncxx.new_FilterMeasurementsVarianceParametersRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_FilterMeasurementsVarianceParametersRegister
    __del__ = lambda self: None
FilterMeasurementsVarianceParametersRegister_swigregister = _libvncxx.FilterMeasurementsVarianceParametersRegister_swigregister
FilterMeasurementsVarianceParametersRegister_swigregister(FilterMeasurementsVarianceParametersRegister)

class MagnetometerCompensationRegister(_object):
    """Proxy of C++ vn::sensors::MagnetometerCompensationRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MagnetometerCompensationRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MagnetometerCompensationRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["c"] = _libvncxx.MagnetometerCompensationRegister_c_set
    __swig_getmethods__["c"] = _libvncxx.MagnetometerCompensationRegister_c_get
    if _newclass:
        c = _swig_property(_libvncxx.MagnetometerCompensationRegister_c_get, _libvncxx.MagnetometerCompensationRegister_c_set)
    __swig_setmethods__["b"] = _libvncxx.MagnetometerCompensationRegister_b_set
    __swig_getmethods__["b"] = _libvncxx.MagnetometerCompensationRegister_b_get
    if _newclass:
        b = _swig_property(_libvncxx.MagnetometerCompensationRegister_b_get, _libvncxx.MagnetometerCompensationRegister_b_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::MagnetometerCompensationRegister self) -> MagnetometerCompensationRegister
        __init__(vn::sensors::MagnetometerCompensationRegister self, mat3f cIn, vec3f bIn) -> MagnetometerCompensationRegister
        """
        this = _libvncxx.new_MagnetometerCompensationRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_MagnetometerCompensationRegister
    __del__ = lambda self: None
MagnetometerCompensationRegister_swigregister = _libvncxx.MagnetometerCompensationRegister_swigregister
MagnetometerCompensationRegister_swigregister(MagnetometerCompensationRegister)

class FilterActiveTuningParametersRegister(_object):
    """Proxy of C++ vn::sensors::FilterActiveTuningParametersRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterActiveTuningParametersRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FilterActiveTuningParametersRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["magnetic_disturbance_gain"] = _libvncxx.FilterActiveTuningParametersRegister_magnetic_disturbance_gain_set
    __swig_getmethods__["magnetic_disturbance_gain"] = _libvncxx.FilterActiveTuningParametersRegister_magnetic_disturbance_gain_get
    if _newclass:
        magnetic_disturbance_gain = _swig_property(_libvncxx.FilterActiveTuningParametersRegister_magnetic_disturbance_gain_get, _libvncxx.FilterActiveTuningParametersRegister_magnetic_disturbance_gain_set)
    __swig_setmethods__["acceleration_disturbance_gain"] = _libvncxx.FilterActiveTuningParametersRegister_acceleration_disturbance_gain_set
    __swig_getmethods__["acceleration_disturbance_gain"] = _libvncxx.FilterActiveTuningParametersRegister_acceleration_disturbance_gain_get
    if _newclass:
        acceleration_disturbance_gain = _swig_property(_libvncxx.FilterActiveTuningParametersRegister_acceleration_disturbance_gain_get, _libvncxx.FilterActiveTuningParametersRegister_acceleration_disturbance_gain_set)
    __swig_setmethods__["magnetic_disturbance_memory"] = _libvncxx.FilterActiveTuningParametersRegister_magnetic_disturbance_memory_set
    __swig_getmethods__["magnetic_disturbance_memory"] = _libvncxx.FilterActiveTuningParametersRegister_magnetic_disturbance_memory_get
    if _newclass:
        magnetic_disturbance_memory = _swig_property(_libvncxx.FilterActiveTuningParametersRegister_magnetic_disturbance_memory_get, _libvncxx.FilterActiveTuningParametersRegister_magnetic_disturbance_memory_set)
    __swig_setmethods__["acceleration_disturbance_memory"] = _libvncxx.FilterActiveTuningParametersRegister_acceleration_disturbance_memory_set
    __swig_getmethods__["acceleration_disturbance_memory"] = _libvncxx.FilterActiveTuningParametersRegister_acceleration_disturbance_memory_get
    if _newclass:
        acceleration_disturbance_memory = _swig_property(_libvncxx.FilterActiveTuningParametersRegister_acceleration_disturbance_memory_get, _libvncxx.FilterActiveTuningParametersRegister_acceleration_disturbance_memory_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::FilterActiveTuningParametersRegister self) -> FilterActiveTuningParametersRegister
        __init__(vn::sensors::FilterActiveTuningParametersRegister self, float magneticDisturbanceGainIn, float accelerationDisturbanceGainIn, float magneticDisturbanceMemoryIn, float accelerationDisturbanceMemoryIn) -> FilterActiveTuningParametersRegister
        """
        this = _libvncxx.new_FilterActiveTuningParametersRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_FilterActiveTuningParametersRegister
    __del__ = lambda self: None
FilterActiveTuningParametersRegister_swigregister = _libvncxx.FilterActiveTuningParametersRegister_swigregister
FilterActiveTuningParametersRegister_swigregister(FilterActiveTuningParametersRegister)

class AccelerationCompensationRegister(_object):
    """Proxy of C++ vn::sensors::AccelerationCompensationRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccelerationCompensationRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AccelerationCompensationRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["c"] = _libvncxx.AccelerationCompensationRegister_c_set
    __swig_getmethods__["c"] = _libvncxx.AccelerationCompensationRegister_c_get
    if _newclass:
        c = _swig_property(_libvncxx.AccelerationCompensationRegister_c_get, _libvncxx.AccelerationCompensationRegister_c_set)
    __swig_setmethods__["b"] = _libvncxx.AccelerationCompensationRegister_b_set
    __swig_getmethods__["b"] = _libvncxx.AccelerationCompensationRegister_b_get
    if _newclass:
        b = _swig_property(_libvncxx.AccelerationCompensationRegister_b_get, _libvncxx.AccelerationCompensationRegister_b_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::AccelerationCompensationRegister self) -> AccelerationCompensationRegister
        __init__(vn::sensors::AccelerationCompensationRegister self, mat3f cIn, vec3f bIn) -> AccelerationCompensationRegister
        """
        this = _libvncxx.new_AccelerationCompensationRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_AccelerationCompensationRegister
    __del__ = lambda self: None
AccelerationCompensationRegister_swigregister = _libvncxx.AccelerationCompensationRegister_swigregister
AccelerationCompensationRegister_swigregister(AccelerationCompensationRegister)

class YawPitchRollMagneticAccelerationAndAngularRatesRegister(_object):
    """Proxy of C++ vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, YawPitchRollMagneticAccelerationAndAngularRatesRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, YawPitchRollMagneticAccelerationAndAngularRatesRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["yaw_pitch_roll"] = _libvncxx.YawPitchRollMagneticAccelerationAndAngularRatesRegister_yaw_pitch_roll_set
    __swig_getmethods__["yaw_pitch_roll"] = _libvncxx.YawPitchRollMagneticAccelerationAndAngularRatesRegister_yaw_pitch_roll_get
    if _newclass:
        yaw_pitch_roll = _swig_property(_libvncxx.YawPitchRollMagneticAccelerationAndAngularRatesRegister_yaw_pitch_roll_get, _libvncxx.YawPitchRollMagneticAccelerationAndAngularRatesRegister_yaw_pitch_roll_set)
    __swig_setmethods__["mag"] = _libvncxx.YawPitchRollMagneticAccelerationAndAngularRatesRegister_mag_set
    __swig_getmethods__["mag"] = _libvncxx.YawPitchRollMagneticAccelerationAndAngularRatesRegister_mag_get
    if _newclass:
        mag = _swig_property(_libvncxx.YawPitchRollMagneticAccelerationAndAngularRatesRegister_mag_get, _libvncxx.YawPitchRollMagneticAccelerationAndAngularRatesRegister_mag_set)
    __swig_setmethods__["accel"] = _libvncxx.YawPitchRollMagneticAccelerationAndAngularRatesRegister_accel_set
    __swig_getmethods__["accel"] = _libvncxx.YawPitchRollMagneticAccelerationAndAngularRatesRegister_accel_get
    if _newclass:
        accel = _swig_property(_libvncxx.YawPitchRollMagneticAccelerationAndAngularRatesRegister_accel_get, _libvncxx.YawPitchRollMagneticAccelerationAndAngularRatesRegister_accel_set)
    __swig_setmethods__["gyro"] = _libvncxx.YawPitchRollMagneticAccelerationAndAngularRatesRegister_gyro_set
    __swig_getmethods__["gyro"] = _libvncxx.YawPitchRollMagneticAccelerationAndAngularRatesRegister_gyro_get
    if _newclass:
        gyro = _swig_property(_libvncxx.YawPitchRollMagneticAccelerationAndAngularRatesRegister_gyro_get, _libvncxx.YawPitchRollMagneticAccelerationAndAngularRatesRegister_gyro_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister self) -> YawPitchRollMagneticAccelerationAndAngularRatesRegister
        __init__(vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister self, vec3f yawPitchRollIn, vec3f magIn, vec3f accelIn, vec3f gyroIn) -> YawPitchRollMagneticAccelerationAndAngularRatesRegister
        """
        this = _libvncxx.new_YawPitchRollMagneticAccelerationAndAngularRatesRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_YawPitchRollMagneticAccelerationAndAngularRatesRegister
    __del__ = lambda self: None
YawPitchRollMagneticAccelerationAndAngularRatesRegister_swigregister = _libvncxx.YawPitchRollMagneticAccelerationAndAngularRatesRegister_swigregister
YawPitchRollMagneticAccelerationAndAngularRatesRegister_swigregister(YawPitchRollMagneticAccelerationAndAngularRatesRegister)

class CommunicationProtocolControlRegister(_object):
    """Proxy of C++ vn::sensors::CommunicationProtocolControlRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommunicationProtocolControlRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CommunicationProtocolControlRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["serial_status"] = _libvncxx.CommunicationProtocolControlRegister_serial_status_set
    __swig_getmethods__["serial_status"] = _libvncxx.CommunicationProtocolControlRegister_serial_status_get
    if _newclass:
        serial_status = _swig_property(_libvncxx.CommunicationProtocolControlRegister_serial_status_get, _libvncxx.CommunicationProtocolControlRegister_serial_status_set)
    __swig_setmethods__["serialStatus"] = _libvncxx.CommunicationProtocolControlRegister_serialStatus_set
    __swig_getmethods__["serialStatus"] = _libvncxx.CommunicationProtocolControlRegister_serialStatus_get
    if _newclass:
        serialStatus = _swig_property(_libvncxx.CommunicationProtocolControlRegister_serialStatus_get, _libvncxx.CommunicationProtocolControlRegister_serialStatus_set)
    __swig_setmethods__["spi_count"] = _libvncxx.CommunicationProtocolControlRegister_spi_count_set
    __swig_getmethods__["spi_count"] = _libvncxx.CommunicationProtocolControlRegister_spi_count_get
    if _newclass:
        spi_count = _swig_property(_libvncxx.CommunicationProtocolControlRegister_spi_count_get, _libvncxx.CommunicationProtocolControlRegister_spi_count_set)
    __swig_setmethods__["spi_status"] = _libvncxx.CommunicationProtocolControlRegister_spi_status_set
    __swig_getmethods__["spi_status"] = _libvncxx.CommunicationProtocolControlRegister_spi_status_get
    if _newclass:
        spi_status = _swig_property(_libvncxx.CommunicationProtocolControlRegister_spi_status_get, _libvncxx.CommunicationProtocolControlRegister_spi_status_set)
    __swig_setmethods__["serial_checksum"] = _libvncxx.CommunicationProtocolControlRegister_serial_checksum_set
    __swig_getmethods__["serial_checksum"] = _libvncxx.CommunicationProtocolControlRegister_serial_checksum_get
    if _newclass:
        serial_checksum = _swig_property(_libvncxx.CommunicationProtocolControlRegister_serial_checksum_get, _libvncxx.CommunicationProtocolControlRegister_serial_checksum_set)
    __swig_setmethods__["spi_checksum"] = _libvncxx.CommunicationProtocolControlRegister_spi_checksum_set
    __swig_getmethods__["spi_checksum"] = _libvncxx.CommunicationProtocolControlRegister_spi_checksum_get
    if _newclass:
        spi_checksum = _swig_property(_libvncxx.CommunicationProtocolControlRegister_spi_checksum_get, _libvncxx.CommunicationProtocolControlRegister_spi_checksum_set)
    __swig_setmethods__["error_mode"] = _libvncxx.CommunicationProtocolControlRegister_error_mode_set
    __swig_getmethods__["error_mode"] = _libvncxx.CommunicationProtocolControlRegister_error_mode_get
    if _newclass:
        error_mode = _swig_property(_libvncxx.CommunicationProtocolControlRegister_error_mode_get, _libvncxx.CommunicationProtocolControlRegister_error_mode_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::CommunicationProtocolControlRegister self) -> CommunicationProtocolControlRegister
        __init__(vn::sensors::CommunicationProtocolControlRegister self, vn::protocol::uart::CountMode serialCountIn, vn::protocol::uart::StatusMode serialStatusIn, vn::protocol::uart::CountMode spiCountIn, vn::protocol::uart::StatusMode spiStatusIn, vn::protocol::uart::ChecksumMode serialChecksumIn, vn::protocol::uart::ChecksumMode spiChecksumIn, vn::protocol::uart::ErrorMode errorModeIn) -> CommunicationProtocolControlRegister
        """
        this = _libvncxx.new_CommunicationProtocolControlRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_CommunicationProtocolControlRegister
    __del__ = lambda self: None
CommunicationProtocolControlRegister_swigregister = _libvncxx.CommunicationProtocolControlRegister_swigregister
CommunicationProtocolControlRegister_swigregister(CommunicationProtocolControlRegister)

class SynchronizationControlRegister(_object):
    """Proxy of C++ vn::sensors::SynchronizationControlRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SynchronizationControlRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SynchronizationControlRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["syncInMode"] = _libvncxx.SynchronizationControlRegister_syncInMode_set
    __swig_getmethods__["syncInMode"] = _libvncxx.SynchronizationControlRegister_syncInMode_get
    if _newclass:
        syncInMode = _swig_property(_libvncxx.SynchronizationControlRegister_syncInMode_get, _libvncxx.SynchronizationControlRegister_syncInMode_set)
    __swig_setmethods__["syncInEdge"] = _libvncxx.SynchronizationControlRegister_syncInEdge_set
    __swig_getmethods__["syncInEdge"] = _libvncxx.SynchronizationControlRegister_syncInEdge_get
    if _newclass:
        syncInEdge = _swig_property(_libvncxx.SynchronizationControlRegister_syncInEdge_get, _libvncxx.SynchronizationControlRegister_syncInEdge_set)
    __swig_setmethods__["syncInSkipFactor"] = _libvncxx.SynchronizationControlRegister_syncInSkipFactor_set
    __swig_getmethods__["syncInSkipFactor"] = _libvncxx.SynchronizationControlRegister_syncInSkipFactor_get
    if _newclass:
        syncInSkipFactor = _swig_property(_libvncxx.SynchronizationControlRegister_syncInSkipFactor_get, _libvncxx.SynchronizationControlRegister_syncInSkipFactor_set)
    __swig_setmethods__["syncOutMode"] = _libvncxx.SynchronizationControlRegister_syncOutMode_set
    __swig_getmethods__["syncOutMode"] = _libvncxx.SynchronizationControlRegister_syncOutMode_get
    if _newclass:
        syncOutMode = _swig_property(_libvncxx.SynchronizationControlRegister_syncOutMode_get, _libvncxx.SynchronizationControlRegister_syncOutMode_set)
    __swig_setmethods__["syncOutPolarity"] = _libvncxx.SynchronizationControlRegister_syncOutPolarity_set
    __swig_getmethods__["syncOutPolarity"] = _libvncxx.SynchronizationControlRegister_syncOutPolarity_get
    if _newclass:
        syncOutPolarity = _swig_property(_libvncxx.SynchronizationControlRegister_syncOutPolarity_get, _libvncxx.SynchronizationControlRegister_syncOutPolarity_set)
    __swig_setmethods__["syncOutSkipFactor"] = _libvncxx.SynchronizationControlRegister_syncOutSkipFactor_set
    __swig_getmethods__["syncOutSkipFactor"] = _libvncxx.SynchronizationControlRegister_syncOutSkipFactor_get
    if _newclass:
        syncOutSkipFactor = _swig_property(_libvncxx.SynchronizationControlRegister_syncOutSkipFactor_get, _libvncxx.SynchronizationControlRegister_syncOutSkipFactor_set)
    __swig_setmethods__["syncOutPulseWidth"] = _libvncxx.SynchronizationControlRegister_syncOutPulseWidth_set
    __swig_getmethods__["syncOutPulseWidth"] = _libvncxx.SynchronizationControlRegister_syncOutPulseWidth_get
    if _newclass:
        syncOutPulseWidth = _swig_property(_libvncxx.SynchronizationControlRegister_syncOutPulseWidth_get, _libvncxx.SynchronizationControlRegister_syncOutPulseWidth_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::SynchronizationControlRegister self) -> SynchronizationControlRegister
        __init__(vn::sensors::SynchronizationControlRegister self, vn::protocol::uart::SyncInMode syncInModeIn, vn::protocol::uart::SyncInEdge syncInEdgeIn, uint16_t syncInSkipFactorIn, vn::protocol::uart::SyncOutMode syncOutModeIn, vn::protocol::uart::SyncOutPolarity syncOutPolarityIn, uint16_t syncOutSkipFactorIn, uint32_t syncOutPulseWidthIn) -> SynchronizationControlRegister
        """
        this = _libvncxx.new_SynchronizationControlRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_SynchronizationControlRegister
    __del__ = lambda self: None
SynchronizationControlRegister_swigregister = _libvncxx.SynchronizationControlRegister_swigregister
SynchronizationControlRegister_swigregister(SynchronizationControlRegister)

class SynchronizationStatusRegister(_object):
    """Proxy of C++ vn::sensors::SynchronizationStatusRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SynchronizationStatusRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SynchronizationStatusRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sync_in_count"] = _libvncxx.SynchronizationStatusRegister_sync_in_count_set
    __swig_getmethods__["sync_in_count"] = _libvncxx.SynchronizationStatusRegister_sync_in_count_get
    if _newclass:
        sync_in_count = _swig_property(_libvncxx.SynchronizationStatusRegister_sync_in_count_get, _libvncxx.SynchronizationStatusRegister_sync_in_count_set)
    __swig_setmethods__["sync_in_time"] = _libvncxx.SynchronizationStatusRegister_sync_in_time_set
    __swig_getmethods__["sync_in_time"] = _libvncxx.SynchronizationStatusRegister_sync_in_time_get
    if _newclass:
        sync_in_time = _swig_property(_libvncxx.SynchronizationStatusRegister_sync_in_time_get, _libvncxx.SynchronizationStatusRegister_sync_in_time_set)
    __swig_setmethods__["sync_out_count"] = _libvncxx.SynchronizationStatusRegister_sync_out_count_set
    __swig_getmethods__["sync_out_count"] = _libvncxx.SynchronizationStatusRegister_sync_out_count_get
    if _newclass:
        sync_out_count = _swig_property(_libvncxx.SynchronizationStatusRegister_sync_out_count_get, _libvncxx.SynchronizationStatusRegister_sync_out_count_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::SynchronizationStatusRegister self) -> SynchronizationStatusRegister
        __init__(vn::sensors::SynchronizationStatusRegister self, uint32_t syncInCountIn, uint32_t syncInTimeIn, uint32_t syncOutCountIn) -> SynchronizationStatusRegister
        """
        this = _libvncxx.new_SynchronizationStatusRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_SynchronizationStatusRegister
    __del__ = lambda self: None
SynchronizationStatusRegister_swigregister = _libvncxx.SynchronizationStatusRegister_swigregister
SynchronizationStatusRegister_swigregister(SynchronizationStatusRegister)

class FilterBasicControlRegister(_object):
    """Proxy of C++ vn::sensors::FilterBasicControlRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterBasicControlRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FilterBasicControlRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mag_mode"] = _libvncxx.FilterBasicControlRegister_mag_mode_set
    __swig_getmethods__["mag_mode"] = _libvncxx.FilterBasicControlRegister_mag_mode_get
    if _newclass:
        mag_mode = _swig_property(_libvncxx.FilterBasicControlRegister_mag_mode_get, _libvncxx.FilterBasicControlRegister_mag_mode_set)
    __swig_setmethods__["ext_mag_mode"] = _libvncxx.FilterBasicControlRegister_ext_mag_mode_set
    __swig_getmethods__["ext_mag_mode"] = _libvncxx.FilterBasicControlRegister_ext_mag_mode_get
    if _newclass:
        ext_mag_mode = _swig_property(_libvncxx.FilterBasicControlRegister_ext_mag_mode_get, _libvncxx.FilterBasicControlRegister_ext_mag_mode_set)
    __swig_setmethods__["ext_acc_mode"] = _libvncxx.FilterBasicControlRegister_ext_acc_mode_set
    __swig_getmethods__["ext_acc_mode"] = _libvncxx.FilterBasicControlRegister_ext_acc_mode_get
    if _newclass:
        ext_acc_mode = _swig_property(_libvncxx.FilterBasicControlRegister_ext_acc_mode_get, _libvncxx.FilterBasicControlRegister_ext_acc_mode_set)
    __swig_setmethods__["ext_gyro_mode"] = _libvncxx.FilterBasicControlRegister_ext_gyro_mode_set
    __swig_getmethods__["ext_gyro_mode"] = _libvncxx.FilterBasicControlRegister_ext_gyro_mode_get
    if _newclass:
        ext_gyro_mode = _swig_property(_libvncxx.FilterBasicControlRegister_ext_gyro_mode_get, _libvncxx.FilterBasicControlRegister_ext_gyro_mode_set)
    __swig_setmethods__["gyro_limit"] = _libvncxx.FilterBasicControlRegister_gyro_limit_set
    __swig_getmethods__["gyro_limit"] = _libvncxx.FilterBasicControlRegister_gyro_limit_get
    if _newclass:
        gyro_limit = _swig_property(_libvncxx.FilterBasicControlRegister_gyro_limit_get, _libvncxx.FilterBasicControlRegister_gyro_limit_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::FilterBasicControlRegister self) -> FilterBasicControlRegister
        __init__(vn::sensors::FilterBasicControlRegister self, vn::protocol::uart::MagneticMode magModeIn, vn::protocol::uart::ExternalSensorMode extMagModeIn, vn::protocol::uart::ExternalSensorMode extAccModeIn, vn::protocol::uart::ExternalSensorMode extGyroModeIn, vec3f gyroLimitIn) -> FilterBasicControlRegister
        """
        this = _libvncxx.new_FilterBasicControlRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_FilterBasicControlRegister
    __del__ = lambda self: None
FilterBasicControlRegister_swigregister = _libvncxx.FilterBasicControlRegister_swigregister
FilterBasicControlRegister_swigregister(FilterBasicControlRegister)

class VpeBasicControlRegister(_object):
    """Proxy of C++ vn::sensors::VpeBasicControlRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VpeBasicControlRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VpeBasicControlRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enable"] = _libvncxx.VpeBasicControlRegister_enable_set
    __swig_getmethods__["enable"] = _libvncxx.VpeBasicControlRegister_enable_get
    if _newclass:
        enable = _swig_property(_libvncxx.VpeBasicControlRegister_enable_get, _libvncxx.VpeBasicControlRegister_enable_set)
    __swig_setmethods__["heading_mode"] = _libvncxx.VpeBasicControlRegister_heading_mode_set
    __swig_getmethods__["heading_mode"] = _libvncxx.VpeBasicControlRegister_heading_mode_get
    if _newclass:
        heading_mode = _swig_property(_libvncxx.VpeBasicControlRegister_heading_mode_get, _libvncxx.VpeBasicControlRegister_heading_mode_set)
    __swig_setmethods__["filtering_mode"] = _libvncxx.VpeBasicControlRegister_filtering_mode_set
    __swig_getmethods__["filtering_mode"] = _libvncxx.VpeBasicControlRegister_filtering_mode_get
    if _newclass:
        filtering_mode = _swig_property(_libvncxx.VpeBasicControlRegister_filtering_mode_get, _libvncxx.VpeBasicControlRegister_filtering_mode_set)
    __swig_setmethods__["tuning_mode"] = _libvncxx.VpeBasicControlRegister_tuning_mode_set
    __swig_getmethods__["tuning_mode"] = _libvncxx.VpeBasicControlRegister_tuning_mode_get
    if _newclass:
        tuning_mode = _swig_property(_libvncxx.VpeBasicControlRegister_tuning_mode_get, _libvncxx.VpeBasicControlRegister_tuning_mode_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::VpeBasicControlRegister self) -> VpeBasicControlRegister
        __init__(vn::sensors::VpeBasicControlRegister self, vn::protocol::uart::VpeEnable enableIn, vn::protocol::uart::HeadingMode headingModeIn, vn::protocol::uart::VpeMode filteringModeIn, vn::protocol::uart::VpeMode tuningModeIn) -> VpeBasicControlRegister
        """
        this = _libvncxx.new_VpeBasicControlRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_VpeBasicControlRegister
    __del__ = lambda self: None
VpeBasicControlRegister_swigregister = _libvncxx.VpeBasicControlRegister_swigregister
VpeBasicControlRegister_swigregister(VpeBasicControlRegister)

class VpeMagnetometerBasicTuningRegister(_object):
    """Proxy of C++ vn::sensors::VpeMagnetometerBasicTuningRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VpeMagnetometerBasicTuningRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VpeMagnetometerBasicTuningRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["base_tuning"] = _libvncxx.VpeMagnetometerBasicTuningRegister_base_tuning_set
    __swig_getmethods__["base_tuning"] = _libvncxx.VpeMagnetometerBasicTuningRegister_base_tuning_get
    if _newclass:
        base_tuning = _swig_property(_libvncxx.VpeMagnetometerBasicTuningRegister_base_tuning_get, _libvncxx.VpeMagnetometerBasicTuningRegister_base_tuning_set)
    __swig_setmethods__["adaptive_tuning"] = _libvncxx.VpeMagnetometerBasicTuningRegister_adaptive_tuning_set
    __swig_getmethods__["adaptive_tuning"] = _libvncxx.VpeMagnetometerBasicTuningRegister_adaptive_tuning_get
    if _newclass:
        adaptive_tuning = _swig_property(_libvncxx.VpeMagnetometerBasicTuningRegister_adaptive_tuning_get, _libvncxx.VpeMagnetometerBasicTuningRegister_adaptive_tuning_set)
    __swig_setmethods__["adaptive_filtering"] = _libvncxx.VpeMagnetometerBasicTuningRegister_adaptive_filtering_set
    __swig_getmethods__["adaptive_filtering"] = _libvncxx.VpeMagnetometerBasicTuningRegister_adaptive_filtering_get
    if _newclass:
        adaptive_filtering = _swig_property(_libvncxx.VpeMagnetometerBasicTuningRegister_adaptive_filtering_get, _libvncxx.VpeMagnetometerBasicTuningRegister_adaptive_filtering_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::VpeMagnetometerBasicTuningRegister self) -> VpeMagnetometerBasicTuningRegister
        __init__(vn::sensors::VpeMagnetometerBasicTuningRegister self, vec3f baseTuningIn, vec3f adaptiveTuningIn, vec3f adaptiveFilteringIn) -> VpeMagnetometerBasicTuningRegister
        """
        this = _libvncxx.new_VpeMagnetometerBasicTuningRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_VpeMagnetometerBasicTuningRegister
    __del__ = lambda self: None
VpeMagnetometerBasicTuningRegister_swigregister = _libvncxx.VpeMagnetometerBasicTuningRegister_swigregister
VpeMagnetometerBasicTuningRegister_swigregister(VpeMagnetometerBasicTuningRegister)

class VpeMagnetometerAdvancedTuningRegister(_object):
    """Proxy of C++ vn::sensors::VpeMagnetometerAdvancedTuningRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VpeMagnetometerAdvancedTuningRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VpeMagnetometerAdvancedTuningRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["min_filtering"] = _libvncxx.VpeMagnetometerAdvancedTuningRegister_min_filtering_set
    __swig_getmethods__["min_filtering"] = _libvncxx.VpeMagnetometerAdvancedTuningRegister_min_filtering_get
    if _newclass:
        min_filtering = _swig_property(_libvncxx.VpeMagnetometerAdvancedTuningRegister_min_filtering_get, _libvncxx.VpeMagnetometerAdvancedTuningRegister_min_filtering_set)
    __swig_setmethods__["max_filtering"] = _libvncxx.VpeMagnetometerAdvancedTuningRegister_max_filtering_set
    __swig_getmethods__["max_filtering"] = _libvncxx.VpeMagnetometerAdvancedTuningRegister_max_filtering_get
    if _newclass:
        max_filtering = _swig_property(_libvncxx.VpeMagnetometerAdvancedTuningRegister_max_filtering_get, _libvncxx.VpeMagnetometerAdvancedTuningRegister_max_filtering_set)
    __swig_setmethods__["max_adapt_rate"] = _libvncxx.VpeMagnetometerAdvancedTuningRegister_max_adapt_rate_set
    __swig_getmethods__["max_adapt_rate"] = _libvncxx.VpeMagnetometerAdvancedTuningRegister_max_adapt_rate_get
    if _newclass:
        max_adapt_rate = _swig_property(_libvncxx.VpeMagnetometerAdvancedTuningRegister_max_adapt_rate_get, _libvncxx.VpeMagnetometerAdvancedTuningRegister_max_adapt_rate_set)
    __swig_setmethods__["disturbance_window"] = _libvncxx.VpeMagnetometerAdvancedTuningRegister_disturbance_window_set
    __swig_getmethods__["disturbance_window"] = _libvncxx.VpeMagnetometerAdvancedTuningRegister_disturbance_window_get
    if _newclass:
        disturbance_window = _swig_property(_libvncxx.VpeMagnetometerAdvancedTuningRegister_disturbance_window_get, _libvncxx.VpeMagnetometerAdvancedTuningRegister_disturbance_window_set)
    __swig_setmethods__["max_tuning"] = _libvncxx.VpeMagnetometerAdvancedTuningRegister_max_tuning_set
    __swig_getmethods__["max_tuning"] = _libvncxx.VpeMagnetometerAdvancedTuningRegister_max_tuning_get
    if _newclass:
        max_tuning = _swig_property(_libvncxx.VpeMagnetometerAdvancedTuningRegister_max_tuning_get, _libvncxx.VpeMagnetometerAdvancedTuningRegister_max_tuning_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::VpeMagnetometerAdvancedTuningRegister self) -> VpeMagnetometerAdvancedTuningRegister
        __init__(vn::sensors::VpeMagnetometerAdvancedTuningRegister self, vec3f minFilteringIn, vec3f maxFilteringIn, float maxAdaptRateIn, float disturbanceWindowIn, float maxTuningIn) -> VpeMagnetometerAdvancedTuningRegister
        """
        this = _libvncxx.new_VpeMagnetometerAdvancedTuningRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_VpeMagnetometerAdvancedTuningRegister
    __del__ = lambda self: None
VpeMagnetometerAdvancedTuningRegister_swigregister = _libvncxx.VpeMagnetometerAdvancedTuningRegister_swigregister
VpeMagnetometerAdvancedTuningRegister_swigregister(VpeMagnetometerAdvancedTuningRegister)

class VpeAccelerometerBasicTuningRegister(_object):
    """Proxy of C++ vn::sensors::VpeAccelerometerBasicTuningRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VpeAccelerometerBasicTuningRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VpeAccelerometerBasicTuningRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["base_tuning"] = _libvncxx.VpeAccelerometerBasicTuningRegister_base_tuning_set
    __swig_getmethods__["base_tuning"] = _libvncxx.VpeAccelerometerBasicTuningRegister_base_tuning_get
    if _newclass:
        base_tuning = _swig_property(_libvncxx.VpeAccelerometerBasicTuningRegister_base_tuning_get, _libvncxx.VpeAccelerometerBasicTuningRegister_base_tuning_set)
    __swig_setmethods__["adaptive_tuning"] = _libvncxx.VpeAccelerometerBasicTuningRegister_adaptive_tuning_set
    __swig_getmethods__["adaptive_tuning"] = _libvncxx.VpeAccelerometerBasicTuningRegister_adaptive_tuning_get
    if _newclass:
        adaptive_tuning = _swig_property(_libvncxx.VpeAccelerometerBasicTuningRegister_adaptive_tuning_get, _libvncxx.VpeAccelerometerBasicTuningRegister_adaptive_tuning_set)
    __swig_setmethods__["adaptive_filtering"] = _libvncxx.VpeAccelerometerBasicTuningRegister_adaptive_filtering_set
    __swig_getmethods__["adaptive_filtering"] = _libvncxx.VpeAccelerometerBasicTuningRegister_adaptive_filtering_get
    if _newclass:
        adaptive_filtering = _swig_property(_libvncxx.VpeAccelerometerBasicTuningRegister_adaptive_filtering_get, _libvncxx.VpeAccelerometerBasicTuningRegister_adaptive_filtering_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::VpeAccelerometerBasicTuningRegister self) -> VpeAccelerometerBasicTuningRegister
        __init__(vn::sensors::VpeAccelerometerBasicTuningRegister self, vec3f baseTuningIn, vec3f adaptiveTuningIn, vec3f adaptiveFilteringIn) -> VpeAccelerometerBasicTuningRegister
        """
        this = _libvncxx.new_VpeAccelerometerBasicTuningRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_VpeAccelerometerBasicTuningRegister
    __del__ = lambda self: None
VpeAccelerometerBasicTuningRegister_swigregister = _libvncxx.VpeAccelerometerBasicTuningRegister_swigregister
VpeAccelerometerBasicTuningRegister_swigregister(VpeAccelerometerBasicTuningRegister)

class VpeAccelerometerAdvancedTuningRegister(_object):
    """Proxy of C++ vn::sensors::VpeAccelerometerAdvancedTuningRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VpeAccelerometerAdvancedTuningRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VpeAccelerometerAdvancedTuningRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["min_filtering"] = _libvncxx.VpeAccelerometerAdvancedTuningRegister_min_filtering_set
    __swig_getmethods__["min_filtering"] = _libvncxx.VpeAccelerometerAdvancedTuningRegister_min_filtering_get
    if _newclass:
        min_filtering = _swig_property(_libvncxx.VpeAccelerometerAdvancedTuningRegister_min_filtering_get, _libvncxx.VpeAccelerometerAdvancedTuningRegister_min_filtering_set)
    __swig_setmethods__["max_filtering"] = _libvncxx.VpeAccelerometerAdvancedTuningRegister_max_filtering_set
    __swig_getmethods__["max_filtering"] = _libvncxx.VpeAccelerometerAdvancedTuningRegister_max_filtering_get
    if _newclass:
        max_filtering = _swig_property(_libvncxx.VpeAccelerometerAdvancedTuningRegister_max_filtering_get, _libvncxx.VpeAccelerometerAdvancedTuningRegister_max_filtering_set)
    __swig_setmethods__["max_adapt_rate"] = _libvncxx.VpeAccelerometerAdvancedTuningRegister_max_adapt_rate_set
    __swig_getmethods__["max_adapt_rate"] = _libvncxx.VpeAccelerometerAdvancedTuningRegister_max_adapt_rate_get
    if _newclass:
        max_adapt_rate = _swig_property(_libvncxx.VpeAccelerometerAdvancedTuningRegister_max_adapt_rate_get, _libvncxx.VpeAccelerometerAdvancedTuningRegister_max_adapt_rate_set)
    __swig_setmethods__["disturbance_window"] = _libvncxx.VpeAccelerometerAdvancedTuningRegister_disturbance_window_set
    __swig_getmethods__["disturbance_window"] = _libvncxx.VpeAccelerometerAdvancedTuningRegister_disturbance_window_get
    if _newclass:
        disturbance_window = _swig_property(_libvncxx.VpeAccelerometerAdvancedTuningRegister_disturbance_window_get, _libvncxx.VpeAccelerometerAdvancedTuningRegister_disturbance_window_set)
    __swig_setmethods__["max_tuning"] = _libvncxx.VpeAccelerometerAdvancedTuningRegister_max_tuning_set
    __swig_getmethods__["max_tuning"] = _libvncxx.VpeAccelerometerAdvancedTuningRegister_max_tuning_get
    if _newclass:
        max_tuning = _swig_property(_libvncxx.VpeAccelerometerAdvancedTuningRegister_max_tuning_get, _libvncxx.VpeAccelerometerAdvancedTuningRegister_max_tuning_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::VpeAccelerometerAdvancedTuningRegister self) -> VpeAccelerometerAdvancedTuningRegister
        __init__(vn::sensors::VpeAccelerometerAdvancedTuningRegister self, vec3f minFilteringIn, vec3f maxFilteringIn, float maxAdaptRateIn, float disturbanceWindowIn, float maxTuningIn) -> VpeAccelerometerAdvancedTuningRegister
        """
        this = _libvncxx.new_VpeAccelerometerAdvancedTuningRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_VpeAccelerometerAdvancedTuningRegister
    __del__ = lambda self: None
VpeAccelerometerAdvancedTuningRegister_swigregister = _libvncxx.VpeAccelerometerAdvancedTuningRegister_swigregister
VpeAccelerometerAdvancedTuningRegister_swigregister(VpeAccelerometerAdvancedTuningRegister)

class VpeGyroBasicTuningRegister(_object):
    """Proxy of C++ vn::sensors::VpeGyroBasicTuningRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VpeGyroBasicTuningRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VpeGyroBasicTuningRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["angularWalkVariance"] = _libvncxx.VpeGyroBasicTuningRegister_angularWalkVariance_set
    __swig_getmethods__["angularWalkVariance"] = _libvncxx.VpeGyroBasicTuningRegister_angularWalkVariance_get
    if _newclass:
        angularWalkVariance = _swig_property(_libvncxx.VpeGyroBasicTuningRegister_angularWalkVariance_get, _libvncxx.VpeGyroBasicTuningRegister_angularWalkVariance_set)
    __swig_setmethods__["baseTuning"] = _libvncxx.VpeGyroBasicTuningRegister_baseTuning_set
    __swig_getmethods__["baseTuning"] = _libvncxx.VpeGyroBasicTuningRegister_baseTuning_get
    if _newclass:
        baseTuning = _swig_property(_libvncxx.VpeGyroBasicTuningRegister_baseTuning_get, _libvncxx.VpeGyroBasicTuningRegister_baseTuning_set)
    __swig_setmethods__["adaptiveTuning"] = _libvncxx.VpeGyroBasicTuningRegister_adaptiveTuning_set
    __swig_getmethods__["adaptiveTuning"] = _libvncxx.VpeGyroBasicTuningRegister_adaptiveTuning_get
    if _newclass:
        adaptiveTuning = _swig_property(_libvncxx.VpeGyroBasicTuningRegister_adaptiveTuning_get, _libvncxx.VpeGyroBasicTuningRegister_adaptiveTuning_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::VpeGyroBasicTuningRegister self) -> VpeGyroBasicTuningRegister
        __init__(vn::sensors::VpeGyroBasicTuningRegister self, vec3f angularWalkVarianceIn, vec3f baseTuningIn, vec3f adaptiveTuningIn) -> VpeGyroBasicTuningRegister
        """
        this = _libvncxx.new_VpeGyroBasicTuningRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_VpeGyroBasicTuningRegister
    __del__ = lambda self: None
VpeGyroBasicTuningRegister_swigregister = _libvncxx.VpeGyroBasicTuningRegister_swigregister
VpeGyroBasicTuningRegister_swigregister(VpeGyroBasicTuningRegister)

class MagnetometerCalibrationControlRegister(_object):
    """Proxy of C++ vn::sensors::MagnetometerCalibrationControlRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MagnetometerCalibrationControlRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MagnetometerCalibrationControlRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hsi_mode"] = _libvncxx.MagnetometerCalibrationControlRegister_hsi_mode_set
    __swig_getmethods__["hsi_mode"] = _libvncxx.MagnetometerCalibrationControlRegister_hsi_mode_get
    if _newclass:
        hsi_mode = _swig_property(_libvncxx.MagnetometerCalibrationControlRegister_hsi_mode_get, _libvncxx.MagnetometerCalibrationControlRegister_hsi_mode_set)
    __swig_setmethods__["hsi_output"] = _libvncxx.MagnetometerCalibrationControlRegister_hsi_output_set
    __swig_getmethods__["hsi_output"] = _libvncxx.MagnetometerCalibrationControlRegister_hsi_output_get
    if _newclass:
        hsi_output = _swig_property(_libvncxx.MagnetometerCalibrationControlRegister_hsi_output_get, _libvncxx.MagnetometerCalibrationControlRegister_hsi_output_set)
    __swig_setmethods__["converge_rate"] = _libvncxx.MagnetometerCalibrationControlRegister_converge_rate_set
    __swig_getmethods__["converge_rate"] = _libvncxx.MagnetometerCalibrationControlRegister_converge_rate_get
    if _newclass:
        converge_rate = _swig_property(_libvncxx.MagnetometerCalibrationControlRegister_converge_rate_get, _libvncxx.MagnetometerCalibrationControlRegister_converge_rate_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::MagnetometerCalibrationControlRegister self) -> MagnetometerCalibrationControlRegister
        __init__(vn::sensors::MagnetometerCalibrationControlRegister self, vn::protocol::uart::HsiMode hsiModeIn, vn::protocol::uart::HsiOutput hsiOutputIn, uint8_t convergeRateIn) -> MagnetometerCalibrationControlRegister
        """
        this = _libvncxx.new_MagnetometerCalibrationControlRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_MagnetometerCalibrationControlRegister
    __del__ = lambda self: None
MagnetometerCalibrationControlRegister_swigregister = _libvncxx.MagnetometerCalibrationControlRegister_swigregister
MagnetometerCalibrationControlRegister_swigregister(MagnetometerCalibrationControlRegister)

class CalculatedMagnetometerCalibrationRegister(_object):
    """Proxy of C++ vn::sensors::CalculatedMagnetometerCalibrationRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalculatedMagnetometerCalibrationRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalculatedMagnetometerCalibrationRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["c"] = _libvncxx.CalculatedMagnetometerCalibrationRegister_c_set
    __swig_getmethods__["c"] = _libvncxx.CalculatedMagnetometerCalibrationRegister_c_get
    if _newclass:
        c = _swig_property(_libvncxx.CalculatedMagnetometerCalibrationRegister_c_get, _libvncxx.CalculatedMagnetometerCalibrationRegister_c_set)
    __swig_setmethods__["b"] = _libvncxx.CalculatedMagnetometerCalibrationRegister_b_set
    __swig_getmethods__["b"] = _libvncxx.CalculatedMagnetometerCalibrationRegister_b_get
    if _newclass:
        b = _swig_property(_libvncxx.CalculatedMagnetometerCalibrationRegister_b_get, _libvncxx.CalculatedMagnetometerCalibrationRegister_b_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::CalculatedMagnetometerCalibrationRegister self) -> CalculatedMagnetometerCalibrationRegister
        __init__(vn::sensors::CalculatedMagnetometerCalibrationRegister self, mat3f cIn, vec3f bIn) -> CalculatedMagnetometerCalibrationRegister
        """
        this = _libvncxx.new_CalculatedMagnetometerCalibrationRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_CalculatedMagnetometerCalibrationRegister
    __del__ = lambda self: None
CalculatedMagnetometerCalibrationRegister_swigregister = _libvncxx.CalculatedMagnetometerCalibrationRegister_swigregister
CalculatedMagnetometerCalibrationRegister_swigregister(CalculatedMagnetometerCalibrationRegister)

class VelocityCompensationControlRegister(_object):
    """Proxy of C++ vn::sensors::VelocityCompensationControlRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VelocityCompensationControlRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VelocityCompensationControlRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mode"] = _libvncxx.VelocityCompensationControlRegister_mode_set
    __swig_getmethods__["mode"] = _libvncxx.VelocityCompensationControlRegister_mode_get
    if _newclass:
        mode = _swig_property(_libvncxx.VelocityCompensationControlRegister_mode_get, _libvncxx.VelocityCompensationControlRegister_mode_set)
    __swig_setmethods__["velocity_tuning"] = _libvncxx.VelocityCompensationControlRegister_velocity_tuning_set
    __swig_getmethods__["velocity_tuning"] = _libvncxx.VelocityCompensationControlRegister_velocity_tuning_get
    if _newclass:
        velocity_tuning = _swig_property(_libvncxx.VelocityCompensationControlRegister_velocity_tuning_get, _libvncxx.VelocityCompensationControlRegister_velocity_tuning_set)
    __swig_setmethods__["rate_tuning"] = _libvncxx.VelocityCompensationControlRegister_rate_tuning_set
    __swig_getmethods__["rate_tuning"] = _libvncxx.VelocityCompensationControlRegister_rate_tuning_get
    if _newclass:
        rate_tuning = _swig_property(_libvncxx.VelocityCompensationControlRegister_rate_tuning_get, _libvncxx.VelocityCompensationControlRegister_rate_tuning_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::VelocityCompensationControlRegister self) -> VelocityCompensationControlRegister
        __init__(vn::sensors::VelocityCompensationControlRegister self, vn::protocol::uart::VelocityCompensationMode modeIn, float velocityTuningIn, float rateTuningIn) -> VelocityCompensationControlRegister
        """
        this = _libvncxx.new_VelocityCompensationControlRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_VelocityCompensationControlRegister
    __del__ = lambda self: None
VelocityCompensationControlRegister_swigregister = _libvncxx.VelocityCompensationControlRegister_swigregister
VelocityCompensationControlRegister_swigregister(VelocityCompensationControlRegister)

class VelocityCompensationStatusRegister(_object):
    """Proxy of C++ vn::sensors::VelocityCompensationStatusRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VelocityCompensationStatusRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VelocityCompensationStatusRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _libvncxx.VelocityCompensationStatusRegister_x_set
    __swig_getmethods__["x"] = _libvncxx.VelocityCompensationStatusRegister_x_get
    if _newclass:
        x = _swig_property(_libvncxx.VelocityCompensationStatusRegister_x_get, _libvncxx.VelocityCompensationStatusRegister_x_set)
    __swig_setmethods__["x_dot"] = _libvncxx.VelocityCompensationStatusRegister_x_dot_set
    __swig_getmethods__["x_dot"] = _libvncxx.VelocityCompensationStatusRegister_x_dot_get
    if _newclass:
        x_dot = _swig_property(_libvncxx.VelocityCompensationStatusRegister_x_dot_get, _libvncxx.VelocityCompensationStatusRegister_x_dot_set)
    __swig_setmethods__["accel_offset"] = _libvncxx.VelocityCompensationStatusRegister_accel_offset_set
    __swig_getmethods__["accel_offset"] = _libvncxx.VelocityCompensationStatusRegister_accel_offset_get
    if _newclass:
        accel_offset = _swig_property(_libvncxx.VelocityCompensationStatusRegister_accel_offset_get, _libvncxx.VelocityCompensationStatusRegister_accel_offset_set)
    __swig_setmethods__["omega"] = _libvncxx.VelocityCompensationStatusRegister_omega_set
    __swig_getmethods__["omega"] = _libvncxx.VelocityCompensationStatusRegister_omega_get
    if _newclass:
        omega = _swig_property(_libvncxx.VelocityCompensationStatusRegister_omega_get, _libvncxx.VelocityCompensationStatusRegister_omega_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::VelocityCompensationStatusRegister self) -> VelocityCompensationStatusRegister
        __init__(vn::sensors::VelocityCompensationStatusRegister self, float xIn, float xDotIn, vec3f accelOffsetIn, vec3f omegaIn) -> VelocityCompensationStatusRegister
        """
        this = _libvncxx.new_VelocityCompensationStatusRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_VelocityCompensationStatusRegister
    __del__ = lambda self: None
VelocityCompensationStatusRegister_swigregister = _libvncxx.VelocityCompensationStatusRegister_swigregister
VelocityCompensationStatusRegister_swigregister(VelocityCompensationStatusRegister)

class ImuMeasurementsRegister(_object):
    """Proxy of C++ vn::sensors::ImuMeasurementsRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImuMeasurementsRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImuMeasurementsRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mag"] = _libvncxx.ImuMeasurementsRegister_mag_set
    __swig_getmethods__["mag"] = _libvncxx.ImuMeasurementsRegister_mag_get
    if _newclass:
        mag = _swig_property(_libvncxx.ImuMeasurementsRegister_mag_get, _libvncxx.ImuMeasurementsRegister_mag_set)
    __swig_setmethods__["accel"] = _libvncxx.ImuMeasurementsRegister_accel_set
    __swig_getmethods__["accel"] = _libvncxx.ImuMeasurementsRegister_accel_get
    if _newclass:
        accel = _swig_property(_libvncxx.ImuMeasurementsRegister_accel_get, _libvncxx.ImuMeasurementsRegister_accel_set)
    __swig_setmethods__["gyro"] = _libvncxx.ImuMeasurementsRegister_gyro_set
    __swig_getmethods__["gyro"] = _libvncxx.ImuMeasurementsRegister_gyro_get
    if _newclass:
        gyro = _swig_property(_libvncxx.ImuMeasurementsRegister_gyro_get, _libvncxx.ImuMeasurementsRegister_gyro_set)
    __swig_setmethods__["temp"] = _libvncxx.ImuMeasurementsRegister_temp_set
    __swig_getmethods__["temp"] = _libvncxx.ImuMeasurementsRegister_temp_get
    if _newclass:
        temp = _swig_property(_libvncxx.ImuMeasurementsRegister_temp_get, _libvncxx.ImuMeasurementsRegister_temp_set)
    __swig_setmethods__["pressure"] = _libvncxx.ImuMeasurementsRegister_pressure_set
    __swig_getmethods__["pressure"] = _libvncxx.ImuMeasurementsRegister_pressure_get
    if _newclass:
        pressure = _swig_property(_libvncxx.ImuMeasurementsRegister_pressure_get, _libvncxx.ImuMeasurementsRegister_pressure_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::ImuMeasurementsRegister self) -> ImuMeasurementsRegister
        __init__(vn::sensors::ImuMeasurementsRegister self, vec3f magIn, vec3f accelIn, vec3f gyroIn, float tempIn, float pressureIn) -> ImuMeasurementsRegister
        """
        this = _libvncxx.new_ImuMeasurementsRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_ImuMeasurementsRegister
    __del__ = lambda self: None
ImuMeasurementsRegister_swigregister = _libvncxx.ImuMeasurementsRegister_swigregister
ImuMeasurementsRegister_swigregister(ImuMeasurementsRegister)

class GpsConfigurationRegister(_object):
    """Proxy of C++ vn::sensors::GpsConfigurationRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GpsConfigurationRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GpsConfigurationRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mode"] = _libvncxx.GpsConfigurationRegister_mode_set
    __swig_getmethods__["mode"] = _libvncxx.GpsConfigurationRegister_mode_get
    if _newclass:
        mode = _swig_property(_libvncxx.GpsConfigurationRegister_mode_get, _libvncxx.GpsConfigurationRegister_mode_set)
    __swig_setmethods__["pps_source"] = _libvncxx.GpsConfigurationRegister_pps_source_set
    __swig_getmethods__["pps_source"] = _libvncxx.GpsConfigurationRegister_pps_source_get
    if _newclass:
        pps_source = _swig_property(_libvncxx.GpsConfigurationRegister_pps_source_get, _libvncxx.GpsConfigurationRegister_pps_source_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::GpsConfigurationRegister self) -> GpsConfigurationRegister
        __init__(vn::sensors::GpsConfigurationRegister self, vn::protocol::uart::GpsMode modeIn, vn::protocol::uart::PpsSource ppsSourceIn) -> GpsConfigurationRegister
        """
        this = _libvncxx.new_GpsConfigurationRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_GpsConfigurationRegister
    __del__ = lambda self: None
GpsConfigurationRegister_swigregister = _libvncxx.GpsConfigurationRegister_swigregister
GpsConfigurationRegister_swigregister(GpsConfigurationRegister)

class GpsSolutionLlaRegister(_object):
    """Proxy of C++ vn::sensors::GpsSolutionLlaRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GpsSolutionLlaRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GpsSolutionLlaRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["time"] = _libvncxx.GpsSolutionLlaRegister_time_set
    __swig_getmethods__["time"] = _libvncxx.GpsSolutionLlaRegister_time_get
    if _newclass:
        time = _swig_property(_libvncxx.GpsSolutionLlaRegister_time_get, _libvncxx.GpsSolutionLlaRegister_time_set)
    __swig_setmethods__["week"] = _libvncxx.GpsSolutionLlaRegister_week_set
    __swig_getmethods__["week"] = _libvncxx.GpsSolutionLlaRegister_week_get
    if _newclass:
        week = _swig_property(_libvncxx.GpsSolutionLlaRegister_week_get, _libvncxx.GpsSolutionLlaRegister_week_set)
    __swig_setmethods__["gps_fix"] = _libvncxx.GpsSolutionLlaRegister_gps_fix_set
    __swig_getmethods__["gps_fix"] = _libvncxx.GpsSolutionLlaRegister_gps_fix_get
    if _newclass:
        gps_fix = _swig_property(_libvncxx.GpsSolutionLlaRegister_gps_fix_get, _libvncxx.GpsSolutionLlaRegister_gps_fix_set)
    __swig_setmethods__["num_sats"] = _libvncxx.GpsSolutionLlaRegister_num_sats_set
    __swig_getmethods__["num_sats"] = _libvncxx.GpsSolutionLlaRegister_num_sats_get
    if _newclass:
        num_sats = _swig_property(_libvncxx.GpsSolutionLlaRegister_num_sats_get, _libvncxx.GpsSolutionLlaRegister_num_sats_set)
    __swig_setmethods__["lla"] = _libvncxx.GpsSolutionLlaRegister_lla_set
    __swig_getmethods__["lla"] = _libvncxx.GpsSolutionLlaRegister_lla_get
    if _newclass:
        lla = _swig_property(_libvncxx.GpsSolutionLlaRegister_lla_get, _libvncxx.GpsSolutionLlaRegister_lla_set)
    __swig_setmethods__["ned_vel"] = _libvncxx.GpsSolutionLlaRegister_ned_vel_set
    __swig_getmethods__["ned_vel"] = _libvncxx.GpsSolutionLlaRegister_ned_vel_get
    if _newclass:
        ned_vel = _swig_property(_libvncxx.GpsSolutionLlaRegister_ned_vel_get, _libvncxx.GpsSolutionLlaRegister_ned_vel_set)
    __swig_setmethods__["ned_acc"] = _libvncxx.GpsSolutionLlaRegister_ned_acc_set
    __swig_getmethods__["ned_acc"] = _libvncxx.GpsSolutionLlaRegister_ned_acc_get
    if _newclass:
        ned_acc = _swig_property(_libvncxx.GpsSolutionLlaRegister_ned_acc_get, _libvncxx.GpsSolutionLlaRegister_ned_acc_set)
    __swig_setmethods__["speed_acc"] = _libvncxx.GpsSolutionLlaRegister_speed_acc_set
    __swig_getmethods__["speed_acc"] = _libvncxx.GpsSolutionLlaRegister_speed_acc_get
    if _newclass:
        speed_acc = _swig_property(_libvncxx.GpsSolutionLlaRegister_speed_acc_get, _libvncxx.GpsSolutionLlaRegister_speed_acc_set)
    __swig_setmethods__["time_acc"] = _libvncxx.GpsSolutionLlaRegister_time_acc_set
    __swig_getmethods__["time_acc"] = _libvncxx.GpsSolutionLlaRegister_time_acc_get
    if _newclass:
        time_acc = _swig_property(_libvncxx.GpsSolutionLlaRegister_time_acc_get, _libvncxx.GpsSolutionLlaRegister_time_acc_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::GpsSolutionLlaRegister self) -> GpsSolutionLlaRegister
        __init__(vn::sensors::GpsSolutionLlaRegister self, double timeIn, uint16_t weekIn, vn::protocol::uart::GpsFix gpsFixIn, uint8_t numSatsIn, vec3d llaIn, vec3f nedVelIn, vec3f nedAccIn, float speedAccIn, float timeAccIn) -> GpsSolutionLlaRegister
        """
        this = _libvncxx.new_GpsSolutionLlaRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_GpsSolutionLlaRegister
    __del__ = lambda self: None
GpsSolutionLlaRegister_swigregister = _libvncxx.GpsSolutionLlaRegister_swigregister
GpsSolutionLlaRegister_swigregister(GpsSolutionLlaRegister)

class GpsSolutionEcefRegister(_object):
    """Proxy of C++ vn::sensors::GpsSolutionEcefRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GpsSolutionEcefRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GpsSolutionEcefRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tow"] = _libvncxx.GpsSolutionEcefRegister_tow_set
    __swig_getmethods__["tow"] = _libvncxx.GpsSolutionEcefRegister_tow_get
    if _newclass:
        tow = _swig_property(_libvncxx.GpsSolutionEcefRegister_tow_get, _libvncxx.GpsSolutionEcefRegister_tow_set)
    __swig_setmethods__["week"] = _libvncxx.GpsSolutionEcefRegister_week_set
    __swig_getmethods__["week"] = _libvncxx.GpsSolutionEcefRegister_week_get
    if _newclass:
        week = _swig_property(_libvncxx.GpsSolutionEcefRegister_week_get, _libvncxx.GpsSolutionEcefRegister_week_set)
    __swig_setmethods__["gps_fix"] = _libvncxx.GpsSolutionEcefRegister_gps_fix_set
    __swig_getmethods__["gps_fix"] = _libvncxx.GpsSolutionEcefRegister_gps_fix_get
    if _newclass:
        gps_fix = _swig_property(_libvncxx.GpsSolutionEcefRegister_gps_fix_get, _libvncxx.GpsSolutionEcefRegister_gps_fix_set)
    __swig_setmethods__["num_sats"] = _libvncxx.GpsSolutionEcefRegister_num_sats_set
    __swig_getmethods__["num_sats"] = _libvncxx.GpsSolutionEcefRegister_num_sats_get
    if _newclass:
        num_sats = _swig_property(_libvncxx.GpsSolutionEcefRegister_num_sats_get, _libvncxx.GpsSolutionEcefRegister_num_sats_set)
    __swig_setmethods__["position"] = _libvncxx.GpsSolutionEcefRegister_position_set
    __swig_getmethods__["position"] = _libvncxx.GpsSolutionEcefRegister_position_get
    if _newclass:
        position = _swig_property(_libvncxx.GpsSolutionEcefRegister_position_get, _libvncxx.GpsSolutionEcefRegister_position_set)
    __swig_setmethods__["velocity"] = _libvncxx.GpsSolutionEcefRegister_velocity_set
    __swig_getmethods__["velocity"] = _libvncxx.GpsSolutionEcefRegister_velocity_get
    if _newclass:
        velocity = _swig_property(_libvncxx.GpsSolutionEcefRegister_velocity_get, _libvncxx.GpsSolutionEcefRegister_velocity_set)
    __swig_setmethods__["pos_acc"] = _libvncxx.GpsSolutionEcefRegister_pos_acc_set
    __swig_getmethods__["pos_acc"] = _libvncxx.GpsSolutionEcefRegister_pos_acc_get
    if _newclass:
        pos_acc = _swig_property(_libvncxx.GpsSolutionEcefRegister_pos_acc_get, _libvncxx.GpsSolutionEcefRegister_pos_acc_set)
    __swig_setmethods__["speed_acc"] = _libvncxx.GpsSolutionEcefRegister_speed_acc_set
    __swig_getmethods__["speed_acc"] = _libvncxx.GpsSolutionEcefRegister_speed_acc_get
    if _newclass:
        speed_acc = _swig_property(_libvncxx.GpsSolutionEcefRegister_speed_acc_get, _libvncxx.GpsSolutionEcefRegister_speed_acc_set)
    __swig_setmethods__["time_acc"] = _libvncxx.GpsSolutionEcefRegister_time_acc_set
    __swig_getmethods__["time_acc"] = _libvncxx.GpsSolutionEcefRegister_time_acc_get
    if _newclass:
        time_acc = _swig_property(_libvncxx.GpsSolutionEcefRegister_time_acc_get, _libvncxx.GpsSolutionEcefRegister_time_acc_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::GpsSolutionEcefRegister self) -> GpsSolutionEcefRegister
        __init__(vn::sensors::GpsSolutionEcefRegister self, double towIn, uint16_t weekIn, vn::protocol::uart::GpsFix gpsFixIn, uint8_t numSatsIn, vec3d positionIn, vec3f velocityIn, vec3f posAccIn, float speedAccIn, float timeAccIn) -> GpsSolutionEcefRegister
        """
        this = _libvncxx.new_GpsSolutionEcefRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_GpsSolutionEcefRegister
    __del__ = lambda self: None
GpsSolutionEcefRegister_swigregister = _libvncxx.GpsSolutionEcefRegister_swigregister
GpsSolutionEcefRegister_swigregister(GpsSolutionEcefRegister)

class InsSolutionLlaRegister(_object):
    """Proxy of C++ vn::sensors::InsSolutionLlaRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InsSolutionLlaRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InsSolutionLlaRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["time"] = _libvncxx.InsSolutionLlaRegister_time_set
    __swig_getmethods__["time"] = _libvncxx.InsSolutionLlaRegister_time_get
    if _newclass:
        time = _swig_property(_libvncxx.InsSolutionLlaRegister_time_get, _libvncxx.InsSolutionLlaRegister_time_set)
    __swig_setmethods__["week"] = _libvncxx.InsSolutionLlaRegister_week_set
    __swig_getmethods__["week"] = _libvncxx.InsSolutionLlaRegister_week_get
    if _newclass:
        week = _swig_property(_libvncxx.InsSolutionLlaRegister_week_get, _libvncxx.InsSolutionLlaRegister_week_set)
    __swig_setmethods__["status"] = _libvncxx.InsSolutionLlaRegister_status_set
    __swig_getmethods__["status"] = _libvncxx.InsSolutionLlaRegister_status_get
    if _newclass:
        status = _swig_property(_libvncxx.InsSolutionLlaRegister_status_get, _libvncxx.InsSolutionLlaRegister_status_set)
    __swig_setmethods__["yawPitchRoll"] = _libvncxx.InsSolutionLlaRegister_yawPitchRoll_set
    __swig_getmethods__["yawPitchRoll"] = _libvncxx.InsSolutionLlaRegister_yawPitchRoll_get
    if _newclass:
        yawPitchRoll = _swig_property(_libvncxx.InsSolutionLlaRegister_yawPitchRoll_get, _libvncxx.InsSolutionLlaRegister_yawPitchRoll_set)
    __swig_setmethods__["position"] = _libvncxx.InsSolutionLlaRegister_position_set
    __swig_getmethods__["position"] = _libvncxx.InsSolutionLlaRegister_position_get
    if _newclass:
        position = _swig_property(_libvncxx.InsSolutionLlaRegister_position_get, _libvncxx.InsSolutionLlaRegister_position_set)
    __swig_setmethods__["nedVel"] = _libvncxx.InsSolutionLlaRegister_nedVel_set
    __swig_getmethods__["nedVel"] = _libvncxx.InsSolutionLlaRegister_nedVel_get
    if _newclass:
        nedVel = _swig_property(_libvncxx.InsSolutionLlaRegister_nedVel_get, _libvncxx.InsSolutionLlaRegister_nedVel_set)
    __swig_setmethods__["attUncertainty"] = _libvncxx.InsSolutionLlaRegister_attUncertainty_set
    __swig_getmethods__["attUncertainty"] = _libvncxx.InsSolutionLlaRegister_attUncertainty_get
    if _newclass:
        attUncertainty = _swig_property(_libvncxx.InsSolutionLlaRegister_attUncertainty_get, _libvncxx.InsSolutionLlaRegister_attUncertainty_set)
    __swig_setmethods__["posUncertainty"] = _libvncxx.InsSolutionLlaRegister_posUncertainty_set
    __swig_getmethods__["posUncertainty"] = _libvncxx.InsSolutionLlaRegister_posUncertainty_get
    if _newclass:
        posUncertainty = _swig_property(_libvncxx.InsSolutionLlaRegister_posUncertainty_get, _libvncxx.InsSolutionLlaRegister_posUncertainty_set)
    __swig_setmethods__["velUncertainty"] = _libvncxx.InsSolutionLlaRegister_velUncertainty_set
    __swig_getmethods__["velUncertainty"] = _libvncxx.InsSolutionLlaRegister_velUncertainty_get
    if _newclass:
        velUncertainty = _swig_property(_libvncxx.InsSolutionLlaRegister_velUncertainty_get, _libvncxx.InsSolutionLlaRegister_velUncertainty_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::InsSolutionLlaRegister self) -> InsSolutionLlaRegister
        __init__(vn::sensors::InsSolutionLlaRegister self, double timeIn, uint16_t weekIn, uint16_t statusIn, vec3f yawPitchRollIn, vec3d positionIn, vec3f nedVelIn, float attUncertaintyIn, float posUncertaintyIn, float velUncertaintyIn) -> InsSolutionLlaRegister
        """
        this = _libvncxx.new_InsSolutionLlaRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_InsSolutionLlaRegister
    __del__ = lambda self: None
InsSolutionLlaRegister_swigregister = _libvncxx.InsSolutionLlaRegister_swigregister
InsSolutionLlaRegister_swigregister(InsSolutionLlaRegister)

class InsSolutionEcefRegister(_object):
    """Proxy of C++ vn::sensors::InsSolutionEcefRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InsSolutionEcefRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InsSolutionEcefRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["time"] = _libvncxx.InsSolutionEcefRegister_time_set
    __swig_getmethods__["time"] = _libvncxx.InsSolutionEcefRegister_time_get
    if _newclass:
        time = _swig_property(_libvncxx.InsSolutionEcefRegister_time_get, _libvncxx.InsSolutionEcefRegister_time_set)
    __swig_setmethods__["week"] = _libvncxx.InsSolutionEcefRegister_week_set
    __swig_getmethods__["week"] = _libvncxx.InsSolutionEcefRegister_week_get
    if _newclass:
        week = _swig_property(_libvncxx.InsSolutionEcefRegister_week_get, _libvncxx.InsSolutionEcefRegister_week_set)
    __swig_setmethods__["status"] = _libvncxx.InsSolutionEcefRegister_status_set
    __swig_getmethods__["status"] = _libvncxx.InsSolutionEcefRegister_status_get
    if _newclass:
        status = _swig_property(_libvncxx.InsSolutionEcefRegister_status_get, _libvncxx.InsSolutionEcefRegister_status_set)
    __swig_setmethods__["yawPitchRoll"] = _libvncxx.InsSolutionEcefRegister_yawPitchRoll_set
    __swig_getmethods__["yawPitchRoll"] = _libvncxx.InsSolutionEcefRegister_yawPitchRoll_get
    if _newclass:
        yawPitchRoll = _swig_property(_libvncxx.InsSolutionEcefRegister_yawPitchRoll_get, _libvncxx.InsSolutionEcefRegister_yawPitchRoll_set)
    __swig_setmethods__["position"] = _libvncxx.InsSolutionEcefRegister_position_set
    __swig_getmethods__["position"] = _libvncxx.InsSolutionEcefRegister_position_get
    if _newclass:
        position = _swig_property(_libvncxx.InsSolutionEcefRegister_position_get, _libvncxx.InsSolutionEcefRegister_position_set)
    __swig_setmethods__["velocity"] = _libvncxx.InsSolutionEcefRegister_velocity_set
    __swig_getmethods__["velocity"] = _libvncxx.InsSolutionEcefRegister_velocity_get
    if _newclass:
        velocity = _swig_property(_libvncxx.InsSolutionEcefRegister_velocity_get, _libvncxx.InsSolutionEcefRegister_velocity_set)
    __swig_setmethods__["attUncertainty"] = _libvncxx.InsSolutionEcefRegister_attUncertainty_set
    __swig_getmethods__["attUncertainty"] = _libvncxx.InsSolutionEcefRegister_attUncertainty_get
    if _newclass:
        attUncertainty = _swig_property(_libvncxx.InsSolutionEcefRegister_attUncertainty_get, _libvncxx.InsSolutionEcefRegister_attUncertainty_set)
    __swig_setmethods__["posUncertainty"] = _libvncxx.InsSolutionEcefRegister_posUncertainty_set
    __swig_getmethods__["posUncertainty"] = _libvncxx.InsSolutionEcefRegister_posUncertainty_get
    if _newclass:
        posUncertainty = _swig_property(_libvncxx.InsSolutionEcefRegister_posUncertainty_get, _libvncxx.InsSolutionEcefRegister_posUncertainty_set)
    __swig_setmethods__["velUncertainty"] = _libvncxx.InsSolutionEcefRegister_velUncertainty_set
    __swig_getmethods__["velUncertainty"] = _libvncxx.InsSolutionEcefRegister_velUncertainty_get
    if _newclass:
        velUncertainty = _swig_property(_libvncxx.InsSolutionEcefRegister_velUncertainty_get, _libvncxx.InsSolutionEcefRegister_velUncertainty_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::InsSolutionEcefRegister self) -> InsSolutionEcefRegister
        __init__(vn::sensors::InsSolutionEcefRegister self, double timeIn, uint16_t weekIn, uint16_t statusIn, vec3f yawPitchRollIn, vec3d positionIn, vec3f velocityIn, float attUncertaintyIn, float posUncertaintyIn, float velUncertaintyIn) -> InsSolutionEcefRegister
        """
        this = _libvncxx.new_InsSolutionEcefRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_InsSolutionEcefRegister
    __del__ = lambda self: None
InsSolutionEcefRegister_swigregister = _libvncxx.InsSolutionEcefRegister_swigregister
InsSolutionEcefRegister_swigregister(InsSolutionEcefRegister)

class InsBasicConfigurationRegisterVn200(_object):
    """Proxy of C++ vn::sensors::InsBasicConfigurationRegisterVn200 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InsBasicConfigurationRegisterVn200, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InsBasicConfigurationRegisterVn200, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scenario"] = _libvncxx.InsBasicConfigurationRegisterVn200_scenario_set
    __swig_getmethods__["scenario"] = _libvncxx.InsBasicConfigurationRegisterVn200_scenario_get
    if _newclass:
        scenario = _swig_property(_libvncxx.InsBasicConfigurationRegisterVn200_scenario_get, _libvncxx.InsBasicConfigurationRegisterVn200_scenario_set)
    __swig_setmethods__["ahrs_aiding"] = _libvncxx.InsBasicConfigurationRegisterVn200_ahrs_aiding_set
    __swig_getmethods__["ahrs_aiding"] = _libvncxx.InsBasicConfigurationRegisterVn200_ahrs_aiding_get
    if _newclass:
        ahrs_aiding = _swig_property(_libvncxx.InsBasicConfigurationRegisterVn200_ahrs_aiding_get, _libvncxx.InsBasicConfigurationRegisterVn200_ahrs_aiding_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::InsBasicConfigurationRegisterVn200 self) -> InsBasicConfigurationRegisterVn200
        __init__(vn::sensors::InsBasicConfigurationRegisterVn200 self, vn::protocol::uart::Scenario scenarioIn, bool ahrsAidingIn) -> InsBasicConfigurationRegisterVn200
        """
        this = _libvncxx.new_InsBasicConfigurationRegisterVn200(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_InsBasicConfigurationRegisterVn200
    __del__ = lambda self: None
InsBasicConfigurationRegisterVn200_swigregister = _libvncxx.InsBasicConfigurationRegisterVn200_swigregister
InsBasicConfigurationRegisterVn200_swigregister(InsBasicConfigurationRegisterVn200)

class InsBasicConfigurationRegisterVn300(_object):
    """Proxy of C++ vn::sensors::InsBasicConfigurationRegisterVn300 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InsBasicConfigurationRegisterVn300, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InsBasicConfigurationRegisterVn300, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scenario"] = _libvncxx.InsBasicConfigurationRegisterVn300_scenario_set
    __swig_getmethods__["scenario"] = _libvncxx.InsBasicConfigurationRegisterVn300_scenario_get
    if _newclass:
        scenario = _swig_property(_libvncxx.InsBasicConfigurationRegisterVn300_scenario_get, _libvncxx.InsBasicConfigurationRegisterVn300_scenario_set)
    __swig_setmethods__["ahrs_aiding"] = _libvncxx.InsBasicConfigurationRegisterVn300_ahrs_aiding_set
    __swig_getmethods__["ahrs_aiding"] = _libvncxx.InsBasicConfigurationRegisterVn300_ahrs_aiding_get
    if _newclass:
        ahrs_aiding = _swig_property(_libvncxx.InsBasicConfigurationRegisterVn300_ahrs_aiding_get, _libvncxx.InsBasicConfigurationRegisterVn300_ahrs_aiding_set)
    __swig_setmethods__["est_baseline"] = _libvncxx.InsBasicConfigurationRegisterVn300_est_baseline_set
    __swig_getmethods__["est_baseline"] = _libvncxx.InsBasicConfigurationRegisterVn300_est_baseline_get
    if _newclass:
        est_baseline = _swig_property(_libvncxx.InsBasicConfigurationRegisterVn300_est_baseline_get, _libvncxx.InsBasicConfigurationRegisterVn300_est_baseline_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::InsBasicConfigurationRegisterVn300 self) -> InsBasicConfigurationRegisterVn300
        __init__(vn::sensors::InsBasicConfigurationRegisterVn300 self, vn::protocol::uart::Scenario scenarioIn, bool ahrsAidingIn, bool estBaselineIn) -> InsBasicConfigurationRegisterVn300
        """
        this = _libvncxx.new_InsBasicConfigurationRegisterVn300(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_InsBasicConfigurationRegisterVn300
    __del__ = lambda self: None
InsBasicConfigurationRegisterVn300_swigregister = _libvncxx.InsBasicConfigurationRegisterVn300_swigregister
InsBasicConfigurationRegisterVn300_swigregister(InsBasicConfigurationRegisterVn300)

class InsAdvancedConfigurationRegister(_object):
    """Proxy of C++ vn::sensors::InsAdvancedConfigurationRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InsAdvancedConfigurationRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InsAdvancedConfigurationRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["use_mag"] = _libvncxx.InsAdvancedConfigurationRegister_use_mag_set
    __swig_getmethods__["use_mag"] = _libvncxx.InsAdvancedConfigurationRegister_use_mag_get
    if _newclass:
        use_mag = _swig_property(_libvncxx.InsAdvancedConfigurationRegister_use_mag_get, _libvncxx.InsAdvancedConfigurationRegister_use_mag_set)
    __swig_setmethods__["use_pres"] = _libvncxx.InsAdvancedConfigurationRegister_use_pres_set
    __swig_getmethods__["use_pres"] = _libvncxx.InsAdvancedConfigurationRegister_use_pres_get
    if _newclass:
        use_pres = _swig_property(_libvncxx.InsAdvancedConfigurationRegister_use_pres_get, _libvncxx.InsAdvancedConfigurationRegister_use_pres_set)
    __swig_setmethods__["pos_att"] = _libvncxx.InsAdvancedConfigurationRegister_pos_att_set
    __swig_getmethods__["pos_att"] = _libvncxx.InsAdvancedConfigurationRegister_pos_att_get
    if _newclass:
        pos_att = _swig_property(_libvncxx.InsAdvancedConfigurationRegister_pos_att_get, _libvncxx.InsAdvancedConfigurationRegister_pos_att_set)
    __swig_setmethods__["vel_att"] = _libvncxx.InsAdvancedConfigurationRegister_vel_att_set
    __swig_getmethods__["vel_att"] = _libvncxx.InsAdvancedConfigurationRegister_vel_att_get
    if _newclass:
        vel_att = _swig_property(_libvncxx.InsAdvancedConfigurationRegister_vel_att_get, _libvncxx.InsAdvancedConfigurationRegister_vel_att_set)
    __swig_setmethods__["vel_bias"] = _libvncxx.InsAdvancedConfigurationRegister_vel_bias_set
    __swig_getmethods__["vel_bias"] = _libvncxx.InsAdvancedConfigurationRegister_vel_bias_get
    if _newclass:
        vel_bias = _swig_property(_libvncxx.InsAdvancedConfigurationRegister_vel_bias_get, _libvncxx.InsAdvancedConfigurationRegister_vel_bias_set)
    __swig_setmethods__["use_foam"] = _libvncxx.InsAdvancedConfigurationRegister_use_foam_set
    __swig_getmethods__["use_foam"] = _libvncxx.InsAdvancedConfigurationRegister_use_foam_get
    if _newclass:
        use_foam = _swig_property(_libvncxx.InsAdvancedConfigurationRegister_use_foam_get, _libvncxx.InsAdvancedConfigurationRegister_use_foam_set)
    __swig_setmethods__["gps_conv_type"] = _libvncxx.InsAdvancedConfigurationRegister_gps_conv_type_set
    __swig_getmethods__["gps_conv_type"] = _libvncxx.InsAdvancedConfigurationRegister_gps_conv_type_get
    if _newclass:
        gps_conv_type = _swig_property(_libvncxx.InsAdvancedConfigurationRegister_gps_conv_type_get, _libvncxx.InsAdvancedConfigurationRegister_gps_conv_type_set)
    __swig_setmethods__["vel_count"] = _libvncxx.InsAdvancedConfigurationRegister_vel_count_set
    __swig_getmethods__["vel_count"] = _libvncxx.InsAdvancedConfigurationRegister_vel_count_get
    if _newclass:
        vel_count = _swig_property(_libvncxx.InsAdvancedConfigurationRegister_vel_count_get, _libvncxx.InsAdvancedConfigurationRegister_vel_count_set)
    __swig_setmethods__["vel_init"] = _libvncxx.InsAdvancedConfigurationRegister_vel_init_set
    __swig_getmethods__["vel_init"] = _libvncxx.InsAdvancedConfigurationRegister_vel_init_get
    if _newclass:
        vel_init = _swig_property(_libvncxx.InsAdvancedConfigurationRegister_vel_init_get, _libvncxx.InsAdvancedConfigurationRegister_vel_init_set)
    __swig_setmethods__["move_origin"] = _libvncxx.InsAdvancedConfigurationRegister_move_origin_set
    __swig_getmethods__["move_origin"] = _libvncxx.InsAdvancedConfigurationRegister_move_origin_get
    if _newclass:
        move_origin = _swig_property(_libvncxx.InsAdvancedConfigurationRegister_move_origin_get, _libvncxx.InsAdvancedConfigurationRegister_move_origin_set)
    __swig_setmethods__["gps_timeout"] = _libvncxx.InsAdvancedConfigurationRegister_gps_timeout_set
    __swig_getmethods__["gps_timeout"] = _libvncxx.InsAdvancedConfigurationRegister_gps_timeout_get
    if _newclass:
        gps_timeout = _swig_property(_libvncxx.InsAdvancedConfigurationRegister_gps_timeout_get, _libvncxx.InsAdvancedConfigurationRegister_gps_timeout_set)
    __swig_setmethods__["delta_limit_pos"] = _libvncxx.InsAdvancedConfigurationRegister_delta_limit_pos_set
    __swig_getmethods__["delta_limit_pos"] = _libvncxx.InsAdvancedConfigurationRegister_delta_limit_pos_get
    if _newclass:
        delta_limit_pos = _swig_property(_libvncxx.InsAdvancedConfigurationRegister_delta_limit_pos_get, _libvncxx.InsAdvancedConfigurationRegister_delta_limit_pos_set)
    __swig_setmethods__["delta_limit_vel"] = _libvncxx.InsAdvancedConfigurationRegister_delta_limit_vel_set
    __swig_getmethods__["delta_limit_vel"] = _libvncxx.InsAdvancedConfigurationRegister_delta_limit_vel_get
    if _newclass:
        delta_limit_vel = _swig_property(_libvncxx.InsAdvancedConfigurationRegister_delta_limit_vel_get, _libvncxx.InsAdvancedConfigurationRegister_delta_limit_vel_set)
    __swig_setmethods__["min_pos_uncertainty"] = _libvncxx.InsAdvancedConfigurationRegister_min_pos_uncertainty_set
    __swig_getmethods__["min_pos_uncertainty"] = _libvncxx.InsAdvancedConfigurationRegister_min_pos_uncertainty_get
    if _newclass:
        min_pos_uncertainty = _swig_property(_libvncxx.InsAdvancedConfigurationRegister_min_pos_uncertainty_get, _libvncxx.InsAdvancedConfigurationRegister_min_pos_uncertainty_set)
    __swig_setmethods__["min_vel_uncertainty"] = _libvncxx.InsAdvancedConfigurationRegister_min_vel_uncertainty_set
    __swig_getmethods__["min_vel_uncertainty"] = _libvncxx.InsAdvancedConfigurationRegister_min_vel_uncertainty_get
    if _newclass:
        min_vel_uncertainty = _swig_property(_libvncxx.InsAdvancedConfigurationRegister_min_vel_uncertainty_get, _libvncxx.InsAdvancedConfigurationRegister_min_vel_uncertainty_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::InsAdvancedConfigurationRegister self) -> InsAdvancedConfigurationRegister
        __init__(vn::sensors::InsAdvancedConfigurationRegister self, bool useMagIn, bool usePresIn, bool posAttIn, bool velAttIn, bool velBiasIn, vn::protocol::uart::FoamInit useFoamIn, uint8_t gpsCovTypeIn, uint8_t velCountIn, float velInitIn, float moveOriginIn, float gpsTimeoutIn, float deltaLimitPosIn, float deltaLimitVelIn, float minPosUncertaintyIn, float minVelUncertaintyIn) -> InsAdvancedConfigurationRegister
        """
        this = _libvncxx.new_InsAdvancedConfigurationRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_InsAdvancedConfigurationRegister
    __del__ = lambda self: None
InsAdvancedConfigurationRegister_swigregister = _libvncxx.InsAdvancedConfigurationRegister_swigregister
InsAdvancedConfigurationRegister_swigregister(InsAdvancedConfigurationRegister)

class InsStateLlaRegister(_object):
    """Proxy of C++ vn::sensors::InsStateLlaRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InsStateLlaRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InsStateLlaRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["yaw_pitch_roll"] = _libvncxx.InsStateLlaRegister_yaw_pitch_roll_set
    __swig_getmethods__["yaw_pitch_roll"] = _libvncxx.InsStateLlaRegister_yaw_pitch_roll_get
    if _newclass:
        yaw_pitch_roll = _swig_property(_libvncxx.InsStateLlaRegister_yaw_pitch_roll_get, _libvncxx.InsStateLlaRegister_yaw_pitch_roll_set)
    __swig_setmethods__["position"] = _libvncxx.InsStateLlaRegister_position_set
    __swig_getmethods__["position"] = _libvncxx.InsStateLlaRegister_position_get
    if _newclass:
        position = _swig_property(_libvncxx.InsStateLlaRegister_position_get, _libvncxx.InsStateLlaRegister_position_set)
    __swig_setmethods__["velocity"] = _libvncxx.InsStateLlaRegister_velocity_set
    __swig_getmethods__["velocity"] = _libvncxx.InsStateLlaRegister_velocity_get
    if _newclass:
        velocity = _swig_property(_libvncxx.InsStateLlaRegister_velocity_get, _libvncxx.InsStateLlaRegister_velocity_set)
    __swig_setmethods__["accel"] = _libvncxx.InsStateLlaRegister_accel_set
    __swig_getmethods__["accel"] = _libvncxx.InsStateLlaRegister_accel_get
    if _newclass:
        accel = _swig_property(_libvncxx.InsStateLlaRegister_accel_get, _libvncxx.InsStateLlaRegister_accel_set)
    __swig_setmethods__["angular_rate"] = _libvncxx.InsStateLlaRegister_angular_rate_set
    __swig_getmethods__["angular_rate"] = _libvncxx.InsStateLlaRegister_angular_rate_get
    if _newclass:
        angular_rate = _swig_property(_libvncxx.InsStateLlaRegister_angular_rate_get, _libvncxx.InsStateLlaRegister_angular_rate_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::InsStateLlaRegister self) -> InsStateLlaRegister
        __init__(vn::sensors::InsStateLlaRegister self, vec3f yawPitchRollIn, vec3d positionIn, vec3f velocityIn, vec3f accelIn, vec3f angularRateIn) -> InsStateLlaRegister
        """
        this = _libvncxx.new_InsStateLlaRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_InsStateLlaRegister
    __del__ = lambda self: None
InsStateLlaRegister_swigregister = _libvncxx.InsStateLlaRegister_swigregister
InsStateLlaRegister_swigregister(InsStateLlaRegister)

class InsStateEcefRegister(_object):
    """Proxy of C++ vn::sensors::InsStateEcefRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InsStateEcefRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InsStateEcefRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["yaw_pitch_roll"] = _libvncxx.InsStateEcefRegister_yaw_pitch_roll_set
    __swig_getmethods__["yaw_pitch_roll"] = _libvncxx.InsStateEcefRegister_yaw_pitch_roll_get
    if _newclass:
        yaw_pitch_roll = _swig_property(_libvncxx.InsStateEcefRegister_yaw_pitch_roll_get, _libvncxx.InsStateEcefRegister_yaw_pitch_roll_set)
    __swig_setmethods__["position"] = _libvncxx.InsStateEcefRegister_position_set
    __swig_getmethods__["position"] = _libvncxx.InsStateEcefRegister_position_get
    if _newclass:
        position = _swig_property(_libvncxx.InsStateEcefRegister_position_get, _libvncxx.InsStateEcefRegister_position_set)
    __swig_setmethods__["velocity"] = _libvncxx.InsStateEcefRegister_velocity_set
    __swig_getmethods__["velocity"] = _libvncxx.InsStateEcefRegister_velocity_get
    if _newclass:
        velocity = _swig_property(_libvncxx.InsStateEcefRegister_velocity_get, _libvncxx.InsStateEcefRegister_velocity_set)
    __swig_setmethods__["accel"] = _libvncxx.InsStateEcefRegister_accel_set
    __swig_getmethods__["accel"] = _libvncxx.InsStateEcefRegister_accel_get
    if _newclass:
        accel = _swig_property(_libvncxx.InsStateEcefRegister_accel_get, _libvncxx.InsStateEcefRegister_accel_set)
    __swig_setmethods__["angular_rate"] = _libvncxx.InsStateEcefRegister_angular_rate_set
    __swig_getmethods__["angular_rate"] = _libvncxx.InsStateEcefRegister_angular_rate_get
    if _newclass:
        angular_rate = _swig_property(_libvncxx.InsStateEcefRegister_angular_rate_get, _libvncxx.InsStateEcefRegister_angular_rate_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::InsStateEcefRegister self) -> InsStateEcefRegister
        __init__(vn::sensors::InsStateEcefRegister self, vec3f yawPitchRollIn, vec3d positionIn, vec3f velocityIn, vec3f accelIn, vec3f angularRateIn) -> InsStateEcefRegister
        """
        this = _libvncxx.new_InsStateEcefRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_InsStateEcefRegister
    __del__ = lambda self: None
InsStateEcefRegister_swigregister = _libvncxx.InsStateEcefRegister_swigregister
InsStateEcefRegister_swigregister(InsStateEcefRegister)

class StartupFilterBiasEstimateRegister(_object):
    """Proxy of C++ vn::sensors::StartupFilterBiasEstimateRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StartupFilterBiasEstimateRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StartupFilterBiasEstimateRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["gyro_bias"] = _libvncxx.StartupFilterBiasEstimateRegister_gyro_bias_set
    __swig_getmethods__["gyro_bias"] = _libvncxx.StartupFilterBiasEstimateRegister_gyro_bias_get
    if _newclass:
        gyro_bias = _swig_property(_libvncxx.StartupFilterBiasEstimateRegister_gyro_bias_get, _libvncxx.StartupFilterBiasEstimateRegister_gyro_bias_set)
    __swig_setmethods__["accel_bias"] = _libvncxx.StartupFilterBiasEstimateRegister_accel_bias_set
    __swig_getmethods__["accel_bias"] = _libvncxx.StartupFilterBiasEstimateRegister_accel_bias_get
    if _newclass:
        accel_bias = _swig_property(_libvncxx.StartupFilterBiasEstimateRegister_accel_bias_get, _libvncxx.StartupFilterBiasEstimateRegister_accel_bias_set)
    __swig_setmethods__["pressure_bias"] = _libvncxx.StartupFilterBiasEstimateRegister_pressure_bias_set
    __swig_getmethods__["pressure_bias"] = _libvncxx.StartupFilterBiasEstimateRegister_pressure_bias_get
    if _newclass:
        pressure_bias = _swig_property(_libvncxx.StartupFilterBiasEstimateRegister_pressure_bias_get, _libvncxx.StartupFilterBiasEstimateRegister_pressure_bias_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::StartupFilterBiasEstimateRegister self) -> StartupFilterBiasEstimateRegister
        __init__(vn::sensors::StartupFilterBiasEstimateRegister self, vec3f gyroBiasIn, vec3f accelBiasIn, float pressureBiasIn) -> StartupFilterBiasEstimateRegister
        """
        this = _libvncxx.new_StartupFilterBiasEstimateRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_StartupFilterBiasEstimateRegister
    __del__ = lambda self: None
StartupFilterBiasEstimateRegister_swigregister = _libvncxx.StartupFilterBiasEstimateRegister_swigregister
StartupFilterBiasEstimateRegister_swigregister(StartupFilterBiasEstimateRegister)

class DeltaThetaAndDeltaVelocityRegister(_object):
    """Proxy of C++ vn::sensors::DeltaThetaAndDeltaVelocityRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeltaThetaAndDeltaVelocityRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeltaThetaAndDeltaVelocityRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["delta_time"] = _libvncxx.DeltaThetaAndDeltaVelocityRegister_delta_time_set
    __swig_getmethods__["delta_time"] = _libvncxx.DeltaThetaAndDeltaVelocityRegister_delta_time_get
    if _newclass:
        delta_time = _swig_property(_libvncxx.DeltaThetaAndDeltaVelocityRegister_delta_time_get, _libvncxx.DeltaThetaAndDeltaVelocityRegister_delta_time_set)
    __swig_setmethods__["delta_theta"] = _libvncxx.DeltaThetaAndDeltaVelocityRegister_delta_theta_set
    __swig_getmethods__["delta_theta"] = _libvncxx.DeltaThetaAndDeltaVelocityRegister_delta_theta_get
    if _newclass:
        delta_theta = _swig_property(_libvncxx.DeltaThetaAndDeltaVelocityRegister_delta_theta_get, _libvncxx.DeltaThetaAndDeltaVelocityRegister_delta_theta_set)
    __swig_setmethods__["delta_velocity"] = _libvncxx.DeltaThetaAndDeltaVelocityRegister_delta_velocity_set
    __swig_getmethods__["delta_velocity"] = _libvncxx.DeltaThetaAndDeltaVelocityRegister_delta_velocity_get
    if _newclass:
        delta_velocity = _swig_property(_libvncxx.DeltaThetaAndDeltaVelocityRegister_delta_velocity_get, _libvncxx.DeltaThetaAndDeltaVelocityRegister_delta_velocity_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::DeltaThetaAndDeltaVelocityRegister self) -> DeltaThetaAndDeltaVelocityRegister
        __init__(vn::sensors::DeltaThetaAndDeltaVelocityRegister self, float deltaTimeIn, vec3f deltaThetaIn, vec3f deltaVelocityIn) -> DeltaThetaAndDeltaVelocityRegister
        """
        this = _libvncxx.new_DeltaThetaAndDeltaVelocityRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_DeltaThetaAndDeltaVelocityRegister
    __del__ = lambda self: None
DeltaThetaAndDeltaVelocityRegister_swigregister = _libvncxx.DeltaThetaAndDeltaVelocityRegister_swigregister
DeltaThetaAndDeltaVelocityRegister_swigregister(DeltaThetaAndDeltaVelocityRegister)

class DeltaThetaAndDeltaVelocityConfigurationRegister(_object):
    """Proxy of C++ vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeltaThetaAndDeltaVelocityConfigurationRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeltaThetaAndDeltaVelocityConfigurationRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["integration_frame"] = _libvncxx.DeltaThetaAndDeltaVelocityConfigurationRegister_integration_frame_set
    __swig_getmethods__["integration_frame"] = _libvncxx.DeltaThetaAndDeltaVelocityConfigurationRegister_integration_frame_get
    if _newclass:
        integration_frame = _swig_property(_libvncxx.DeltaThetaAndDeltaVelocityConfigurationRegister_integration_frame_get, _libvncxx.DeltaThetaAndDeltaVelocityConfigurationRegister_integration_frame_set)
    __swig_setmethods__["gyro_compensation"] = _libvncxx.DeltaThetaAndDeltaVelocityConfigurationRegister_gyro_compensation_set
    __swig_getmethods__["gyro_compensation"] = _libvncxx.DeltaThetaAndDeltaVelocityConfigurationRegister_gyro_compensation_get
    if _newclass:
        gyro_compensation = _swig_property(_libvncxx.DeltaThetaAndDeltaVelocityConfigurationRegister_gyro_compensation_get, _libvncxx.DeltaThetaAndDeltaVelocityConfigurationRegister_gyro_compensation_set)
    __swig_setmethods__["accel_compensation"] = _libvncxx.DeltaThetaAndDeltaVelocityConfigurationRegister_accel_compensation_set
    __swig_getmethods__["accel_compensation"] = _libvncxx.DeltaThetaAndDeltaVelocityConfigurationRegister_accel_compensation_get
    if _newclass:
        accel_compensation = _swig_property(_libvncxx.DeltaThetaAndDeltaVelocityConfigurationRegister_accel_compensation_get, _libvncxx.DeltaThetaAndDeltaVelocityConfigurationRegister_accel_compensation_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister self) -> DeltaThetaAndDeltaVelocityConfigurationRegister
        __init__(vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister self, vn::protocol::uart::IntegrationFrame integrationFrameIn, vn::protocol::uart::CompensationMode gyroCompensationIn, vn::protocol::uart::CompensationMode accelCompensationIn) -> DeltaThetaAndDeltaVelocityConfigurationRegister
        """
        this = _libvncxx.new_DeltaThetaAndDeltaVelocityConfigurationRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_DeltaThetaAndDeltaVelocityConfigurationRegister
    __del__ = lambda self: None
DeltaThetaAndDeltaVelocityConfigurationRegister_swigregister = _libvncxx.DeltaThetaAndDeltaVelocityConfigurationRegister_swigregister
DeltaThetaAndDeltaVelocityConfigurationRegister_swigregister(DeltaThetaAndDeltaVelocityConfigurationRegister)

class ReferenceVectorConfigurationRegister(_object):
    """Proxy of C++ vn::sensors::ReferenceVectorConfigurationRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceVectorConfigurationRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceVectorConfigurationRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["use_mag_model"] = _libvncxx.ReferenceVectorConfigurationRegister_use_mag_model_set
    __swig_getmethods__["use_mag_model"] = _libvncxx.ReferenceVectorConfigurationRegister_use_mag_model_get
    if _newclass:
        use_mag_model = _swig_property(_libvncxx.ReferenceVectorConfigurationRegister_use_mag_model_get, _libvncxx.ReferenceVectorConfigurationRegister_use_mag_model_set)
    __swig_setmethods__["use_gravity_model"] = _libvncxx.ReferenceVectorConfigurationRegister_use_gravity_model_set
    __swig_getmethods__["use_gravity_model"] = _libvncxx.ReferenceVectorConfigurationRegister_use_gravity_model_get
    if _newclass:
        use_gravity_model = _swig_property(_libvncxx.ReferenceVectorConfigurationRegister_use_gravity_model_get, _libvncxx.ReferenceVectorConfigurationRegister_use_gravity_model_set)
    __swig_setmethods__["recalc_threshold"] = _libvncxx.ReferenceVectorConfigurationRegister_recalc_threshold_set
    __swig_getmethods__["recalc_threshold"] = _libvncxx.ReferenceVectorConfigurationRegister_recalc_threshold_get
    if _newclass:
        recalc_threshold = _swig_property(_libvncxx.ReferenceVectorConfigurationRegister_recalc_threshold_get, _libvncxx.ReferenceVectorConfigurationRegister_recalc_threshold_set)
    __swig_setmethods__["year"] = _libvncxx.ReferenceVectorConfigurationRegister_year_set
    __swig_getmethods__["year"] = _libvncxx.ReferenceVectorConfigurationRegister_year_get
    if _newclass:
        year = _swig_property(_libvncxx.ReferenceVectorConfigurationRegister_year_get, _libvncxx.ReferenceVectorConfigurationRegister_year_set)
    __swig_setmethods__["position"] = _libvncxx.ReferenceVectorConfigurationRegister_position_set
    __swig_getmethods__["position"] = _libvncxx.ReferenceVectorConfigurationRegister_position_get
    if _newclass:
        position = _swig_property(_libvncxx.ReferenceVectorConfigurationRegister_position_get, _libvncxx.ReferenceVectorConfigurationRegister_position_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::ReferenceVectorConfigurationRegister self) -> ReferenceVectorConfigurationRegister
        __init__(vn::sensors::ReferenceVectorConfigurationRegister self, bool useMagModelIn, bool useGravityModelIn, uint32_t recalcThresholdIn, float yearIn, vec3d positionIn) -> ReferenceVectorConfigurationRegister
        """
        this = _libvncxx.new_ReferenceVectorConfigurationRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_ReferenceVectorConfigurationRegister
    __del__ = lambda self: None
ReferenceVectorConfigurationRegister_swigregister = _libvncxx.ReferenceVectorConfigurationRegister_swigregister
ReferenceVectorConfigurationRegister_swigregister(ReferenceVectorConfigurationRegister)

class GyroCompensationRegister(_object):
    """Proxy of C++ vn::sensors::GyroCompensationRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GyroCompensationRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GyroCompensationRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["c"] = _libvncxx.GyroCompensationRegister_c_set
    __swig_getmethods__["c"] = _libvncxx.GyroCompensationRegister_c_get
    if _newclass:
        c = _swig_property(_libvncxx.GyroCompensationRegister_c_get, _libvncxx.GyroCompensationRegister_c_set)
    __swig_setmethods__["b"] = _libvncxx.GyroCompensationRegister_b_set
    __swig_getmethods__["b"] = _libvncxx.GyroCompensationRegister_b_get
    if _newclass:
        b = _swig_property(_libvncxx.GyroCompensationRegister_b_get, _libvncxx.GyroCompensationRegister_b_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::GyroCompensationRegister self) -> GyroCompensationRegister
        __init__(vn::sensors::GyroCompensationRegister self, mat3f cIn, vec3f bIn) -> GyroCompensationRegister
        """
        this = _libvncxx.new_GyroCompensationRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_GyroCompensationRegister
    __del__ = lambda self: None
GyroCompensationRegister_swigregister = _libvncxx.GyroCompensationRegister_swigregister
GyroCompensationRegister_swigregister(GyroCompensationRegister)

class ImuFilteringConfigurationRegister(_object):
    """Proxy of C++ vn::sensors::ImuFilteringConfigurationRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImuFilteringConfigurationRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImuFilteringConfigurationRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mag_window_size"] = _libvncxx.ImuFilteringConfigurationRegister_mag_window_size_set
    __swig_getmethods__["mag_window_size"] = _libvncxx.ImuFilteringConfigurationRegister_mag_window_size_get
    if _newclass:
        mag_window_size = _swig_property(_libvncxx.ImuFilteringConfigurationRegister_mag_window_size_get, _libvncxx.ImuFilteringConfigurationRegister_mag_window_size_set)
    __swig_setmethods__["accel_window_size"] = _libvncxx.ImuFilteringConfigurationRegister_accel_window_size_set
    __swig_getmethods__["accel_window_size"] = _libvncxx.ImuFilteringConfigurationRegister_accel_window_size_get
    if _newclass:
        accel_window_size = _swig_property(_libvncxx.ImuFilteringConfigurationRegister_accel_window_size_get, _libvncxx.ImuFilteringConfigurationRegister_accel_window_size_set)
    __swig_setmethods__["gyro_window_size"] = _libvncxx.ImuFilteringConfigurationRegister_gyro_window_size_set
    __swig_getmethods__["gyro_window_size"] = _libvncxx.ImuFilteringConfigurationRegister_gyro_window_size_get
    if _newclass:
        gyro_window_size = _swig_property(_libvncxx.ImuFilteringConfigurationRegister_gyro_window_size_get, _libvncxx.ImuFilteringConfigurationRegister_gyro_window_size_set)
    __swig_setmethods__["temp_window_size"] = _libvncxx.ImuFilteringConfigurationRegister_temp_window_size_set
    __swig_getmethods__["temp_window_size"] = _libvncxx.ImuFilteringConfigurationRegister_temp_window_size_get
    if _newclass:
        temp_window_size = _swig_property(_libvncxx.ImuFilteringConfigurationRegister_temp_window_size_get, _libvncxx.ImuFilteringConfigurationRegister_temp_window_size_set)
    __swig_setmethods__["pres_window_size"] = _libvncxx.ImuFilteringConfigurationRegister_pres_window_size_set
    __swig_getmethods__["pres_window_size"] = _libvncxx.ImuFilteringConfigurationRegister_pres_window_size_get
    if _newclass:
        pres_window_size = _swig_property(_libvncxx.ImuFilteringConfigurationRegister_pres_window_size_get, _libvncxx.ImuFilteringConfigurationRegister_pres_window_size_set)
    __swig_setmethods__["mag_filter_mode"] = _libvncxx.ImuFilteringConfigurationRegister_mag_filter_mode_set
    __swig_getmethods__["mag_filter_mode"] = _libvncxx.ImuFilteringConfigurationRegister_mag_filter_mode_get
    if _newclass:
        mag_filter_mode = _swig_property(_libvncxx.ImuFilteringConfigurationRegister_mag_filter_mode_get, _libvncxx.ImuFilteringConfigurationRegister_mag_filter_mode_set)
    __swig_setmethods__["accel_filter_mode"] = _libvncxx.ImuFilteringConfigurationRegister_accel_filter_mode_set
    __swig_getmethods__["accel_filter_mode"] = _libvncxx.ImuFilteringConfigurationRegister_accel_filter_mode_get
    if _newclass:
        accel_filter_mode = _swig_property(_libvncxx.ImuFilteringConfigurationRegister_accel_filter_mode_get, _libvncxx.ImuFilteringConfigurationRegister_accel_filter_mode_set)
    __swig_setmethods__["gyro_filter_mode"] = _libvncxx.ImuFilteringConfigurationRegister_gyro_filter_mode_set
    __swig_getmethods__["gyro_filter_mode"] = _libvncxx.ImuFilteringConfigurationRegister_gyro_filter_mode_get
    if _newclass:
        gyro_filter_mode = _swig_property(_libvncxx.ImuFilteringConfigurationRegister_gyro_filter_mode_get, _libvncxx.ImuFilteringConfigurationRegister_gyro_filter_mode_set)
    __swig_setmethods__["temp_filter_mode"] = _libvncxx.ImuFilteringConfigurationRegister_temp_filter_mode_set
    __swig_getmethods__["temp_filter_mode"] = _libvncxx.ImuFilteringConfigurationRegister_temp_filter_mode_get
    if _newclass:
        temp_filter_mode = _swig_property(_libvncxx.ImuFilteringConfigurationRegister_temp_filter_mode_get, _libvncxx.ImuFilteringConfigurationRegister_temp_filter_mode_set)
    __swig_setmethods__["pres_filter_mode"] = _libvncxx.ImuFilteringConfigurationRegister_pres_filter_mode_set
    __swig_getmethods__["pres_filter_mode"] = _libvncxx.ImuFilteringConfigurationRegister_pres_filter_mode_get
    if _newclass:
        pres_filter_mode = _swig_property(_libvncxx.ImuFilteringConfigurationRegister_pres_filter_mode_get, _libvncxx.ImuFilteringConfigurationRegister_pres_filter_mode_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::ImuFilteringConfigurationRegister self) -> ImuFilteringConfigurationRegister
        __init__(vn::sensors::ImuFilteringConfigurationRegister self, uint16_t magWindowSizeIn, uint16_t accelWindowSizeIn, uint16_t gyroWindowSizeIn, uint16_t tempWindowSizeIn, uint16_t presWindowSizeIn, vn::protocol::uart::FilterMode magFilterModeIn, vn::protocol::uart::FilterMode accelFilterModeIn, vn::protocol::uart::FilterMode gyroFilterModeIn, vn::protocol::uart::FilterMode tempFilterModeIn, vn::protocol::uart::FilterMode presFilterModeIn) -> ImuFilteringConfigurationRegister
        """
        this = _libvncxx.new_ImuFilteringConfigurationRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_ImuFilteringConfigurationRegister
    __del__ = lambda self: None
ImuFilteringConfigurationRegister_swigregister = _libvncxx.ImuFilteringConfigurationRegister_swigregister
ImuFilteringConfigurationRegister_swigregister(ImuFilteringConfigurationRegister)

class GpsCompassBaselineRegister(_object):
    """Proxy of C++ vn::sensors::GpsCompassBaselineRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GpsCompassBaselineRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GpsCompassBaselineRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["position"] = _libvncxx.GpsCompassBaselineRegister_position_set
    __swig_getmethods__["position"] = _libvncxx.GpsCompassBaselineRegister_position_get
    if _newclass:
        position = _swig_property(_libvncxx.GpsCompassBaselineRegister_position_get, _libvncxx.GpsCompassBaselineRegister_position_set)
    __swig_setmethods__["uncertainty"] = _libvncxx.GpsCompassBaselineRegister_uncertainty_set
    __swig_getmethods__["uncertainty"] = _libvncxx.GpsCompassBaselineRegister_uncertainty_get
    if _newclass:
        uncertainty = _swig_property(_libvncxx.GpsCompassBaselineRegister_uncertainty_get, _libvncxx.GpsCompassBaselineRegister_uncertainty_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::GpsCompassBaselineRegister self) -> GpsCompassBaselineRegister
        __init__(vn::sensors::GpsCompassBaselineRegister self, vec3f positionIn, vec3f uncertaintyIn) -> GpsCompassBaselineRegister
        """
        this = _libvncxx.new_GpsCompassBaselineRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_GpsCompassBaselineRegister
    __del__ = lambda self: None
GpsCompassBaselineRegister_swigregister = _libvncxx.GpsCompassBaselineRegister_swigregister
GpsCompassBaselineRegister_swigregister(GpsCompassBaselineRegister)

class GpsCompassEstimatedBaselineRegister(_object):
    """Proxy of C++ vn::sensors::GpsCompassEstimatedBaselineRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GpsCompassEstimatedBaselineRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GpsCompassEstimatedBaselineRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["est_baseline_used"] = _libvncxx.GpsCompassEstimatedBaselineRegister_est_baseline_used_set
    __swig_getmethods__["est_baseline_used"] = _libvncxx.GpsCompassEstimatedBaselineRegister_est_baseline_used_get
    if _newclass:
        est_baseline_used = _swig_property(_libvncxx.GpsCompassEstimatedBaselineRegister_est_baseline_used_get, _libvncxx.GpsCompassEstimatedBaselineRegister_est_baseline_used_set)
    __swig_setmethods__["num_meas"] = _libvncxx.GpsCompassEstimatedBaselineRegister_num_meas_set
    __swig_getmethods__["num_meas"] = _libvncxx.GpsCompassEstimatedBaselineRegister_num_meas_get
    if _newclass:
        num_meas = _swig_property(_libvncxx.GpsCompassEstimatedBaselineRegister_num_meas_get, _libvncxx.GpsCompassEstimatedBaselineRegister_num_meas_set)
    __swig_setmethods__["position"] = _libvncxx.GpsCompassEstimatedBaselineRegister_position_set
    __swig_getmethods__["position"] = _libvncxx.GpsCompassEstimatedBaselineRegister_position_get
    if _newclass:
        position = _swig_property(_libvncxx.GpsCompassEstimatedBaselineRegister_position_get, _libvncxx.GpsCompassEstimatedBaselineRegister_position_set)
    __swig_setmethods__["uncertainty"] = _libvncxx.GpsCompassEstimatedBaselineRegister_uncertainty_set
    __swig_getmethods__["uncertainty"] = _libvncxx.GpsCompassEstimatedBaselineRegister_uncertainty_get
    if _newclass:
        uncertainty = _swig_property(_libvncxx.GpsCompassEstimatedBaselineRegister_uncertainty_get, _libvncxx.GpsCompassEstimatedBaselineRegister_uncertainty_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::GpsCompassEstimatedBaselineRegister self) -> GpsCompassEstimatedBaselineRegister
        __init__(vn::sensors::GpsCompassEstimatedBaselineRegister self, bool estBaselineUsedIn, uint16_t numMeasIn, vec3f positionIn, vec3f uncertaintyIn) -> GpsCompassEstimatedBaselineRegister
        """
        this = _libvncxx.new_GpsCompassEstimatedBaselineRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_GpsCompassEstimatedBaselineRegister
    __del__ = lambda self: None
GpsCompassEstimatedBaselineRegister_swigregister = _libvncxx.GpsCompassEstimatedBaselineRegister_swigregister
GpsCompassEstimatedBaselineRegister_swigregister(GpsCompassEstimatedBaselineRegister)

class ImuRateConfigurationRegister(_object):
    """Proxy of C++ vn::sensors::ImuRateConfigurationRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImuRateConfigurationRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImuRateConfigurationRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["imu_rate"] = _libvncxx.ImuRateConfigurationRegister_imu_rate_set
    __swig_getmethods__["imu_rate"] = _libvncxx.ImuRateConfigurationRegister_imu_rate_get
    if _newclass:
        imu_rate = _swig_property(_libvncxx.ImuRateConfigurationRegister_imu_rate_get, _libvncxx.ImuRateConfigurationRegister_imu_rate_set)
    __swig_setmethods__["nav_divisor"] = _libvncxx.ImuRateConfigurationRegister_nav_divisor_set
    __swig_getmethods__["nav_divisor"] = _libvncxx.ImuRateConfigurationRegister_nav_divisor_get
    if _newclass:
        nav_divisor = _swig_property(_libvncxx.ImuRateConfigurationRegister_nav_divisor_get, _libvncxx.ImuRateConfigurationRegister_nav_divisor_set)
    __swig_setmethods__["filter_target_rate"] = _libvncxx.ImuRateConfigurationRegister_filter_target_rate_set
    __swig_getmethods__["filter_target_rate"] = _libvncxx.ImuRateConfigurationRegister_filter_target_rate_get
    if _newclass:
        filter_target_rate = _swig_property(_libvncxx.ImuRateConfigurationRegister_filter_target_rate_get, _libvncxx.ImuRateConfigurationRegister_filter_target_rate_set)
    __swig_setmethods__["filter_min_rate"] = _libvncxx.ImuRateConfigurationRegister_filter_min_rate_set
    __swig_getmethods__["filter_min_rate"] = _libvncxx.ImuRateConfigurationRegister_filter_min_rate_get
    if _newclass:
        filter_min_rate = _swig_property(_libvncxx.ImuRateConfigurationRegister_filter_min_rate_get, _libvncxx.ImuRateConfigurationRegister_filter_min_rate_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::ImuRateConfigurationRegister self) -> ImuRateConfigurationRegister
        __init__(vn::sensors::ImuRateConfigurationRegister self, uint16_t imuRateIn, uint16_t navDivisorIn, float filterTargetRateIn, float filterMinRateIn) -> ImuRateConfigurationRegister
        """
        this = _libvncxx.new_ImuRateConfigurationRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_ImuRateConfigurationRegister
    __del__ = lambda self: None
ImuRateConfigurationRegister_swigregister = _libvncxx.ImuRateConfigurationRegister_swigregister
ImuRateConfigurationRegister_swigregister(ImuRateConfigurationRegister)

class YawPitchRollTrueBodyAccelerationAndAngularRatesRegister(_object):
    """Proxy of C++ vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, YawPitchRollTrueBodyAccelerationAndAngularRatesRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, YawPitchRollTrueBodyAccelerationAndAngularRatesRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["yaw_pitch_roll"] = _libvncxx.YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_yaw_pitch_roll_set
    __swig_getmethods__["yaw_pitch_roll"] = _libvncxx.YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_yaw_pitch_roll_get
    if _newclass:
        yaw_pitch_roll = _swig_property(_libvncxx.YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_yaw_pitch_roll_get, _libvncxx.YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_yaw_pitch_roll_set)
    __swig_setmethods__["body_accel"] = _libvncxx.YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_body_accel_set
    __swig_getmethods__["body_accel"] = _libvncxx.YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_body_accel_get
    if _newclass:
        body_accel = _swig_property(_libvncxx.YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_body_accel_get, _libvncxx.YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_body_accel_set)
    __swig_setmethods__["gyro"] = _libvncxx.YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_gyro_set
    __swig_getmethods__["gyro"] = _libvncxx.YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_gyro_get
    if _newclass:
        gyro = _swig_property(_libvncxx.YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_gyro_get, _libvncxx.YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_gyro_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister self) -> YawPitchRollTrueBodyAccelerationAndAngularRatesRegister
        __init__(vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister self, vec3f yawPitchRollIn, vec3f bodyAccelIn, vec3f gyroIn) -> YawPitchRollTrueBodyAccelerationAndAngularRatesRegister
        """
        this = _libvncxx.new_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_YawPitchRollTrueBodyAccelerationAndAngularRatesRegister
    __del__ = lambda self: None
YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_swigregister = _libvncxx.YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_swigregister
YawPitchRollTrueBodyAccelerationAndAngularRatesRegister_swigregister(YawPitchRollTrueBodyAccelerationAndAngularRatesRegister)

class YawPitchRollTrueInertialAccelerationAndAngularRatesRegister(_object):
    """Proxy of C++ vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, YawPitchRollTrueInertialAccelerationAndAngularRatesRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, YawPitchRollTrueInertialAccelerationAndAngularRatesRegister, name)
    __repr__ = _swig_repr
    __swig_setmethods__["yaw_pitch_roll"] = _libvncxx.YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_yaw_pitch_roll_set
    __swig_getmethods__["yaw_pitch_roll"] = _libvncxx.YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_yaw_pitch_roll_get
    if _newclass:
        yaw_pitch_roll = _swig_property(_libvncxx.YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_yaw_pitch_roll_get, _libvncxx.YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_yaw_pitch_roll_set)
    __swig_setmethods__["inertial_accel"] = _libvncxx.YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_inertial_accel_set
    __swig_getmethods__["inertial_accel"] = _libvncxx.YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_inertial_accel_get
    if _newclass:
        inertial_accel = _swig_property(_libvncxx.YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_inertial_accel_get, _libvncxx.YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_inertial_accel_set)
    __swig_setmethods__["gyro"] = _libvncxx.YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_gyro_set
    __swig_getmethods__["gyro"] = _libvncxx.YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_gyro_get
    if _newclass:
        gyro = _swig_property(_libvncxx.YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_gyro_get, _libvncxx.YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_gyro_set)

    def __init__(self, *args):
        """
        __init__(vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister self) -> YawPitchRollTrueInertialAccelerationAndAngularRatesRegister
        __init__(vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister self, vec3f yawPitchRollIn, vec3f inertialAccelIn, vec3f gyroIn) -> YawPitchRollTrueInertialAccelerationAndAngularRatesRegister
        """
        this = _libvncxx.new_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_YawPitchRollTrueInertialAccelerationAndAngularRatesRegister
    __del__ = lambda self: None
YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_swigregister = _libvncxx.YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_swigregister
YawPitchRollTrueInertialAccelerationAndAngularRatesRegister_swigregister(YawPitchRollTrueInertialAccelerationAndAngularRatesRegister)


def str(*args):
    """
    str(QuaternionMagneticAccelerationAndAngularRatesRegister reg) -> std::string
    str(MagneticAccelerationAndAngularRatesRegister reg) -> std::string
    str(MagneticAndGravityReferenceVectorsRegister reg) -> std::string
    str(FilterMeasurementsVarianceParametersRegister reg) -> std::string
    str(MagnetometerCompensationRegister reg) -> std::string
    str(FilterActiveTuningParametersRegister reg) -> std::string
    str(AccelerationCompensationRegister reg) -> std::string
    str(YawPitchRollMagneticAccelerationAndAngularRatesRegister reg) -> std::string
    str(CommunicationProtocolControlRegister reg) -> std::string
    str(SynchronizationControlRegister reg) -> std::string
    str(SynchronizationStatusRegister reg) -> std::string
    str(FilterBasicControlRegister reg) -> std::string
    str(VpeBasicControlRegister reg) -> std::string
    str(VpeMagnetometerBasicTuningRegister reg) -> std::string
    str(VpeMagnetometerAdvancedTuningRegister reg) -> std::string
    str(VpeAccelerometerBasicTuningRegister reg) -> std::string
    str(VpeAccelerometerAdvancedTuningRegister reg) -> std::string
    str(VpeGyroBasicTuningRegister reg) -> std::string
    str(MagnetometerCalibrationControlRegister reg) -> std::string
    str(CalculatedMagnetometerCalibrationRegister reg) -> std::string
    str(VelocityCompensationControlRegister reg) -> std::string
    str(VelocityCompensationStatusRegister reg) -> std::string
    str(ImuMeasurementsRegister reg) -> std::string
    str(GpsConfigurationRegister reg) -> std::string
    str(GpsSolutionLlaRegister reg) -> std::string
    str(GpsSolutionEcefRegister reg) -> std::string
    str(InsSolutionLlaRegister reg) -> std::string
    str(InsSolutionEcefRegister reg) -> std::string
    str(InsBasicConfigurationRegisterVn200 reg) -> std::string
    str(InsBasicConfigurationRegisterVn300 reg) -> std::string
    str(InsAdvancedConfigurationRegister reg) -> std::string
    str(InsStateLlaRegister reg) -> std::string
    str(InsStateEcefRegister reg) -> std::string
    str(StartupFilterBiasEstimateRegister reg) -> std::string
    str(DeltaThetaAndDeltaVelocityRegister reg) -> std::string
    str(DeltaThetaAndDeltaVelocityConfigurationRegister reg) -> std::string
    str(ReferenceVectorConfigurationRegister reg) -> std::string
    str(GyroCompensationRegister reg) -> std::string
    str(ImuFilteringConfigurationRegister reg) -> std::string
    str(GpsCompassBaselineRegister reg) -> std::string
    str(GpsCompassEstimatedBaselineRegister reg) -> std::string
    str(ImuRateConfigurationRegister reg) -> std::string
    str(YawPitchRollTrueBodyAccelerationAndAngularRatesRegister reg) -> std::string
    str(YawPitchRollTrueInertialAccelerationAndAngularRatesRegister reg) -> std::string
    """
    return _libvncxx.str(*args)

def parse(*args):
    """
    parse(std::string const & arg1, vn::protocol::uart::AsciiAsync & val, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, vn::protocol::uart::AsciiAsync & val) -> bool
    parse(std::string const & arg1, vn::protocol::uart::SyncInMode & val, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, vn::protocol::uart::SyncInMode & val) -> bool
    parse(std::string const & arg1, vn::protocol::uart::SyncInEdge & val, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, vn::protocol::uart::SyncInEdge & val) -> bool
    parse(std::string const & arg1, vn::protocol::uart::SyncOutMode & val, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, vn::protocol::uart::SyncOutMode & val) -> bool
    parse(std::string const & arg1, vn::protocol::uart::SyncOutPolarity & val, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, vn::protocol::uart::SyncOutPolarity & val) -> bool
    parse(std::string const & arg1, vn::protocol::uart::CountMode & val, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, vn::protocol::uart::CountMode & val) -> bool
    parse(std::string const & arg1, vn::protocol::uart::StatusMode & val, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, vn::protocol::uart::StatusMode & val) -> bool
    parse(std::string const & arg1, vn::protocol::uart::ChecksumMode & val, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, vn::protocol::uart::ChecksumMode & val) -> bool
    parse(std::string const & arg1, vn::protocol::uart::ErrorMode & val, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, vn::protocol::uart::ErrorMode & val) -> bool
    parse(std::string const & arg1, vn::protocol::uart::FilterMode & val, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, vn::protocol::uart::FilterMode & val) -> bool
    parse(std::string const & arg1, vn::protocol::uart::IntegrationFrame & val, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, vn::protocol::uart::IntegrationFrame & val) -> bool
    parse(std::string const & arg1, vn::protocol::uart::CompensationMode & val, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, vn::protocol::uart::CompensationMode & val) -> bool
    parse(std::string const & arg1, vn::protocol::uart::GpsFix & val, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, vn::protocol::uart::GpsFix & val) -> bool
    parse(std::string const & arg1, vn::protocol::uart::GpsMode & val, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, vn::protocol::uart::GpsMode & val) -> bool
    parse(std::string const & arg1, vn::protocol::uart::PpsSource & val, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, vn::protocol::uart::PpsSource & val) -> bool
    parse(std::string const & arg1, vn::protocol::uart::VpeEnable & val, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, vn::protocol::uart::VpeEnable & val) -> bool
    parse(std::string const & arg1, vn::protocol::uart::HeadingMode & val, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, vn::protocol::uart::HeadingMode & val) -> bool
    parse(std::string const & arg1, vn::protocol::uart::VpeMode & val, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, vn::protocol::uart::VpeMode & val) -> bool
    parse(std::string const & arg1, vn::protocol::uart::Scenario & val, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, vn::protocol::uart::Scenario & val) -> bool
    parse(std::string const & arg1, vn::protocol::uart::HsiMode & val, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, vn::protocol::uart::HsiMode & val) -> bool
    parse(std::string const & arg1, vn::protocol::uart::HsiOutput & val, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, vn::protocol::uart::HsiOutput & val) -> bool
    parse(std::string const & arg1, vn::protocol::uart::VelocityCompensationMode & val, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, vn::protocol::uart::VelocityCompensationMode & val) -> bool
    parse(std::string const & arg1, vn::protocol::uart::MagneticMode & val, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, vn::protocol::uart::MagneticMode & val) -> bool
    parse(std::string const & arg1, vn::protocol::uart::ExternalSensorMode & val, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, vn::protocol::uart::ExternalSensorMode & val) -> bool
    parse(std::string const & arg1, vn::protocol::uart::FoamInit & val, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, vn::protocol::uart::FoamInit & val) -> bool
    parse(std::string const & arg1, MagneticAndGravityReferenceVectorsRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, MagneticAndGravityReferenceVectorsRegister reg) -> bool
    parse(std::string const & arg1, FilterMeasurementsVarianceParametersRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, FilterMeasurementsVarianceParametersRegister reg) -> bool
    parse(std::string const & arg1, MagnetometerCompensationRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, MagnetometerCompensationRegister reg) -> bool
    parse(std::string const & arg1, FilterActiveTuningParametersRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, FilterActiveTuningParametersRegister reg) -> bool
    parse(std::string const & arg1, AccelerationCompensationRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, AccelerationCompensationRegister reg) -> bool
    parse(std::string const & arg1, CommunicationProtocolControlRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, CommunicationProtocolControlRegister reg) -> bool
    parse(std::string const & arg1, SynchronizationControlRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, SynchronizationControlRegister reg) -> bool
    parse(std::string const & arg1, SynchronizationStatusRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, SynchronizationStatusRegister reg) -> bool
    parse(std::string const & arg1, FilterBasicControlRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, FilterBasicControlRegister reg) -> bool
    parse(std::string const & arg1, VpeBasicControlRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, VpeBasicControlRegister reg) -> bool
    parse(std::string const & arg1, VpeMagnetometerBasicTuningRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, VpeMagnetometerBasicTuningRegister reg) -> bool
    parse(std::string const & arg1, VpeMagnetometerAdvancedTuningRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, VpeMagnetometerAdvancedTuningRegister reg) -> bool
    parse(std::string const & arg1, VpeAccelerometerBasicTuningRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, VpeAccelerometerBasicTuningRegister reg) -> bool
    parse(std::string const & arg1, VpeAccelerometerAdvancedTuningRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, VpeAccelerometerAdvancedTuningRegister reg) -> bool
    parse(std::string const & arg1, VpeGyroBasicTuningRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, VpeGyroBasicTuningRegister reg) -> bool
    parse(std::string const & arg1, MagnetometerCalibrationControlRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, MagnetometerCalibrationControlRegister reg) -> bool
    parse(std::string const & arg1, VelocityCompensationControlRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, VelocityCompensationControlRegister reg) -> bool
    parse(std::string const & arg1, GpsConfigurationRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, GpsConfigurationRegister reg) -> bool
    parse(std::string const & arg1, InsBasicConfigurationRegisterVn200 reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, InsBasicConfigurationRegisterVn200 reg) -> bool
    parse(std::string const & arg1, InsBasicConfigurationRegisterVn300 reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, InsBasicConfigurationRegisterVn300 reg) -> bool
    parse(std::string const & arg1, InsAdvancedConfigurationRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, InsAdvancedConfigurationRegister reg) -> bool
    parse(std::string const & arg1, StartupFilterBiasEstimateRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, StartupFilterBiasEstimateRegister reg) -> bool
    parse(std::string const & arg1, DeltaThetaAndDeltaVelocityConfigurationRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, DeltaThetaAndDeltaVelocityConfigurationRegister reg) -> bool
    parse(std::string const & arg1, ReferenceVectorConfigurationRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, ReferenceVectorConfigurationRegister reg) -> bool
    parse(std::string const & arg1, GyroCompensationRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, GyroCompensationRegister reg) -> bool
    parse(std::string const & arg1, ImuFilteringConfigurationRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, ImuFilteringConfigurationRegister reg) -> bool
    parse(std::string const & arg1, GpsCompassBaselineRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, GpsCompassBaselineRegister reg) -> bool
    parse(std::string const & arg1, ImuRateConfigurationRegister reg, bool allowSloppy=True) -> bool
    parse(std::string const & arg1, ImuRateConfigurationRegister reg) -> bool
    """
    return _libvncxx.parse(*args)
class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libvncxx.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _libvncxx.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _libvncxx.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _libvncxx.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _libvncxx.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _libvncxx.SwigPyIterator_equal(self, x)


    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _libvncxx.SwigPyIterator_copy(self)


    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _libvncxx.SwigPyIterator_next(self)


    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _libvncxx.SwigPyIterator___next__(self)


    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _libvncxx.SwigPyIterator_previous(self)


    def advance(self, n):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _libvncxx.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _libvncxx.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _libvncxx.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _libvncxx.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _libvncxx.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _libvncxx.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _libvncxx.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _libvncxx.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VnSensor(_object):
    """Proxy of C++ vn::sensors::VnSensor class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VnSensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VnSensor, name)
    __repr__ = _swig_repr
    VnSensor_Family_Unknown = _libvncxx.VnSensor_VnSensor_Family_Unknown
    VnSensor_Family_Vn100 = _libvncxx.VnSensor_VnSensor_Family_Vn100
    VnSensor_Family_Vn200 = _libvncxx.VnSensor_VnSensor_Family_Vn200
    VnSensor_Family_Vn300 = _libvncxx.VnSensor_VnSensor_Family_Vn300

    def __supported_baudrates():
        """__supported_baudrates() -> UInt32Vector"""
        return _libvncxx.VnSensor___supported_baudrates()

    __supported_baudrates = staticmethod(__supported_baudrates)

    def supportedAsyncDataOutputFrequencies():
        """supportedAsyncDataOutputFrequencies() -> UInt32Vector"""
        return _libvncxx.VnSensor_supportedAsyncDataOutputFrequencies()

    supportedAsyncDataOutputFrequencies = staticmethod(supportedAsyncDataOutputFrequencies)

    def __init__(self):
        """__init__(vn::sensors::VnSensor self) -> VnSensor"""
        this = _libvncxx.new_VnSensor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_VnSensor
    __del__ = lambda self: None

    def verify_sensor_connectivity(self):
        """verify_sensor_connectivity(VnSensor self) -> bool"""
        return _libvncxx.VnSensor_verify_sensor_connectivity(self)


    def connect(self, *args):
        """
        connect(VnSensor self, std::string const & portName, uint32_t baudrate)
        connect(VnSensor self, vn::xplat::IPort * port)
        """
        return _libvncxx.VnSensor_connect(self, *args)


    def disconnect(self):
        """disconnect(VnSensor self)"""
        return _libvncxx.VnSensor_disconnect(self)


    def transaction(self, toSend):
        """transaction(VnSensor self, std::string toSend) -> std::string"""
        return _libvncxx.VnSensor_transaction(self, toSend)


    def tare(self, waitForReply=True):
        """
        tare(VnSensor self, bool waitForReply=True)
        tare(VnSensor self)
        """
        return _libvncxx.VnSensor_tare(self, waitForReply)


    def set_gyro_bias(self, waitForReply=True):
        """
        set_gyro_bias(VnSensor self, bool waitForReply=True)
        set_gyro_bias(VnSensor self)
        """
        return _libvncxx.VnSensor_set_gyro_bias(self, waitForReply)


    def magnetic_disturbance_present(self, disturbancePresent, waitForReply=True):
        """
        magnetic_disturbance_present(VnSensor self, bool disturbancePresent, bool waitForReply=True)
        magnetic_disturbance_present(VnSensor self, bool disturbancePresent)
        """
        return _libvncxx.VnSensor_magnetic_disturbance_present(self, disturbancePresent, waitForReply)


    def acceleration_disturbance_present(self, disturbancePresent, waitForReply=True):
        """
        acceleration_disturbance_present(VnSensor self, bool disturbancePresent, bool waitForReply=True)
        acceleration_disturbance_present(VnSensor self, bool disturbancePresent)
        """
        return _libvncxx.VnSensor_acceleration_disturbance_present(self, disturbancePresent, waitForReply)


    def write_settings(self, waitForReply=True):
        """
        write_settings(VnSensor self, bool waitForReply=True)
        write_settings(VnSensor self)
        """
        return _libvncxx.VnSensor_write_settings(self, waitForReply)


    def restore_factory_settings(self, waitForReply=True):
        """
        restore_factory_settings(VnSensor self, bool waitForReply=True)
        restore_factory_settings(VnSensor self)
        """
        return _libvncxx.VnSensor_restore_factory_settings(self, waitForReply)


    def reset(self, waitForReply=True):
        """
        reset(VnSensor self, bool waitForReply=True)
        reset(VnSensor self)
        """
        return _libvncxx.VnSensor_reset(self, waitForReply)


    def change_baudrate(self, baudrate, changeSensorAlso=True, activeSensorPort=0):
        """
        change_baudrate(VnSensor self, uint32_t baudrate, bool changeSensorAlso=True, uint8_t activeSensorPort=0)
        change_baudrate(VnSensor self, uint32_t baudrate, bool changeSensorAlso=True)
        change_baudrate(VnSensor self, uint32_t baudrate)
        """
        return _libvncxx.VnSensor_change_baudrate(self, baudrate, changeSensorAlso, activeSensorPort)


    def determine_device_family(*args):
        """
        determine_device_family() -> vn::sensors::VnSensor::Family
        determine_device_family(std::string modelNumber) -> vn::sensors::VnSensor::Family
        """
        return _libvncxx.VnSensor_determine_device_family(*args)

    determine_device_family = staticmethod(determine_device_family)

    def registerRawDataReceivedHandler(self, userData, handler):
        """registerRawDataReceivedHandler(VnSensor self, void * userData, vn::sensors::VnSensor::RawDataReceivedHandler handler)"""
        return _libvncxx.VnSensor_registerRawDataReceivedHandler(self, userData, handler)


    def unregisterRawDataReceivedHandler(self):
        """unregisterRawDataReceivedHandler(VnSensor self)"""
        return _libvncxx.VnSensor_unregisterRawDataReceivedHandler(self)


    def registerPossiblePacketFoundHandler(self, userData, handler):
        """registerPossiblePacketFoundHandler(VnSensor self, void * userData, vn::sensors::VnSensor::PossiblePacketFoundHandler handler)"""
        return _libvncxx.VnSensor_registerPossiblePacketFoundHandler(self, userData, handler)


    def unregisterPossiblePacketFoundHandler(self):
        """unregisterPossiblePacketFoundHandler(VnSensor self)"""
        return _libvncxx.VnSensor_unregisterPossiblePacketFoundHandler(self)


    def registerAsyncPacketReceivedHandler(self, userData, handler):
        """registerAsyncPacketReceivedHandler(VnSensor self, void * userData, vn::sensors::VnSensor::AsyncPacketReceivedHandler handler)"""
        return _libvncxx.VnSensor_registerAsyncPacketReceivedHandler(self, userData, handler)


    def unregisterAsyncPacketReceivedHandler(self):
        """unregisterAsyncPacketReceivedHandler(VnSensor self)"""
        return _libvncxx.VnSensor_unregisterAsyncPacketReceivedHandler(self)


    def registerErrorPacketReceivedHandler(self, userData, handler):
        """registerErrorPacketReceivedHandler(VnSensor self, void * userData, vn::sensors::VnSensor::ErrorPacketReceivedHandler handler)"""
        return _libvncxx.VnSensor_registerErrorPacketReceivedHandler(self, userData, handler)


    def unregisterErrorPacketReceivedHandler(self):
        """unregisterErrorPacketReceivedHandler(VnSensor self)"""
        return _libvncxx.VnSensor_unregisterErrorPacketReceivedHandler(self)


    def registerUsbCableUnpluggedNotificationHandler(self, userData, handler):
        """registerUsbCableUnpluggedNotificationHandler(VnSensor self, void * userData, void (*)(void *) handler)"""
        return _libvncxx.VnSensor_registerUsbCableUnpluggedNotificationHandler(self, userData, handler)


    def unregisterUsbCableUnpluggedNotificationHandler(self):
        """unregisterUsbCableUnpluggedNotificationHandler(VnSensor self)"""
        return _libvncxx.VnSensor_unregisterUsbCableUnpluggedNotificationHandler(self)


    def read_binary_output_1(self):
        """read_binary_output_1(VnSensor self) -> BinaryOutputRegister"""
        return _libvncxx.VnSensor_read_binary_output_1(self)


    def write_binary_output_1(self, fields, waitForReply=True):
        """
        write_binary_output_1(VnSensor self, BinaryOutputRegister fields, bool waitForReply=True)
        write_binary_output_1(VnSensor self, BinaryOutputRegister fields)
        """
        return _libvncxx.VnSensor_write_binary_output_1(self, fields, waitForReply)


    def read_binary_output_2(self):
        """read_binary_output_2(VnSensor self) -> BinaryOutputRegister"""
        return _libvncxx.VnSensor_read_binary_output_2(self)


    def write_binary_output_2(self, fields, waitForReply=True):
        """
        write_binary_output_2(VnSensor self, BinaryOutputRegister fields, bool waitForReply=True)
        write_binary_output_2(VnSensor self, BinaryOutputRegister fields)
        """
        return _libvncxx.VnSensor_write_binary_output_2(self, fields, waitForReply)


    def read_binary_output_3(self):
        """read_binary_output_3(VnSensor self) -> BinaryOutputRegister"""
        return _libvncxx.VnSensor_read_binary_output_3(self)


    def write_binary_output_3(self, fields, waitForReply=True):
        """
        write_binary_output_3(VnSensor self, BinaryOutputRegister fields, bool waitForReply=True)
        write_binary_output_3(VnSensor self, BinaryOutputRegister fields)
        """
        return _libvncxx.VnSensor_write_binary_output_3(self, fields, waitForReply)


    def read_ins_basic_configuration_vn200(self):
        """read_ins_basic_configuration_vn200(VnSensor self) -> InsBasicConfigurationRegisterVn200"""
        return _libvncxx.VnSensor_read_ins_basic_configuration_vn200(self)


    def write_ins_basic_configuration_vn200(self, *args):
        """
        write_ins_basic_configuration_vn200(VnSensor self, InsBasicConfigurationRegisterVn200 fields, bool waitForReply=True)
        write_ins_basic_configuration_vn200(VnSensor self, InsBasicConfigurationRegisterVn200 fields)
        write_ins_basic_configuration_vn200(VnSensor self, vn::protocol::uart::Scenario scenario, uint8_t const & ahrsAiding, bool waitForReply=True)
        write_ins_basic_configuration_vn200(VnSensor self, vn::protocol::uart::Scenario scenario, uint8_t const & ahrsAiding)
        """
        return _libvncxx.VnSensor_write_ins_basic_configuration_vn200(self, *args)


    def read_ins_basic_configuration_vn300(self):
        """read_ins_basic_configuration_vn300(VnSensor self) -> InsBasicConfigurationRegisterVn300"""
        return _libvncxx.VnSensor_read_ins_basic_configuration_vn300(self)


    def write_ins_basic_configuration_vn300(self, *args):
        """
        write_ins_basic_configuration_vn300(VnSensor self, InsBasicConfigurationRegisterVn300 fields, bool waitForReply=True)
        write_ins_basic_configuration_vn300(VnSensor self, InsBasicConfigurationRegisterVn300 fields)
        write_ins_basic_configuration_vn300(VnSensor self, vn::protocol::uart::Scenario scenario, uint8_t const & ahrsAiding, uint8_t const & estBaseline, bool waitForReply=True)
        write_ins_basic_configuration_vn300(VnSensor self, vn::protocol::uart::Scenario scenario, uint8_t const & ahrsAiding, uint8_t const & estBaseline)
        """
        return _libvncxx.VnSensor_write_ins_basic_configuration_vn300(self, *args)


    def read_user_tag(self):
        """read_user_tag(VnSensor self) -> std::string"""
        return _libvncxx.VnSensor_read_user_tag(self)


    def write_user_tag(self, tag, waitForReply=True):
        """
        write_user_tag(VnSensor self, std::string const & tag, bool waitForReply=True)
        write_user_tag(VnSensor self, std::string const & tag)
        """
        return _libvncxx.VnSensor_write_user_tag(self, tag, waitForReply)


    def read_model_number(self):
        """read_model_number(VnSensor self) -> std::string"""
        return _libvncxx.VnSensor_read_model_number(self)


    def read_hardware_revision(self):
        """read_hardware_revision(VnSensor self) -> uint32_t"""
        return _libvncxx.VnSensor_read_hardware_revision(self)


    def read_serial_number(self):
        """read_serial_number(VnSensor self) -> uint32_t"""
        return _libvncxx.VnSensor_read_serial_number(self)


    def read_firmware_version(self):
        """read_firmware_version(VnSensor self) -> std::string"""
        return _libvncxx.VnSensor_read_firmware_version(self)


    def read_serial_baudrate(self, *args):
        """
        read_serial_baudrate(VnSensor self, uint8_t port) -> uint32_t
        read_serial_baudrate(VnSensor self) -> uint32_t
        """
        return _libvncxx.VnSensor_read_serial_baudrate(self, *args)


    def write_serial_baudrate(self, *args):
        """
        write_serial_baudrate(VnSensor self, uint32_t const & baudrate, uint8_t port, bool waitForReply=True)
        write_serial_baudrate(VnSensor self, uint32_t const & baudrate, uint8_t port)
        write_serial_baudrate(VnSensor self, uint32_t const & baudrate, bool waitForReply=True)
        write_serial_baudrate(VnSensor self, uint32_t const & baudrate)
        """
        return _libvncxx.VnSensor_write_serial_baudrate(self, *args)


    def read_async_data_output_type(self, *args):
        """
        read_async_data_output_type(VnSensor self, uint8_t port) -> vn::protocol::uart::AsciiAsync
        read_async_data_output_type(VnSensor self) -> vn::protocol::uart::AsciiAsync
        """
        return _libvncxx.VnSensor_read_async_data_output_type(self, *args)


    def write_async_data_output_type(self, *args):
        """
        write_async_data_output_type(VnSensor self, vn::protocol::uart::AsciiAsync ador, uint8_t port, bool waitForReply=True)
        write_async_data_output_type(VnSensor self, vn::protocol::uart::AsciiAsync ador, uint8_t port)
        write_async_data_output_type(VnSensor self, vn::protocol::uart::AsciiAsync ador, bool waitForReply=True)
        write_async_data_output_type(VnSensor self, vn::protocol::uart::AsciiAsync ador)
        """
        return _libvncxx.VnSensor_write_async_data_output_type(self, *args)


    def read_async_data_output_frequency(self, *args):
        """
        read_async_data_output_frequency(VnSensor self, uint8_t port) -> uint32_t
        read_async_data_output_frequency(VnSensor self) -> uint32_t
        """
        return _libvncxx.VnSensor_read_async_data_output_frequency(self, *args)


    def write_async_data_output_frequency(self, *args):
        """
        write_async_data_output_frequency(VnSensor self, uint32_t const & adof, uint8_t port, bool waitForReply=True)
        write_async_data_output_frequency(VnSensor self, uint32_t const & adof, uint8_t port)
        write_async_data_output_frequency(VnSensor self, uint32_t const & adof, bool waitForReply=True)
        write_async_data_output_frequency(VnSensor self, uint32_t const & adof)
        """
        return _libvncxx.VnSensor_write_async_data_output_frequency(self, *args)


    def read_yaw_pitch_roll(self):
        """read_yaw_pitch_roll(VnSensor self) -> vec3f"""
        return _libvncxx.VnSensor_read_yaw_pitch_roll(self)


    def read_attitude_quaternion(self):
        """read_attitude_quaternion(VnSensor self) -> vec4f"""
        return _libvncxx.VnSensor_read_attitude_quaternion(self)


    def read_quaternion_magnetic_acceleration_and_angular_rates(self):
        """read_quaternion_magnetic_acceleration_and_angular_rates(VnSensor self) -> QuaternionMagneticAccelerationAndAngularRatesRegister"""
        return _libvncxx.VnSensor_read_quaternion_magnetic_acceleration_and_angular_rates(self)


    def read_magnetic_measurements(self):
        """read_magnetic_measurements(VnSensor self) -> vec3f"""
        return _libvncxx.VnSensor_read_magnetic_measurements(self)


    def read_acceleration_measurements(self):
        """read_acceleration_measurements(VnSensor self) -> vec3f"""
        return _libvncxx.VnSensor_read_acceleration_measurements(self)


    def read_angular_rate_measurements(self):
        """read_angular_rate_measurements(VnSensor self) -> vec3f"""
        return _libvncxx.VnSensor_read_angular_rate_measurements(self)


    def read_magnetic_acceleration_and_angular_rates(self):
        """read_magnetic_acceleration_and_angular_rates(VnSensor self) -> MagneticAccelerationAndAngularRatesRegister"""
        return _libvncxx.VnSensor_read_magnetic_acceleration_and_angular_rates(self)


    def read_magnetic_and_gravity_reference_vectors(self):
        """read_magnetic_and_gravity_reference_vectors(VnSensor self) -> MagneticAndGravityReferenceVectorsRegister"""
        return _libvncxx.VnSensor_read_magnetic_and_gravity_reference_vectors(self)


    def write_magnetic_and_gravity_reference_vectors(self, *args):
        """
        write_magnetic_and_gravity_reference_vectors(VnSensor self, MagneticAndGravityReferenceVectorsRegister fields, bool waitForReply=True)
        write_magnetic_and_gravity_reference_vectors(VnSensor self, MagneticAndGravityReferenceVectorsRegister fields)
        write_magnetic_and_gravity_reference_vectors(VnSensor self, vec3f magRef, vec3f accRef, bool waitForReply=True)
        write_magnetic_and_gravity_reference_vectors(VnSensor self, vec3f magRef, vec3f accRef)
        """
        return _libvncxx.VnSensor_write_magnetic_and_gravity_reference_vectors(self, *args)


    def read_filter_measurements_variance_parameters(self):
        """read_filter_measurements_variance_parameters(VnSensor self) -> FilterMeasurementsVarianceParametersRegister"""
        return _libvncxx.VnSensor_read_filter_measurements_variance_parameters(self)


    def write_filter_measurements_variance_parameters(self, *args):
        """
        write_filter_measurements_variance_parameters(VnSensor self, FilterMeasurementsVarianceParametersRegister fields, bool waitForReply=True)
        write_filter_measurements_variance_parameters(VnSensor self, FilterMeasurementsVarianceParametersRegister fields)
        write_filter_measurements_variance_parameters(VnSensor self, float const & angularWalkVariance, vec3f angularRateVariance, vec3f magneticVariance, vec3f accelerationVariance, bool waitForReply=True)
        write_filter_measurements_variance_parameters(VnSensor self, float const & angularWalkVariance, vec3f angularRateVariance, vec3f magneticVariance, vec3f accelerationVariance)
        """
        return _libvncxx.VnSensor_write_filter_measurements_variance_parameters(self, *args)


    def read_magnetometer_compensation(self):
        """read_magnetometer_compensation(VnSensor self) -> MagnetometerCompensationRegister"""
        return _libvncxx.VnSensor_read_magnetometer_compensation(self)


    def write_magnetometer_compensation(self, *args):
        """
        write_magnetometer_compensation(VnSensor self, MagnetometerCompensationRegister fields, bool waitForReply=True)
        write_magnetometer_compensation(VnSensor self, MagnetometerCompensationRegister fields)
        write_magnetometer_compensation(VnSensor self, mat3f c, vec3f b, bool waitForReply=True)
        write_magnetometer_compensation(VnSensor self, mat3f c, vec3f b)
        """
        return _libvncxx.VnSensor_write_magnetometer_compensation(self, *args)


    def read_filter_active_tuning_parameters(self):
        """read_filter_active_tuning_parameters(VnSensor self) -> FilterActiveTuningParametersRegister"""
        return _libvncxx.VnSensor_read_filter_active_tuning_parameters(self)


    def write_filter_active_tuning_parameters(self, *args):
        """
        write_filter_active_tuning_parameters(VnSensor self, FilterActiveTuningParametersRegister fields, bool waitForReply=True)
        write_filter_active_tuning_parameters(VnSensor self, FilterActiveTuningParametersRegister fields)
        write_filter_active_tuning_parameters(VnSensor self, float const & magneticDisturbanceGain, float const & accelerationDisturbanceGain, float const & magneticDisturbanceMemory, float const & accelerationDisturbanceMemory, bool waitForReply=True)
        write_filter_active_tuning_parameters(VnSensor self, float const & magneticDisturbanceGain, float const & accelerationDisturbanceGain, float const & magneticDisturbanceMemory, float const & accelerationDisturbanceMemory)
        """
        return _libvncxx.VnSensor_write_filter_active_tuning_parameters(self, *args)


    def read_acceleration_compensation(self):
        """read_acceleration_compensation(VnSensor self) -> AccelerationCompensationRegister"""
        return _libvncxx.VnSensor_read_acceleration_compensation(self)


    def write_acceleration_compensation(self, *args):
        """
        write_acceleration_compensation(VnSensor self, AccelerationCompensationRegister fields, bool waitForReply=True)
        write_acceleration_compensation(VnSensor self, AccelerationCompensationRegister fields)
        write_acceleration_compensation(VnSensor self, mat3f c, vec3f b, bool waitForReply=True)
        write_acceleration_compensation(VnSensor self, mat3f c, vec3f b)
        """
        return _libvncxx.VnSensor_write_acceleration_compensation(self, *args)


    def read_reference_frame_rotation(self):
        """read_reference_frame_rotation(VnSensor self) -> mat3f"""
        return _libvncxx.VnSensor_read_reference_frame_rotation(self)


    def write_reference_frame_rotation(self, c, waitForReply=True):
        """
        write_reference_frame_rotation(VnSensor self, mat3f c, bool waitForReply=True)
        write_reference_frame_rotation(VnSensor self, mat3f c)
        """
        return _libvncxx.VnSensor_write_reference_frame_rotation(self, c, waitForReply)


    def read_yaw_pitch_roll_magnetic_acceleration_and_angular_rates(self):
        """read_yaw_pitch_roll_magnetic_acceleration_and_angular_rates(VnSensor self) -> YawPitchRollMagneticAccelerationAndAngularRatesRegister"""
        return _libvncxx.VnSensor_read_yaw_pitch_roll_magnetic_acceleration_and_angular_rates(self)


    def read_communication_protocol_control(self):
        """read_communication_protocol_control(VnSensor self) -> CommunicationProtocolControlRegister"""
        return _libvncxx.VnSensor_read_communication_protocol_control(self)


    def write_communication_protocol_control(self, *args):
        """
        write_communication_protocol_control(VnSensor self, CommunicationProtocolControlRegister fields, bool waitForReply=True)
        write_communication_protocol_control(VnSensor self, CommunicationProtocolControlRegister fields)
        write_communication_protocol_control(VnSensor self, vn::protocol::uart::CountMode serialCount, vn::protocol::uart::StatusMode serialStatus, vn::protocol::uart::CountMode spiCount, vn::protocol::uart::StatusMode spiStatus, vn::protocol::uart::ChecksumMode serialChecksum, vn::protocol::uart::ChecksumMode spiChecksum, vn::protocol::uart::ErrorMode errorMode, bool waitForReply=True)
        write_communication_protocol_control(VnSensor self, vn::protocol::uart::CountMode serialCount, vn::protocol::uart::StatusMode serialStatus, vn::protocol::uart::CountMode spiCount, vn::protocol::uart::StatusMode spiStatus, vn::protocol::uart::ChecksumMode serialChecksum, vn::protocol::uart::ChecksumMode spiChecksum, vn::protocol::uart::ErrorMode errorMode)
        """
        return _libvncxx.VnSensor_write_communication_protocol_control(self, *args)


    def read_synchronization_control(self):
        """read_synchronization_control(VnSensor self) -> SynchronizationControlRegister"""
        return _libvncxx.VnSensor_read_synchronization_control(self)


    def write_synchronization_control(self, *args):
        """
        write_synchronization_control(VnSensor self, SynchronizationControlRegister fields, bool waitForReply=True)
        write_synchronization_control(VnSensor self, SynchronizationControlRegister fields)
        write_synchronization_control(VnSensor self, vn::protocol::uart::SyncInMode syncInMode, vn::protocol::uart::SyncInEdge syncInEdge, uint16_t const & syncInSkipFactor, vn::protocol::uart::SyncOutMode syncOutMode, vn::protocol::uart::SyncOutPolarity syncOutPolarity, uint16_t const & syncOutSkipFactor, uint32_t const & syncOutPulseWidth, bool waitForReply=True)
        write_synchronization_control(VnSensor self, vn::protocol::uart::SyncInMode syncInMode, vn::protocol::uart::SyncInEdge syncInEdge, uint16_t const & syncInSkipFactor, vn::protocol::uart::SyncOutMode syncOutMode, vn::protocol::uart::SyncOutPolarity syncOutPolarity, uint16_t const & syncOutSkipFactor, uint32_t const & syncOutPulseWidth)
        """
        return _libvncxx.VnSensor_write_synchronization_control(self, *args)


    def read_synchronization_status(self):
        """read_synchronization_status(VnSensor self) -> SynchronizationStatusRegister"""
        return _libvncxx.VnSensor_read_synchronization_status(self)


    def write_synchronization_status(self, *args):
        """
        write_synchronization_status(VnSensor self, SynchronizationStatusRegister fields, bool waitForReply=True)
        write_synchronization_status(VnSensor self, SynchronizationStatusRegister fields)
        write_synchronization_status(VnSensor self, uint32_t const & syncInCount, uint32_t const & syncInTime, uint32_t const & syncOutCount, bool waitForReply=True)
        write_synchronization_status(VnSensor self, uint32_t const & syncInCount, uint32_t const & syncInTime, uint32_t const & syncOutCount)
        """
        return _libvncxx.VnSensor_write_synchronization_status(self, *args)


    def read_filter_basic_control(self):
        """read_filter_basic_control(VnSensor self) -> FilterBasicControlRegister"""
        return _libvncxx.VnSensor_read_filter_basic_control(self)


    def write_filter_basic_control(self, *args):
        """
        write_filter_basic_control(VnSensor self, FilterBasicControlRegister fields, bool waitForReply=True)
        write_filter_basic_control(VnSensor self, FilterBasicControlRegister fields)
        write_filter_basic_control(VnSensor self, vn::protocol::uart::MagneticMode magMode, vn::protocol::uart::ExternalSensorMode extMagMode, vn::protocol::uart::ExternalSensorMode extAccMode, vn::protocol::uart::ExternalSensorMode extGyroMode, vec3f gyroLimit, bool waitForReply=True)
        write_filter_basic_control(VnSensor self, vn::protocol::uart::MagneticMode magMode, vn::protocol::uart::ExternalSensorMode extMagMode, vn::protocol::uart::ExternalSensorMode extAccMode, vn::protocol::uart::ExternalSensorMode extGyroMode, vec3f gyroLimit)
        """
        return _libvncxx.VnSensor_write_filter_basic_control(self, *args)


    def read_vpe_basic_control(self):
        """read_vpe_basic_control(VnSensor self) -> VpeBasicControlRegister"""
        return _libvncxx.VnSensor_read_vpe_basic_control(self)


    def write_vpe_basic_control(self, *args):
        """
        write_vpe_basic_control(VnSensor self, VpeBasicControlRegister fields, bool waitForReply=True)
        write_vpe_basic_control(VnSensor self, VpeBasicControlRegister fields)
        write_vpe_basic_control(VnSensor self, vn::protocol::uart::VpeEnable enable, vn::protocol::uart::HeadingMode headingMode, vn::protocol::uart::VpeMode filteringMode, vn::protocol::uart::VpeMode tuningMode, bool waitForReply=True)
        write_vpe_basic_control(VnSensor self, vn::protocol::uart::VpeEnable enable, vn::protocol::uart::HeadingMode headingMode, vn::protocol::uart::VpeMode filteringMode, vn::protocol::uart::VpeMode tuningMode)
        """
        return _libvncxx.VnSensor_write_vpe_basic_control(self, *args)


    def read_vpe_magnetometer_basic_tuning(self):
        """read_vpe_magnetometer_basic_tuning(VnSensor self) -> VpeMagnetometerBasicTuningRegister"""
        return _libvncxx.VnSensor_read_vpe_magnetometer_basic_tuning(self)


    def write_vpe_magnetometer_basic_tuning(self, *args):
        """
        write_vpe_magnetometer_basic_tuning(VnSensor self, VpeMagnetometerBasicTuningRegister fields, bool waitForReply=True)
        write_vpe_magnetometer_basic_tuning(VnSensor self, VpeMagnetometerBasicTuningRegister fields)
        write_vpe_magnetometer_basic_tuning(VnSensor self, vec3f baseTuning, vec3f adaptiveTuning, vec3f adaptiveFiltering, bool waitForReply=True)
        write_vpe_magnetometer_basic_tuning(VnSensor self, vec3f baseTuning, vec3f adaptiveTuning, vec3f adaptiveFiltering)
        """
        return _libvncxx.VnSensor_write_vpe_magnetometer_basic_tuning(self, *args)


    def read_vpe_magnetometer_advanced_tuning(self):
        """read_vpe_magnetometer_advanced_tuning(VnSensor self) -> VpeMagnetometerAdvancedTuningRegister"""
        return _libvncxx.VnSensor_read_vpe_magnetometer_advanced_tuning(self)


    def write_vpe_magnetometer_advanced_tuning(self, *args):
        """
        write_vpe_magnetometer_advanced_tuning(VnSensor self, VpeMagnetometerAdvancedTuningRegister fields, bool waitForReply=True)
        write_vpe_magnetometer_advanced_tuning(VnSensor self, VpeMagnetometerAdvancedTuningRegister fields)
        write_vpe_magnetometer_advanced_tuning(VnSensor self, vec3f minFiltering, vec3f maxFiltering, float const & maxAdaptRate, float const & disturbanceWindow, float const & maxTuning, bool waitForReply=True)
        write_vpe_magnetometer_advanced_tuning(VnSensor self, vec3f minFiltering, vec3f maxFiltering, float const & maxAdaptRate, float const & disturbanceWindow, float const & maxTuning)
        """
        return _libvncxx.VnSensor_write_vpe_magnetometer_advanced_tuning(self, *args)


    def read_vpe_accelerometer_basic_tuning(self):
        """read_vpe_accelerometer_basic_tuning(VnSensor self) -> VpeAccelerometerBasicTuningRegister"""
        return _libvncxx.VnSensor_read_vpe_accelerometer_basic_tuning(self)


    def write_vpe_accelerometer_basic_tuning(self, *args):
        """
        write_vpe_accelerometer_basic_tuning(VnSensor self, VpeAccelerometerBasicTuningRegister fields, bool waitForReply=True)
        write_vpe_accelerometer_basic_tuning(VnSensor self, VpeAccelerometerBasicTuningRegister fields)
        write_vpe_accelerometer_basic_tuning(VnSensor self, vec3f baseTuning, vec3f adaptiveTuning, vec3f adaptiveFiltering, bool waitForReply=True)
        write_vpe_accelerometer_basic_tuning(VnSensor self, vec3f baseTuning, vec3f adaptiveTuning, vec3f adaptiveFiltering)
        """
        return _libvncxx.VnSensor_write_vpe_accelerometer_basic_tuning(self, *args)


    def read_vpe_accelerometer_advanced_tuning(self):
        """read_vpe_accelerometer_advanced_tuning(VnSensor self) -> VpeAccelerometerAdvancedTuningRegister"""
        return _libvncxx.VnSensor_read_vpe_accelerometer_advanced_tuning(self)


    def write_vpe_accelerometer_advanced_tuning(self, *args):
        """
        write_vpe_accelerometer_advanced_tuning(VnSensor self, VpeAccelerometerAdvancedTuningRegister fields, bool waitForReply=True)
        write_vpe_accelerometer_advanced_tuning(VnSensor self, VpeAccelerometerAdvancedTuningRegister fields)
        write_vpe_accelerometer_advanced_tuning(VnSensor self, vec3f minFiltering, vec3f maxFiltering, float const & maxAdaptRate, float const & disturbanceWindow, float const & maxTuning, bool waitForReply=True)
        write_vpe_accelerometer_advanced_tuning(VnSensor self, vec3f minFiltering, vec3f maxFiltering, float const & maxAdaptRate, float const & disturbanceWindow, float const & maxTuning)
        """
        return _libvncxx.VnSensor_write_vpe_accelerometer_advanced_tuning(self, *args)


    def readVpeGyroBasicTuning(self):
        """readVpeGyroBasicTuning(VnSensor self) -> VpeGyroBasicTuningRegister"""
        return _libvncxx.VnSensor_readVpeGyroBasicTuning(self)


    def writeVpeGyroBasicTuning(self, *args):
        """
        writeVpeGyroBasicTuning(VnSensor self, VpeGyroBasicTuningRegister fields, bool waitForReply=True)
        writeVpeGyroBasicTuning(VnSensor self, VpeGyroBasicTuningRegister fields)
        writeVpeGyroBasicTuning(VnSensor self, vec3f angularWalkVariance, vec3f baseTuning, vec3f adaptiveTuning, bool waitForReply=True)
        writeVpeGyroBasicTuning(VnSensor self, vec3f angularWalkVariance, vec3f baseTuning, vec3f adaptiveTuning)
        """
        return _libvncxx.VnSensor_writeVpeGyroBasicTuning(self, *args)


    def read_filter_startup_gyro_bias(self):
        """read_filter_startup_gyro_bias(VnSensor self) -> vec3f"""
        return _libvncxx.VnSensor_read_filter_startup_gyro_bias(self)


    def write_filter_startup_gyro_bias(self, bias, waitForReply=True):
        """
        write_filter_startup_gyro_bias(VnSensor self, vec3f bias, bool waitForReply=True)
        write_filter_startup_gyro_bias(VnSensor self, vec3f bias)
        """
        return _libvncxx.VnSensor_write_filter_startup_gyro_bias(self, bias, waitForReply)


    def read_magnetometer_calibration_control(self):
        """read_magnetometer_calibration_control(VnSensor self) -> MagnetometerCalibrationControlRegister"""
        return _libvncxx.VnSensor_read_magnetometer_calibration_control(self)


    def write_magnetometer_calibration_control(self, *args):
        """
        write_magnetometer_calibration_control(VnSensor self, MagnetometerCalibrationControlRegister fields, bool waitForReply=True)
        write_magnetometer_calibration_control(VnSensor self, MagnetometerCalibrationControlRegister fields)
        write_magnetometer_calibration_control(VnSensor self, vn::protocol::uart::HsiMode hsiMode, vn::protocol::uart::HsiOutput hsiOutput, uint8_t const & convergeRate, bool waitForReply=True)
        write_magnetometer_calibration_control(VnSensor self, vn::protocol::uart::HsiMode hsiMode, vn::protocol::uart::HsiOutput hsiOutput, uint8_t const & convergeRate)
        """
        return _libvncxx.VnSensor_write_magnetometer_calibration_control(self, *args)


    def read_calculated_magnetometer_calibration(self):
        """read_calculated_magnetometer_calibration(VnSensor self) -> CalculatedMagnetometerCalibrationRegister"""
        return _libvncxx.VnSensor_read_calculated_magnetometer_calibration(self)


    def read_indoor_heading_mode_control(self):
        """read_indoor_heading_mode_control(VnSensor self) -> float"""
        return _libvncxx.VnSensor_read_indoor_heading_mode_control(self)


    def write_indoor_heading_mode_control(self, maxRateError, waitForReply=True):
        """
        write_indoor_heading_mode_control(VnSensor self, float const & maxRateError, bool waitForReply=True)
        write_indoor_heading_mode_control(VnSensor self, float const & maxRateError)
        """
        return _libvncxx.VnSensor_write_indoor_heading_mode_control(self, maxRateError, waitForReply)


    def read_velocity_compensation_measurement(self):
        """read_velocity_compensation_measurement(VnSensor self) -> vec3f"""
        return _libvncxx.VnSensor_read_velocity_compensation_measurement(self)


    def write_velocity_compensation_measurement(self, velocity, waitForReply=True):
        """
        write_velocity_compensation_measurement(VnSensor self, vec3f velocity, bool waitForReply=True)
        write_velocity_compensation_measurement(VnSensor self, vec3f velocity)
        """
        return _libvncxx.VnSensor_write_velocity_compensation_measurement(self, velocity, waitForReply)


    def read_velocity_compensation_control(self):
        """read_velocity_compensation_control(VnSensor self) -> VelocityCompensationControlRegister"""
        return _libvncxx.VnSensor_read_velocity_compensation_control(self)


    def write_velocity_compensation_control(self, *args):
        """
        write_velocity_compensation_control(VnSensor self, VelocityCompensationControlRegister fields, bool waitForReply=True)
        write_velocity_compensation_control(VnSensor self, VelocityCompensationControlRegister fields)
        write_velocity_compensation_control(VnSensor self, vn::protocol::uart::VelocityCompensationMode mode, float const & velocityTuning, float const & rateTuning, bool waitForReply=True)
        write_velocity_compensation_control(VnSensor self, vn::protocol::uart::VelocityCompensationMode mode, float const & velocityTuning, float const & rateTuning)
        """
        return _libvncxx.VnSensor_write_velocity_compensation_control(self, *args)


    def read_velocity_compensation_status(self):
        """read_velocity_compensation_status(VnSensor self) -> VelocityCompensationStatusRegister"""
        return _libvncxx.VnSensor_read_velocity_compensation_status(self)


    def read_imu_measurements(self):
        """read_imu_measurements(VnSensor self) -> ImuMeasurementsRegister"""
        return _libvncxx.VnSensor_read_imu_measurements(self)


    def read_gps_configuration(self):
        """read_gps_configuration(VnSensor self) -> GpsConfigurationRegister"""
        return _libvncxx.VnSensor_read_gps_configuration(self)


    def write_gps_configuration(self, *args):
        """
        write_gps_configuration(VnSensor self, GpsConfigurationRegister fields, bool waitForReply=True)
        write_gps_configuration(VnSensor self, GpsConfigurationRegister fields)
        write_gps_configuration(VnSensor self, vn::protocol::uart::GpsMode mode, vn::protocol::uart::PpsSource ppsSource, bool waitForReply=True)
        write_gps_configuration(VnSensor self, vn::protocol::uart::GpsMode mode, vn::protocol::uart::PpsSource ppsSource)
        """
        return _libvncxx.VnSensor_write_gps_configuration(self, *args)


    def read_gps_antenna_offset(self):
        """read_gps_antenna_offset(VnSensor self) -> vec3f"""
        return _libvncxx.VnSensor_read_gps_antenna_offset(self)


    def write_gps_antenna_offset(self, position, waitForReply=True):
        """
        write_gps_antenna_offset(VnSensor self, vec3f position, bool waitForReply=True)
        write_gps_antenna_offset(VnSensor self, vec3f position)
        """
        return _libvncxx.VnSensor_write_gps_antenna_offset(self, position, waitForReply)


    def read_gps_solution_lla(self):
        """read_gps_solution_lla(VnSensor self) -> GpsSolutionLlaRegister"""
        return _libvncxx.VnSensor_read_gps_solution_lla(self)


    def read_gps_solution_ecef(self):
        """read_gps_solution_ecef(VnSensor self) -> GpsSolutionEcefRegister"""
        return _libvncxx.VnSensor_read_gps_solution_ecef(self)


    def read_ins_solution_lla(self):
        """read_ins_solution_lla(VnSensor self) -> InsSolutionLlaRegister"""
        return _libvncxx.VnSensor_read_ins_solution_lla(self)


    def read_ins_solution_ecef(self):
        """read_ins_solution_ecef(VnSensor self) -> InsSolutionEcefRegister"""
        return _libvncxx.VnSensor_read_ins_solution_ecef(self)


    def read_ins_advanced_configuration(self):
        """read_ins_advanced_configuration(VnSensor self) -> InsAdvancedConfigurationRegister"""
        return _libvncxx.VnSensor_read_ins_advanced_configuration(self)


    def write_ins_advanced_configuration(self, *args):
        """
        write_ins_advanced_configuration(VnSensor self, InsAdvancedConfigurationRegister fields, bool waitForReply=True)
        write_ins_advanced_configuration(VnSensor self, InsAdvancedConfigurationRegister fields)
        write_ins_advanced_configuration(VnSensor self, uint8_t const & useMag, uint8_t const & usePres, uint8_t const & posAtt, uint8_t const & velAtt, uint8_t const & velBias, vn::protocol::uart::FoamInit useFoam, uint8_t const & gpsCovType, uint8_t const & velCount, float const & velInit, float const & moveOrigin, float const & gpsTimeout, float const & deltaLimitPos, float const & deltaLimitVel, float const & minPosUncertainty, float const & minVelUncertainty, bool waitForReply=True)
        write_ins_advanced_configuration(VnSensor self, uint8_t const & useMag, uint8_t const & usePres, uint8_t const & posAtt, uint8_t const & velAtt, uint8_t const & velBias, vn::protocol::uart::FoamInit useFoam, uint8_t const & gpsCovType, uint8_t const & velCount, float const & velInit, float const & moveOrigin, float const & gpsTimeout, float const & deltaLimitPos, float const & deltaLimitVel, float const & minPosUncertainty, float const & minVelUncertainty)
        """
        return _libvncxx.VnSensor_write_ins_advanced_configuration(self, *args)


    def read_ins_state_lla(self):
        """read_ins_state_lla(VnSensor self) -> InsStateLlaRegister"""
        return _libvncxx.VnSensor_read_ins_state_lla(self)


    def read_ins_state_ecef(self):
        """read_ins_state_ecef(VnSensor self) -> InsStateEcefRegister"""
        return _libvncxx.VnSensor_read_ins_state_ecef(self)


    def read_startup_filter_bias_estimate(self):
        """read_startup_filter_bias_estimate(VnSensor self) -> StartupFilterBiasEstimateRegister"""
        return _libvncxx.VnSensor_read_startup_filter_bias_estimate(self)


    def write_startup_filter_bias_estimate(self, *args):
        """
        write_startup_filter_bias_estimate(VnSensor self, StartupFilterBiasEstimateRegister fields, bool waitForReply=True)
        write_startup_filter_bias_estimate(VnSensor self, StartupFilterBiasEstimateRegister fields)
        write_startup_filter_bias_estimate(VnSensor self, vec3f gyroBias, vec3f accelBias, float const & pressureBias, bool waitForReply=True)
        write_startup_filter_bias_estimate(VnSensor self, vec3f gyroBias, vec3f accelBias, float const & pressureBias)
        """
        return _libvncxx.VnSensor_write_startup_filter_bias_estimate(self, *args)


    def read_delta_theta_and_delta_velocity(self):
        """read_delta_theta_and_delta_velocity(VnSensor self) -> DeltaThetaAndDeltaVelocityRegister"""
        return _libvncxx.VnSensor_read_delta_theta_and_delta_velocity(self)


    def read_delta_theta_and_delta_velocity_configuration(self):
        """read_delta_theta_and_delta_velocity_configuration(VnSensor self) -> DeltaThetaAndDeltaVelocityConfigurationRegister"""
        return _libvncxx.VnSensor_read_delta_theta_and_delta_velocity_configuration(self)


    def writeDeltaThetaAndDeltaVelocityConfiguration(self, *args):
        """
        writeDeltaThetaAndDeltaVelocityConfiguration(VnSensor self, DeltaThetaAndDeltaVelocityConfigurationRegister fields, bool waitForReply=True)
        writeDeltaThetaAndDeltaVelocityConfiguration(VnSensor self, DeltaThetaAndDeltaVelocityConfigurationRegister fields)
        writeDeltaThetaAndDeltaVelocityConfiguration(VnSensor self, vn::protocol::uart::IntegrationFrame integrationFrame, vn::protocol::uart::CompensationMode gyroCompensation, vn::protocol::uart::CompensationMode accelCompensation, bool waitForReply=True)
        writeDeltaThetaAndDeltaVelocityConfiguration(VnSensor self, vn::protocol::uart::IntegrationFrame integrationFrame, vn::protocol::uart::CompensationMode gyroCompensation, vn::protocol::uart::CompensationMode accelCompensation)
        """
        return _libvncxx.VnSensor_writeDeltaThetaAndDeltaVelocityConfiguration(self, *args)


    def read_reference_vector_configuration(self):
        """read_reference_vector_configuration(VnSensor self) -> ReferenceVectorConfigurationRegister"""
        return _libvncxx.VnSensor_read_reference_vector_configuration(self)


    def write_reference_vector_configuration(self, *args):
        """
        write_reference_vector_configuration(VnSensor self, ReferenceVectorConfigurationRegister fields, bool waitForReply=True)
        write_reference_vector_configuration(VnSensor self, ReferenceVectorConfigurationRegister fields)
        write_reference_vector_configuration(VnSensor self, uint8_t const & useMagModel, uint8_t const & useGravityModel, uint32_t const & recalcThreshold, float const & year, vec3d position, bool waitForReply=True)
        write_reference_vector_configuration(VnSensor self, uint8_t const & useMagModel, uint8_t const & useGravityModel, uint32_t const & recalcThreshold, float const & year, vec3d position)
        """
        return _libvncxx.VnSensor_write_reference_vector_configuration(self, *args)


    def read_gyro_compensation(self):
        """read_gyro_compensation(VnSensor self) -> GyroCompensationRegister"""
        return _libvncxx.VnSensor_read_gyro_compensation(self)


    def write_gyro_compensation(self, *args):
        """
        write_gyro_compensation(VnSensor self, GyroCompensationRegister fields, bool waitForReply=True)
        write_gyro_compensation(VnSensor self, GyroCompensationRegister fields)
        write_gyro_compensation(VnSensor self, mat3f c, vec3f b, bool waitForReply=True)
        write_gyro_compensation(VnSensor self, mat3f c, vec3f b)
        """
        return _libvncxx.VnSensor_write_gyro_compensation(self, *args)


    def read_imu_filtering_configuration(self):
        """read_imu_filtering_configuration(VnSensor self) -> ImuFilteringConfigurationRegister"""
        return _libvncxx.VnSensor_read_imu_filtering_configuration(self)


    def write_imu_filtering_configuration(self, *args):
        """
        write_imu_filtering_configuration(VnSensor self, ImuFilteringConfigurationRegister fields, bool waitForReply=True)
        write_imu_filtering_configuration(VnSensor self, ImuFilteringConfigurationRegister fields)
        write_imu_filtering_configuration(VnSensor self, uint16_t const & magWindowSize, uint16_t const & accelWindowSize, uint16_t const & gyroWindowSize, uint16_t const & tempWindowSize, uint16_t const & presWindowSize, vn::protocol::uart::FilterMode magFilterMode, vn::protocol::uart::FilterMode accelFilterMode, vn::protocol::uart::FilterMode gyroFilterMode, vn::protocol::uart::FilterMode tempFilterMode, vn::protocol::uart::FilterMode presFilterMode, bool waitForReply=True)
        write_imu_filtering_configuration(VnSensor self, uint16_t const & magWindowSize, uint16_t const & accelWindowSize, uint16_t const & gyroWindowSize, uint16_t const & tempWindowSize, uint16_t const & presWindowSize, vn::protocol::uart::FilterMode magFilterMode, vn::protocol::uart::FilterMode accelFilterMode, vn::protocol::uart::FilterMode gyroFilterMode, vn::protocol::uart::FilterMode tempFilterMode, vn::protocol::uart::FilterMode presFilterMode)
        """
        return _libvncxx.VnSensor_write_imu_filtering_configuration(self, *args)


    def read_gps_compass_baseline(self):
        """read_gps_compass_baseline(VnSensor self) -> GpsCompassBaselineRegister"""
        return _libvncxx.VnSensor_read_gps_compass_baseline(self)


    def write_gps_compass_baseline(self, *args):
        """
        write_gps_compass_baseline(VnSensor self, GpsCompassBaselineRegister fields, bool waitForReply=True)
        write_gps_compass_baseline(VnSensor self, GpsCompassBaselineRegister fields)
        write_gps_compass_baseline(VnSensor self, vec3f position, vec3f uncertainty, bool waitForReply=True)
        write_gps_compass_baseline(VnSensor self, vec3f position, vec3f uncertainty)
        """
        return _libvncxx.VnSensor_write_gps_compass_baseline(self, *args)


    def read_gps_compass_estimated_baseline(self):
        """read_gps_compass_estimated_baseline(VnSensor self) -> GpsCompassEstimatedBaselineRegister"""
        return _libvncxx.VnSensor_read_gps_compass_estimated_baseline(self)


    def read_imu_rate_configuration(self):
        """read_imu_rate_configuration(VnSensor self) -> ImuRateConfigurationRegister"""
        return _libvncxx.VnSensor_read_imu_rate_configuration(self)


    def write_imu_rate_configuration(self, *args):
        """
        write_imu_rate_configuration(VnSensor self, ImuRateConfigurationRegister fields, bool waitForReply=True)
        write_imu_rate_configuration(VnSensor self, ImuRateConfigurationRegister fields)
        write_imu_rate_configuration(VnSensor self, uint16_t const & imuRate, uint16_t const & navDivisor, float const & filterTargetRate, float const & filterMinRate, bool waitForReply=True)
        write_imu_rate_configuration(VnSensor self, uint16_t const & imuRate, uint16_t const & navDivisor, float const & filterTargetRate, float const & filterMinRate)
        """
        return _libvncxx.VnSensor_write_imu_rate_configuration(self, *args)


    def read_yaw_pitch_roll_true_body_acceleration_and_angular_rates_register(self):
        """read_yaw_pitch_roll_true_body_acceleration_and_angular_rates_register(VnSensor self) -> YawPitchRollTrueBodyAccelerationAndAngularRatesRegister"""
        return _libvncxx.VnSensor_read_yaw_pitch_roll_true_body_acceleration_and_angular_rates_register(self)


    def read_yaw_pitch_roll_true_inertial_acceleration_and_angular_rates_register(self):
        """read_yaw_pitch_roll_true_inertial_acceleration_and_angular_rates_register(VnSensor self) -> YawPitchRollTrueInertialAccelerationAndAngularRatesRegister"""
        return _libvncxx.VnSensor_read_yaw_pitch_roll_true_inertial_acceleration_and_angular_rates_register(self)

    __swig_getmethods__["baudrate"] = _libvncxx.VnSensor_baudrate_get
    if _newclass:
        baudrate = _swig_property(_libvncxx.VnSensor_baudrate_get)
    __swig_getmethods__["port"] = _libvncxx.VnSensor_port_get
    if _newclass:
        port = _swig_property(_libvncxx.VnSensor_port_get)
    __swig_setmethods__["send_error_detection_mode"] = _libvncxx.VnSensor_send_error_detection_mode_set
    __swig_getmethods__["send_error_detection_mode"] = _libvncxx.VnSensor_send_error_detection_mode_get
    if _newclass:
        send_error_detection_mode = _swig_property(_libvncxx.VnSensor_send_error_detection_mode_get, _libvncxx.VnSensor_send_error_detection_mode_set)
    __swig_getmethods__["is_connected"] = _libvncxx.VnSensor_is_connected_get
    if _newclass:
        is_connected = _swig_property(_libvncxx.VnSensor_is_connected_get)
    __swig_setmethods__["response_timeout_ms"] = _libvncxx.VnSensor_response_timeout_ms_set
    __swig_getmethods__["response_timeout_ms"] = _libvncxx.VnSensor_response_timeout_ms_get
    if _newclass:
        response_timeout_ms = _swig_property(_libvncxx.VnSensor_response_timeout_ms_get, _libvncxx.VnSensor_response_timeout_ms_set)
    __swig_setmethods__["retransmit_delay_ms"] = _libvncxx.VnSensor_retransmit_delay_ms_set
    __swig_getmethods__["retransmit_delay_ms"] = _libvncxx.VnSensor_retransmit_delay_ms_get
    if _newclass:
        retransmit_delay_ms = _swig_property(_libvncxx.VnSensor_retransmit_delay_ms_get, _libvncxx.VnSensor_retransmit_delay_ms_set)

    @classmethod
    def supported_baudrates(cls):
    	return list(cls.__supported_baudrates())

    def __repr__(self):
    	return "<vnpy.VnSensor>"

VnSensor_swigregister = _libvncxx.VnSensor_swigregister
VnSensor_swigregister(VnSensor)

def VnSensor___supported_baudrates():
    """VnSensor___supported_baudrates() -> UInt32Vector"""
    return _libvncxx.VnSensor___supported_baudrates()

def VnSensor_supportedAsyncDataOutputFrequencies():
    """VnSensor_supportedAsyncDataOutputFrequencies() -> UInt32Vector"""
    return _libvncxx.VnSensor_supportedAsyncDataOutputFrequencies()

def VnSensor_determine_device_family(*args):
    """
    determine_device_family() -> vn::sensors::VnSensor::Family
    VnSensor_determine_device_family(std::string modelNumber) -> vn::sensors::VnSensor::Family
    """
    return _libvncxx.VnSensor_determine_device_family(*args)

class UInt32Vector(_object):
    """Proxy of C++ std::vector<(uint32_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UInt32Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UInt32Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(UInt32Vector self) -> SwigPyIterator"""
        return _libvncxx.UInt32Vector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(UInt32Vector self) -> bool"""
        return _libvncxx.UInt32Vector___nonzero__(self)


    def __bool__(self):
        """__bool__(UInt32Vector self) -> bool"""
        return _libvncxx.UInt32Vector___bool__(self)


    def __len__(self):
        """__len__(UInt32Vector self) -> std::vector< unsigned int >::size_type"""
        return _libvncxx.UInt32Vector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(UInt32Vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j) -> UInt32Vector"""
        return _libvncxx.UInt32Vector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(UInt32Vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)
        __setslice__(UInt32Vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j, UInt32Vector v)
        """
        return _libvncxx.UInt32Vector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(UInt32Vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)"""
        return _libvncxx.UInt32Vector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(UInt32Vector self, std::vector< unsigned int >::difference_type i)
        __delitem__(UInt32Vector self, PySliceObject * slice)
        """
        return _libvncxx.UInt32Vector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(UInt32Vector self, PySliceObject * slice) -> UInt32Vector
        __getitem__(UInt32Vector self, std::vector< unsigned int >::difference_type i) -> std::vector< unsigned int >::value_type const &
        """
        return _libvncxx.UInt32Vector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(UInt32Vector self, PySliceObject * slice, UInt32Vector v)
        __setitem__(UInt32Vector self, PySliceObject * slice)
        __setitem__(UInt32Vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::value_type const & x)
        """
        return _libvncxx.UInt32Vector___setitem__(self, *args)


    def pop(self):
        """pop(UInt32Vector self) -> std::vector< unsigned int >::value_type"""
        return _libvncxx.UInt32Vector_pop(self)


    def append(self, x):
        """append(UInt32Vector self, std::vector< unsigned int >::value_type const & x)"""
        return _libvncxx.UInt32Vector_append(self, x)


    def empty(self):
        """empty(UInt32Vector self) -> bool"""
        return _libvncxx.UInt32Vector_empty(self)


    def size(self):
        """size(UInt32Vector self) -> std::vector< unsigned int >::size_type"""
        return _libvncxx.UInt32Vector_size(self)


    def swap(self, v):
        """swap(UInt32Vector self, UInt32Vector v)"""
        return _libvncxx.UInt32Vector_swap(self, v)


    def begin(self):
        """begin(UInt32Vector self) -> std::vector< unsigned int >::iterator"""
        return _libvncxx.UInt32Vector_begin(self)


    def end(self):
        """end(UInt32Vector self) -> std::vector< unsigned int >::iterator"""
        return _libvncxx.UInt32Vector_end(self)


    def rbegin(self):
        """rbegin(UInt32Vector self) -> std::vector< unsigned int >::reverse_iterator"""
        return _libvncxx.UInt32Vector_rbegin(self)


    def rend(self):
        """rend(UInt32Vector self) -> std::vector< unsigned int >::reverse_iterator"""
        return _libvncxx.UInt32Vector_rend(self)


    def clear(self):
        """clear(UInt32Vector self)"""
        return _libvncxx.UInt32Vector_clear(self)


    def get_allocator(self):
        """get_allocator(UInt32Vector self) -> std::vector< unsigned int >::allocator_type"""
        return _libvncxx.UInt32Vector_get_allocator(self)


    def pop_back(self):
        """pop_back(UInt32Vector self)"""
        return _libvncxx.UInt32Vector_pop_back(self)


    def erase(self, *args):
        """
        erase(UInt32Vector self, std::vector< unsigned int >::iterator pos) -> std::vector< unsigned int >::iterator
        erase(UInt32Vector self, std::vector< unsigned int >::iterator first, std::vector< unsigned int >::iterator last) -> std::vector< unsigned int >::iterator
        """
        return _libvncxx.UInt32Vector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(uint32_t)> self) -> UInt32Vector
        __init__(std::vector<(uint32_t)> self, UInt32Vector arg2) -> UInt32Vector
        __init__(std::vector<(uint32_t)> self, std::vector< unsigned int >::size_type size) -> UInt32Vector
        __init__(std::vector<(uint32_t)> self, std::vector< unsigned int >::size_type size, std::vector< unsigned int >::value_type const & value) -> UInt32Vector
        """
        this = _libvncxx.new_UInt32Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(UInt32Vector self, std::vector< unsigned int >::value_type const & x)"""
        return _libvncxx.UInt32Vector_push_back(self, x)


    def front(self):
        """front(UInt32Vector self) -> std::vector< unsigned int >::value_type const &"""
        return _libvncxx.UInt32Vector_front(self)


    def back(self):
        """back(UInt32Vector self) -> std::vector< unsigned int >::value_type const &"""
        return _libvncxx.UInt32Vector_back(self)


    def assign(self, n, x):
        """assign(UInt32Vector self, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)"""
        return _libvncxx.UInt32Vector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(UInt32Vector self, std::vector< unsigned int >::size_type new_size)
        resize(UInt32Vector self, std::vector< unsigned int >::size_type new_size, std::vector< unsigned int >::value_type const & x)
        """
        return _libvncxx.UInt32Vector_resize(self, *args)


    def insert(self, *args):
        """
        insert(UInt32Vector self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::value_type const & x) -> std::vector< unsigned int >::iterator
        insert(UInt32Vector self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)
        """
        return _libvncxx.UInt32Vector_insert(self, *args)


    def reserve(self, n):
        """reserve(UInt32Vector self, std::vector< unsigned int >::size_type n)"""
        return _libvncxx.UInt32Vector_reserve(self, n)


    def capacity(self):
        """capacity(UInt32Vector self) -> std::vector< unsigned int >::size_type"""
        return _libvncxx.UInt32Vector_capacity(self)

    __swig_destroy__ = _libvncxx.delete_UInt32Vector
    __del__ = lambda self: None
UInt32Vector_swigregister = _libvncxx.UInt32Vector_swigregister
UInt32Vector_swigregister(UInt32Vector)

class CompositeData(_object):
    """Proxy of C++ vn::sensors::CompositeData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vn::sensors::CompositeData self) -> CompositeData
        __init__(vn::sensors::CompositeData self, CompositeData cd) -> CompositeData
        """
        this = _libvncxx.new_CompositeData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libvncxx.delete_CompositeData
    __del__ = lambda self: None

    def parse(*args):
        """
        parse(Packet p) -> CompositeData
        parse(Packet p, CompositeData o)
        parse(Packet p, std::vector< vn::sensors::CompositeData *,std::allocator< vn::sensors::CompositeData * > > & o)
        """
        return _libvncxx.CompositeData_parse(*args)

    parse = staticmethod(parse)

    def reset(self):
        """reset(CompositeData self)"""
        return _libvncxx.CompositeData_reset(self)


    def __hasAnyAttitude(self):
        """__hasAnyAttitude(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasAnyAttitude(self)


    def __anyAttitude(self):
        """__anyAttitude(CompositeData self) -> Attitude"""
        return _libvncxx.CompositeData___anyAttitude(self)


    def __hasYawPitchRoll(self):
        """__hasYawPitchRoll(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasYawPitchRoll(self)


    def __yawPitchRoll(self):
        """__yawPitchRoll(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___yawPitchRoll(self)


    def __hasQuaternion(self):
        """__hasQuaternion(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasQuaternion(self)


    def __quaternion(self):
        """__quaternion(CompositeData self) -> vec4f"""
        return _libvncxx.CompositeData___quaternion(self)


    def __hasDirectionCosineMatrix(self):
        """__hasDirectionCosineMatrix(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasDirectionCosineMatrix(self)


    def __directionCosineMatrix(self):
        """__directionCosineMatrix(CompositeData self) -> mat3f"""
        return _libvncxx.CompositeData___directionCosineMatrix(self)


    def __hasAnyMagnetic(self):
        """__hasAnyMagnetic(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasAnyMagnetic(self)


    def __anyMagnetic(self):
        """__anyMagnetic(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___anyMagnetic(self)


    def __hasMagnetic(self):
        """__hasMagnetic(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasMagnetic(self)


    def __magnetic(self):
        """__magnetic(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___magnetic(self)


    def __hasMagneticUncompensated(self):
        """__hasMagneticUncompensated(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasMagneticUncompensated(self)


    def __magneticUncompensated(self):
        """__magneticUncompensated(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___magneticUncompensated(self)


    def __hasMagneticNed(self):
        """__hasMagneticNed(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasMagneticNed(self)


    def __magneticNed(self):
        """__magneticNed(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___magneticNed(self)


    def __hasMagneticEcef(self):
        """__hasMagneticEcef(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasMagneticEcef(self)


    def __magneticEcef(self):
        """__magneticEcef(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___magneticEcef(self)


    def __hasAnyAcceleration(self):
        """__hasAnyAcceleration(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasAnyAcceleration(self)


    def __anyAcceleration(self):
        """__anyAcceleration(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___anyAcceleration(self)


    def __hasAcceleration(self):
        """__hasAcceleration(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasAcceleration(self)


    def __acceleration(self):
        """__acceleration(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___acceleration(self)


    def __hasAccelerationLinearBody(self):
        """__hasAccelerationLinearBody(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasAccelerationLinearBody(self)


    def __accelerationLinearBody(self):
        """__accelerationLinearBody(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___accelerationLinearBody(self)


    def __hasAccelerationUncompensated(self):
        """__hasAccelerationUncompensated(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasAccelerationUncompensated(self)


    def __accelerationUncompensated(self):
        """__accelerationUncompensated(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___accelerationUncompensated(self)


    def __hasAccelerationLinearNed(self):
        """__hasAccelerationLinearNed(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasAccelerationLinearNed(self)


    def __accelerationLinearNed(self):
        """__accelerationLinearNed(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___accelerationLinearNed(self)


    def __hasAccelerationLinearEcef(self):
        """__hasAccelerationLinearEcef(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasAccelerationLinearEcef(self)


    def __accelerationLinearEcef(self):
        """__accelerationLinearEcef(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___accelerationLinearEcef(self)


    def __hasAccelerationNed(self):
        """__hasAccelerationNed(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasAccelerationNed(self)


    def __accelerationNed(self):
        """__accelerationNed(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___accelerationNed(self)


    def __hasAccelerationEcef(self):
        """__hasAccelerationEcef(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasAccelerationEcef(self)


    def __accelerationEcef(self):
        """__accelerationEcef(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___accelerationEcef(self)


    def __hasAnyAngularRate(self):
        """__hasAnyAngularRate(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasAnyAngularRate(self)


    def __anyAngularRate(self):
        """__anyAngularRate(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___anyAngularRate(self)


    def __hasAngularRate(self):
        """__hasAngularRate(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasAngularRate(self)


    def __angularRate(self):
        """__angularRate(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___angularRate(self)


    def __hasAngularRateUncompensated(self):
        """__hasAngularRateUncompensated(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasAngularRateUncompensated(self)


    def __angularRateUncompensated(self):
        """__angularRateUncompensated(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___angularRateUncompensated(self)


    def __hasAnyTemperature(self):
        """__hasAnyTemperature(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasAnyTemperature(self)


    def __anyTemperature(self):
        """__anyTemperature(CompositeData self) -> float"""
        return _libvncxx.CompositeData___anyTemperature(self)


    def __hasTemperature(self):
        """__hasTemperature(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasTemperature(self)


    def __temperature(self):
        """__temperature(CompositeData self) -> float"""
        return _libvncxx.CompositeData___temperature(self)


    def __hasAnyPressure(self):
        """__hasAnyPressure(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasAnyPressure(self)


    def __anyPressure(self):
        """__anyPressure(CompositeData self) -> float"""
        return _libvncxx.CompositeData___anyPressure(self)


    def __hasPressure(self):
        """__hasPressure(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasPressure(self)


    def __pressure(self):
        """__pressure(CompositeData self) -> float"""
        return _libvncxx.CompositeData___pressure(self)


    def __hasAnyPosition(self):
        """__hasAnyPosition(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasAnyPosition(self)


    def __anyPosition(self):
        """__anyPosition(CompositeData self) -> Position"""
        return _libvncxx.CompositeData___anyPosition(self)


    def __hasPositionGpsLla(self):
        """__hasPositionGpsLla(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasPositionGpsLla(self)


    def __positionGpsLla(self):
        """__positionGpsLla(CompositeData self) -> vec3d"""
        return _libvncxx.CompositeData___positionGpsLla(self)


    def __hasPositionGpsEcef(self):
        """__hasPositionGpsEcef(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasPositionGpsEcef(self)


    def __positionGpsEcef(self):
        """__positionGpsEcef(CompositeData self) -> vec3d"""
        return _libvncxx.CompositeData___positionGpsEcef(self)


    def __hasPositionEstimatedLla(self):
        """__hasPositionEstimatedLla(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasPositionEstimatedLla(self)


    def __positionEstimatedLla(self):
        """__positionEstimatedLla(CompositeData self) -> vec3d"""
        return _libvncxx.CompositeData___positionEstimatedLla(self)


    def __hasPositionEstimatedEcef(self):
        """__hasPositionEstimatedEcef(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasPositionEstimatedEcef(self)


    def __positionEstimatedEcef(self):
        """__positionEstimatedEcef(CompositeData self) -> vec3d"""
        return _libvncxx.CompositeData___positionEstimatedEcef(self)


    def __hasAnyVelocity(self):
        """__hasAnyVelocity(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasAnyVelocity(self)


    def __anyVelocity(self):
        """__anyVelocity(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___anyVelocity(self)


    def __hasVelocityGpsNed(self):
        """__hasVelocityGpsNed(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasVelocityGpsNed(self)


    def __velocityGpsNed(self):
        """__velocityGpsNed(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___velocityGpsNed(self)


    def __hasVelocityGpsEcef(self):
        """__hasVelocityGpsEcef(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasVelocityGpsEcef(self)


    def __velocityGpsEcef(self):
        """__velocityGpsEcef(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___velocityGpsEcef(self)


    def __hasVelocityEstimatedNed(self):
        """__hasVelocityEstimatedNed(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasVelocityEstimatedNed(self)


    def __velocityEstimatedNed(self):
        """__velocityEstimatedNed(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___velocityEstimatedNed(self)


    def __hasVelocityEstimatedEcef(self):
        """__hasVelocityEstimatedEcef(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasVelocityEstimatedEcef(self)


    def __velocityEstimatedEcef(self):
        """__velocityEstimatedEcef(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___velocityEstimatedEcef(self)


    def __hasVelocityEstimatedBody(self):
        """__hasVelocityEstimatedBody(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasVelocityEstimatedBody(self)


    def __velocityEstimatedBody(self):
        """__velocityEstimatedBody(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___velocityEstimatedBody(self)


    def __hasDeltaTime(self):
        """__hasDeltaTime(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasDeltaTime(self)


    def __deltaTime(self):
        """__deltaTime(CompositeData self) -> float"""
        return _libvncxx.CompositeData___deltaTime(self)


    def __hasDeltaTheta(self):
        """__hasDeltaTheta(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasDeltaTheta(self)


    def __deltaTheta(self):
        """__deltaTheta(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___deltaTheta(self)


    def __hasDeltaVelocity(self):
        """__hasDeltaVelocity(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasDeltaVelocity(self)


    def __deltaVelocity(self):
        """__deltaVelocity(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___deltaVelocity(self)


    def __hasTimeStartup(self):
        """__hasTimeStartup(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasTimeStartup(self)


    def __timeStartup(self):
        """__timeStartup(CompositeData self) -> uint64_t"""
        return _libvncxx.CompositeData___timeStartup(self)


    def __hasTimeGps(self):
        """__hasTimeGps(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasTimeGps(self)


    def __timeGps(self):
        """__timeGps(CompositeData self) -> uint64_t"""
        return _libvncxx.CompositeData___timeGps(self)


    def __hasTow(self):
        """__hasTow(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasTow(self)


    def __tow(self):
        """__tow(CompositeData self) -> double"""
        return _libvncxx.CompositeData___tow(self)


    def __hasWeek(self):
        """__hasWeek(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasWeek(self)


    def __week(self):
        """__week(CompositeData self) -> uint16_t"""
        return _libvncxx.CompositeData___week(self)


    def __hasNumSats(self):
        """__hasNumSats(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasNumSats(self)


    def __numSats(self):
        """__numSats(CompositeData self) -> uint8_t"""
        return _libvncxx.CompositeData___numSats(self)


    def __hasTimeSyncIn(self):
        """__hasTimeSyncIn(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasTimeSyncIn(self)


    def __timeSyncIn(self):
        """__timeSyncIn(CompositeData self) -> uint64_t"""
        return _libvncxx.CompositeData___timeSyncIn(self)


    def __hasVpeStatus(self):
        """__hasVpeStatus(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasVpeStatus(self)


    def __vpeStatus(self):
        """__vpeStatus(CompositeData self) -> VpeStatus"""
        return _libvncxx.CompositeData___vpeStatus(self)


    def __hasInsStatus(self):
        """__hasInsStatus(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasInsStatus(self)


    def __insStatus(self):
        """__insStatus(CompositeData self) -> vn::protocol::uart::InsStatus"""
        return _libvncxx.CompositeData___insStatus(self)


    def __hasSyncInCnt(self):
        """__hasSyncInCnt(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasSyncInCnt(self)


    def __syncInCnt(self):
        """__syncInCnt(CompositeData self) -> uint32_t"""
        return _libvncxx.CompositeData___syncInCnt(self)


    def __hasTimeGpsPps(self):
        """__hasTimeGpsPps(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasTimeGpsPps(self)


    def __timeGpsPps(self):
        """__timeGpsPps(CompositeData self) -> uint64_t"""
        return _libvncxx.CompositeData___timeGpsPps(self)


    def __hasGpsTow(self):
        """__hasGpsTow(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasGpsTow(self)


    def __gpsTow(self):
        """__gpsTow(CompositeData self) -> uint64_t"""
        return _libvncxx.CompositeData___gpsTow(self)


    def __hasTimeUtc(self):
        """__hasTimeUtc(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasTimeUtc(self)


    def __timeUtc(self):
        """__timeUtc(CompositeData self) -> TimeUtc"""
        return _libvncxx.CompositeData___timeUtc(self)


    def __hasSensSat(self):
        """__hasSensSat(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasSensSat(self)


    def __sensSat(self):
        """__sensSat(CompositeData self) -> vn::protocol::uart::SensSat"""
        return _libvncxx.CompositeData___sensSat(self)


    def __hasFix(self):
        """__hasFix(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasFix(self)


    def __fix(self):
        """__fix(CompositeData self) -> vn::protocol::uart::GpsFix"""
        return _libvncxx.CompositeData___fix(self)


    def __hasAnyPositionUncertainty(self):
        """__hasAnyPositionUncertainty(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasAnyPositionUncertainty(self)


    def __anyPositionUncertainty(self):
        """__anyPositionUncertainty(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___anyPositionUncertainty(self)


    def __hasPositionUncertaintyGpsNed(self):
        """__hasPositionUncertaintyGpsNed(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasPositionUncertaintyGpsNed(self)


    def __positionUncertaintyGpsNed(self):
        """__positionUncertaintyGpsNed(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___positionUncertaintyGpsNed(self)


    def __hasPositionUncertaintyGpsEcef(self):
        """__hasPositionUncertaintyGpsEcef(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasPositionUncertaintyGpsEcef(self)


    def __positionUncertaintyGpsEcef(self):
        """__positionUncertaintyGpsEcef(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___positionUncertaintyGpsEcef(self)


    def __hasPositionUncertaintyEstimated(self):
        """__hasPositionUncertaintyEstimated(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasPositionUncertaintyEstimated(self)


    def __positionUncertaintyEstimated(self):
        """__positionUncertaintyEstimated(CompositeData self) -> float"""
        return _libvncxx.CompositeData___positionUncertaintyEstimated(self)


    def __hasAnyVelocityUncertainty(self):
        """__hasAnyVelocityUncertainty(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasAnyVelocityUncertainty(self)


    def __anyVelocityUncertainty(self):
        """__anyVelocityUncertainty(CompositeData self) -> float"""
        return _libvncxx.CompositeData___anyVelocityUncertainty(self)


    def __hasVelocityUncertaintyGps(self):
        """__hasVelocityUncertaintyGps(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasVelocityUncertaintyGps(self)


    def __velocityUncertaintyGps(self):
        """__velocityUncertaintyGps(CompositeData self) -> float"""
        return _libvncxx.CompositeData___velocityUncertaintyGps(self)


    def __hasVelocityUncertaintyEstimated(self):
        """__hasVelocityUncertaintyEstimated(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasVelocityUncertaintyEstimated(self)


    def __velocityUncertaintyEstimated(self):
        """__velocityUncertaintyEstimated(CompositeData self) -> float"""
        return _libvncxx.CompositeData___velocityUncertaintyEstimated(self)


    def __hasTimeUncertainty(self):
        """__hasTimeUncertainty(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasTimeUncertainty(self)


    def __timeUncertainty(self):
        """__timeUncertainty(CompositeData self) -> uint32_t"""
        return _libvncxx.CompositeData___timeUncertainty(self)


    def __hasAttitudeUncertainty(self):
        """__hasAttitudeUncertainty(CompositeData self) -> bool"""
        return _libvncxx.CompositeData___hasAttitudeUncertainty(self)


    def __attitudeUncertainty(self):
        """__attitudeUncertainty(CompositeData self) -> vec3f"""
        return _libvncxx.CompositeData___attitudeUncertainty(self)


    def hasCourseOverGround(self):
        """hasCourseOverGround(CompositeData self) -> bool"""
        return _libvncxx.CompositeData_hasCourseOverGround(self)


    def courseOverGround(self):
        """courseOverGround(CompositeData self) -> float"""
        return _libvncxx.CompositeData_courseOverGround(self)


    def hasSpeedOverGround(self):
        """hasSpeedOverGround(CompositeData self) -> bool"""
        return _libvncxx.CompositeData_hasSpeedOverGround(self)


    def speedOverGround(self):
        """speedOverGround(CompositeData self) -> float"""
        return _libvncxx.CompositeData_speedOverGround(self)


    has_any_attitude = property(__hasAnyAttitude)
    any_attitude = property(__anyAttitude)
    has_yaw_pitch_roll = property(__hasYawPitchRoll)
    yaw_pitch_roll = property(__yawPitchRoll)
    has_quaternion = property(__hasQuaternion)
    quaternion = property(__quaternion)
    has_direction_cosine_matrix = property(__hasDirectionCosineMatrix)
    direction_cosine_matrix = property(__directionCosineMatrix)
    has_any_magnetic = property(__hasAnyMagnetic)
    any_magnetic = property(__anyMagnetic)
    has_magnetic = property(__hasMagnetic)
    magnetic = property(__magnetic)
    has_magnetic_uncompensated = property(__hasMagneticUncompensated)
    magnetic_uncompensated = property(__magneticUncompensated)
    has_magnetic_ned = property(__hasMagneticNed)
    magnetic_ned = property(__magneticNed)
    has_magnetic_ecef = property(__hasMagneticEcef)
    magnetic_ecef = property(__magneticEcef)
    has_any_acceleration = property(__hasAnyAcceleration)
    any_acceleration = property(__anyAcceleration)
    has_acceleration = property(__hasAcceleration)
    acceleration = property(__acceleration)
    has_acceleration_linear_body = property(__hasAccelerationLinearBody)
    acceleration_linear_body = property(__accelerationLinearBody)
    has_acceleration_uncompensated = property(__hasAccelerationUncompensated)
    acceleration_uncompensated = property(__accelerationUncompensated)
    has_acceleration_linear_ned = property(__hasAccelerationLinearNed)
    acceleration_linear_ned = property(__accelerationLinearNed)
    has_acceleration_linear_ecef = property(__hasAccelerationLinearEcef)
    acceleration_linear_ecef = property(__accelerationLinearEcef)
    has_acceleration_ned = property(__hasAccelerationNed)
    acceleration_ned = property(__accelerationNed)
    has_acceleration_ecef = property(__hasAccelerationEcef)
    acceleration_ecef = property(__accelerationEcef)
    has_any_angular_rate = property(__hasAnyAngularRate)
    any_angular_rate = property(__anyAngularRate)
    has_angular_rate = property(__hasAngularRate)
    angular_rate = property(__angularRate)
    has_angular_rate_uncompensated = property(__hasAngularRateUncompensated)
    angular_rate_uncompensated = property(__angularRateUncompensated)
    has_any_temperature = property(__hasAnyTemperature)
    any_temperature = property(__anyTemperature)
    has_temperature = property(__hasTemperature)
    temperature = property(__temperature)
    has_any_pressure = property(__hasAnyPressure)
    any_pressure = property(__anyPressure)
    has_pressure = property(__hasPressure)
    pressure = property(__pressure)
    has_any_position = property(__hasAnyPosition)
    any_position = property(__anyPosition)
    has_position_gps_lla = property(__hasPositionGpsLla)
    position_gps_lla = property(__positionGpsLla)
    has_position_gps_ecef = property(__hasPositionGpsEcef)
    position_gps_ecef = property(__positionGpsEcef)
    has_position_estimated_lla = property(__hasPositionEstimatedLla)
    position_estimated_lla = property(__positionEstimatedLla)
    has_position_estimated_ecef = property(__hasPositionEstimatedEcef)
    position_estimated_ecef = property(__positionEstimatedEcef)
    has_any_velocity = property(__hasAnyVelocity)
    any_velocity = property(__anyVelocity)
    has_velocity_gps_ned = property(__hasVelocityGpsNed)
    velocity_gps_ned = property(__velocityGpsNed)
    has_velocity_gps_ecef = property(__hasVelocityGpsEcef)
    velocity_gps_ecef = property(__velocityGpsEcef)
    has_velocity_estimated_ned = property(__hasVelocityEstimatedNed)
    velocity_estimated_ned = property(__velocityEstimatedNed)
    has_velocity_estimated_ecef = property(__hasVelocityEstimatedEcef)
    velocity_estimated_ecef = property(__velocityEstimatedEcef)
    has_velocity_estimated_body = property(__hasVelocityEstimatedBody)
    velocity_estimated_body = property(__velocityEstimatedBody)
    has_delta_time = property(__hasDeltaTime)
    delta_time = property(__deltaTime)
    has_delta_theta = property(__hasDeltaTheta)
    delta_theta = property(__deltaTheta)
    has_delta_velocity = property(__hasDeltaVelocity)
    delta_velocity = property(__deltaVelocity)
    has_time_startup = property(__hasTimeStartup)
    time_startup = property(__timeStartup)
    has_time_gps = property(__hasTimeGps)
    time_gps = property(__timeGps)
    has_tow = property(__hasTow)
    tow = property(__tow)
    has_week = property(__hasWeek)
    week = property(__week)
    has_num_sats = property(__hasNumSats)
    num_sats = property(__numSats)
    has_time_sync_in = property(__hasTimeSyncIn)
    time_sync_in = property(__timeSyncIn)
    has_vpe_status = property(__hasVpeStatus)
    vpe_status = property(__vpeStatus)
    has_ins_status = property(__hasInsStatus)
    ins_status = property(__insStatus)
    has_sync_in_cnt = property(__hasSyncInCnt)
    sync_in_cnt = property(__syncInCnt)
    has_time_gps_pps = property(__hasTimeGpsPps)
    time_gps_pps = property(__timeGpsPps)
    has_gps_tow = property(__hasGpsTow)
    gps_tow = property(__gpsTow)
    has_time_utc = property(__hasTimeUtc)
    time_utc = property(__timeUtc)
    has_sens_sat = property(__hasSensSat)
    sens_sat = property(__sensSat)
    has_fix = property(__hasFix)
    fix = property(__fix)
    has_any_position_uncertainty = property(__hasAnyPositionUncertainty)
    any_position_uncertainty = property(__anyPositionUncertainty)
    has_position_uncertainty_gps_ned = property(__hasPositionUncertaintyGpsNed)
    position_uncertainty_gps_ned = property(__positionUncertaintyGpsNed)
    has_position_uncertainty_gps_ecef = property(__hasPositionUncertaintyGpsEcef)
    position_uncertainty_gps_ecef = property(__positionUncertaintyGpsEcef)
    has_position_uncertainty_estimated = property(__hasPositionUncertaintyEstimated)
    position_uncertainty_estimated = property(__positionUncertaintyEstimated)
    has_any_velocity_uncertainty = property(__hasAnyVelocityUncertainty)
    any_velocity_uncertainty = property(__anyVelocityUncertainty)
    has_velocity_uncertainty_gps = property(__hasVelocityUncertaintyGps)
    velocity_uncertainty_gps = property(__velocityUncertaintyGps)
    has_velocity_uncertainty_estimated = property(__hasVelocityUncertaintyEstimated)
    velocity_uncertainty_estimated = property(__velocityUncertaintyEstimated)
    has_time_uncertainty = property(__hasTimeUncertainty)
    time_uncertainty = property(__timeUncertainty)
    has_attitude_uncertainty = property(__hasAttitudeUncertainty)
    attitude_uncertainty = property(__attitudeUncertainty)

    def __repr__(self):
    	return "<vnpy.CompositeData>"

CompositeData_swigregister = _libvncxx.CompositeData_swigregister
CompositeData_swigregister(CompositeData)

def CompositeData_parse(*args):
    """
    parse(Packet p) -> CompositeData
    parse(Packet p, CompositeData o)
    CompositeData_parse(Packet p, std::vector< vn::sensors::CompositeData *,std::allocator< vn::sensors::CompositeData * > > & o)
    """
    return _libvncxx.CompositeData_parse(*args)

class EzAsyncData(_object):
    """Proxy of C++ vn::sensors::EzAsyncData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EzAsyncData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EzAsyncData, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _libvncxx.delete_EzAsyncData
    __del__ = lambda self: None

    def __sensor(self):
        """__sensor(EzAsyncData self) -> VnSensor"""
        return _libvncxx.EzAsyncData___sensor(self)


    def connect(portName, baudrate):
        """connect(std::string portName, uint32_t baudrate) -> EzAsyncData"""
        return _libvncxx.EzAsyncData_connect(portName, baudrate)

    connect = staticmethod(connect)

    def disconnect(self):
        """disconnect(EzAsyncData self)"""
        return _libvncxx.EzAsyncData_disconnect(self)


    def __currentData(self):
        """__currentData(EzAsyncData self) -> CompositeData"""
        return _libvncxx.EzAsyncData___currentData(self)


    def next_data(self, *args):
        """
        next_data(EzAsyncData self) -> CompositeData
        next_data(EzAsyncData self, int timeoutMs) -> CompositeData
        """
        return _libvncxx.EzAsyncData_next_data(self, *args)


    current_data = property(__currentData)
    sensor = property(__sensor)

    def __repr__(self):
    	return "<vnpy.EzAsyncData>"

EzAsyncData_swigregister = _libvncxx.EzAsyncData_swigregister
EzAsyncData_swigregister(EzAsyncData)

def EzAsyncData_connect(portName, baudrate):
    """EzAsyncData_connect(std::string portName, uint32_t baudrate) -> EzAsyncData"""
    return _libvncxx.EzAsyncData_connect(portName, baudrate)

# This file is compatible with both classic and new-style classes.


